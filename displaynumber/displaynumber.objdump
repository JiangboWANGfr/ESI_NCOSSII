
displaynumber.elf:     file format elf32-littlenios2
displaynumber.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000201bc

Program Header:
    LOAD off    0x00001000 vaddr 0x00020000 paddr 0x00020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00020020 paddr 0x00020020 align 2**12
         filesz 0x00005a9c memsz 0x00005a9c flags r-x
    LOAD off    0x00006abc vaddr 0x00025abc paddr 0x00027538 align 2**12
         filesz 0x00001a7c memsz 0x00001a7c flags rw-
    LOAD off    0x00008fb4 vaddr 0x00028fb4 paddr 0x00028fb4 align 2**12
         filesz 0x00000000 memsz 0x00000158 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00020000  00020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000019c  00020020  00020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00005858  000201bc  000201bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000000a8  00025a14  00025a14  00006a14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a7c  00025abc  00027538  00006abc  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000158  00028fb4  00028fb4  00008fb4  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  0002910c  0002910c  00008538  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00008538  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000009b0  00000000  00000000  00008560  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00016d61  00000000  00000000  00008f10  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000061c0  00000000  00000000  0001fc71  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00006987  00000000  00000000  00025e31  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001674  00000000  00000000  0002c7b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002352  00000000  00000000  0002de2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00004683  00000000  00000000  0003017e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000050  00000000  00000000  00034804  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000310  00000000  00000000  00034858  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0003727c  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000a  00000000  00000000  0003727f  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00037289  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0003728a  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0003728b  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0003728f  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00037293  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  00037297  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  000372a0  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  000372a9  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000008  00000000  00000000  000372b2  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000022  00000000  00000000  000372ba  2**0
                  CONTENTS, READONLY
 29 .jdi          00003e86  00000000  00000000  000372dc  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00044f68  00000000  00000000  0003b162  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00020000 l    d  .entry	00000000 .entry
00020020 l    d  .exceptions	00000000 .exceptions
000201bc l    d  .text	00000000 .text
00025a14 l    d  .rodata	00000000 .rodata
00025abc l    d  .rwdata	00000000 .rwdata
00028fb4 l    d  .bss	00000000 .bss
0002910c l    d  .onchip_memory	00000000 .onchip_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../test_1_Nios_bsp//obj/HAL/src/crt0.o
000201f4 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
00020094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 count_binary.c
00028fb4 l     O .bss	00000004 count
000201f8 l     F .text	000000c8 foursevensegDisplay
00025abc l     O .rwdata	00000010 segments.2594
000202c0 l     F .text	00000078 displayAnyNumber
00020338 l     F .text	00000054 initial_message
0002038c l     F .text	00000084 display1To9version1
00020410 l     F .text	00000074 display1To9version2
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 impure.c
00025acc l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00021f4c l     F .text	00000008 __fp_lock
00021f54 l     F .text	00000008 __fp_unlock
00021f68 l     F .text	000001a0 __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 alt_close.c
00022fb0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
000230d0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
000230fc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
000231fc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
000232f0 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
000233d4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
000235b0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00027528 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0002383c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00023984 l     F .text	00000038 alt_dev_reg
000264a0 l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00023c78 l     F .text	00000204 altera_avalon_jtag_uart_irq
00023e7c l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0002449c l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0002484c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00024cf8 l     F .text	000000c0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00024e30 l     F .text	00000050 alt_get_errno
00024e80 l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
000258b4 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 alt_exit.c
00022ea4 g     F .text	00000054 _isatty_r
000234f8 g     F .text	00000078 alt_main
000204a4 g     F .text	000000b8 _puts_r
0002900c g     O .bss	00000100 alt_irq
00022ef8 g     F .text	0000005c _lseek_r
00027538 g       *ABS*	00000000 __flash_rwdata_start
0002910c g       *ABS*	00000000 __alt_heap_start
00022c24 g     F .text	0000005c __sseek
0002229c g     F .text	00000010 __sinit
00022108 g     F .text	00000064 __sfmoreglue
00023590 g     F .text	00000020 __malloc_unlock
00021474 g     F .text	0000015c memmove
00022284 g     F .text	00000018 _cleanup
00000000  w      *UND*	00000000 __errno
00020000 g     F .entry	0000001c __reset
00028fb8 g     O .bss	00000004 edge_capture
00020020 g       *ABS*	00000000 __flash_exceptions_start
00022e4c g     F .text	00000058 _fstat_r
00028fc8 g     O .bss	00000004 errno
00022ba0 g     F .text	00000008 __seofread
00028fd0 g     O .bss	00000004 alt_argv
0002f500 g       *ABS*	00000000 _gp
0002380c g     F .text	00000030 usleep
00026320 g     O .rwdata	00000180 alt_fd_list
00025260 g     F .text	00000090 alt_find_dev
0002133c g     F .text	00000138 memcpy
00021f5c g     F .text	0000000c _cleanup_r
00024db8 g     F .text	00000078 alt_io_redirect
00025a14 g       *ABS*	00000000 __DTOR_END__
0002055c g     F .text	00000014 puts
00024078 g     F .text	0000020c altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
000259d0 g     F .text	00000008 .hidden __udivsi3
0002324c g     F .text	000000a4 isatty
000254b8 g     F .text	0000008c alt_icache_flush
00028fc4 g     O .bss	00000004 __malloc_top_pad
00020608 g     F .text	000004a4 __sfvwrite_r
00021b70 g     F .text	00000054 _sbrk_r
00022f54 g     F .text	0000005c _read_r
00027520 g     O .rwdata	00000004 alt_max_fd
00022d38 g     F .text	00000100 _fclose_r
00021f1c g     F .text	00000030 fflush
00028fc0 g     O .bss	00000004 __malloc_max_sbrked_mem
00023424 g     F .text	000000d4 lseek
00027500 g     O .rwdata	00000004 _global_impure_ptr
000215d0 g     F .text	000005a0 _realloc_r
0002910c g       *ABS*	00000000 __bss_end
00024c08 g     F .text	000000f0 alt_iic_isr_register
0002513c g     F .text	00000104 alt_tick
000222bc g     F .text	00000018 __fp_lock_all
00024bbc g     F .text	0000004c alt_ic_irq_enabled
000250a4 g     F .text	00000098 alt_alarm_stop
00028fd8 g     O .bss	00000004 alt_irq_active
000200ec g     F .exceptions	000000d0 alt_irq_handler
000262f8 g     O .rwdata	00000028 alt_dev_null
00024830 g     F .text	0000001c alt_dcache_flush_all
00027538 g       *ABS*	00000000 __ram_rwdata_end
00020000 g       *ABS*	00000000 __alt_mem_onchip_memory
00027518 g     O .rwdata	00000008 alt_dev_list
0002388c g     F .text	000000f8 write
00025abc g       *ABS*	00000000 __ram_rodata_end
0002314c g     F .text	000000b0 fstat
000259d8 g     F .text	00000008 .hidden __umodsi3
0002910c g       *ABS*	00000000 end
00023bb4 g     F .text	000000c4 altera_avalon_jtag_uart_init
00025a14 g       *ABS*	00000000 __CTOR_LIST__
0003d4c0 g       *ABS*	00000000 __alt_stack_pointer
00024510 g     F .text	00000088 alt_avalon_timer_sc_init
00024284 g     F .text	00000218 altera_avalon_jtag_uart_write
000222ac g     F .text	00000004 __sfp_lock_acquire
00021254 g     F .text	000000e8 memchr
00022410 g     F .text	000002f0 _free_r
00025720 g     F .text	00000194 __call_exitprocs
00027508 g     O .rwdata	00000004 __malloc_sbrk_base
000201bc g     F .text	0000003c _start
00028fdc g     O .bss	00000004 _alt_tick_rate
00028fe0 g     O .bss	00000004 _alt_nticks
00023600 g     F .text	000000fc read
000239f0 g     F .text	00000060 alt_sys_init
0002560c g     F .text	00000114 __register_exitproc
00023f24 g     F .text	00000068 altera_avalon_jtag_uart_close
00025abc g       *ABS*	00000000 __ram_rwdata_start
00025a14 g       *ABS*	00000000 __ram_rodata_start
00028fe4 g     O .bss	00000028 __malloc_current_mallinfo
00023a50 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00025404 g     F .text	000000b4 alt_get_fd
000246d8 g     F .text	00000158 alt_busy_sleep
00022ce4 g     F .text	00000054 _close_r
00025590 g     F .text	0000007c memcmp
00023b10 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0002910c g       *ABS*	00000000 __alt_stack_base
00023b60 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00021bc4 g     F .text	00000130 __swsetup_r
0002216c g     F .text	00000118 __sfp
00025ef0 g     O .rwdata	00000408 __malloc_av_
000222b8 g     F .text	00000004 __sinit_lock_release
00022b4c g     F .text	00000054 __sread
000252f0 g     F .text	00000114 alt_find_file
0002489c g     F .text	000000a4 alt_dev_llist_insert
00023570 g     F .text	00000020 __malloc_lock
0002375c g     F .text	000000b0 sbrk
00021cf4 g     F .text	00000228 _fflush_r
00028fb4 g       *ABS*	00000000 __bss_start
00022a28 g     F .text	00000124 memset
00020484 g     F .text	00000020 main
00028fd4 g     O .bss	00000004 alt_envp
00028fbc g     O .bss	00000004 __malloc_max_total_mem
00023ab0 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00022c80 g     F .text	00000008 __sclose
0003d4c0 g       *ABS*	00000000 __alt_heap_limit
00022e38 g     F .text	00000014 fclose
00020aac g     F .text	000007a8 _malloc_r
00027524 g     O .rwdata	00000004 alt_errno
00022700 g     F .text	000000b8 _fwalk
00025920 g     F .text	00000054 .hidden __divsi3
000222ec g     F .text	00000124 _malloc_trim_r
00025a14 g       *ABS*	00000000 __CTOR_END__
00025a14 g       *ABS*	00000000 __flash_rodata_start
00025a14 g       *ABS*	00000000 __DTOR_LIST__
000239bc g     F .text	00000034 alt_irq_init
000236fc g     F .text	00000060 alt_release_fd
00025544 g     F .text	00000014 atexit
00022c88 g     F .text	0000005c _write_r
00027504 g     O .rwdata	00000004 _impure_ptr
00028fcc g     O .bss	00000004 alt_argc
0002499c g     F .text	0000005c _do_dtors
00020020 g       .exceptions	00000000 alt_irq_entry
000222d4 g     F .text	00000018 __fp_unlock_all
00027510 g     O .rwdata	00000008 alt_fs_list
00020020 g       *ABS*	00000000 __ram_exceptions_start
00024a28 g     F .text	00000050 alt_ic_isr_register
00027538 g       *ABS*	00000000 _edata
0002910c g       *ABS*	00000000 _end
000201bc g       *ABS*	00000000 __ram_exceptions_end
00023f8c g     F .text	000000ec altera_avalon_jtag_uart_ioctl
00024b18 g     F .text	000000a4 alt_ic_irq_disable
00022ba8 g     F .text	0000007c __swrite
0002750c g     O .rwdata	00000004 __malloc_trim_threshold
00025240 g     F .text	00000020 altera_nios2_qsys_irq_init
00025558 g     F .text	00000038 exit
000227b8 g     F .text	000000b8 _fwalk_reent
00025974 g     F .text	0000005c .hidden __modsi3
0003d4c0 g       *ABS*	00000000 __alt_data_end
00020020 g     F .exceptions	00000000 alt_exception
000222b0 g     F .text	00000004 __sfp_lock_release
000259e0 g     F .text	00000034 _exit
00024598 g     F .text	00000140 alt_alarm_start
00022870 g     F .text	000001b8 __smakebuf_r
00020570 g     F .text	00000098 strlen
00024f4c g     F .text	00000158 open
000249f8 g     F .text	00000030 alt_icache_flush_all
0002752c g     O .rwdata	00000004 alt_priority_mask
00024a78 g     F .text	000000a0 alt_ic_irq_enable
00027530 g     O .rwdata	00000008 alt_alarm_list
00024940 g     F .text	0000005c _do_ctors
00023000 g     F .text	000000d0 close
00023354 g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free
000222b4 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00020000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   20000:	00880014 	movui	r2,8192
#endif

0:
    initi r2
   20004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   20008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   2000c:	00bffd16 	blt	zero,r2,20004 <__alt_data_end+0xfffe2b44>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   20010:	004000b4 	movhi	at,2
    ori r1, r1, %lo(_start)
   20014:	08406f14 	ori	at,at,444
    jmp r1
   20018:	0800683a 	jmp	at
   2001c:	00000000 	call	0 <__alt_mem_onchip_memory-0x20000>

Disassembly of section .exceptions:

00020020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   20020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   20024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   20028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   2002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   20030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   20034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   20038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   2003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   20040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   20044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   20048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   2004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   20050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   20054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   20058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   2005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   20060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   20064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   20068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   2006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   20070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   20074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   20078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   2007c:	10000326 	beq	r2,zero,2008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   20080:	20000226 	beq	r4,zero,2008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   20084:	00200ec0 	call	200ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   20088:	00000306 	br	20098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   2008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   20090:	e8bfff17 	ldw	r2,-4(ea)

00020094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
   20094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   20098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   2009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   200a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   200a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   200a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   200ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   200b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   200b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   200b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   200bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   200c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   200c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   200c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   200cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   200d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   200d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   200d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   200dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   200e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   200e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   200e8:	ef80083a 	eret

000200ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   200ec:	defff904 	addi	sp,sp,-28
   200f0:	dfc00615 	stw	ra,24(sp)
   200f4:	df000515 	stw	fp,20(sp)
   200f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   200fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   20100:	0005313a 	rdctl	r2,ipending
   20104:	e0bffe15 	stw	r2,-8(fp)

  return active;
   20108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   2010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   20110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   20114:	00800044 	movi	r2,1
   20118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   2011c:	e0fffb17 	ldw	r3,-20(fp)
   20120:	e0bffc17 	ldw	r2,-16(fp)
   20124:	1884703a 	and	r2,r3,r2
   20128:	10001426 	beq	r2,zero,2017c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   2012c:	008000f4 	movhi	r2,3
   20130:	10a40304 	addi	r2,r2,-28660
   20134:	e0fffd17 	ldw	r3,-12(fp)
   20138:	180690fa 	slli	r3,r3,3
   2013c:	10c5883a 	add	r2,r2,r3
   20140:	10c00017 	ldw	r3,0(r2)
   20144:	008000f4 	movhi	r2,3
   20148:	10a40304 	addi	r2,r2,-28660
   2014c:	e13ffd17 	ldw	r4,-12(fp)
   20150:	200890fa 	slli	r4,r4,3
   20154:	1105883a 	add	r2,r2,r4
   20158:	10800104 	addi	r2,r2,4
   2015c:	10800017 	ldw	r2,0(r2)
   20160:	1009883a 	mov	r4,r2
   20164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   20168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   2016c:	0005313a 	rdctl	r2,ipending
   20170:	e0bfff15 	stw	r2,-4(fp)

  return active;
   20174:	e0bfff17 	ldw	r2,-4(fp)
   20178:	00000706 	br	20198 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   2017c:	e0bffc17 	ldw	r2,-16(fp)
   20180:	1085883a 	add	r2,r2,r2
   20184:	e0bffc15 	stw	r2,-16(fp)
      i++;
   20188:	e0bffd17 	ldw	r2,-12(fp)
   2018c:	10800044 	addi	r2,r2,1
   20190:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   20194:	003fe106 	br	2011c <__alt_data_end+0xfffe2c5c>

    active = alt_irq_pending ();
   20198:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   2019c:	e0bffb17 	ldw	r2,-20(fp)
   201a0:	103fdb1e 	bne	r2,zero,20110 <__alt_data_end+0xfffe2c50>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   201a4:	0001883a 	nop
}
   201a8:	e037883a 	mov	sp,fp
   201ac:	dfc00117 	ldw	ra,4(sp)
   201b0:	df000017 	ldw	fp,0(sp)
   201b4:	dec00204 	addi	sp,sp,8
   201b8:	f800283a 	ret

Disassembly of section .text:

000201bc <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   201bc:	06c000f4 	movhi	sp,3
    ori sp, sp, %lo(__alt_stack_pointer)
   201c0:	def53014 	ori	sp,sp,54464
    movhi gp, %hi(_gp)
   201c4:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
   201c8:	d6bd4014 	ori	gp,gp,62720
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   201cc:	008000b4 	movhi	r2,2
    ori r2, r2, %lo(__bss_start)
   201d0:	10a3ed14 	ori	r2,r2,36788

    movhi r3, %hi(__bss_end)
   201d4:	00c000b4 	movhi	r3,2
    ori r3, r3, %lo(__bss_end)
   201d8:	18e44314 	ori	r3,r3,37132

    beq r2, r3, 1f
   201dc:	10c00326 	beq	r2,r3,201ec <_start+0x30>

0:
    stw zero, (r2)
   201e0:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   201e4:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   201e8:	10fffd36 	bltu	r2,r3,201e0 <__alt_data_end+0xfffe2d20>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   201ec:	00233540 	call	23354 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   201f0:	00234f80 	call	234f8 <alt_main>

000201f4 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   201f4:	003fff06 	br	201f4 <__alt_data_end+0xfffe2d34>

000201f8 <foursevensegDisplay>:
 */

#ifdef SEVEN_SEG_PIO_BASE

static void foursevensegDisplay(int afficheurNumber1, int afficheurNumber2, int afficheurNumber3, int afficheurNumber4)
{
   201f8:	defffa04 	addi	sp,sp,-24
   201fc:	df000515 	stw	fp,20(sp)
   20200:	df000504 	addi	fp,sp,20
   20204:	e13ffc15 	stw	r4,-16(fp)
   20208:	e17ffd15 	stw	r5,-12(fp)
   2020c:	e1bffe15 	stw	r6,-8(fp)
   20210:	e1ffff15 	stw	r7,-4(fp)
    static alt_u8 segments[16] = {0x40, 0x79, 0x24, 0x30, 0x19, 0x12, 0x02, 0x78, 0x00, 0x10, 0x08, 0x03, 0x46, 0x21, 0x06, 0x0e};
    alt_u32 data = segments[afficheurNumber1 & 0xff] | (segments[afficheurNumber2 & 0xff] << 8) | (segments[afficheurNumber3 & 0xff] << 16) | (segments[afficheurNumber4 & 15] << 24);
   20214:	e0bffc17 	ldw	r2,-16(fp)
   20218:	10c03fcc 	andi	r3,r2,255
   2021c:	008000b4 	movhi	r2,2
   20220:	1096af04 	addi	r2,r2,23228
   20224:	10c5883a 	add	r2,r2,r3
   20228:	10800003 	ldbu	r2,0(r2)
   2022c:	10c03fcc 	andi	r3,r2,255
   20230:	e0bffd17 	ldw	r2,-12(fp)
   20234:	11003fcc 	andi	r4,r2,255
   20238:	008000b4 	movhi	r2,2
   2023c:	1096af04 	addi	r2,r2,23228
   20240:	1105883a 	add	r2,r2,r4
   20244:	10800003 	ldbu	r2,0(r2)
   20248:	10803fcc 	andi	r2,r2,255
   2024c:	1004923a 	slli	r2,r2,8
   20250:	1886b03a 	or	r3,r3,r2
   20254:	e0bffe17 	ldw	r2,-8(fp)
   20258:	11003fcc 	andi	r4,r2,255
   2025c:	008000b4 	movhi	r2,2
   20260:	1096af04 	addi	r2,r2,23228
   20264:	1105883a 	add	r2,r2,r4
   20268:	10800003 	ldbu	r2,0(r2)
   2026c:	10803fcc 	andi	r2,r2,255
   20270:	1004943a 	slli	r2,r2,16
   20274:	1886b03a 	or	r3,r3,r2
   20278:	e0bfff17 	ldw	r2,-4(fp)
   2027c:	110003cc 	andi	r4,r2,15
   20280:	008000b4 	movhi	r2,2
   20284:	1096af04 	addi	r2,r2,23228
   20288:	1105883a 	add	r2,r2,r4
   2028c:	10800003 	ldbu	r2,0(r2)
   20290:	10803fcc 	andi	r2,r2,255
   20294:	1004963a 	slli	r2,r2,24
   20298:	1884b03a 	or	r2,r3,r2
   2029c:	e0bffb15 	stw	r2,-20(fp)
    IOWR_ALTERA_AVALON_PIO_DATA(SEVEN_SEG_PIO_BASE, data);
   202a0:	e0fffb17 	ldw	r3,-20(fp)
   202a4:	00800134 	movhi	r2,4
   202a8:	10840804 	addi	r2,r2,4128
   202ac:	10c00035 	stwio	r3,0(r2)
}
   202b0:	e037883a 	mov	sp,fp
   202b4:	df000017 	ldw	fp,0(sp)
   202b8:	dec00104 	addi	sp,sp,4
   202bc:	f800283a 	ret

000202c0 <displayAnyNumber>:
static void displayAnyNumber(int number)
{
   202c0:	defff904 	addi	sp,sp,-28
   202c4:	dfc00615 	stw	ra,24(sp)
   202c8:	df000515 	stw	fp,20(sp)
   202cc:	df000504 	addi	fp,sp,20
   202d0:	e13fff15 	stw	r4,-4(fp)
    int afficheurNumber1, afficheurNumber2, afficheurNumber3, afficheurNumber4;
    afficheurNumber1 = number & 0xf;
   202d4:	e0bfff17 	ldw	r2,-4(fp)
   202d8:	108003cc 	andi	r2,r2,15
   202dc:	e0bffb15 	stw	r2,-20(fp)
    afficheurNumber2 = (number >> 4) & 0xf;
   202e0:	e0bfff17 	ldw	r2,-4(fp)
   202e4:	1005d13a 	srai	r2,r2,4
   202e8:	108003cc 	andi	r2,r2,15
   202ec:	e0bffc15 	stw	r2,-16(fp)
    afficheurNumber3 = (number >> 8) & 0xf;
   202f0:	e0bfff17 	ldw	r2,-4(fp)
   202f4:	1005d23a 	srai	r2,r2,8
   202f8:	108003cc 	andi	r2,r2,15
   202fc:	e0bffd15 	stw	r2,-12(fp)
    afficheurNumber4 = (number >> 12) & 0xf;
   20300:	e0bfff17 	ldw	r2,-4(fp)
   20304:	1005d33a 	srai	r2,r2,12
   20308:	108003cc 	andi	r2,r2,15
   2030c:	e0bffe15 	stw	r2,-8(fp)
    foursevensegDisplay(afficheurNumber1, afficheurNumber2, afficheurNumber3, afficheurNumber4);
   20310:	e13ffb17 	ldw	r4,-20(fp)
   20314:	e17ffc17 	ldw	r5,-16(fp)
   20318:	e1bffd17 	ldw	r6,-12(fp)
   2031c:	e1fffe17 	ldw	r7,-8(fp)
   20320:	00201f80 	call	201f8 <foursevensegDisplay>
}
   20324:	e037883a 	mov	sp,fp
   20328:	dfc00117 	ldw	ra,4(sp)
   2032c:	df000017 	ldw	fp,0(sp)
   20330:	dec00204 	addi	sp,sp,8
   20334:	f800283a 	ret

00020338 <initial_message>:
#endif

static void initial_message()
{
   20338:	defffe04 	addi	sp,sp,-8
   2033c:	dfc00115 	stw	ra,4(sp)
   20340:	df000015 	stw	fp,0(sp)
   20344:	d839883a 	mov	fp,sp
    printf("\n\n**************************\n");
   20348:	010000b4 	movhi	r4,2
   2034c:	21168504 	addi	r4,r4,23060
   20350:	002055c0 	call	2055c <puts>
    printf("* Hello from Nios II!    *\n");
   20354:	010000b4 	movhi	r4,2
   20358:	21168d04 	addi	r4,r4,23092
   2035c:	002055c0 	call	2055c <puts>
    printf("* Counting from 00 to ff *\n");
   20360:	010000b4 	movhi	r4,2
   20364:	21169404 	addi	r4,r4,23120
   20368:	002055c0 	call	2055c <puts>
    printf("**************************\n");
   2036c:	010000b4 	movhi	r4,2
   20370:	21169b04 	addi	r4,r4,23148
   20374:	002055c0 	call	2055c <puts>
}
   20378:	e037883a 	mov	sp,fp
   2037c:	dfc00117 	ldw	ra,4(sp)
   20380:	df000017 	ldw	fp,0(sp)
   20384:	dec00204 	addi	sp,sp,8
   20388:	f800283a 	ret

0002038c <display1To9version1>:

static void display1To9version1()
{
   2038c:	defffd04 	addi	sp,sp,-12
   20390:	dfc00215 	stw	ra,8(sp)
   20394:	df000115 	stw	fp,4(sp)
   20398:	df000104 	addi	fp,sp,4
    int i;
    for (i = 0; i < 10; i++)
   2039c:	e03fff15 	stw	zero,-4(fp)
   203a0:	00000b06 	br	203d0 <display1To9version1+0x44>
    {
        foursevensegDisplay(i, i, i, i);
   203a4:	e13fff17 	ldw	r4,-4(fp)
   203a8:	e17fff17 	ldw	r5,-4(fp)
   203ac:	e1bfff17 	ldw	r6,-4(fp)
   203b0:	e1ffff17 	ldw	r7,-4(fp)
   203b4:	00201f80 	call	201f8 <foursevensegDisplay>
        usleep(1000000);
   203b8:	010003f4 	movhi	r4,15
   203bc:	21109004 	addi	r4,r4,16960
   203c0:	002380c0 	call	2380c <usleep>
}

static void display1To9version1()
{
    int i;
    for (i = 0; i < 10; i++)
   203c4:	e0bfff17 	ldw	r2,-4(fp)
   203c8:	10800044 	addi	r2,r2,1
   203cc:	e0bfff15 	stw	r2,-4(fp)
   203d0:	e0bfff17 	ldw	r2,-4(fp)
   203d4:	10800290 	cmplti	r2,r2,10
   203d8:	103ff21e 	bne	r2,zero,203a4 <__alt_data_end+0xfffe2ee4>
    {
        foursevensegDisplay(i, i, i, i);
        usleep(1000000);
    }
    foursevensegDisplay(1, 2, 3, 4);
   203dc:	01000044 	movi	r4,1
   203e0:	01400084 	movi	r5,2
   203e4:	018000c4 	movi	r6,3
   203e8:	01c00104 	movi	r7,4
   203ec:	00201f80 	call	201f8 <foursevensegDisplay>
    usleep(1000000);
   203f0:	010003f4 	movhi	r4,15
   203f4:	21109004 	addi	r4,r4,16960
   203f8:	002380c0 	call	2380c <usleep>
}
   203fc:	e037883a 	mov	sp,fp
   20400:	dfc00117 	ldw	ra,4(sp)
   20404:	df000017 	ldw	fp,0(sp)
   20408:	dec00204 	addi	sp,sp,8
   2040c:	f800283a 	ret

00020410 <display1To9version2>:
static void display1To9version2()
{
   20410:	defffd04 	addi	sp,sp,-12
   20414:	dfc00215 	stw	ra,8(sp)
   20418:	df000115 	stw	fp,4(sp)
   2041c:	df000104 	addi	fp,sp,4
    int i;
    for (i = 0; i < 10; i++)
   20420:	e03fff15 	stw	zero,-4(fp)
   20424:	00000a06 	br	20450 <display1To9version2+0x40>
    {
        displayAnyNumber(i * 1000 + i * 100 + i * 10 + i);
   20428:	e0bfff17 	ldw	r2,-4(fp)
   2042c:	108115e4 	muli	r2,r2,1111
   20430:	1009883a 	mov	r4,r2
   20434:	00202c00 	call	202c0 <displayAnyNumber>
        usleep(1000000);
   20438:	010003f4 	movhi	r4,15
   2043c:	21109004 	addi	r4,r4,16960
   20440:	002380c0 	call	2380c <usleep>
    usleep(1000000);
}
static void display1To9version2()
{
    int i;
    for (i = 0; i < 10; i++)
   20444:	e0bfff17 	ldw	r2,-4(fp)
   20448:	10800044 	addi	r2,r2,1
   2044c:	e0bfff15 	stw	r2,-4(fp)
   20450:	e0bfff17 	ldw	r2,-4(fp)
   20454:	10800290 	cmplti	r2,r2,10
   20458:	103ff31e 	bne	r2,zero,20428 <__alt_data_end+0xfffe2f68>
    {
        displayAnyNumber(i * 1000 + i * 100 + i * 10 + i);
        usleep(1000000);
    }
    displayAnyNumber(1234);
   2045c:	01013484 	movi	r4,1234
   20460:	00202c00 	call	202c0 <displayAnyNumber>
    usleep(1000000);
   20464:	010003f4 	movhi	r4,15
   20468:	21109004 	addi	r4,r4,16960
   2046c:	002380c0 	call	2380c <usleep>
}
   20470:	e037883a 	mov	sp,fp
   20474:	dfc00117 	ldw	ra,4(sp)
   20478:	df000017 	ldw	fp,0(sp)
   2047c:	dec00204 	addi	sp,sp,8
   20480:	f800283a 	ret

00020484 <main>:
 * NOTE:  References to Buttons 1-4 correspond to SW0-SW3 on the Development   *
 * Board.                                                                      *
 ******************************************************************************/

int main(void)
{
   20484:	defffe04 	addi	sp,sp,-8
   20488:	dfc00115 	stw	ra,4(sp)
   2048c:	df000015 	stw	fp,0(sp)
   20490:	d839883a 	mov	fp,sp
    int i;
    int __attribute__((unused)) wait_time; /* Attribute suppresses "var set but not used" warning. */
    FILE *lcd;

    count = 0;
   20494:	d026ad15 	stw	zero,-25932(gp)
    /* Initial message to output. */

    initial_message();
   20498:	00203380 	call	20338 <initial_message>
    while (1)
    {
        // foursevensegDisplay(count++);
    	display1To9version1();
   2049c:	002038c0 	call	2038c <display1To9version1>
    }
   204a0:	003ffe06 	br	2049c <__alt_data_end+0xfffe2fdc>

000204a4 <_puts_r>:
   204a4:	defff604 	addi	sp,sp,-40
   204a8:	dc000715 	stw	r16,28(sp)
   204ac:	2021883a 	mov	r16,r4
   204b0:	2809883a 	mov	r4,r5
   204b4:	dc400815 	stw	r17,32(sp)
   204b8:	dfc00915 	stw	ra,36(sp)
   204bc:	2823883a 	mov	r17,r5
   204c0:	00205700 	call	20570 <strlen>
   204c4:	00c000b4 	movhi	r3,2
   204c8:	18dd4104 	addi	r3,r3,29956
   204cc:	18c00017 	ldw	r3,0(r3)
   204d0:	11000044 	addi	r4,r2,1
   204d4:	d8800115 	stw	r2,4(sp)
   204d8:	18c00217 	ldw	r3,8(r3)
   204dc:	014000b4 	movhi	r5,2
   204e0:	2956a204 	addi	r5,r5,23176
   204e4:	1880030b 	ldhu	r2,12(r3)
   204e8:	d9400215 	stw	r5,8(sp)
   204ec:	d9000615 	stw	r4,24(sp)
   204f0:	01400044 	movi	r5,1
   204f4:	01000084 	movi	r4,2
   204f8:	d9000515 	stw	r4,20(sp)
   204fc:	dc400015 	stw	r17,0(sp)
   20500:	d9400315 	stw	r5,12(sp)
   20504:	dec00415 	stw	sp,16(sp)
   20508:	1108000c 	andi	r4,r2,8192
   2050c:	2000061e 	bne	r4,zero,20528 <_puts_r+0x84>
   20510:	19401917 	ldw	r5,100(r3)
   20514:	0137ffc4 	movi	r4,-8193
   20518:	10880014 	ori	r2,r2,8192
   2051c:	2908703a 	and	r4,r5,r4
   20520:	1880030d 	sth	r2,12(r3)
   20524:	19001915 	stw	r4,100(r3)
   20528:	81400217 	ldw	r5,8(r16)
   2052c:	8009883a 	mov	r4,r16
   20530:	d9800404 	addi	r6,sp,16
   20534:	00206080 	call	20608 <__sfvwrite_r>
   20538:	1000061e 	bne	r2,zero,20554 <_puts_r+0xb0>
   2053c:	00800284 	movi	r2,10
   20540:	dfc00917 	ldw	ra,36(sp)
   20544:	dc400817 	ldw	r17,32(sp)
   20548:	dc000717 	ldw	r16,28(sp)
   2054c:	dec00a04 	addi	sp,sp,40
   20550:	f800283a 	ret
   20554:	00bfffc4 	movi	r2,-1
   20558:	003ff906 	br	20540 <__alt_data_end+0xfffe3080>

0002055c <puts>:
   2055c:	008000b4 	movhi	r2,2
   20560:	109d4104 	addi	r2,r2,29956
   20564:	200b883a 	mov	r5,r4
   20568:	11000017 	ldw	r4,0(r2)
   2056c:	00204a41 	jmpi	204a4 <_puts_r>

00020570 <strlen>:
   20570:	208000cc 	andi	r2,r4,3
   20574:	10002026 	beq	r2,zero,205f8 <strlen+0x88>
   20578:	20800007 	ldb	r2,0(r4)
   2057c:	10002026 	beq	r2,zero,20600 <strlen+0x90>
   20580:	2005883a 	mov	r2,r4
   20584:	00000206 	br	20590 <strlen+0x20>
   20588:	10c00007 	ldb	r3,0(r2)
   2058c:	18001826 	beq	r3,zero,205f0 <strlen+0x80>
   20590:	10800044 	addi	r2,r2,1
   20594:	10c000cc 	andi	r3,r2,3
   20598:	183ffb1e 	bne	r3,zero,20588 <__alt_data_end+0xfffe30c8>
   2059c:	10c00017 	ldw	r3,0(r2)
   205a0:	01ffbff4 	movhi	r7,65279
   205a4:	39ffbfc4 	addi	r7,r7,-257
   205a8:	00ca303a 	nor	r5,zero,r3
   205ac:	01a02074 	movhi	r6,32897
   205b0:	19c7883a 	add	r3,r3,r7
   205b4:	31a02004 	addi	r6,r6,-32640
   205b8:	1946703a 	and	r3,r3,r5
   205bc:	1986703a 	and	r3,r3,r6
   205c0:	1800091e 	bne	r3,zero,205e8 <strlen+0x78>
   205c4:	10800104 	addi	r2,r2,4
   205c8:	10c00017 	ldw	r3,0(r2)
   205cc:	19cb883a 	add	r5,r3,r7
   205d0:	00c6303a 	nor	r3,zero,r3
   205d4:	28c6703a 	and	r3,r5,r3
   205d8:	1986703a 	and	r3,r3,r6
   205dc:	183ff926 	beq	r3,zero,205c4 <__alt_data_end+0xfffe3104>
   205e0:	00000106 	br	205e8 <strlen+0x78>
   205e4:	10800044 	addi	r2,r2,1
   205e8:	10c00007 	ldb	r3,0(r2)
   205ec:	183ffd1e 	bne	r3,zero,205e4 <__alt_data_end+0xfffe3124>
   205f0:	1105c83a 	sub	r2,r2,r4
   205f4:	f800283a 	ret
   205f8:	2005883a 	mov	r2,r4
   205fc:	003fe706 	br	2059c <__alt_data_end+0xfffe30dc>
   20600:	0005883a 	mov	r2,zero
   20604:	f800283a 	ret

00020608 <__sfvwrite_r>:
   20608:	30800217 	ldw	r2,8(r6)
   2060c:	10004526 	beq	r2,zero,20724 <__sfvwrite_r+0x11c>
   20610:	28c0030b 	ldhu	r3,12(r5)
   20614:	defff404 	addi	sp,sp,-48
   20618:	dd400715 	stw	r21,28(sp)
   2061c:	dcc00515 	stw	r19,20(sp)
   20620:	dc000215 	stw	r16,8(sp)
   20624:	dfc00b15 	stw	ra,44(sp)
   20628:	df000a15 	stw	fp,40(sp)
   2062c:	ddc00915 	stw	r23,36(sp)
   20630:	dd800815 	stw	r22,32(sp)
   20634:	dd000615 	stw	r20,24(sp)
   20638:	dc800415 	stw	r18,16(sp)
   2063c:	dc400315 	stw	r17,12(sp)
   20640:	1880020c 	andi	r2,r3,8
   20644:	2821883a 	mov	r16,r5
   20648:	202b883a 	mov	r21,r4
   2064c:	3027883a 	mov	r19,r6
   20650:	10002526 	beq	r2,zero,206e8 <__sfvwrite_r+0xe0>
   20654:	28800417 	ldw	r2,16(r5)
   20658:	10002326 	beq	r2,zero,206e8 <__sfvwrite_r+0xe0>
   2065c:	1880008c 	andi	r2,r3,2
   20660:	9c400017 	ldw	r17,0(r19)
   20664:	10003126 	beq	r2,zero,2072c <__sfvwrite_r+0x124>
   20668:	0029883a 	mov	r20,zero
   2066c:	0025883a 	mov	r18,zero
   20670:	05810004 	movi	r22,1024
   20674:	a00d883a 	mov	r6,r20
   20678:	a809883a 	mov	r4,r21
   2067c:	90002526 	beq	r18,zero,20714 <__sfvwrite_r+0x10c>
   20680:	900f883a 	mov	r7,r18
   20684:	81400717 	ldw	r5,28(r16)
   20688:	b480012e 	bgeu	r22,r18,20690 <__sfvwrite_r+0x88>
   2068c:	01c10004 	movi	r7,1024
   20690:	80800917 	ldw	r2,36(r16)
   20694:	103ee83a 	callr	r2
   20698:	0080510e 	bge	zero,r2,207e0 <__sfvwrite_r+0x1d8>
   2069c:	98c00217 	ldw	r3,8(r19)
   206a0:	a0a9883a 	add	r20,r20,r2
   206a4:	90a5c83a 	sub	r18,r18,r2
   206a8:	1885c83a 	sub	r2,r3,r2
   206ac:	98800215 	stw	r2,8(r19)
   206b0:	103ff01e 	bne	r2,zero,20674 <__alt_data_end+0xfffe31b4>
   206b4:	0005883a 	mov	r2,zero
   206b8:	dfc00b17 	ldw	ra,44(sp)
   206bc:	df000a17 	ldw	fp,40(sp)
   206c0:	ddc00917 	ldw	r23,36(sp)
   206c4:	dd800817 	ldw	r22,32(sp)
   206c8:	dd400717 	ldw	r21,28(sp)
   206cc:	dd000617 	ldw	r20,24(sp)
   206d0:	dcc00517 	ldw	r19,20(sp)
   206d4:	dc800417 	ldw	r18,16(sp)
   206d8:	dc400317 	ldw	r17,12(sp)
   206dc:	dc000217 	ldw	r16,8(sp)
   206e0:	dec00c04 	addi	sp,sp,48
   206e4:	f800283a 	ret
   206e8:	a809883a 	mov	r4,r21
   206ec:	800b883a 	mov	r5,r16
   206f0:	0021bc40 	call	21bc4 <__swsetup_r>
   206f4:	80c0030b 	ldhu	r3,12(r16)
   206f8:	103fd826 	beq	r2,zero,2065c <__alt_data_end+0xfffe319c>
   206fc:	18c01014 	ori	r3,r3,64
   20700:	80c0030d 	sth	r3,12(r16)
   20704:	00c00244 	movi	r3,9
   20708:	00bfffc4 	movi	r2,-1
   2070c:	a8c00015 	stw	r3,0(r21)
   20710:	003fe906 	br	206b8 <__alt_data_end+0xfffe31f8>
   20714:	8d000017 	ldw	r20,0(r17)
   20718:	8c800117 	ldw	r18,4(r17)
   2071c:	8c400204 	addi	r17,r17,8
   20720:	003fd406 	br	20674 <__alt_data_end+0xfffe31b4>
   20724:	0005883a 	mov	r2,zero
   20728:	f800283a 	ret
   2072c:	1880004c 	andi	r2,r3,1
   20730:	1000301e 	bne	r2,zero,207f4 <__sfvwrite_r+0x1ec>
   20734:	002f883a 	mov	r23,zero
   20738:	0025883a 	mov	r18,zero
   2073c:	90001c26 	beq	r18,zero,207b0 <__sfvwrite_r+0x1a8>
   20740:	1880800c 	andi	r2,r3,512
   20744:	85000217 	ldw	r20,8(r16)
   20748:	10006c26 	beq	r2,zero,208fc <__sfvwrite_r+0x2f4>
   2074c:	a02d883a 	mov	r22,r20
   20750:	95008536 	bltu	r18,r20,20968 <__sfvwrite_r+0x360>
   20754:	1881200c 	andi	r2,r3,1152
   20758:	10009d1e 	bne	r2,zero,209d0 <__sfvwrite_r+0x3c8>
   2075c:	81000017 	ldw	r4,0(r16)
   20760:	a039883a 	mov	fp,r20
   20764:	9029883a 	mov	r20,r18
   20768:	b80b883a 	mov	r5,r23
   2076c:	b00d883a 	mov	r6,r22
   20770:	00214740 	call	21474 <memmove>
   20774:	80c00217 	ldw	r3,8(r16)
   20778:	81000017 	ldw	r4,0(r16)
   2077c:	9005883a 	mov	r2,r18
   20780:	1f39c83a 	sub	fp,r3,fp
   20784:	258f883a 	add	r7,r4,r22
   20788:	87000215 	stw	fp,8(r16)
   2078c:	81c00015 	stw	r7,0(r16)
   20790:	98c00217 	ldw	r3,8(r19)
   20794:	b8af883a 	add	r23,r23,r2
   20798:	90a5c83a 	sub	r18,r18,r2
   2079c:	1d05c83a 	sub	r2,r3,r20
   207a0:	98800215 	stw	r2,8(r19)
   207a4:	103fc326 	beq	r2,zero,206b4 <__alt_data_end+0xfffe31f4>
   207a8:	80c0030b 	ldhu	r3,12(r16)
   207ac:	903fe41e 	bne	r18,zero,20740 <__alt_data_end+0xfffe3280>
   207b0:	8dc00017 	ldw	r23,0(r17)
   207b4:	8c800117 	ldw	r18,4(r17)
   207b8:	8c400204 	addi	r17,r17,8
   207bc:	003fdf06 	br	2073c <__alt_data_end+0xfffe327c>
   207c0:	00215d00 	call	215d0 <_realloc_r>
   207c4:	102d883a 	mov	r22,r2
   207c8:	1000a01e 	bne	r2,zero,20a4c <__sfvwrite_r+0x444>
   207cc:	81400417 	ldw	r5,16(r16)
   207d0:	a809883a 	mov	r4,r21
   207d4:	00224100 	call	22410 <_free_r>
   207d8:	00800304 	movi	r2,12
   207dc:	a8800015 	stw	r2,0(r21)
   207e0:	80c0030b 	ldhu	r3,12(r16)
   207e4:	00bfffc4 	movi	r2,-1
   207e8:	18c01014 	ori	r3,r3,64
   207ec:	80c0030d 	sth	r3,12(r16)
   207f0:	003fb106 	br	206b8 <__alt_data_end+0xfffe31f8>
   207f4:	0029883a 	mov	r20,zero
   207f8:	0011883a 	mov	r8,zero
   207fc:	0039883a 	mov	fp,zero
   20800:	0025883a 	mov	r18,zero
   20804:	90001f26 	beq	r18,zero,20884 <__sfvwrite_r+0x27c>
   20808:	40006826 	beq	r8,zero,209ac <__sfvwrite_r+0x3a4>
   2080c:	a02f883a 	mov	r23,r20
   20810:	9500012e 	bgeu	r18,r20,20818 <__sfvwrite_r+0x210>
   20814:	902f883a 	mov	r23,r18
   20818:	81000017 	ldw	r4,0(r16)
   2081c:	80800417 	ldw	r2,16(r16)
   20820:	b82d883a 	mov	r22,r23
   20824:	81800217 	ldw	r6,8(r16)
   20828:	81c00517 	ldw	r7,20(r16)
   2082c:	1100022e 	bgeu	r2,r4,20838 <__sfvwrite_r+0x230>
   20830:	31c7883a 	add	r3,r6,r7
   20834:	1dc01816 	blt	r3,r23,20898 <__sfvwrite_r+0x290>
   20838:	b9c03f16 	blt	r23,r7,20938 <__sfvwrite_r+0x330>
   2083c:	80800917 	ldw	r2,36(r16)
   20840:	81400717 	ldw	r5,28(r16)
   20844:	a809883a 	mov	r4,r21
   20848:	da000115 	stw	r8,4(sp)
   2084c:	e00d883a 	mov	r6,fp
   20850:	103ee83a 	callr	r2
   20854:	102d883a 	mov	r22,r2
   20858:	da000117 	ldw	r8,4(sp)
   2085c:	00bfe00e 	bge	zero,r2,207e0 <__alt_data_end+0xfffe3320>
   20860:	a5a9c83a 	sub	r20,r20,r22
   20864:	a0001f26 	beq	r20,zero,208e4 <__sfvwrite_r+0x2dc>
   20868:	98800217 	ldw	r2,8(r19)
   2086c:	e5b9883a 	add	fp,fp,r22
   20870:	95a5c83a 	sub	r18,r18,r22
   20874:	15adc83a 	sub	r22,r2,r22
   20878:	9d800215 	stw	r22,8(r19)
   2087c:	b03f8d26 	beq	r22,zero,206b4 <__alt_data_end+0xfffe31f4>
   20880:	903fe11e 	bne	r18,zero,20808 <__alt_data_end+0xfffe3348>
   20884:	8f000017 	ldw	fp,0(r17)
   20888:	8c800117 	ldw	r18,4(r17)
   2088c:	0011883a 	mov	r8,zero
   20890:	8c400204 	addi	r17,r17,8
   20894:	003fdb06 	br	20804 <__alt_data_end+0xfffe3344>
   20898:	180d883a 	mov	r6,r3
   2089c:	e00b883a 	mov	r5,fp
   208a0:	da000115 	stw	r8,4(sp)
   208a4:	d8c00015 	stw	r3,0(sp)
   208a8:	00214740 	call	21474 <memmove>
   208ac:	d8c00017 	ldw	r3,0(sp)
   208b0:	80800017 	ldw	r2,0(r16)
   208b4:	a809883a 	mov	r4,r21
   208b8:	800b883a 	mov	r5,r16
   208bc:	10c5883a 	add	r2,r2,r3
   208c0:	80800015 	stw	r2,0(r16)
   208c4:	d8c00015 	stw	r3,0(sp)
   208c8:	0021cf40 	call	21cf4 <_fflush_r>
   208cc:	d8c00017 	ldw	r3,0(sp)
   208d0:	da000117 	ldw	r8,4(sp)
   208d4:	103fc21e 	bne	r2,zero,207e0 <__alt_data_end+0xfffe3320>
   208d8:	182d883a 	mov	r22,r3
   208dc:	a5a9c83a 	sub	r20,r20,r22
   208e0:	a03fe11e 	bne	r20,zero,20868 <__alt_data_end+0xfffe33a8>
   208e4:	a809883a 	mov	r4,r21
   208e8:	800b883a 	mov	r5,r16
   208ec:	0021cf40 	call	21cf4 <_fflush_r>
   208f0:	103fbb1e 	bne	r2,zero,207e0 <__alt_data_end+0xfffe3320>
   208f4:	0011883a 	mov	r8,zero
   208f8:	003fdb06 	br	20868 <__alt_data_end+0xfffe33a8>
   208fc:	81000017 	ldw	r4,0(r16)
   20900:	80800417 	ldw	r2,16(r16)
   20904:	1100012e 	bgeu	r2,r4,2090c <__sfvwrite_r+0x304>
   20908:	a4805a36 	bltu	r20,r18,20a74 <__sfvwrite_r+0x46c>
   2090c:	81c00517 	ldw	r7,20(r16)
   20910:	91c01a36 	bltu	r18,r7,2097c <__sfvwrite_r+0x374>
   20914:	80800917 	ldw	r2,36(r16)
   20918:	81400717 	ldw	r5,28(r16)
   2091c:	a809883a 	mov	r4,r21
   20920:	b80d883a 	mov	r6,r23
   20924:	103ee83a 	callr	r2
   20928:	1029883a 	mov	r20,r2
   2092c:	00bfac0e 	bge	zero,r2,207e0 <__alt_data_end+0xfffe3320>
   20930:	a005883a 	mov	r2,r20
   20934:	003f9606 	br	20790 <__alt_data_end+0xfffe32d0>
   20938:	b80d883a 	mov	r6,r23
   2093c:	e00b883a 	mov	r5,fp
   20940:	da000115 	stw	r8,4(sp)
   20944:	00214740 	call	21474 <memmove>
   20948:	80800217 	ldw	r2,8(r16)
   2094c:	80c00017 	ldw	r3,0(r16)
   20950:	da000117 	ldw	r8,4(sp)
   20954:	15c5c83a 	sub	r2,r2,r23
   20958:	1def883a 	add	r23,r3,r23
   2095c:	80800215 	stw	r2,8(r16)
   20960:	85c00015 	stw	r23,0(r16)
   20964:	003fbe06 	br	20860 <__alt_data_end+0xfffe33a0>
   20968:	81000017 	ldw	r4,0(r16)
   2096c:	9039883a 	mov	fp,r18
   20970:	9029883a 	mov	r20,r18
   20974:	902d883a 	mov	r22,r18
   20978:	003f7b06 	br	20768 <__alt_data_end+0xfffe32a8>
   2097c:	b80b883a 	mov	r5,r23
   20980:	900d883a 	mov	r6,r18
   20984:	00214740 	call	21474 <memmove>
   20988:	80c00217 	ldw	r3,8(r16)
   2098c:	80800017 	ldw	r2,0(r16)
   20990:	9029883a 	mov	r20,r18
   20994:	1c87c83a 	sub	r3,r3,r18
   20998:	1485883a 	add	r2,r2,r18
   2099c:	80800015 	stw	r2,0(r16)
   209a0:	80c00215 	stw	r3,8(r16)
   209a4:	9005883a 	mov	r2,r18
   209a8:	003f7906 	br	20790 <__alt_data_end+0xfffe32d0>
   209ac:	e009883a 	mov	r4,fp
   209b0:	01400284 	movi	r5,10
   209b4:	900d883a 	mov	r6,r18
   209b8:	00212540 	call	21254 <memchr>
   209bc:	10003826 	beq	r2,zero,20aa0 <__sfvwrite_r+0x498>
   209c0:	10800044 	addi	r2,r2,1
   209c4:	1729c83a 	sub	r20,r2,fp
   209c8:	02000044 	movi	r8,1
   209cc:	003f8f06 	br	2080c <__alt_data_end+0xfffe334c>
   209d0:	80800517 	ldw	r2,20(r16)
   209d4:	81400417 	ldw	r5,16(r16)
   209d8:	87000017 	ldw	fp,0(r16)
   209dc:	10a9883a 	add	r20,r2,r2
   209e0:	a085883a 	add	r2,r20,r2
   209e4:	1028d7fa 	srli	r20,r2,31
   209e8:	e179c83a 	sub	fp,fp,r5
   209ec:	e1000044 	addi	r4,fp,1
   209f0:	a085883a 	add	r2,r20,r2
   209f4:	1029d07a 	srai	r20,r2,1
   209f8:	2485883a 	add	r2,r4,r18
   209fc:	a00d883a 	mov	r6,r20
   20a00:	a080022e 	bgeu	r20,r2,20a0c <__sfvwrite_r+0x404>
   20a04:	1029883a 	mov	r20,r2
   20a08:	100d883a 	mov	r6,r2
   20a0c:	18c1000c 	andi	r3,r3,1024
   20a10:	a809883a 	mov	r4,r21
   20a14:	183f6a26 	beq	r3,zero,207c0 <__alt_data_end+0xfffe3300>
   20a18:	300b883a 	mov	r5,r6
   20a1c:	0020aac0 	call	20aac <_malloc_r>
   20a20:	102d883a 	mov	r22,r2
   20a24:	103f6c26 	beq	r2,zero,207d8 <__alt_data_end+0xfffe3318>
   20a28:	81400417 	ldw	r5,16(r16)
   20a2c:	1009883a 	mov	r4,r2
   20a30:	e00d883a 	mov	r6,fp
   20a34:	002133c0 	call	2133c <memcpy>
   20a38:	8080030b 	ldhu	r2,12(r16)
   20a3c:	00fedfc4 	movi	r3,-1153
   20a40:	10c4703a 	and	r2,r2,r3
   20a44:	10802014 	ori	r2,r2,128
   20a48:	8080030d 	sth	r2,12(r16)
   20a4c:	b709883a 	add	r4,r22,fp
   20a50:	a707c83a 	sub	r3,r20,fp
   20a54:	85800415 	stw	r22,16(r16)
   20a58:	85000515 	stw	r20,20(r16)
   20a5c:	81000015 	stw	r4,0(r16)
   20a60:	9039883a 	mov	fp,r18
   20a64:	80c00215 	stw	r3,8(r16)
   20a68:	9029883a 	mov	r20,r18
   20a6c:	902d883a 	mov	r22,r18
   20a70:	003f3d06 	br	20768 <__alt_data_end+0xfffe32a8>
   20a74:	b80b883a 	mov	r5,r23
   20a78:	a00d883a 	mov	r6,r20
   20a7c:	00214740 	call	21474 <memmove>
   20a80:	80800017 	ldw	r2,0(r16)
   20a84:	a809883a 	mov	r4,r21
   20a88:	800b883a 	mov	r5,r16
   20a8c:	1505883a 	add	r2,r2,r20
   20a90:	80800015 	stw	r2,0(r16)
   20a94:	0021cf40 	call	21cf4 <_fflush_r>
   20a98:	103fa526 	beq	r2,zero,20930 <__alt_data_end+0xfffe3470>
   20a9c:	003f5006 	br	207e0 <__alt_data_end+0xfffe3320>
   20aa0:	95000044 	addi	r20,r18,1
   20aa4:	02000044 	movi	r8,1
   20aa8:	003f5806 	br	2080c <__alt_data_end+0xfffe334c>

00020aac <_malloc_r>:
   20aac:	defff504 	addi	sp,sp,-44
   20ab0:	dc800315 	stw	r18,12(sp)
   20ab4:	dfc00a15 	stw	ra,40(sp)
   20ab8:	df000915 	stw	fp,36(sp)
   20abc:	ddc00815 	stw	r23,32(sp)
   20ac0:	dd800715 	stw	r22,28(sp)
   20ac4:	dd400615 	stw	r21,24(sp)
   20ac8:	dd000515 	stw	r20,20(sp)
   20acc:	dcc00415 	stw	r19,16(sp)
   20ad0:	dc400215 	stw	r17,8(sp)
   20ad4:	dc000115 	stw	r16,4(sp)
   20ad8:	288002c4 	addi	r2,r5,11
   20adc:	00c00584 	movi	r3,22
   20ae0:	2025883a 	mov	r18,r4
   20ae4:	18802a2e 	bgeu	r3,r2,20b90 <_malloc_r+0xe4>
   20ae8:	047ffe04 	movi	r17,-8
   20aec:	1462703a 	and	r17,r2,r17
   20af0:	88009e16 	blt	r17,zero,20d6c <_malloc_r+0x2c0>
   20af4:	89409d36 	bltu	r17,r5,20d6c <_malloc_r+0x2c0>
   20af8:	00235700 	call	23570 <__malloc_lock>
   20afc:	00807dc4 	movi	r2,503
   20b00:	14402736 	bltu	r2,r17,20ba0 <_malloc_r+0xf4>
   20b04:	8806d0fa 	srli	r3,r17,3
   20b08:	04c000b4 	movhi	r19,2
   20b0c:	9cd7bc04 	addi	r19,r19,24304
   20b10:	18c5883a 	add	r2,r3,r3
   20b14:	1085883a 	add	r2,r2,r2
   20b18:	1085883a 	add	r2,r2,r2
   20b1c:	9885883a 	add	r2,r19,r2
   20b20:	14000317 	ldw	r16,12(r2)
   20b24:	80814a26 	beq	r16,r2,21050 <_malloc_r+0x5a4>
   20b28:	80c00117 	ldw	r3,4(r16)
   20b2c:	81000317 	ldw	r4,12(r16)
   20b30:	00bfff04 	movi	r2,-4
   20b34:	1884703a 	and	r2,r3,r2
   20b38:	81400217 	ldw	r5,8(r16)
   20b3c:	8085883a 	add	r2,r16,r2
   20b40:	10c00117 	ldw	r3,4(r2)
   20b44:	29000315 	stw	r4,12(r5)
   20b48:	21400215 	stw	r5,8(r4)
   20b4c:	18c00054 	ori	r3,r3,1
   20b50:	10c00115 	stw	r3,4(r2)
   20b54:	9009883a 	mov	r4,r18
   20b58:	00235900 	call	23590 <__malloc_unlock>
   20b5c:	80800204 	addi	r2,r16,8
   20b60:	dfc00a17 	ldw	ra,40(sp)
   20b64:	df000917 	ldw	fp,36(sp)
   20b68:	ddc00817 	ldw	r23,32(sp)
   20b6c:	dd800717 	ldw	r22,28(sp)
   20b70:	dd400617 	ldw	r21,24(sp)
   20b74:	dd000517 	ldw	r20,20(sp)
   20b78:	dcc00417 	ldw	r19,16(sp)
   20b7c:	dc800317 	ldw	r18,12(sp)
   20b80:	dc400217 	ldw	r17,8(sp)
   20b84:	dc000117 	ldw	r16,4(sp)
   20b88:	dec00b04 	addi	sp,sp,44
   20b8c:	f800283a 	ret
   20b90:	04400404 	movi	r17,16
   20b94:	89407536 	bltu	r17,r5,20d6c <_malloc_r+0x2c0>
   20b98:	00235700 	call	23570 <__malloc_lock>
   20b9c:	003fd906 	br	20b04 <__alt_data_end+0xfffe3644>
   20ba0:	8806d27a 	srli	r3,r17,9
   20ba4:	18007526 	beq	r3,zero,20d7c <_malloc_r+0x2d0>
   20ba8:	00800104 	movi	r2,4
   20bac:	10c0ef36 	bltu	r2,r3,20f6c <_malloc_r+0x4c0>
   20bb0:	8806d1ba 	srli	r3,r17,6
   20bb4:	19c00e04 	addi	r7,r3,56
   20bb8:	39cb883a 	add	r5,r7,r7
   20bbc:	04c000b4 	movhi	r19,2
   20bc0:	294b883a 	add	r5,r5,r5
   20bc4:	9cd7bc04 	addi	r19,r19,24304
   20bc8:	294b883a 	add	r5,r5,r5
   20bcc:	994b883a 	add	r5,r19,r5
   20bd0:	2c000317 	ldw	r16,12(r5)
   20bd4:	2c000e26 	beq	r5,r16,20c10 <_malloc_r+0x164>
   20bd8:	80800117 	ldw	r2,4(r16)
   20bdc:	01bfff04 	movi	r6,-4
   20be0:	010003c4 	movi	r4,15
   20be4:	1184703a 	and	r2,r2,r6
   20be8:	1447c83a 	sub	r3,r2,r17
   20bec:	20c00716 	blt	r4,r3,20c0c <_malloc_r+0x160>
   20bf0:	1800650e 	bge	r3,zero,20d88 <_malloc_r+0x2dc>
   20bf4:	84000317 	ldw	r16,12(r16)
   20bf8:	2c000526 	beq	r5,r16,20c10 <_malloc_r+0x164>
   20bfc:	80800117 	ldw	r2,4(r16)
   20c00:	1184703a 	and	r2,r2,r6
   20c04:	1447c83a 	sub	r3,r2,r17
   20c08:	20fff90e 	bge	r4,r3,20bf0 <__alt_data_end+0xfffe3730>
   20c0c:	39ffffc4 	addi	r7,r7,-1
   20c10:	38c00044 	addi	r3,r7,1
   20c14:	018000b4 	movhi	r6,2
   20c18:	9c000417 	ldw	r16,16(r19)
   20c1c:	3197bc04 	addi	r6,r6,24304
   20c20:	32400204 	addi	r9,r6,8
   20c24:	82410326 	beq	r16,r9,21034 <_malloc_r+0x588>
   20c28:	81000117 	ldw	r4,4(r16)
   20c2c:	00bfff04 	movi	r2,-4
   20c30:	208e703a 	and	r7,r4,r2
   20c34:	3c45c83a 	sub	r2,r7,r17
   20c38:	010003c4 	movi	r4,15
   20c3c:	2080ee16 	blt	r4,r2,20ff8 <_malloc_r+0x54c>
   20c40:	32400515 	stw	r9,20(r6)
   20c44:	32400415 	stw	r9,16(r6)
   20c48:	1000510e 	bge	r2,zero,20d90 <_malloc_r+0x2e4>
   20c4c:	00807fc4 	movi	r2,511
   20c50:	11c0ce36 	bltu	r2,r7,20f8c <_malloc_r+0x4e0>
   20c54:	3808d0fa 	srli	r4,r7,3
   20c58:	01c00044 	movi	r7,1
   20c5c:	30800117 	ldw	r2,4(r6)
   20c60:	210b883a 	add	r5,r4,r4
   20c64:	294b883a 	add	r5,r5,r5
   20c68:	2009d0ba 	srai	r4,r4,2
   20c6c:	294b883a 	add	r5,r5,r5
   20c70:	298b883a 	add	r5,r5,r6
   20c74:	2a000217 	ldw	r8,8(r5)
   20c78:	3908983a 	sll	r4,r7,r4
   20c7c:	81400315 	stw	r5,12(r16)
   20c80:	82000215 	stw	r8,8(r16)
   20c84:	2088b03a 	or	r4,r4,r2
   20c88:	2c000215 	stw	r16,8(r5)
   20c8c:	31000115 	stw	r4,4(r6)
   20c90:	44000315 	stw	r16,12(r8)
   20c94:	1805d0ba 	srai	r2,r3,2
   20c98:	01400044 	movi	r5,1
   20c9c:	288a983a 	sll	r5,r5,r2
   20ca0:	21404336 	bltu	r4,r5,20db0 <_malloc_r+0x304>
   20ca4:	2144703a 	and	r2,r4,r5
   20ca8:	10000a1e 	bne	r2,zero,20cd4 <_malloc_r+0x228>
   20cac:	00bfff04 	movi	r2,-4
   20cb0:	294b883a 	add	r5,r5,r5
   20cb4:	1886703a 	and	r3,r3,r2
   20cb8:	2144703a 	and	r2,r4,r5
   20cbc:	18c00104 	addi	r3,r3,4
   20cc0:	1000041e 	bne	r2,zero,20cd4 <_malloc_r+0x228>
   20cc4:	294b883a 	add	r5,r5,r5
   20cc8:	2144703a 	and	r2,r4,r5
   20ccc:	18c00104 	addi	r3,r3,4
   20cd0:	103ffc26 	beq	r2,zero,20cc4 <__alt_data_end+0xfffe3804>
   20cd4:	023fff04 	movi	r8,-4
   20cd8:	01c003c4 	movi	r7,15
   20cdc:	18c5883a 	add	r2,r3,r3
   20ce0:	1085883a 	add	r2,r2,r2
   20ce4:	1085883a 	add	r2,r2,r2
   20ce8:	9895883a 	add	r10,r19,r2
   20cec:	52c00304 	addi	r11,r10,12
   20cf0:	1819883a 	mov	r12,r3
   20cf4:	5c000017 	ldw	r16,0(r11)
   20cf8:	59bffd04 	addi	r6,r11,-12
   20cfc:	8180041e 	bne	r16,r6,20d10 <_malloc_r+0x264>
   20d00:	0000ce06 	br	2103c <_malloc_r+0x590>
   20d04:	2000d70e 	bge	r4,zero,21064 <_malloc_r+0x5b8>
   20d08:	84000317 	ldw	r16,12(r16)
   20d0c:	8180cb26 	beq	r16,r6,2103c <_malloc_r+0x590>
   20d10:	80800117 	ldw	r2,4(r16)
   20d14:	1204703a 	and	r2,r2,r8
   20d18:	1449c83a 	sub	r4,r2,r17
   20d1c:	393ff90e 	bge	r7,r4,20d04 <__alt_data_end+0xfffe3844>
   20d20:	80800317 	ldw	r2,12(r16)
   20d24:	80c00217 	ldw	r3,8(r16)
   20d28:	89400054 	ori	r5,r17,1
   20d2c:	81400115 	stw	r5,4(r16)
   20d30:	18800315 	stw	r2,12(r3)
   20d34:	10c00215 	stw	r3,8(r2)
   20d38:	8463883a 	add	r17,r16,r17
   20d3c:	9c400515 	stw	r17,20(r19)
   20d40:	9c400415 	stw	r17,16(r19)
   20d44:	20800054 	ori	r2,r4,1
   20d48:	88800115 	stw	r2,4(r17)
   20d4c:	8a400315 	stw	r9,12(r17)
   20d50:	8a400215 	stw	r9,8(r17)
   20d54:	8923883a 	add	r17,r17,r4
   20d58:	89000015 	stw	r4,0(r17)
   20d5c:	9009883a 	mov	r4,r18
   20d60:	00235900 	call	23590 <__malloc_unlock>
   20d64:	80800204 	addi	r2,r16,8
   20d68:	003f7d06 	br	20b60 <__alt_data_end+0xfffe36a0>
   20d6c:	00800304 	movi	r2,12
   20d70:	90800015 	stw	r2,0(r18)
   20d74:	0005883a 	mov	r2,zero
   20d78:	003f7906 	br	20b60 <__alt_data_end+0xfffe36a0>
   20d7c:	01401f84 	movi	r5,126
   20d80:	01c00fc4 	movi	r7,63
   20d84:	003f8d06 	br	20bbc <__alt_data_end+0xfffe36fc>
   20d88:	81000317 	ldw	r4,12(r16)
   20d8c:	003f6a06 	br	20b38 <__alt_data_end+0xfffe3678>
   20d90:	81c5883a 	add	r2,r16,r7
   20d94:	10c00117 	ldw	r3,4(r2)
   20d98:	9009883a 	mov	r4,r18
   20d9c:	18c00054 	ori	r3,r3,1
   20da0:	10c00115 	stw	r3,4(r2)
   20da4:	00235900 	call	23590 <__malloc_unlock>
   20da8:	80800204 	addi	r2,r16,8
   20dac:	003f6c06 	br	20b60 <__alt_data_end+0xfffe36a0>
   20db0:	9c000217 	ldw	r16,8(r19)
   20db4:	00bfff04 	movi	r2,-4
   20db8:	85800117 	ldw	r22,4(r16)
   20dbc:	b0ac703a 	and	r22,r22,r2
   20dc0:	b4400336 	bltu	r22,r17,20dd0 <_malloc_r+0x324>
   20dc4:	b445c83a 	sub	r2,r22,r17
   20dc8:	00c003c4 	movi	r3,15
   20dcc:	18805d16 	blt	r3,r2,20f44 <_malloc_r+0x498>
   20dd0:	05c000b4 	movhi	r23,2
   20dd4:	008000f4 	movhi	r2,3
   20dd8:	bddd4204 	addi	r23,r23,29960
   20ddc:	10a3f104 	addi	r2,r2,-28732
   20de0:	15400017 	ldw	r21,0(r2)
   20de4:	b9000017 	ldw	r4,0(r23)
   20de8:	00ffffc4 	movi	r3,-1
   20dec:	858d883a 	add	r6,r16,r22
   20df0:	8d6b883a 	add	r21,r17,r21
   20df4:	20c0e426 	beq	r4,r3,21188 <_malloc_r+0x6dc>
   20df8:	ad4403c4 	addi	r21,r21,4111
   20dfc:	00fc0004 	movi	r3,-4096
   20e00:	a8ea703a 	and	r21,r21,r3
   20e04:	9009883a 	mov	r4,r18
   20e08:	a80b883a 	mov	r5,r21
   20e0c:	d9800015 	stw	r6,0(sp)
   20e10:	0021b700 	call	21b70 <_sbrk_r>
   20e14:	00ffffc4 	movi	r3,-1
   20e18:	1029883a 	mov	r20,r2
   20e1c:	d9800017 	ldw	r6,0(sp)
   20e20:	10c0a426 	beq	r2,r3,210b4 <_malloc_r+0x608>
   20e24:	1180a236 	bltu	r2,r6,210b0 <_malloc_r+0x604>
   20e28:	070000f4 	movhi	fp,3
   20e2c:	e723f904 	addi	fp,fp,-28700
   20e30:	e0c00017 	ldw	r3,0(fp)
   20e34:	a8c7883a 	add	r3,r21,r3
   20e38:	e0c00015 	stw	r3,0(fp)
   20e3c:	3500da26 	beq	r6,r20,211a8 <_malloc_r+0x6fc>
   20e40:	b9000017 	ldw	r4,0(r23)
   20e44:	00bfffc4 	movi	r2,-1
   20e48:	2080e426 	beq	r4,r2,211dc <_malloc_r+0x730>
   20e4c:	a185c83a 	sub	r2,r20,r6
   20e50:	1885883a 	add	r2,r3,r2
   20e54:	e0800015 	stw	r2,0(fp)
   20e58:	a0c001cc 	andi	r3,r20,7
   20e5c:	1800b526 	beq	r3,zero,21134 <_malloc_r+0x688>
   20e60:	a0e9c83a 	sub	r20,r20,r3
   20e64:	00840204 	movi	r2,4104
   20e68:	a5000204 	addi	r20,r20,8
   20e6c:	10c7c83a 	sub	r3,r2,r3
   20e70:	a545883a 	add	r2,r20,r21
   20e74:	1083ffcc 	andi	r2,r2,4095
   20e78:	18abc83a 	sub	r21,r3,r2
   20e7c:	9009883a 	mov	r4,r18
   20e80:	a80b883a 	mov	r5,r21
   20e84:	0021b700 	call	21b70 <_sbrk_r>
   20e88:	00ffffc4 	movi	r3,-1
   20e8c:	10c0d026 	beq	r2,r3,211d0 <_malloc_r+0x724>
   20e90:	1507c83a 	sub	r3,r2,r20
   20e94:	a8c7883a 	add	r3,r21,r3
   20e98:	18c00054 	ori	r3,r3,1
   20e9c:	e0800017 	ldw	r2,0(fp)
   20ea0:	9d000215 	stw	r20,8(r19)
   20ea4:	a0c00115 	stw	r3,4(r20)
   20ea8:	a887883a 	add	r3,r21,r2
   20eac:	e0c00015 	stw	r3,0(fp)
   20eb0:	84c00e26 	beq	r16,r19,20eec <_malloc_r+0x440>
   20eb4:	018003c4 	movi	r6,15
   20eb8:	3580a02e 	bgeu	r6,r22,2113c <_malloc_r+0x690>
   20ebc:	81400117 	ldw	r5,4(r16)
   20ec0:	013ffe04 	movi	r4,-8
   20ec4:	b0bffd04 	addi	r2,r22,-12
   20ec8:	1104703a 	and	r2,r2,r4
   20ecc:	2900004c 	andi	r4,r5,1
   20ed0:	1108b03a 	or	r4,r2,r4
   20ed4:	81000115 	stw	r4,4(r16)
   20ed8:	01400144 	movi	r5,5
   20edc:	8089883a 	add	r4,r16,r2
   20ee0:	21400115 	stw	r5,4(r4)
   20ee4:	21400215 	stw	r5,8(r4)
   20ee8:	3080c036 	bltu	r6,r2,211ec <_malloc_r+0x740>
   20eec:	008000f4 	movhi	r2,3
   20ef0:	10a3f004 	addi	r2,r2,-28736
   20ef4:	11000017 	ldw	r4,0(r2)
   20ef8:	20c0012e 	bgeu	r4,r3,20f00 <_malloc_r+0x454>
   20efc:	10c00015 	stw	r3,0(r2)
   20f00:	008000f4 	movhi	r2,3
   20f04:	10a3ef04 	addi	r2,r2,-28740
   20f08:	11000017 	ldw	r4,0(r2)
   20f0c:	9c000217 	ldw	r16,8(r19)
   20f10:	20c0012e 	bgeu	r4,r3,20f18 <_malloc_r+0x46c>
   20f14:	10c00015 	stw	r3,0(r2)
   20f18:	80c00117 	ldw	r3,4(r16)
   20f1c:	00bfff04 	movi	r2,-4
   20f20:	1886703a 	and	r3,r3,r2
   20f24:	1c45c83a 	sub	r2,r3,r17
   20f28:	1c400236 	bltu	r3,r17,20f34 <_malloc_r+0x488>
   20f2c:	00c003c4 	movi	r3,15
   20f30:	18800416 	blt	r3,r2,20f44 <_malloc_r+0x498>
   20f34:	9009883a 	mov	r4,r18
   20f38:	00235900 	call	23590 <__malloc_unlock>
   20f3c:	0005883a 	mov	r2,zero
   20f40:	003f0706 	br	20b60 <__alt_data_end+0xfffe36a0>
   20f44:	88c00054 	ori	r3,r17,1
   20f48:	80c00115 	stw	r3,4(r16)
   20f4c:	8463883a 	add	r17,r16,r17
   20f50:	10800054 	ori	r2,r2,1
   20f54:	9c400215 	stw	r17,8(r19)
   20f58:	88800115 	stw	r2,4(r17)
   20f5c:	9009883a 	mov	r4,r18
   20f60:	00235900 	call	23590 <__malloc_unlock>
   20f64:	80800204 	addi	r2,r16,8
   20f68:	003efd06 	br	20b60 <__alt_data_end+0xfffe36a0>
   20f6c:	00800504 	movi	r2,20
   20f70:	10c0482e 	bgeu	r2,r3,21094 <_malloc_r+0x5e8>
   20f74:	00801504 	movi	r2,84
   20f78:	10c06836 	bltu	r2,r3,2111c <_malloc_r+0x670>
   20f7c:	8806d33a 	srli	r3,r17,12
   20f80:	19c01b84 	addi	r7,r3,110
   20f84:	39cb883a 	add	r5,r7,r7
   20f88:	003f0c06 	br	20bbc <__alt_data_end+0xfffe36fc>
   20f8c:	3804d27a 	srli	r2,r7,9
   20f90:	01000104 	movi	r4,4
   20f94:	2080422e 	bgeu	r4,r2,210a0 <_malloc_r+0x5f4>
   20f98:	01000504 	movi	r4,20
   20f9c:	20807c36 	bltu	r4,r2,21190 <_malloc_r+0x6e4>
   20fa0:	110016c4 	addi	r4,r2,91
   20fa4:	210b883a 	add	r5,r4,r4
   20fa8:	294b883a 	add	r5,r5,r5
   20fac:	294b883a 	add	r5,r5,r5
   20fb0:	994b883a 	add	r5,r19,r5
   20fb4:	28800217 	ldw	r2,8(r5)
   20fb8:	020000b4 	movhi	r8,2
   20fbc:	4217bc04 	addi	r8,r8,24304
   20fc0:	11406326 	beq	r2,r5,21150 <_malloc_r+0x6a4>
   20fc4:	01bfff04 	movi	r6,-4
   20fc8:	11000117 	ldw	r4,4(r2)
   20fcc:	2188703a 	and	r4,r4,r6
   20fd0:	3900022e 	bgeu	r7,r4,20fdc <_malloc_r+0x530>
   20fd4:	10800217 	ldw	r2,8(r2)
   20fd8:	28bffb1e 	bne	r5,r2,20fc8 <__alt_data_end+0xfffe3b08>
   20fdc:	11800317 	ldw	r6,12(r2)
   20fe0:	99000117 	ldw	r4,4(r19)
   20fe4:	81800315 	stw	r6,12(r16)
   20fe8:	80800215 	stw	r2,8(r16)
   20fec:	34000215 	stw	r16,8(r6)
   20ff0:	14000315 	stw	r16,12(r2)
   20ff4:	003f2706 	br	20c94 <__alt_data_end+0xfffe37d4>
   20ff8:	88c00054 	ori	r3,r17,1
   20ffc:	80c00115 	stw	r3,4(r16)
   21000:	8463883a 	add	r17,r16,r17
   21004:	34400515 	stw	r17,20(r6)
   21008:	34400415 	stw	r17,16(r6)
   2100c:	10c00054 	ori	r3,r2,1
   21010:	8a400315 	stw	r9,12(r17)
   21014:	8a400215 	stw	r9,8(r17)
   21018:	88c00115 	stw	r3,4(r17)
   2101c:	88a3883a 	add	r17,r17,r2
   21020:	88800015 	stw	r2,0(r17)
   21024:	9009883a 	mov	r4,r18
   21028:	00235900 	call	23590 <__malloc_unlock>
   2102c:	80800204 	addi	r2,r16,8
   21030:	003ecb06 	br	20b60 <__alt_data_end+0xfffe36a0>
   21034:	31000117 	ldw	r4,4(r6)
   21038:	003f1606 	br	20c94 <__alt_data_end+0xfffe37d4>
   2103c:	63000044 	addi	r12,r12,1
   21040:	608000cc 	andi	r2,r12,3
   21044:	5ac00204 	addi	r11,r11,8
   21048:	103f2a1e 	bne	r2,zero,20cf4 <__alt_data_end+0xfffe3834>
   2104c:	00002106 	br	210d4 <_malloc_r+0x628>
   21050:	80800204 	addi	r2,r16,8
   21054:	84000517 	ldw	r16,20(r16)
   21058:	143eb31e 	bne	r2,r16,20b28 <__alt_data_end+0xfffe3668>
   2105c:	18c00084 	addi	r3,r3,2
   21060:	003eec06 	br	20c14 <__alt_data_end+0xfffe3754>
   21064:	8085883a 	add	r2,r16,r2
   21068:	10c00117 	ldw	r3,4(r2)
   2106c:	81000317 	ldw	r4,12(r16)
   21070:	81400217 	ldw	r5,8(r16)
   21074:	18c00054 	ori	r3,r3,1
   21078:	10c00115 	stw	r3,4(r2)
   2107c:	29000315 	stw	r4,12(r5)
   21080:	21400215 	stw	r5,8(r4)
   21084:	9009883a 	mov	r4,r18
   21088:	00235900 	call	23590 <__malloc_unlock>
   2108c:	80800204 	addi	r2,r16,8
   21090:	003eb306 	br	20b60 <__alt_data_end+0xfffe36a0>
   21094:	19c016c4 	addi	r7,r3,91
   21098:	39cb883a 	add	r5,r7,r7
   2109c:	003ec706 	br	20bbc <__alt_data_end+0xfffe36fc>
   210a0:	3804d1ba 	srli	r2,r7,6
   210a4:	11000e04 	addi	r4,r2,56
   210a8:	210b883a 	add	r5,r4,r4
   210ac:	003fbe06 	br	20fa8 <__alt_data_end+0xfffe3ae8>
   210b0:	84ff5d26 	beq	r16,r19,20e28 <__alt_data_end+0xfffe3968>
   210b4:	9c000217 	ldw	r16,8(r19)
   210b8:	00bfff04 	movi	r2,-4
   210bc:	80c00117 	ldw	r3,4(r16)
   210c0:	1886703a 	and	r3,r3,r2
   210c4:	003f9706 	br	20f24 <__alt_data_end+0xfffe3a64>
   210c8:	52800017 	ldw	r10,0(r10)
   210cc:	18ffffc4 	addi	r3,r3,-1
   210d0:	50805c1e 	bne	r10,r2,21244 <_malloc_r+0x798>
   210d4:	190000cc 	andi	r4,r3,3
   210d8:	50bffe04 	addi	r2,r10,-8
   210dc:	203ffa1e 	bne	r4,zero,210c8 <__alt_data_end+0xfffe3c08>
   210e0:	98800117 	ldw	r2,4(r19)
   210e4:	0146303a 	nor	r3,zero,r5
   210e8:	1884703a 	and	r2,r3,r2
   210ec:	98800115 	stw	r2,4(r19)
   210f0:	294b883a 	add	r5,r5,r5
   210f4:	117f2e36 	bltu	r2,r5,20db0 <__alt_data_end+0xfffe38f0>
   210f8:	283f2d26 	beq	r5,zero,20db0 <__alt_data_end+0xfffe38f0>
   210fc:	1146703a 	and	r3,r2,r5
   21100:	1800521e 	bne	r3,zero,2124c <_malloc_r+0x7a0>
   21104:	6007883a 	mov	r3,r12
   21108:	294b883a 	add	r5,r5,r5
   2110c:	1148703a 	and	r4,r2,r5
   21110:	18c00104 	addi	r3,r3,4
   21114:	203ffc26 	beq	r4,zero,21108 <__alt_data_end+0xfffe3c48>
   21118:	003ef006 	br	20cdc <__alt_data_end+0xfffe381c>
   2111c:	00805504 	movi	r2,340
   21120:	10c01336 	bltu	r2,r3,21170 <_malloc_r+0x6c4>
   21124:	8806d3fa 	srli	r3,r17,15
   21128:	19c01dc4 	addi	r7,r3,119
   2112c:	39cb883a 	add	r5,r7,r7
   21130:	003ea206 	br	20bbc <__alt_data_end+0xfffe36fc>
   21134:	00c40004 	movi	r3,4096
   21138:	003f4d06 	br	20e70 <__alt_data_end+0xfffe39b0>
   2113c:	00800044 	movi	r2,1
   21140:	a0800115 	stw	r2,4(r20)
   21144:	a021883a 	mov	r16,r20
   21148:	0007883a 	mov	r3,zero
   2114c:	003f7506 	br	20f24 <__alt_data_end+0xfffe3a64>
   21150:	200bd0ba 	srai	r5,r4,2
   21154:	01800044 	movi	r6,1
   21158:	41000117 	ldw	r4,4(r8)
   2115c:	314a983a 	sll	r5,r6,r5
   21160:	100d883a 	mov	r6,r2
   21164:	2908b03a 	or	r4,r5,r4
   21168:	41000115 	stw	r4,4(r8)
   2116c:	003f9d06 	br	20fe4 <__alt_data_end+0xfffe3b24>
   21170:	00815504 	movi	r2,1364
   21174:	10c01336 	bltu	r2,r3,211c4 <_malloc_r+0x718>
   21178:	8806d4ba 	srli	r3,r17,18
   2117c:	19c01f04 	addi	r7,r3,124
   21180:	39cb883a 	add	r5,r7,r7
   21184:	003e8d06 	br	20bbc <__alt_data_end+0xfffe36fc>
   21188:	ad400404 	addi	r21,r21,16
   2118c:	003f1d06 	br	20e04 <__alt_data_end+0xfffe3944>
   21190:	01001504 	movi	r4,84
   21194:	20801c36 	bltu	r4,r2,21208 <_malloc_r+0x75c>
   21198:	3804d33a 	srli	r2,r7,12
   2119c:	11001b84 	addi	r4,r2,110
   211a0:	210b883a 	add	r5,r4,r4
   211a4:	003f8006 	br	20fa8 <__alt_data_end+0xfffe3ae8>
   211a8:	3083ffcc 	andi	r2,r6,4095
   211ac:	103f241e 	bne	r2,zero,20e40 <__alt_data_end+0xfffe3980>
   211b0:	99000217 	ldw	r4,8(r19)
   211b4:	ad85883a 	add	r2,r21,r22
   211b8:	10800054 	ori	r2,r2,1
   211bc:	20800115 	stw	r2,4(r4)
   211c0:	003f4a06 	br	20eec <__alt_data_end+0xfffe3a2c>
   211c4:	01403f04 	movi	r5,252
   211c8:	01c01f84 	movi	r7,126
   211cc:	003e7b06 	br	20bbc <__alt_data_end+0xfffe36fc>
   211d0:	00c00044 	movi	r3,1
   211d4:	002b883a 	mov	r21,zero
   211d8:	003f3006 	br	20e9c <__alt_data_end+0xfffe39dc>
   211dc:	008000b4 	movhi	r2,2
   211e0:	109d4204 	addi	r2,r2,29960
   211e4:	15000015 	stw	r20,0(r2)
   211e8:	003f1b06 	br	20e58 <__alt_data_end+0xfffe3998>
   211ec:	9009883a 	mov	r4,r18
   211f0:	81400204 	addi	r5,r16,8
   211f4:	00224100 	call	22410 <_free_r>
   211f8:	008000f4 	movhi	r2,3
   211fc:	10a3f904 	addi	r2,r2,-28700
   21200:	10c00017 	ldw	r3,0(r2)
   21204:	003f3906 	br	20eec <__alt_data_end+0xfffe3a2c>
   21208:	01005504 	movi	r4,340
   2120c:	20800436 	bltu	r4,r2,21220 <_malloc_r+0x774>
   21210:	3804d3fa 	srli	r2,r7,15
   21214:	11001dc4 	addi	r4,r2,119
   21218:	210b883a 	add	r5,r4,r4
   2121c:	003f6206 	br	20fa8 <__alt_data_end+0xfffe3ae8>
   21220:	01015504 	movi	r4,1364
   21224:	20800436 	bltu	r4,r2,21238 <_malloc_r+0x78c>
   21228:	3804d4ba 	srli	r2,r7,18
   2122c:	11001f04 	addi	r4,r2,124
   21230:	210b883a 	add	r5,r4,r4
   21234:	003f5c06 	br	20fa8 <__alt_data_end+0xfffe3ae8>
   21238:	01403f04 	movi	r5,252
   2123c:	01001f84 	movi	r4,126
   21240:	003f5906 	br	20fa8 <__alt_data_end+0xfffe3ae8>
   21244:	98800117 	ldw	r2,4(r19)
   21248:	003fa906 	br	210f0 <__alt_data_end+0xfffe3c30>
   2124c:	6007883a 	mov	r3,r12
   21250:	003ea206 	br	20cdc <__alt_data_end+0xfffe381c>

00021254 <memchr>:
   21254:	208000cc 	andi	r2,r4,3
   21258:	280f883a 	mov	r7,r5
   2125c:	10003526 	beq	r2,zero,21334 <memchr+0xe0>
   21260:	30bfffc4 	addi	r2,r6,-1
   21264:	30001b26 	beq	r6,zero,212d4 <memchr+0x80>
   21268:	21800003 	ldbu	r6,0(r4)
   2126c:	28c03fcc 	andi	r3,r5,255
   21270:	30c01a26 	beq	r6,r3,212dc <memchr+0x88>
   21274:	180d883a 	mov	r6,r3
   21278:	00000406 	br	2128c <memchr+0x38>
   2127c:	10001526 	beq	r2,zero,212d4 <memchr+0x80>
   21280:	20c00003 	ldbu	r3,0(r4)
   21284:	10bfffc4 	addi	r2,r2,-1
   21288:	19801426 	beq	r3,r6,212dc <memchr+0x88>
   2128c:	21000044 	addi	r4,r4,1
   21290:	20c000cc 	andi	r3,r4,3
   21294:	183ff91e 	bne	r3,zero,2127c <__alt_data_end+0xfffe3dbc>
   21298:	024000c4 	movi	r9,3
   2129c:	48801136 	bltu	r9,r2,212e4 <memchr+0x90>
   212a0:	10000c26 	beq	r2,zero,212d4 <memchr+0x80>
   212a4:	20c00003 	ldbu	r3,0(r4)
   212a8:	29403fcc 	andi	r5,r5,255
   212ac:	19400b26 	beq	r3,r5,212dc <memchr+0x88>
   212b0:	20c00044 	addi	r3,r4,1
   212b4:	2085883a 	add	r2,r4,r2
   212b8:	39803fcc 	andi	r6,r7,255
   212bc:	00000306 	br	212cc <memchr+0x78>
   212c0:	18c00044 	addi	r3,r3,1
   212c4:	197fffc3 	ldbu	r5,-1(r3)
   212c8:	29800426 	beq	r5,r6,212dc <memchr+0x88>
   212cc:	1809883a 	mov	r4,r3
   212d0:	18bffb1e 	bne	r3,r2,212c0 <__alt_data_end+0xfffe3e00>
   212d4:	0005883a 	mov	r2,zero
   212d8:	f800283a 	ret
   212dc:	2005883a 	mov	r2,r4
   212e0:	f800283a 	ret
   212e4:	28c03fcc 	andi	r3,r5,255
   212e8:	1810923a 	slli	r8,r3,8
   212ec:	02ffbff4 	movhi	r11,65279
   212f0:	02a02074 	movhi	r10,32897
   212f4:	40c6b03a 	or	r3,r8,r3
   212f8:	1810943a 	slli	r8,r3,16
   212fc:	5affbfc4 	addi	r11,r11,-257
   21300:	52a02004 	addi	r10,r10,-32640
   21304:	40d0b03a 	or	r8,r8,r3
   21308:	20c00017 	ldw	r3,0(r4)
   2130c:	40c6f03a 	xor	r3,r8,r3
   21310:	1acd883a 	add	r6,r3,r11
   21314:	00c6303a 	nor	r3,zero,r3
   21318:	30c6703a 	and	r3,r6,r3
   2131c:	1a86703a 	and	r3,r3,r10
   21320:	183fdf1e 	bne	r3,zero,212a0 <__alt_data_end+0xfffe3de0>
   21324:	10bfff04 	addi	r2,r2,-4
   21328:	21000104 	addi	r4,r4,4
   2132c:	48bff636 	bltu	r9,r2,21308 <__alt_data_end+0xfffe3e48>
   21330:	003fdb06 	br	212a0 <__alt_data_end+0xfffe3de0>
   21334:	3005883a 	mov	r2,r6
   21338:	003fd706 	br	21298 <__alt_data_end+0xfffe3dd8>

0002133c <memcpy>:
   2133c:	deffff04 	addi	sp,sp,-4
   21340:	dc000015 	stw	r16,0(sp)
   21344:	00c003c4 	movi	r3,15
   21348:	2005883a 	mov	r2,r4
   2134c:	1980432e 	bgeu	r3,r6,2145c <memcpy+0x120>
   21350:	2146b03a 	or	r3,r4,r5
   21354:	18c000cc 	andi	r3,r3,3
   21358:	1800421e 	bne	r3,zero,21464 <memcpy+0x128>
   2135c:	343ffc04 	addi	r16,r6,-16
   21360:	8020d13a 	srli	r16,r16,4
   21364:	28c00104 	addi	r3,r5,4
   21368:	23400104 	addi	r13,r4,4
   2136c:	801e913a 	slli	r15,r16,4
   21370:	2b000204 	addi	r12,r5,8
   21374:	22c00204 	addi	r11,r4,8
   21378:	7bc00504 	addi	r15,r15,20
   2137c:	2a800304 	addi	r10,r5,12
   21380:	22400304 	addi	r9,r4,12
   21384:	2bdf883a 	add	r15,r5,r15
   21388:	2811883a 	mov	r8,r5
   2138c:	200f883a 	mov	r7,r4
   21390:	41000017 	ldw	r4,0(r8)
   21394:	39c00404 	addi	r7,r7,16
   21398:	18c00404 	addi	r3,r3,16
   2139c:	393ffc15 	stw	r4,-16(r7)
   213a0:	1bbffc17 	ldw	r14,-16(r3)
   213a4:	6b400404 	addi	r13,r13,16
   213a8:	5ac00404 	addi	r11,r11,16
   213ac:	6bbffc15 	stw	r14,-16(r13)
   213b0:	63800017 	ldw	r14,0(r12)
   213b4:	4a400404 	addi	r9,r9,16
   213b8:	42000404 	addi	r8,r8,16
   213bc:	5bbffc15 	stw	r14,-16(r11)
   213c0:	53800017 	ldw	r14,0(r10)
   213c4:	63000404 	addi	r12,r12,16
   213c8:	52800404 	addi	r10,r10,16
   213cc:	4bbffc15 	stw	r14,-16(r9)
   213d0:	1bffef1e 	bne	r3,r15,21390 <__alt_data_end+0xfffe3ed0>
   213d4:	81c00044 	addi	r7,r16,1
   213d8:	380e913a 	slli	r7,r7,4
   213dc:	310003cc 	andi	r4,r6,15
   213e0:	02c000c4 	movi	r11,3
   213e4:	11c7883a 	add	r3,r2,r7
   213e8:	29cb883a 	add	r5,r5,r7
   213ec:	59001f2e 	bgeu	r11,r4,2146c <memcpy+0x130>
   213f0:	1813883a 	mov	r9,r3
   213f4:	2811883a 	mov	r8,r5
   213f8:	200f883a 	mov	r7,r4
   213fc:	42800017 	ldw	r10,0(r8)
   21400:	4a400104 	addi	r9,r9,4
   21404:	39ffff04 	addi	r7,r7,-4
   21408:	4abfff15 	stw	r10,-4(r9)
   2140c:	42000104 	addi	r8,r8,4
   21410:	59fffa36 	bltu	r11,r7,213fc <__alt_data_end+0xfffe3f3c>
   21414:	213fff04 	addi	r4,r4,-4
   21418:	2008d0ba 	srli	r4,r4,2
   2141c:	318000cc 	andi	r6,r6,3
   21420:	21000044 	addi	r4,r4,1
   21424:	2109883a 	add	r4,r4,r4
   21428:	2109883a 	add	r4,r4,r4
   2142c:	1907883a 	add	r3,r3,r4
   21430:	290b883a 	add	r5,r5,r4
   21434:	30000626 	beq	r6,zero,21450 <memcpy+0x114>
   21438:	198d883a 	add	r6,r3,r6
   2143c:	29c00003 	ldbu	r7,0(r5)
   21440:	18c00044 	addi	r3,r3,1
   21444:	29400044 	addi	r5,r5,1
   21448:	19ffffc5 	stb	r7,-1(r3)
   2144c:	19bffb1e 	bne	r3,r6,2143c <__alt_data_end+0xfffe3f7c>
   21450:	dc000017 	ldw	r16,0(sp)
   21454:	dec00104 	addi	sp,sp,4
   21458:	f800283a 	ret
   2145c:	2007883a 	mov	r3,r4
   21460:	003ff406 	br	21434 <__alt_data_end+0xfffe3f74>
   21464:	2007883a 	mov	r3,r4
   21468:	003ff306 	br	21438 <__alt_data_end+0xfffe3f78>
   2146c:	200d883a 	mov	r6,r4
   21470:	003ff006 	br	21434 <__alt_data_end+0xfffe3f74>

00021474 <memmove>:
   21474:	2005883a 	mov	r2,r4
   21478:	29000b2e 	bgeu	r5,r4,214a8 <memmove+0x34>
   2147c:	298f883a 	add	r7,r5,r6
   21480:	21c0092e 	bgeu	r4,r7,214a8 <memmove+0x34>
   21484:	2187883a 	add	r3,r4,r6
   21488:	198bc83a 	sub	r5,r3,r6
   2148c:	30004b26 	beq	r6,zero,215bc <memmove+0x148>
   21490:	39ffffc4 	addi	r7,r7,-1
   21494:	39000003 	ldbu	r4,0(r7)
   21498:	18ffffc4 	addi	r3,r3,-1
   2149c:	19000005 	stb	r4,0(r3)
   214a0:	197ffb1e 	bne	r3,r5,21490 <__alt_data_end+0xfffe3fd0>
   214a4:	f800283a 	ret
   214a8:	00c003c4 	movi	r3,15
   214ac:	1980412e 	bgeu	r3,r6,215b4 <memmove+0x140>
   214b0:	1146b03a 	or	r3,r2,r5
   214b4:	18c000cc 	andi	r3,r3,3
   214b8:	1800411e 	bne	r3,zero,215c0 <memmove+0x14c>
   214bc:	33fffc04 	addi	r15,r6,-16
   214c0:	781ed13a 	srli	r15,r15,4
   214c4:	28c00104 	addi	r3,r5,4
   214c8:	13400104 	addi	r13,r2,4
   214cc:	781c913a 	slli	r14,r15,4
   214d0:	2b000204 	addi	r12,r5,8
   214d4:	12c00204 	addi	r11,r2,8
   214d8:	73800504 	addi	r14,r14,20
   214dc:	2a800304 	addi	r10,r5,12
   214e0:	12400304 	addi	r9,r2,12
   214e4:	2b9d883a 	add	r14,r5,r14
   214e8:	2811883a 	mov	r8,r5
   214ec:	100f883a 	mov	r7,r2
   214f0:	41000017 	ldw	r4,0(r8)
   214f4:	39c00404 	addi	r7,r7,16
   214f8:	18c00404 	addi	r3,r3,16
   214fc:	393ffc15 	stw	r4,-16(r7)
   21500:	193ffc17 	ldw	r4,-16(r3)
   21504:	6b400404 	addi	r13,r13,16
   21508:	5ac00404 	addi	r11,r11,16
   2150c:	693ffc15 	stw	r4,-16(r13)
   21510:	61000017 	ldw	r4,0(r12)
   21514:	4a400404 	addi	r9,r9,16
   21518:	42000404 	addi	r8,r8,16
   2151c:	593ffc15 	stw	r4,-16(r11)
   21520:	51000017 	ldw	r4,0(r10)
   21524:	63000404 	addi	r12,r12,16
   21528:	52800404 	addi	r10,r10,16
   2152c:	493ffc15 	stw	r4,-16(r9)
   21530:	1bbfef1e 	bne	r3,r14,214f0 <__alt_data_end+0xfffe4030>
   21534:	79000044 	addi	r4,r15,1
   21538:	2008913a 	slli	r4,r4,4
   2153c:	328003cc 	andi	r10,r6,15
   21540:	02c000c4 	movi	r11,3
   21544:	1107883a 	add	r3,r2,r4
   21548:	290b883a 	add	r5,r5,r4
   2154c:	5a801e2e 	bgeu	r11,r10,215c8 <memmove+0x154>
   21550:	1813883a 	mov	r9,r3
   21554:	2811883a 	mov	r8,r5
   21558:	500f883a 	mov	r7,r10
   2155c:	41000017 	ldw	r4,0(r8)
   21560:	4a400104 	addi	r9,r9,4
   21564:	39ffff04 	addi	r7,r7,-4
   21568:	493fff15 	stw	r4,-4(r9)
   2156c:	42000104 	addi	r8,r8,4
   21570:	59fffa36 	bltu	r11,r7,2155c <__alt_data_end+0xfffe409c>
   21574:	513fff04 	addi	r4,r10,-4
   21578:	2008d0ba 	srli	r4,r4,2
   2157c:	318000cc 	andi	r6,r6,3
   21580:	21000044 	addi	r4,r4,1
   21584:	2109883a 	add	r4,r4,r4
   21588:	2109883a 	add	r4,r4,r4
   2158c:	1907883a 	add	r3,r3,r4
   21590:	290b883a 	add	r5,r5,r4
   21594:	30000926 	beq	r6,zero,215bc <memmove+0x148>
   21598:	198d883a 	add	r6,r3,r6
   2159c:	29c00003 	ldbu	r7,0(r5)
   215a0:	18c00044 	addi	r3,r3,1
   215a4:	29400044 	addi	r5,r5,1
   215a8:	19ffffc5 	stb	r7,-1(r3)
   215ac:	19bffb1e 	bne	r3,r6,2159c <__alt_data_end+0xfffe40dc>
   215b0:	f800283a 	ret
   215b4:	1007883a 	mov	r3,r2
   215b8:	003ff606 	br	21594 <__alt_data_end+0xfffe40d4>
   215bc:	f800283a 	ret
   215c0:	1007883a 	mov	r3,r2
   215c4:	003ff406 	br	21598 <__alt_data_end+0xfffe40d8>
   215c8:	500d883a 	mov	r6,r10
   215cc:	003ff106 	br	21594 <__alt_data_end+0xfffe40d4>

000215d0 <_realloc_r>:
   215d0:	defff604 	addi	sp,sp,-40
   215d4:	dcc00315 	stw	r19,12(sp)
   215d8:	dc400115 	stw	r17,4(sp)
   215dc:	dfc00915 	stw	ra,36(sp)
   215e0:	df000815 	stw	fp,32(sp)
   215e4:	ddc00715 	stw	r23,28(sp)
   215e8:	dd800615 	stw	r22,24(sp)
   215ec:	dd400515 	stw	r21,20(sp)
   215f0:	dd000415 	stw	r20,16(sp)
   215f4:	dc800215 	stw	r18,8(sp)
   215f8:	dc000015 	stw	r16,0(sp)
   215fc:	2827883a 	mov	r19,r5
   21600:	3023883a 	mov	r17,r6
   21604:	2800bf26 	beq	r5,zero,21904 <_realloc_r+0x334>
   21608:	2025883a 	mov	r18,r4
   2160c:	00235700 	call	23570 <__malloc_lock>
   21610:	98ffff17 	ldw	r3,-4(r19)
   21614:	01bfff04 	movi	r6,-4
   21618:	890002c4 	addi	r4,r17,11
   2161c:	01c00584 	movi	r7,22
   21620:	9d7ffe04 	addi	r21,r19,-8
   21624:	19a0703a 	and	r16,r3,r6
   21628:	39003f2e 	bgeu	r7,r4,21728 <_realloc_r+0x158>
   2162c:	053ffe04 	movi	r20,-8
   21630:	2528703a 	and	r20,r4,r20
   21634:	a00f883a 	mov	r7,r20
   21638:	a0008216 	blt	r20,zero,21844 <_realloc_r+0x274>
   2163c:	a4408136 	bltu	r20,r17,21844 <_realloc_r+0x274>
   21640:	81c03c0e 	bge	r16,r7,21734 <_realloc_r+0x164>
   21644:	070000b4 	movhi	fp,2
   21648:	e717bc04 	addi	fp,fp,24304
   2164c:	e1000217 	ldw	r4,8(fp)
   21650:	ac05883a 	add	r2,r21,r16
   21654:	2080bf26 	beq	r4,r2,21954 <_realloc_r+0x384>
   21658:	11000117 	ldw	r4,4(r2)
   2165c:	023fff84 	movi	r8,-2
   21660:	2210703a 	and	r8,r4,r8
   21664:	1211883a 	add	r8,r2,r8
   21668:	41400117 	ldw	r5,4(r8)
   2166c:	2940004c 	andi	r5,r5,1
   21670:	28004a1e 	bne	r5,zero,2179c <_realloc_r+0x1cc>
   21674:	017fff04 	movi	r5,-4
   21678:	2148703a 	and	r4,r4,r5
   2167c:	2409883a 	add	r4,r4,r16
   21680:	21c0ad0e 	bge	r4,r7,21938 <_realloc_r+0x368>
   21684:	18c0004c 	andi	r3,r3,1
   21688:	18007f1e 	bne	r3,zero,21888 <_realloc_r+0x2b8>
   2168c:	9dfffe17 	ldw	r23,-8(r19)
   21690:	adefc83a 	sub	r23,r21,r23
   21694:	bd800117 	ldw	r22,4(r23)
   21698:	b14a703a 	and	r5,r22,r5
   2169c:	216d883a 	add	r22,r4,r5
   216a0:	b1c04516 	blt	r22,r7,217b8 <_realloc_r+0x1e8>
   216a4:	10c00317 	ldw	r3,12(r2)
   216a8:	10800217 	ldw	r2,8(r2)
   216ac:	81bfff04 	addi	r6,r16,-4
   216b0:	bc400204 	addi	r17,r23,8
   216b4:	10c00315 	stw	r3,12(r2)
   216b8:	18800215 	stw	r2,8(r3)
   216bc:	b9400217 	ldw	r5,8(r23)
   216c0:	b8c00317 	ldw	r3,12(r23)
   216c4:	00800904 	movi	r2,36
   216c8:	28c00315 	stw	r3,12(r5)
   216cc:	19400215 	stw	r5,8(r3)
   216d0:	1180ef36 	bltu	r2,r6,21a90 <_realloc_r+0x4c0>
   216d4:	008004c4 	movi	r2,19
   216d8:	1180da2e 	bgeu	r2,r6,21a44 <_realloc_r+0x474>
   216dc:	98800017 	ldw	r2,0(r19)
   216e0:	b8800215 	stw	r2,8(r23)
   216e4:	98800117 	ldw	r2,4(r19)
   216e8:	b8800315 	stw	r2,12(r23)
   216ec:	008006c4 	movi	r2,27
   216f0:	1180fc2e 	bgeu	r2,r6,21ae4 <_realloc_r+0x514>
   216f4:	98800217 	ldw	r2,8(r19)
   216f8:	b8800415 	stw	r2,16(r23)
   216fc:	98800317 	ldw	r2,12(r19)
   21700:	b8800515 	stw	r2,20(r23)
   21704:	00800904 	movi	r2,36
   21708:	3080421e 	bne	r6,r2,21814 <_realloc_r+0x244>
   2170c:	98800417 	ldw	r2,16(r19)
   21710:	9cc00604 	addi	r19,r19,24
   21714:	b8c00804 	addi	r3,r23,32
   21718:	b8800615 	stw	r2,24(r23)
   2171c:	98bfff17 	ldw	r2,-4(r19)
   21720:	b8800715 	stw	r2,28(r23)
   21724:	00003d06 	br	2181c <_realloc_r+0x24c>
   21728:	01c00404 	movi	r7,16
   2172c:	3829883a 	mov	r20,r7
   21730:	003fc206 	br	2163c <__alt_data_end+0xfffe417c>
   21734:	9823883a 	mov	r17,r19
   21738:	850fc83a 	sub	r7,r16,r20
   2173c:	008003c4 	movi	r2,15
   21740:	18c0004c 	andi	r3,r3,1
   21744:	11c04336 	bltu	r2,r7,21854 <_realloc_r+0x284>
   21748:	1c06b03a 	or	r3,r3,r16
   2174c:	a8c00115 	stw	r3,4(r21)
   21750:	ac21883a 	add	r16,r21,r16
   21754:	80c00117 	ldw	r3,4(r16)
   21758:	18c00054 	ori	r3,r3,1
   2175c:	80c00115 	stw	r3,4(r16)
   21760:	9009883a 	mov	r4,r18
   21764:	00235900 	call	23590 <__malloc_unlock>
   21768:	8805883a 	mov	r2,r17
   2176c:	dfc00917 	ldw	ra,36(sp)
   21770:	df000817 	ldw	fp,32(sp)
   21774:	ddc00717 	ldw	r23,28(sp)
   21778:	dd800617 	ldw	r22,24(sp)
   2177c:	dd400517 	ldw	r21,20(sp)
   21780:	dd000417 	ldw	r20,16(sp)
   21784:	dcc00317 	ldw	r19,12(sp)
   21788:	dc800217 	ldw	r18,8(sp)
   2178c:	dc400117 	ldw	r17,4(sp)
   21790:	dc000017 	ldw	r16,0(sp)
   21794:	dec00a04 	addi	sp,sp,40
   21798:	f800283a 	ret
   2179c:	18c0004c 	andi	r3,r3,1
   217a0:	1800391e 	bne	r3,zero,21888 <_realloc_r+0x2b8>
   217a4:	9dfffe17 	ldw	r23,-8(r19)
   217a8:	00bfff04 	movi	r2,-4
   217ac:	adefc83a 	sub	r23,r21,r23
   217b0:	b9400117 	ldw	r5,4(r23)
   217b4:	288a703a 	and	r5,r5,r2
   217b8:	2c2d883a 	add	r22,r5,r16
   217bc:	b1c03216 	blt	r22,r7,21888 <_realloc_r+0x2b8>
   217c0:	b8800317 	ldw	r2,12(r23)
   217c4:	b8c00217 	ldw	r3,8(r23)
   217c8:	81bfff04 	addi	r6,r16,-4
   217cc:	01000904 	movi	r4,36
   217d0:	18800315 	stw	r2,12(r3)
   217d4:	10c00215 	stw	r3,8(r2)
   217d8:	bc400204 	addi	r17,r23,8
   217dc:	2180ac36 	bltu	r4,r6,21a90 <_realloc_r+0x4c0>
   217e0:	008004c4 	movi	r2,19
   217e4:	1180972e 	bgeu	r2,r6,21a44 <_realloc_r+0x474>
   217e8:	98800017 	ldw	r2,0(r19)
   217ec:	b8800215 	stw	r2,8(r23)
   217f0:	98800117 	ldw	r2,4(r19)
   217f4:	b8800315 	stw	r2,12(r23)
   217f8:	008006c4 	movi	r2,27
   217fc:	1180b92e 	bgeu	r2,r6,21ae4 <_realloc_r+0x514>
   21800:	98800217 	ldw	r2,8(r19)
   21804:	b8800415 	stw	r2,16(r23)
   21808:	98800317 	ldw	r2,12(r19)
   2180c:	b8800515 	stw	r2,20(r23)
   21810:	313fbe26 	beq	r6,r4,2170c <__alt_data_end+0xfffe424c>
   21814:	b8c00604 	addi	r3,r23,24
   21818:	9cc00404 	addi	r19,r19,16
   2181c:	98800017 	ldw	r2,0(r19)
   21820:	b021883a 	mov	r16,r22
   21824:	b82b883a 	mov	r21,r23
   21828:	18800015 	stw	r2,0(r3)
   2182c:	98800117 	ldw	r2,4(r19)
   21830:	18800115 	stw	r2,4(r3)
   21834:	98800217 	ldw	r2,8(r19)
   21838:	18800215 	stw	r2,8(r3)
   2183c:	b8c00117 	ldw	r3,4(r23)
   21840:	003fbd06 	br	21738 <__alt_data_end+0xfffe4278>
   21844:	00800304 	movi	r2,12
   21848:	90800015 	stw	r2,0(r18)
   2184c:	0005883a 	mov	r2,zero
   21850:	003fc606 	br	2176c <__alt_data_end+0xfffe42ac>
   21854:	1d06b03a 	or	r3,r3,r20
   21858:	ad0b883a 	add	r5,r21,r20
   2185c:	a8c00115 	stw	r3,4(r21)
   21860:	38800054 	ori	r2,r7,1
   21864:	28800115 	stw	r2,4(r5)
   21868:	29cf883a 	add	r7,r5,r7
   2186c:	38800117 	ldw	r2,4(r7)
   21870:	9009883a 	mov	r4,r18
   21874:	29400204 	addi	r5,r5,8
   21878:	10800054 	ori	r2,r2,1
   2187c:	38800115 	stw	r2,4(r7)
   21880:	00224100 	call	22410 <_free_r>
   21884:	003fb606 	br	21760 <__alt_data_end+0xfffe42a0>
   21888:	880b883a 	mov	r5,r17
   2188c:	9009883a 	mov	r4,r18
   21890:	0020aac0 	call	20aac <_malloc_r>
   21894:	1023883a 	mov	r17,r2
   21898:	1000aa26 	beq	r2,zero,21b44 <_realloc_r+0x574>
   2189c:	98ffff17 	ldw	r3,-4(r19)
   218a0:	113ffe04 	addi	r4,r2,-8
   218a4:	00bfff84 	movi	r2,-2
   218a8:	1884703a 	and	r2,r3,r2
   218ac:	a885883a 	add	r2,r21,r2
   218b0:	20808626 	beq	r4,r2,21acc <_realloc_r+0x4fc>
   218b4:	81bfff04 	addi	r6,r16,-4
   218b8:	00800904 	movi	r2,36
   218bc:	11807036 	bltu	r2,r6,21a80 <_realloc_r+0x4b0>
   218c0:	00c004c4 	movi	r3,19
   218c4:	19805636 	bltu	r3,r6,21a20 <_realloc_r+0x450>
   218c8:	8805883a 	mov	r2,r17
   218cc:	9807883a 	mov	r3,r19
   218d0:	19000017 	ldw	r4,0(r3)
   218d4:	11000015 	stw	r4,0(r2)
   218d8:	19000117 	ldw	r4,4(r3)
   218dc:	11000115 	stw	r4,4(r2)
   218e0:	18c00217 	ldw	r3,8(r3)
   218e4:	10c00215 	stw	r3,8(r2)
   218e8:	980b883a 	mov	r5,r19
   218ec:	9009883a 	mov	r4,r18
   218f0:	00224100 	call	22410 <_free_r>
   218f4:	9009883a 	mov	r4,r18
   218f8:	00235900 	call	23590 <__malloc_unlock>
   218fc:	8805883a 	mov	r2,r17
   21900:	003f9a06 	br	2176c <__alt_data_end+0xfffe42ac>
   21904:	300b883a 	mov	r5,r6
   21908:	dfc00917 	ldw	ra,36(sp)
   2190c:	df000817 	ldw	fp,32(sp)
   21910:	ddc00717 	ldw	r23,28(sp)
   21914:	dd800617 	ldw	r22,24(sp)
   21918:	dd400517 	ldw	r21,20(sp)
   2191c:	dd000417 	ldw	r20,16(sp)
   21920:	dcc00317 	ldw	r19,12(sp)
   21924:	dc800217 	ldw	r18,8(sp)
   21928:	dc400117 	ldw	r17,4(sp)
   2192c:	dc000017 	ldw	r16,0(sp)
   21930:	dec00a04 	addi	sp,sp,40
   21934:	0020aac1 	jmpi	20aac <_malloc_r>
   21938:	11400317 	ldw	r5,12(r2)
   2193c:	10800217 	ldw	r2,8(r2)
   21940:	9823883a 	mov	r17,r19
   21944:	2021883a 	mov	r16,r4
   21948:	11400315 	stw	r5,12(r2)
   2194c:	28800215 	stw	r2,8(r5)
   21950:	003f7906 	br	21738 <__alt_data_end+0xfffe4278>
   21954:	21000117 	ldw	r4,4(r4)
   21958:	00bfff04 	movi	r2,-4
   2195c:	a1800404 	addi	r6,r20,16
   21960:	2088703a 	and	r4,r4,r2
   21964:	2409883a 	add	r4,r4,r16
   21968:	2180380e 	bge	r4,r6,21a4c <_realloc_r+0x47c>
   2196c:	18c0004c 	andi	r3,r3,1
   21970:	183fc51e 	bne	r3,zero,21888 <__alt_data_end+0xfffe43c8>
   21974:	9dfffe17 	ldw	r23,-8(r19)
   21978:	adefc83a 	sub	r23,r21,r23
   2197c:	b9400117 	ldw	r5,4(r23)
   21980:	288a703a 	and	r5,r5,r2
   21984:	216d883a 	add	r22,r4,r5
   21988:	b1bf8b16 	blt	r22,r6,217b8 <__alt_data_end+0xfffe42f8>
   2198c:	b8800317 	ldw	r2,12(r23)
   21990:	b8c00217 	ldw	r3,8(r23)
   21994:	81bfff04 	addi	r6,r16,-4
   21998:	01000904 	movi	r4,36
   2199c:	18800315 	stw	r2,12(r3)
   219a0:	10c00215 	stw	r3,8(r2)
   219a4:	bc400204 	addi	r17,r23,8
   219a8:	21805a36 	bltu	r4,r6,21b14 <_realloc_r+0x544>
   219ac:	008004c4 	movi	r2,19
   219b0:	1180562e 	bgeu	r2,r6,21b0c <_realloc_r+0x53c>
   219b4:	98800017 	ldw	r2,0(r19)
   219b8:	b8800215 	stw	r2,8(r23)
   219bc:	98800117 	ldw	r2,4(r19)
   219c0:	b8800315 	stw	r2,12(r23)
   219c4:	008006c4 	movi	r2,27
   219c8:	11805636 	bltu	r2,r6,21b24 <_realloc_r+0x554>
   219cc:	b8800404 	addi	r2,r23,16
   219d0:	9cc00204 	addi	r19,r19,8
   219d4:	98c00017 	ldw	r3,0(r19)
   219d8:	10c00015 	stw	r3,0(r2)
   219dc:	98c00117 	ldw	r3,4(r19)
   219e0:	10c00115 	stw	r3,4(r2)
   219e4:	98c00217 	ldw	r3,8(r19)
   219e8:	10c00215 	stw	r3,8(r2)
   219ec:	bd07883a 	add	r3,r23,r20
   219f0:	b505c83a 	sub	r2,r22,r20
   219f4:	e0c00215 	stw	r3,8(fp)
   219f8:	10800054 	ori	r2,r2,1
   219fc:	18800115 	stw	r2,4(r3)
   21a00:	b8800117 	ldw	r2,4(r23)
   21a04:	9009883a 	mov	r4,r18
   21a08:	1080004c 	andi	r2,r2,1
   21a0c:	a0a8b03a 	or	r20,r20,r2
   21a10:	bd000115 	stw	r20,4(r23)
   21a14:	00235900 	call	23590 <__malloc_unlock>
   21a18:	8805883a 	mov	r2,r17
   21a1c:	003f5306 	br	2176c <__alt_data_end+0xfffe42ac>
   21a20:	98c00017 	ldw	r3,0(r19)
   21a24:	88c00015 	stw	r3,0(r17)
   21a28:	98c00117 	ldw	r3,4(r19)
   21a2c:	88c00115 	stw	r3,4(r17)
   21a30:	00c006c4 	movi	r3,27
   21a34:	19801d36 	bltu	r3,r6,21aac <_realloc_r+0x4dc>
   21a38:	88800204 	addi	r2,r17,8
   21a3c:	98c00204 	addi	r3,r19,8
   21a40:	003fa306 	br	218d0 <__alt_data_end+0xfffe4410>
   21a44:	8807883a 	mov	r3,r17
   21a48:	003f7406 	br	2181c <__alt_data_end+0xfffe435c>
   21a4c:	ad2b883a 	add	r21,r21,r20
   21a50:	2505c83a 	sub	r2,r4,r20
   21a54:	e5400215 	stw	r21,8(fp)
   21a58:	10800054 	ori	r2,r2,1
   21a5c:	a8800115 	stw	r2,4(r21)
   21a60:	98bfff17 	ldw	r2,-4(r19)
   21a64:	9009883a 	mov	r4,r18
   21a68:	1080004c 	andi	r2,r2,1
   21a6c:	a0a8b03a 	or	r20,r20,r2
   21a70:	9d3fff15 	stw	r20,-4(r19)
   21a74:	00235900 	call	23590 <__malloc_unlock>
   21a78:	9805883a 	mov	r2,r19
   21a7c:	003f3b06 	br	2176c <__alt_data_end+0xfffe42ac>
   21a80:	8809883a 	mov	r4,r17
   21a84:	980b883a 	mov	r5,r19
   21a88:	00214740 	call	21474 <memmove>
   21a8c:	003f9606 	br	218e8 <__alt_data_end+0xfffe4428>
   21a90:	8809883a 	mov	r4,r17
   21a94:	980b883a 	mov	r5,r19
   21a98:	00214740 	call	21474 <memmove>
   21a9c:	b8c00117 	ldw	r3,4(r23)
   21aa0:	b021883a 	mov	r16,r22
   21aa4:	b82b883a 	mov	r21,r23
   21aa8:	003f2306 	br	21738 <__alt_data_end+0xfffe4278>
   21aac:	98c00217 	ldw	r3,8(r19)
   21ab0:	88c00215 	stw	r3,8(r17)
   21ab4:	98c00317 	ldw	r3,12(r19)
   21ab8:	88c00315 	stw	r3,12(r17)
   21abc:	30800c26 	beq	r6,r2,21af0 <_realloc_r+0x520>
   21ac0:	88800404 	addi	r2,r17,16
   21ac4:	98c00404 	addi	r3,r19,16
   21ac8:	003f8106 	br	218d0 <__alt_data_end+0xfffe4410>
   21acc:	893fff17 	ldw	r4,-4(r17)
   21ad0:	00bfff04 	movi	r2,-4
   21ad4:	9823883a 	mov	r17,r19
   21ad8:	2084703a 	and	r2,r4,r2
   21adc:	80a1883a 	add	r16,r16,r2
   21ae0:	003f1506 	br	21738 <__alt_data_end+0xfffe4278>
   21ae4:	b8c00404 	addi	r3,r23,16
   21ae8:	9cc00204 	addi	r19,r19,8
   21aec:	003f4b06 	br	2181c <__alt_data_end+0xfffe435c>
   21af0:	99000417 	ldw	r4,16(r19)
   21af4:	88800604 	addi	r2,r17,24
   21af8:	98c00604 	addi	r3,r19,24
   21afc:	89000415 	stw	r4,16(r17)
   21b00:	99000517 	ldw	r4,20(r19)
   21b04:	89000515 	stw	r4,20(r17)
   21b08:	003f7106 	br	218d0 <__alt_data_end+0xfffe4410>
   21b0c:	8805883a 	mov	r2,r17
   21b10:	003fb006 	br	219d4 <__alt_data_end+0xfffe4514>
   21b14:	8809883a 	mov	r4,r17
   21b18:	980b883a 	mov	r5,r19
   21b1c:	00214740 	call	21474 <memmove>
   21b20:	003fb206 	br	219ec <__alt_data_end+0xfffe452c>
   21b24:	98800217 	ldw	r2,8(r19)
   21b28:	b8800415 	stw	r2,16(r23)
   21b2c:	98800317 	ldw	r2,12(r19)
   21b30:	b8800515 	stw	r2,20(r23)
   21b34:	31000726 	beq	r6,r4,21b54 <_realloc_r+0x584>
   21b38:	b8800604 	addi	r2,r23,24
   21b3c:	9cc00404 	addi	r19,r19,16
   21b40:	003fa406 	br	219d4 <__alt_data_end+0xfffe4514>
   21b44:	9009883a 	mov	r4,r18
   21b48:	00235900 	call	23590 <__malloc_unlock>
   21b4c:	0005883a 	mov	r2,zero
   21b50:	003f0606 	br	2176c <__alt_data_end+0xfffe42ac>
   21b54:	98c00417 	ldw	r3,16(r19)
   21b58:	9cc00604 	addi	r19,r19,24
   21b5c:	b8800804 	addi	r2,r23,32
   21b60:	b8c00615 	stw	r3,24(r23)
   21b64:	98ffff17 	ldw	r3,-4(r19)
   21b68:	b8c00715 	stw	r3,28(r23)
   21b6c:	003f9906 	br	219d4 <__alt_data_end+0xfffe4514>

00021b70 <_sbrk_r>:
   21b70:	defffd04 	addi	sp,sp,-12
   21b74:	dc000015 	stw	r16,0(sp)
   21b78:	040000f4 	movhi	r16,3
   21b7c:	dc400115 	stw	r17,4(sp)
   21b80:	8423f204 	addi	r16,r16,-28728
   21b84:	2023883a 	mov	r17,r4
   21b88:	2809883a 	mov	r4,r5
   21b8c:	dfc00215 	stw	ra,8(sp)
   21b90:	80000015 	stw	zero,0(r16)
   21b94:	002375c0 	call	2375c <sbrk>
   21b98:	00ffffc4 	movi	r3,-1
   21b9c:	10c00526 	beq	r2,r3,21bb4 <_sbrk_r+0x44>
   21ba0:	dfc00217 	ldw	ra,8(sp)
   21ba4:	dc400117 	ldw	r17,4(sp)
   21ba8:	dc000017 	ldw	r16,0(sp)
   21bac:	dec00304 	addi	sp,sp,12
   21bb0:	f800283a 	ret
   21bb4:	80c00017 	ldw	r3,0(r16)
   21bb8:	183ff926 	beq	r3,zero,21ba0 <__alt_data_end+0xfffe46e0>
   21bbc:	88c00015 	stw	r3,0(r17)
   21bc0:	003ff706 	br	21ba0 <__alt_data_end+0xfffe46e0>

00021bc4 <__swsetup_r>:
   21bc4:	008000b4 	movhi	r2,2
   21bc8:	defffd04 	addi	sp,sp,-12
   21bcc:	109d4104 	addi	r2,r2,29956
   21bd0:	dc400115 	stw	r17,4(sp)
   21bd4:	2023883a 	mov	r17,r4
   21bd8:	11000017 	ldw	r4,0(r2)
   21bdc:	dc000015 	stw	r16,0(sp)
   21be0:	dfc00215 	stw	ra,8(sp)
   21be4:	2821883a 	mov	r16,r5
   21be8:	20000226 	beq	r4,zero,21bf4 <__swsetup_r+0x30>
   21bec:	20c00e17 	ldw	r3,56(r4)
   21bf0:	18002e26 	beq	r3,zero,21cac <__swsetup_r+0xe8>
   21bf4:	8080030b 	ldhu	r2,12(r16)
   21bf8:	10c0020c 	andi	r3,r2,8
   21bfc:	100d883a 	mov	r6,r2
   21c00:	18000f26 	beq	r3,zero,21c40 <__swsetup_r+0x7c>
   21c04:	80c00417 	ldw	r3,16(r16)
   21c08:	18001526 	beq	r3,zero,21c60 <__swsetup_r+0x9c>
   21c0c:	1100004c 	andi	r4,r2,1
   21c10:	20001c1e 	bne	r4,zero,21c84 <__swsetup_r+0xc0>
   21c14:	1080008c 	andi	r2,r2,2
   21c18:	1000261e 	bne	r2,zero,21cb4 <__swsetup_r+0xf0>
   21c1c:	80800517 	ldw	r2,20(r16)
   21c20:	80800215 	stw	r2,8(r16)
   21c24:	18001c26 	beq	r3,zero,21c98 <__swsetup_r+0xd4>
   21c28:	0005883a 	mov	r2,zero
   21c2c:	dfc00217 	ldw	ra,8(sp)
   21c30:	dc400117 	ldw	r17,4(sp)
   21c34:	dc000017 	ldw	r16,0(sp)
   21c38:	dec00304 	addi	sp,sp,12
   21c3c:	f800283a 	ret
   21c40:	3080040c 	andi	r2,r6,16
   21c44:	10001726 	beq	r2,zero,21ca4 <__swsetup_r+0xe0>
   21c48:	3080010c 	andi	r2,r6,4
   21c4c:	10001b1e 	bne	r2,zero,21cbc <__swsetup_r+0xf8>
   21c50:	80c00417 	ldw	r3,16(r16)
   21c54:	30800214 	ori	r2,r6,8
   21c58:	8080030d 	sth	r2,12(r16)
   21c5c:	183feb1e 	bne	r3,zero,21c0c <__alt_data_end+0xfffe474c>
   21c60:	1140a00c 	andi	r5,r2,640
   21c64:	01008004 	movi	r4,512
   21c68:	293fe826 	beq	r5,r4,21c0c <__alt_data_end+0xfffe474c>
   21c6c:	8809883a 	mov	r4,r17
   21c70:	800b883a 	mov	r5,r16
   21c74:	00228700 	call	22870 <__smakebuf_r>
   21c78:	8080030b 	ldhu	r2,12(r16)
   21c7c:	80c00417 	ldw	r3,16(r16)
   21c80:	003fe206 	br	21c0c <__alt_data_end+0xfffe474c>
   21c84:	80800517 	ldw	r2,20(r16)
   21c88:	80000215 	stw	zero,8(r16)
   21c8c:	0085c83a 	sub	r2,zero,r2
   21c90:	80800615 	stw	r2,24(r16)
   21c94:	183fe41e 	bne	r3,zero,21c28 <__alt_data_end+0xfffe4768>
   21c98:	8080030b 	ldhu	r2,12(r16)
   21c9c:	1080200c 	andi	r2,r2,128
   21ca0:	103fe226 	beq	r2,zero,21c2c <__alt_data_end+0xfffe476c>
   21ca4:	00bfffc4 	movi	r2,-1
   21ca8:	003fe006 	br	21c2c <__alt_data_end+0xfffe476c>
   21cac:	002229c0 	call	2229c <__sinit>
   21cb0:	003fd006 	br	21bf4 <__alt_data_end+0xfffe4734>
   21cb4:	0005883a 	mov	r2,zero
   21cb8:	003fd906 	br	21c20 <__alt_data_end+0xfffe4760>
   21cbc:	81400c17 	ldw	r5,48(r16)
   21cc0:	28000626 	beq	r5,zero,21cdc <__swsetup_r+0x118>
   21cc4:	80801004 	addi	r2,r16,64
   21cc8:	28800326 	beq	r5,r2,21cd8 <__swsetup_r+0x114>
   21ccc:	8809883a 	mov	r4,r17
   21cd0:	00224100 	call	22410 <_free_r>
   21cd4:	8180030b 	ldhu	r6,12(r16)
   21cd8:	80000c15 	stw	zero,48(r16)
   21cdc:	80c00417 	ldw	r3,16(r16)
   21ce0:	00bff6c4 	movi	r2,-37
   21ce4:	118c703a 	and	r6,r2,r6
   21ce8:	80000115 	stw	zero,4(r16)
   21cec:	80c00015 	stw	r3,0(r16)
   21cf0:	003fd806 	br	21c54 <__alt_data_end+0xfffe4794>

00021cf4 <_fflush_r>:
   21cf4:	defffb04 	addi	sp,sp,-20
   21cf8:	dcc00315 	stw	r19,12(sp)
   21cfc:	dc000015 	stw	r16,0(sp)
   21d00:	dfc00415 	stw	ra,16(sp)
   21d04:	dc800215 	stw	r18,8(sp)
   21d08:	dc400115 	stw	r17,4(sp)
   21d0c:	2027883a 	mov	r19,r4
   21d10:	2821883a 	mov	r16,r5
   21d14:	20000226 	beq	r4,zero,21d20 <_fflush_r+0x2c>
   21d18:	20800e17 	ldw	r2,56(r4)
   21d1c:	10005326 	beq	r2,zero,21e6c <_fflush_r+0x178>
   21d20:	8080030b 	ldhu	r2,12(r16)
   21d24:	10ffffcc 	andi	r3,r2,65535
   21d28:	18e0001c 	xori	r3,r3,32768
   21d2c:	18e00004 	addi	r3,r3,-32768
   21d30:	18002c26 	beq	r3,zero,21de4 <_fflush_r+0xf0>
   21d34:	10c0020c 	andi	r3,r2,8
   21d38:	1800321e 	bne	r3,zero,21e04 <_fflush_r+0x110>
   21d3c:	80c00117 	ldw	r3,4(r16)
   21d40:	10820014 	ori	r2,r2,2048
   21d44:	8080030d 	sth	r2,12(r16)
   21d48:	00c0570e 	bge	zero,r3,21ea8 <_fflush_r+0x1b4>
   21d4c:	82000a17 	ldw	r8,40(r16)
   21d50:	40002426 	beq	r8,zero,21de4 <_fflush_r+0xf0>
   21d54:	9c400017 	ldw	r17,0(r19)
   21d58:	10c4000c 	andi	r3,r2,4096
   21d5c:	98000015 	stw	zero,0(r19)
   21d60:	18004626 	beq	r3,zero,21e7c <_fflush_r+0x188>
   21d64:	81801417 	ldw	r6,80(r16)
   21d68:	10c0010c 	andi	r3,r2,4
   21d6c:	18000626 	beq	r3,zero,21d88 <_fflush_r+0x94>
   21d70:	80c00117 	ldw	r3,4(r16)
   21d74:	80800c17 	ldw	r2,48(r16)
   21d78:	30cdc83a 	sub	r6,r6,r3
   21d7c:	10000226 	beq	r2,zero,21d88 <_fflush_r+0x94>
   21d80:	80800f17 	ldw	r2,60(r16)
   21d84:	308dc83a 	sub	r6,r6,r2
   21d88:	81400717 	ldw	r5,28(r16)
   21d8c:	9809883a 	mov	r4,r19
   21d90:	000f883a 	mov	r7,zero
   21d94:	403ee83a 	callr	r8
   21d98:	00ffffc4 	movi	r3,-1
   21d9c:	10c04526 	beq	r2,r3,21eb4 <_fflush_r+0x1c0>
   21da0:	80c0030b 	ldhu	r3,12(r16)
   21da4:	81000417 	ldw	r4,16(r16)
   21da8:	80000115 	stw	zero,4(r16)
   21dac:	197dffcc 	andi	r5,r3,63487
   21db0:	8140030d 	sth	r5,12(r16)
   21db4:	81000015 	stw	r4,0(r16)
   21db8:	18c4000c 	andi	r3,r3,4096
   21dbc:	18000126 	beq	r3,zero,21dc4 <_fflush_r+0xd0>
   21dc0:	80801415 	stw	r2,80(r16)
   21dc4:	81400c17 	ldw	r5,48(r16)
   21dc8:	9c400015 	stw	r17,0(r19)
   21dcc:	28000526 	beq	r5,zero,21de4 <_fflush_r+0xf0>
   21dd0:	80801004 	addi	r2,r16,64
   21dd4:	28800226 	beq	r5,r2,21de0 <_fflush_r+0xec>
   21dd8:	9809883a 	mov	r4,r19
   21ddc:	00224100 	call	22410 <_free_r>
   21de0:	80000c15 	stw	zero,48(r16)
   21de4:	0005883a 	mov	r2,zero
   21de8:	dfc00417 	ldw	ra,16(sp)
   21dec:	dcc00317 	ldw	r19,12(sp)
   21df0:	dc800217 	ldw	r18,8(sp)
   21df4:	dc400117 	ldw	r17,4(sp)
   21df8:	dc000017 	ldw	r16,0(sp)
   21dfc:	dec00504 	addi	sp,sp,20
   21e00:	f800283a 	ret
   21e04:	84800417 	ldw	r18,16(r16)
   21e08:	903ff626 	beq	r18,zero,21de4 <__alt_data_end+0xfffe4924>
   21e0c:	84400017 	ldw	r17,0(r16)
   21e10:	108000cc 	andi	r2,r2,3
   21e14:	84800015 	stw	r18,0(r16)
   21e18:	8ca3c83a 	sub	r17,r17,r18
   21e1c:	10001526 	beq	r2,zero,21e74 <_fflush_r+0x180>
   21e20:	0005883a 	mov	r2,zero
   21e24:	80800215 	stw	r2,8(r16)
   21e28:	04400316 	blt	zero,r17,21e38 <_fflush_r+0x144>
   21e2c:	003fed06 	br	21de4 <__alt_data_end+0xfffe4924>
   21e30:	90a5883a 	add	r18,r18,r2
   21e34:	047feb0e 	bge	zero,r17,21de4 <__alt_data_end+0xfffe4924>
   21e38:	80800917 	ldw	r2,36(r16)
   21e3c:	81400717 	ldw	r5,28(r16)
   21e40:	880f883a 	mov	r7,r17
   21e44:	900d883a 	mov	r6,r18
   21e48:	9809883a 	mov	r4,r19
   21e4c:	103ee83a 	callr	r2
   21e50:	88a3c83a 	sub	r17,r17,r2
   21e54:	00bff616 	blt	zero,r2,21e30 <__alt_data_end+0xfffe4970>
   21e58:	80c0030b 	ldhu	r3,12(r16)
   21e5c:	00bfffc4 	movi	r2,-1
   21e60:	18c01014 	ori	r3,r3,64
   21e64:	80c0030d 	sth	r3,12(r16)
   21e68:	003fdf06 	br	21de8 <__alt_data_end+0xfffe4928>
   21e6c:	002229c0 	call	2229c <__sinit>
   21e70:	003fab06 	br	21d20 <__alt_data_end+0xfffe4860>
   21e74:	80800517 	ldw	r2,20(r16)
   21e78:	003fea06 	br	21e24 <__alt_data_end+0xfffe4964>
   21e7c:	81400717 	ldw	r5,28(r16)
   21e80:	000d883a 	mov	r6,zero
   21e84:	9809883a 	mov	r4,r19
   21e88:	01c00044 	movi	r7,1
   21e8c:	403ee83a 	callr	r8
   21e90:	100d883a 	mov	r6,r2
   21e94:	00bfffc4 	movi	r2,-1
   21e98:	30801326 	beq	r6,r2,21ee8 <_fflush_r+0x1f4>
   21e9c:	8080030b 	ldhu	r2,12(r16)
   21ea0:	82000a17 	ldw	r8,40(r16)
   21ea4:	003fb006 	br	21d68 <__alt_data_end+0xfffe48a8>
   21ea8:	80c00f17 	ldw	r3,60(r16)
   21eac:	00ffa716 	blt	zero,r3,21d4c <__alt_data_end+0xfffe488c>
   21eb0:	003fcc06 	br	21de4 <__alt_data_end+0xfffe4924>
   21eb4:	98c00017 	ldw	r3,0(r19)
   21eb8:	183fb926 	beq	r3,zero,21da0 <__alt_data_end+0xfffe48e0>
   21ebc:	01000744 	movi	r4,29
   21ec0:	19000226 	beq	r3,r4,21ecc <_fflush_r+0x1d8>
   21ec4:	01000584 	movi	r4,22
   21ec8:	1900101e 	bne	r3,r4,21f0c <_fflush_r+0x218>
   21ecc:	8080030b 	ldhu	r2,12(r16)
   21ed0:	80c00417 	ldw	r3,16(r16)
   21ed4:	80000115 	stw	zero,4(r16)
   21ed8:	10bdffcc 	andi	r2,r2,63487
   21edc:	8080030d 	sth	r2,12(r16)
   21ee0:	80c00015 	stw	r3,0(r16)
   21ee4:	003fb706 	br	21dc4 <__alt_data_end+0xfffe4904>
   21ee8:	98800017 	ldw	r2,0(r19)
   21eec:	103feb26 	beq	r2,zero,21e9c <__alt_data_end+0xfffe49dc>
   21ef0:	00c00744 	movi	r3,29
   21ef4:	10c00226 	beq	r2,r3,21f00 <_fflush_r+0x20c>
   21ef8:	00c00584 	movi	r3,22
   21efc:	10ffd61e 	bne	r2,r3,21e58 <__alt_data_end+0xfffe4998>
   21f00:	9c400015 	stw	r17,0(r19)
   21f04:	0005883a 	mov	r2,zero
   21f08:	003fb706 	br	21de8 <__alt_data_end+0xfffe4928>
   21f0c:	80c0030b 	ldhu	r3,12(r16)
   21f10:	18c01014 	ori	r3,r3,64
   21f14:	80c0030d 	sth	r3,12(r16)
   21f18:	003fb306 	br	21de8 <__alt_data_end+0xfffe4928>

00021f1c <fflush>:
   21f1c:	20000526 	beq	r4,zero,21f34 <fflush+0x18>
   21f20:	008000b4 	movhi	r2,2
   21f24:	109d4104 	addi	r2,r2,29956
   21f28:	200b883a 	mov	r5,r4
   21f2c:	11000017 	ldw	r4,0(r2)
   21f30:	0021cf41 	jmpi	21cf4 <_fflush_r>
   21f34:	008000b4 	movhi	r2,2
   21f38:	109d4004 	addi	r2,r2,29952
   21f3c:	11000017 	ldw	r4,0(r2)
   21f40:	014000b4 	movhi	r5,2
   21f44:	29473d04 	addi	r5,r5,7412
   21f48:	00227b81 	jmpi	227b8 <_fwalk_reent>

00021f4c <__fp_lock>:
   21f4c:	0005883a 	mov	r2,zero
   21f50:	f800283a 	ret

00021f54 <__fp_unlock>:
   21f54:	0005883a 	mov	r2,zero
   21f58:	f800283a 	ret

00021f5c <_cleanup_r>:
   21f5c:	014000b4 	movhi	r5,2
   21f60:	294b8e04 	addi	r5,r5,11832
   21f64:	00227001 	jmpi	22700 <_fwalk>

00021f68 <__sinit.part.1>:
   21f68:	defff604 	addi	sp,sp,-40
   21f6c:	00c000b4 	movhi	r3,2
   21f70:	dfc00915 	stw	ra,36(sp)
   21f74:	df000815 	stw	fp,32(sp)
   21f78:	ddc00715 	stw	r23,28(sp)
   21f7c:	dd800615 	stw	r22,24(sp)
   21f80:	dd400515 	stw	r21,20(sp)
   21f84:	dd000415 	stw	r20,16(sp)
   21f88:	dcc00315 	stw	r19,12(sp)
   21f8c:	dc800215 	stw	r18,8(sp)
   21f90:	dc400115 	stw	r17,4(sp)
   21f94:	dc000015 	stw	r16,0(sp)
   21f98:	18c7d704 	addi	r3,r3,8028
   21f9c:	24000117 	ldw	r16,4(r4)
   21fa0:	20c00f15 	stw	r3,60(r4)
   21fa4:	07000044 	movi	fp,1
   21fa8:	00c000c4 	movi	r3,3
   21fac:	2080bb04 	addi	r2,r4,748
   21fb0:	20c0b915 	stw	r3,740(r4)
   21fb4:	27000e15 	stw	fp,56(r4)
   21fb8:	2080ba15 	stw	r2,744(r4)
   21fbc:	2000b815 	stw	zero,736(r4)
   21fc0:	05c00204 	movi	r23,8
   21fc4:	00800104 	movi	r2,4
   21fc8:	2025883a 	mov	r18,r4
   21fcc:	b80d883a 	mov	r6,r23
   21fd0:	81001704 	addi	r4,r16,92
   21fd4:	000b883a 	mov	r5,zero
   21fd8:	80000015 	stw	zero,0(r16)
   21fdc:	80000115 	stw	zero,4(r16)
   21fe0:	80000215 	stw	zero,8(r16)
   21fe4:	8080030d 	sth	r2,12(r16)
   21fe8:	80001915 	stw	zero,100(r16)
   21fec:	8000038d 	sth	zero,14(r16)
   21ff0:	80000415 	stw	zero,16(r16)
   21ff4:	80000515 	stw	zero,20(r16)
   21ff8:	80000615 	stw	zero,24(r16)
   21ffc:	0022a280 	call	22a28 <memset>
   22000:	058000b4 	movhi	r22,2
   22004:	94400217 	ldw	r17,8(r18)
   22008:	054000b4 	movhi	r21,2
   2200c:	050000b4 	movhi	r20,2
   22010:	04c000b4 	movhi	r19,2
   22014:	b58ad304 	addi	r22,r22,11084
   22018:	ad4aea04 	addi	r21,r21,11176
   2201c:	a50b0904 	addi	r20,r20,11300
   22020:	9ccb2004 	addi	r19,r19,11392
   22024:	85800815 	stw	r22,32(r16)
   22028:	85400915 	stw	r21,36(r16)
   2202c:	85000a15 	stw	r20,40(r16)
   22030:	84c00b15 	stw	r19,44(r16)
   22034:	84000715 	stw	r16,28(r16)
   22038:	00800284 	movi	r2,10
   2203c:	89001704 	addi	r4,r17,92
   22040:	b80d883a 	mov	r6,r23
   22044:	000b883a 	mov	r5,zero
   22048:	88000015 	stw	zero,0(r17)
   2204c:	88000115 	stw	zero,4(r17)
   22050:	88000215 	stw	zero,8(r17)
   22054:	8880030d 	sth	r2,12(r17)
   22058:	88001915 	stw	zero,100(r17)
   2205c:	8f00038d 	sth	fp,14(r17)
   22060:	88000415 	stw	zero,16(r17)
   22064:	88000515 	stw	zero,20(r17)
   22068:	88000615 	stw	zero,24(r17)
   2206c:	0022a280 	call	22a28 <memset>
   22070:	94000317 	ldw	r16,12(r18)
   22074:	00800484 	movi	r2,18
   22078:	8c400715 	stw	r17,28(r17)
   2207c:	8d800815 	stw	r22,32(r17)
   22080:	8d400915 	stw	r21,36(r17)
   22084:	8d000a15 	stw	r20,40(r17)
   22088:	8cc00b15 	stw	r19,44(r17)
   2208c:	8080030d 	sth	r2,12(r16)
   22090:	00800084 	movi	r2,2
   22094:	80000015 	stw	zero,0(r16)
   22098:	80000115 	stw	zero,4(r16)
   2209c:	80000215 	stw	zero,8(r16)
   220a0:	80001915 	stw	zero,100(r16)
   220a4:	8080038d 	sth	r2,14(r16)
   220a8:	80000415 	stw	zero,16(r16)
   220ac:	80000515 	stw	zero,20(r16)
   220b0:	80000615 	stw	zero,24(r16)
   220b4:	81001704 	addi	r4,r16,92
   220b8:	000b883a 	mov	r5,zero
   220bc:	b80d883a 	mov	r6,r23
   220c0:	0022a280 	call	22a28 <memset>
   220c4:	84000715 	stw	r16,28(r16)
   220c8:	85800815 	stw	r22,32(r16)
   220cc:	85400915 	stw	r21,36(r16)
   220d0:	85000a15 	stw	r20,40(r16)
   220d4:	84c00b15 	stw	r19,44(r16)
   220d8:	dfc00917 	ldw	ra,36(sp)
   220dc:	df000817 	ldw	fp,32(sp)
   220e0:	ddc00717 	ldw	r23,28(sp)
   220e4:	dd800617 	ldw	r22,24(sp)
   220e8:	dd400517 	ldw	r21,20(sp)
   220ec:	dd000417 	ldw	r20,16(sp)
   220f0:	dcc00317 	ldw	r19,12(sp)
   220f4:	dc800217 	ldw	r18,8(sp)
   220f8:	dc400117 	ldw	r17,4(sp)
   220fc:	dc000017 	ldw	r16,0(sp)
   22100:	dec00a04 	addi	sp,sp,40
   22104:	f800283a 	ret

00022108 <__sfmoreglue>:
   22108:	defffc04 	addi	sp,sp,-16
   2210c:	dc400115 	stw	r17,4(sp)
   22110:	2c401a24 	muli	r17,r5,104
   22114:	dc800215 	stw	r18,8(sp)
   22118:	2825883a 	mov	r18,r5
   2211c:	89400304 	addi	r5,r17,12
   22120:	dc000015 	stw	r16,0(sp)
   22124:	dfc00315 	stw	ra,12(sp)
   22128:	0020aac0 	call	20aac <_malloc_r>
   2212c:	1021883a 	mov	r16,r2
   22130:	10000726 	beq	r2,zero,22150 <__sfmoreglue+0x48>
   22134:	11000304 	addi	r4,r2,12
   22138:	10000015 	stw	zero,0(r2)
   2213c:	14800115 	stw	r18,4(r2)
   22140:	11000215 	stw	r4,8(r2)
   22144:	000b883a 	mov	r5,zero
   22148:	880d883a 	mov	r6,r17
   2214c:	0022a280 	call	22a28 <memset>
   22150:	8005883a 	mov	r2,r16
   22154:	dfc00317 	ldw	ra,12(sp)
   22158:	dc800217 	ldw	r18,8(sp)
   2215c:	dc400117 	ldw	r17,4(sp)
   22160:	dc000017 	ldw	r16,0(sp)
   22164:	dec00404 	addi	sp,sp,16
   22168:	f800283a 	ret

0002216c <__sfp>:
   2216c:	008000b4 	movhi	r2,2
   22170:	defffb04 	addi	sp,sp,-20
   22174:	109d4004 	addi	r2,r2,29952
   22178:	dc800215 	stw	r18,8(sp)
   2217c:	14800017 	ldw	r18,0(r2)
   22180:	dcc00315 	stw	r19,12(sp)
   22184:	dfc00415 	stw	ra,16(sp)
   22188:	90800e17 	ldw	r2,56(r18)
   2218c:	dc400115 	stw	r17,4(sp)
   22190:	dc000015 	stw	r16,0(sp)
   22194:	2027883a 	mov	r19,r4
   22198:	1000021e 	bne	r2,zero,221a4 <__sfp+0x38>
   2219c:	9009883a 	mov	r4,r18
   221a0:	0021f680 	call	21f68 <__sinit.part.1>
   221a4:	9480b804 	addi	r18,r18,736
   221a8:	047fffc4 	movi	r17,-1
   221ac:	91400117 	ldw	r5,4(r18)
   221b0:	94000217 	ldw	r16,8(r18)
   221b4:	297fffc4 	addi	r5,r5,-1
   221b8:	28000a16 	blt	r5,zero,221e4 <__sfp+0x78>
   221bc:	8080030f 	ldh	r2,12(r16)
   221c0:	10000c26 	beq	r2,zero,221f4 <__sfp+0x88>
   221c4:	80c01d04 	addi	r3,r16,116
   221c8:	00000206 	br	221d4 <__sfp+0x68>
   221cc:	18bfe60f 	ldh	r2,-104(r3)
   221d0:	10000826 	beq	r2,zero,221f4 <__sfp+0x88>
   221d4:	297fffc4 	addi	r5,r5,-1
   221d8:	1c3ffd04 	addi	r16,r3,-12
   221dc:	18c01a04 	addi	r3,r3,104
   221e0:	2c7ffa1e 	bne	r5,r17,221cc <__alt_data_end+0xfffe4d0c>
   221e4:	90800017 	ldw	r2,0(r18)
   221e8:	10001d26 	beq	r2,zero,22260 <__sfp+0xf4>
   221ec:	1025883a 	mov	r18,r2
   221f0:	003fee06 	br	221ac <__alt_data_end+0xfffe4cec>
   221f4:	00bfffc4 	movi	r2,-1
   221f8:	8080038d 	sth	r2,14(r16)
   221fc:	00800044 	movi	r2,1
   22200:	8080030d 	sth	r2,12(r16)
   22204:	80001915 	stw	zero,100(r16)
   22208:	80000015 	stw	zero,0(r16)
   2220c:	80000215 	stw	zero,8(r16)
   22210:	80000115 	stw	zero,4(r16)
   22214:	80000415 	stw	zero,16(r16)
   22218:	80000515 	stw	zero,20(r16)
   2221c:	80000615 	stw	zero,24(r16)
   22220:	81001704 	addi	r4,r16,92
   22224:	000b883a 	mov	r5,zero
   22228:	01800204 	movi	r6,8
   2222c:	0022a280 	call	22a28 <memset>
   22230:	8005883a 	mov	r2,r16
   22234:	80000c15 	stw	zero,48(r16)
   22238:	80000d15 	stw	zero,52(r16)
   2223c:	80001115 	stw	zero,68(r16)
   22240:	80001215 	stw	zero,72(r16)
   22244:	dfc00417 	ldw	ra,16(sp)
   22248:	dcc00317 	ldw	r19,12(sp)
   2224c:	dc800217 	ldw	r18,8(sp)
   22250:	dc400117 	ldw	r17,4(sp)
   22254:	dc000017 	ldw	r16,0(sp)
   22258:	dec00504 	addi	sp,sp,20
   2225c:	f800283a 	ret
   22260:	9809883a 	mov	r4,r19
   22264:	01400104 	movi	r5,4
   22268:	00221080 	call	22108 <__sfmoreglue>
   2226c:	90800015 	stw	r2,0(r18)
   22270:	103fde1e 	bne	r2,zero,221ec <__alt_data_end+0xfffe4d2c>
   22274:	00800304 	movi	r2,12
   22278:	98800015 	stw	r2,0(r19)
   2227c:	0005883a 	mov	r2,zero
   22280:	003ff006 	br	22244 <__alt_data_end+0xfffe4d84>

00022284 <_cleanup>:
   22284:	008000b4 	movhi	r2,2
   22288:	109d4004 	addi	r2,r2,29952
   2228c:	11000017 	ldw	r4,0(r2)
   22290:	014000b4 	movhi	r5,2
   22294:	294b8e04 	addi	r5,r5,11832
   22298:	00227001 	jmpi	22700 <_fwalk>

0002229c <__sinit>:
   2229c:	20800e17 	ldw	r2,56(r4)
   222a0:	10000126 	beq	r2,zero,222a8 <__sinit+0xc>
   222a4:	f800283a 	ret
   222a8:	0021f681 	jmpi	21f68 <__sinit.part.1>

000222ac <__sfp_lock_acquire>:
   222ac:	f800283a 	ret

000222b0 <__sfp_lock_release>:
   222b0:	f800283a 	ret

000222b4 <__sinit_lock_acquire>:
   222b4:	f800283a 	ret

000222b8 <__sinit_lock_release>:
   222b8:	f800283a 	ret

000222bc <__fp_lock_all>:
   222bc:	008000b4 	movhi	r2,2
   222c0:	109d4104 	addi	r2,r2,29956
   222c4:	11000017 	ldw	r4,0(r2)
   222c8:	014000b4 	movhi	r5,2
   222cc:	2947d304 	addi	r5,r5,8012
   222d0:	00227001 	jmpi	22700 <_fwalk>

000222d4 <__fp_unlock_all>:
   222d4:	008000b4 	movhi	r2,2
   222d8:	109d4104 	addi	r2,r2,29956
   222dc:	11000017 	ldw	r4,0(r2)
   222e0:	014000b4 	movhi	r5,2
   222e4:	2947d504 	addi	r5,r5,8020
   222e8:	00227001 	jmpi	22700 <_fwalk>

000222ec <_malloc_trim_r>:
   222ec:	defffb04 	addi	sp,sp,-20
   222f0:	dcc00315 	stw	r19,12(sp)
   222f4:	04c000b4 	movhi	r19,2
   222f8:	dc800215 	stw	r18,8(sp)
   222fc:	dc400115 	stw	r17,4(sp)
   22300:	dc000015 	stw	r16,0(sp)
   22304:	dfc00415 	stw	ra,16(sp)
   22308:	2821883a 	mov	r16,r5
   2230c:	9cd7bc04 	addi	r19,r19,24304
   22310:	2025883a 	mov	r18,r4
   22314:	00235700 	call	23570 <__malloc_lock>
   22318:	98800217 	ldw	r2,8(r19)
   2231c:	14400117 	ldw	r17,4(r2)
   22320:	00bfff04 	movi	r2,-4
   22324:	88a2703a 	and	r17,r17,r2
   22328:	8c21c83a 	sub	r16,r17,r16
   2232c:	8403fbc4 	addi	r16,r16,4079
   22330:	8020d33a 	srli	r16,r16,12
   22334:	0083ffc4 	movi	r2,4095
   22338:	843fffc4 	addi	r16,r16,-1
   2233c:	8020933a 	slli	r16,r16,12
   22340:	1400060e 	bge	r2,r16,2235c <_malloc_trim_r+0x70>
   22344:	9009883a 	mov	r4,r18
   22348:	000b883a 	mov	r5,zero
   2234c:	0021b700 	call	21b70 <_sbrk_r>
   22350:	98c00217 	ldw	r3,8(r19)
   22354:	1c47883a 	add	r3,r3,r17
   22358:	10c00a26 	beq	r2,r3,22384 <_malloc_trim_r+0x98>
   2235c:	9009883a 	mov	r4,r18
   22360:	00235900 	call	23590 <__malloc_unlock>
   22364:	0005883a 	mov	r2,zero
   22368:	dfc00417 	ldw	ra,16(sp)
   2236c:	dcc00317 	ldw	r19,12(sp)
   22370:	dc800217 	ldw	r18,8(sp)
   22374:	dc400117 	ldw	r17,4(sp)
   22378:	dc000017 	ldw	r16,0(sp)
   2237c:	dec00504 	addi	sp,sp,20
   22380:	f800283a 	ret
   22384:	9009883a 	mov	r4,r18
   22388:	040bc83a 	sub	r5,zero,r16
   2238c:	0021b700 	call	21b70 <_sbrk_r>
   22390:	00ffffc4 	movi	r3,-1
   22394:	10c00d26 	beq	r2,r3,223cc <_malloc_trim_r+0xe0>
   22398:	00c000f4 	movhi	r3,3
   2239c:	18e3f904 	addi	r3,r3,-28700
   223a0:	18800017 	ldw	r2,0(r3)
   223a4:	99000217 	ldw	r4,8(r19)
   223a8:	8c23c83a 	sub	r17,r17,r16
   223ac:	8c400054 	ori	r17,r17,1
   223b0:	1421c83a 	sub	r16,r2,r16
   223b4:	24400115 	stw	r17,4(r4)
   223b8:	9009883a 	mov	r4,r18
   223bc:	1c000015 	stw	r16,0(r3)
   223c0:	00235900 	call	23590 <__malloc_unlock>
   223c4:	00800044 	movi	r2,1
   223c8:	003fe706 	br	22368 <__alt_data_end+0xfffe4ea8>
   223cc:	9009883a 	mov	r4,r18
   223d0:	000b883a 	mov	r5,zero
   223d4:	0021b700 	call	21b70 <_sbrk_r>
   223d8:	99000217 	ldw	r4,8(r19)
   223dc:	014003c4 	movi	r5,15
   223e0:	1107c83a 	sub	r3,r2,r4
   223e4:	28ffdd0e 	bge	r5,r3,2235c <__alt_data_end+0xfffe4e9c>
   223e8:	014000b4 	movhi	r5,2
   223ec:	295d4204 	addi	r5,r5,29960
   223f0:	29400017 	ldw	r5,0(r5)
   223f4:	18c00054 	ori	r3,r3,1
   223f8:	20c00115 	stw	r3,4(r4)
   223fc:	00c000f4 	movhi	r3,3
   22400:	1145c83a 	sub	r2,r2,r5
   22404:	18e3f904 	addi	r3,r3,-28700
   22408:	18800015 	stw	r2,0(r3)
   2240c:	003fd306 	br	2235c <__alt_data_end+0xfffe4e9c>

00022410 <_free_r>:
   22410:	28004c26 	beq	r5,zero,22544 <_free_r+0x134>
   22414:	defffd04 	addi	sp,sp,-12
   22418:	dc400115 	stw	r17,4(sp)
   2241c:	dc000015 	stw	r16,0(sp)
   22420:	2023883a 	mov	r17,r4
   22424:	2821883a 	mov	r16,r5
   22428:	dfc00215 	stw	ra,8(sp)
   2242c:	00235700 	call	23570 <__malloc_lock>
   22430:	813fff17 	ldw	r4,-4(r16)
   22434:	00bfff84 	movi	r2,-2
   22438:	024000b4 	movhi	r9,2
   2243c:	81bffe04 	addi	r6,r16,-8
   22440:	2084703a 	and	r2,r4,r2
   22444:	4a57bc04 	addi	r9,r9,24304
   22448:	308b883a 	add	r5,r6,r2
   2244c:	2a000117 	ldw	r8,4(r5)
   22450:	49c00217 	ldw	r7,8(r9)
   22454:	00ffff04 	movi	r3,-4
   22458:	40c6703a 	and	r3,r8,r3
   2245c:	39405326 	beq	r7,r5,225ac <_free_r+0x19c>
   22460:	28c00115 	stw	r3,4(r5)
   22464:	2100004c 	andi	r4,r4,1
   22468:	2000091e 	bne	r4,zero,22490 <_free_r+0x80>
   2246c:	81fffe17 	ldw	r7,-8(r16)
   22470:	4a000204 	addi	r8,r9,8
   22474:	31cdc83a 	sub	r6,r6,r7
   22478:	31000217 	ldw	r4,8(r6)
   2247c:	11c5883a 	add	r2,r2,r7
   22480:	22006126 	beq	r4,r8,22608 <_free_r+0x1f8>
   22484:	31c00317 	ldw	r7,12(r6)
   22488:	21c00315 	stw	r7,12(r4)
   2248c:	39000215 	stw	r4,8(r7)
   22490:	28c9883a 	add	r4,r5,r3
   22494:	21c00117 	ldw	r7,4(r4)
   22498:	39c0004c 	andi	r7,r7,1
   2249c:	38000d1e 	bne	r7,zero,224d4 <_free_r+0xc4>
   224a0:	29000217 	ldw	r4,8(r5)
   224a4:	10c5883a 	add	r2,r2,r3
   224a8:	00c000b4 	movhi	r3,2
   224ac:	18d7be04 	addi	r3,r3,24312
   224b0:	20c07526 	beq	r4,r3,22688 <_free_r+0x278>
   224b4:	29c00317 	ldw	r7,12(r5)
   224b8:	11400054 	ori	r5,r2,1
   224bc:	3087883a 	add	r3,r6,r2
   224c0:	21c00315 	stw	r7,12(r4)
   224c4:	39000215 	stw	r4,8(r7)
   224c8:	31400115 	stw	r5,4(r6)
   224cc:	18800015 	stw	r2,0(r3)
   224d0:	00000406 	br	224e4 <_free_r+0xd4>
   224d4:	10c00054 	ori	r3,r2,1
   224d8:	30c00115 	stw	r3,4(r6)
   224dc:	3087883a 	add	r3,r6,r2
   224e0:	18800015 	stw	r2,0(r3)
   224e4:	00c07fc4 	movi	r3,511
   224e8:	18801736 	bltu	r3,r2,22548 <_free_r+0x138>
   224ec:	1004d0fa 	srli	r2,r2,3
   224f0:	01400044 	movi	r5,1
   224f4:	49000117 	ldw	r4,4(r9)
   224f8:	1087883a 	add	r3,r2,r2
   224fc:	18c7883a 	add	r3,r3,r3
   22500:	1005d0ba 	srai	r2,r2,2
   22504:	18c7883a 	add	r3,r3,r3
   22508:	1a47883a 	add	r3,r3,r9
   2250c:	19c00217 	ldw	r7,8(r3)
   22510:	2884983a 	sll	r2,r5,r2
   22514:	30c00315 	stw	r3,12(r6)
   22518:	31c00215 	stw	r7,8(r6)
   2251c:	1104b03a 	or	r2,r2,r4
   22520:	19800215 	stw	r6,8(r3)
   22524:	48800115 	stw	r2,4(r9)
   22528:	39800315 	stw	r6,12(r7)
   2252c:	8809883a 	mov	r4,r17
   22530:	dfc00217 	ldw	ra,8(sp)
   22534:	dc400117 	ldw	r17,4(sp)
   22538:	dc000017 	ldw	r16,0(sp)
   2253c:	dec00304 	addi	sp,sp,12
   22540:	00235901 	jmpi	23590 <__malloc_unlock>
   22544:	f800283a 	ret
   22548:	1006d27a 	srli	r3,r2,9
   2254c:	01000104 	movi	r4,4
   22550:	20c04036 	bltu	r4,r3,22654 <_free_r+0x244>
   22554:	1006d1ba 	srli	r3,r2,6
   22558:	19400e04 	addi	r5,r3,56
   2255c:	2947883a 	add	r3,r5,r5
   22560:	18c7883a 	add	r3,r3,r3
   22564:	18c7883a 	add	r3,r3,r3
   22568:	1a49883a 	add	r4,r3,r9
   2256c:	20c00217 	ldw	r3,8(r4)
   22570:	01c000b4 	movhi	r7,2
   22574:	39d7bc04 	addi	r7,r7,24304
   22578:	19003b26 	beq	r3,r4,22668 <_free_r+0x258>
   2257c:	01ffff04 	movi	r7,-4
   22580:	19400117 	ldw	r5,4(r3)
   22584:	29ca703a 	and	r5,r5,r7
   22588:	1140022e 	bgeu	r2,r5,22594 <_free_r+0x184>
   2258c:	18c00217 	ldw	r3,8(r3)
   22590:	20fffb1e 	bne	r4,r3,22580 <__alt_data_end+0xfffe50c0>
   22594:	18800317 	ldw	r2,12(r3)
   22598:	30800315 	stw	r2,12(r6)
   2259c:	30c00215 	stw	r3,8(r6)
   225a0:	11800215 	stw	r6,8(r2)
   225a4:	19800315 	stw	r6,12(r3)
   225a8:	003fe006 	br	2252c <__alt_data_end+0xfffe506c>
   225ac:	2100004c 	andi	r4,r4,1
   225b0:	1885883a 	add	r2,r3,r2
   225b4:	2000071e 	bne	r4,zero,225d4 <_free_r+0x1c4>
   225b8:	817ffe17 	ldw	r5,-8(r16)
   225bc:	314dc83a 	sub	r6,r6,r5
   225c0:	30c00317 	ldw	r3,12(r6)
   225c4:	31000217 	ldw	r4,8(r6)
   225c8:	1145883a 	add	r2,r2,r5
   225cc:	20c00315 	stw	r3,12(r4)
   225d0:	19000215 	stw	r4,8(r3)
   225d4:	10c00054 	ori	r3,r2,1
   225d8:	30c00115 	stw	r3,4(r6)
   225dc:	00c000b4 	movhi	r3,2
   225e0:	18dd4304 	addi	r3,r3,29964
   225e4:	18c00017 	ldw	r3,0(r3)
   225e8:	49800215 	stw	r6,8(r9)
   225ec:	10ffcf36 	bltu	r2,r3,2252c <__alt_data_end+0xfffe506c>
   225f0:	008000f4 	movhi	r2,3
   225f4:	10a3f104 	addi	r2,r2,-28732
   225f8:	11400017 	ldw	r5,0(r2)
   225fc:	8809883a 	mov	r4,r17
   22600:	00222ec0 	call	222ec <_malloc_trim_r>
   22604:	003fc906 	br	2252c <__alt_data_end+0xfffe506c>
   22608:	28c9883a 	add	r4,r5,r3
   2260c:	21000117 	ldw	r4,4(r4)
   22610:	2100004c 	andi	r4,r4,1
   22614:	20000a1e 	bne	r4,zero,22640 <_free_r+0x230>
   22618:	29000317 	ldw	r4,12(r5)
   2261c:	29400217 	ldw	r5,8(r5)
   22620:	10c5883a 	add	r2,r2,r3
   22624:	10c00054 	ori	r3,r2,1
   22628:	29000315 	stw	r4,12(r5)
   2262c:	21400215 	stw	r5,8(r4)
   22630:	30c00115 	stw	r3,4(r6)
   22634:	308d883a 	add	r6,r6,r2
   22638:	30800015 	stw	r2,0(r6)
   2263c:	003fbb06 	br	2252c <__alt_data_end+0xfffe506c>
   22640:	10c00054 	ori	r3,r2,1
   22644:	30c00115 	stw	r3,4(r6)
   22648:	308d883a 	add	r6,r6,r2
   2264c:	30800015 	stw	r2,0(r6)
   22650:	003fb606 	br	2252c <__alt_data_end+0xfffe506c>
   22654:	01000504 	movi	r4,20
   22658:	20c01436 	bltu	r4,r3,226ac <_free_r+0x29c>
   2265c:	194016c4 	addi	r5,r3,91
   22660:	2947883a 	add	r3,r5,r5
   22664:	003fbe06 	br	22560 <__alt_data_end+0xfffe50a0>
   22668:	280bd0ba 	srai	r5,r5,2
   2266c:	00800044 	movi	r2,1
   22670:	39000117 	ldw	r4,4(r7)
   22674:	114a983a 	sll	r5,r2,r5
   22678:	1805883a 	mov	r2,r3
   2267c:	2908b03a 	or	r4,r5,r4
   22680:	39000115 	stw	r4,4(r7)
   22684:	003fc406 	br	22598 <__alt_data_end+0xfffe50d8>
   22688:	49800515 	stw	r6,20(r9)
   2268c:	49800415 	stw	r6,16(r9)
   22690:	10c00054 	ori	r3,r2,1
   22694:	31000315 	stw	r4,12(r6)
   22698:	31000215 	stw	r4,8(r6)
   2269c:	30c00115 	stw	r3,4(r6)
   226a0:	308d883a 	add	r6,r6,r2
   226a4:	30800015 	stw	r2,0(r6)
   226a8:	003fa006 	br	2252c <__alt_data_end+0xfffe506c>
   226ac:	01001504 	movi	r4,84
   226b0:	20c00436 	bltu	r4,r3,226c4 <_free_r+0x2b4>
   226b4:	1006d33a 	srli	r3,r2,12
   226b8:	19401b84 	addi	r5,r3,110
   226bc:	2947883a 	add	r3,r5,r5
   226c0:	003fa706 	br	22560 <__alt_data_end+0xfffe50a0>
   226c4:	01005504 	movi	r4,340
   226c8:	20c00436 	bltu	r4,r3,226dc <_free_r+0x2cc>
   226cc:	1006d3fa 	srli	r3,r2,15
   226d0:	19401dc4 	addi	r5,r3,119
   226d4:	2947883a 	add	r3,r5,r5
   226d8:	003fa106 	br	22560 <__alt_data_end+0xfffe50a0>
   226dc:	01015504 	movi	r4,1364
   226e0:	20c00436 	bltu	r4,r3,226f4 <_free_r+0x2e4>
   226e4:	1006d4ba 	srli	r3,r2,18
   226e8:	19401f04 	addi	r5,r3,124
   226ec:	2947883a 	add	r3,r5,r5
   226f0:	003f9b06 	br	22560 <__alt_data_end+0xfffe50a0>
   226f4:	00c03f04 	movi	r3,252
   226f8:	01401f84 	movi	r5,126
   226fc:	003f9806 	br	22560 <__alt_data_end+0xfffe50a0>

00022700 <_fwalk>:
   22700:	defff804 	addi	sp,sp,-32
   22704:	dd400515 	stw	r21,20(sp)
   22708:	2540b804 	addi	r21,r4,736
   2270c:	dd800615 	stw	r22,24(sp)
   22710:	dd000415 	stw	r20,16(sp)
   22714:	dfc00715 	stw	ra,28(sp)
   22718:	dcc00315 	stw	r19,12(sp)
   2271c:	dc800215 	stw	r18,8(sp)
   22720:	dc400115 	stw	r17,4(sp)
   22724:	dc000015 	stw	r16,0(sp)
   22728:	2829883a 	mov	r20,r5
   2272c:	002d883a 	mov	r22,zero
   22730:	00222ac0 	call	222ac <__sfp_lock_acquire>
   22734:	a8001426 	beq	r21,zero,22788 <_fwalk+0x88>
   22738:	04ffffc4 	movi	r19,-1
   2273c:	ac400117 	ldw	r17,4(r21)
   22740:	ac800217 	ldw	r18,8(r21)
   22744:	8c7fffc4 	addi	r17,r17,-1
   22748:	88000d16 	blt	r17,zero,22780 <_fwalk+0x80>
   2274c:	94000304 	addi	r16,r18,12
   22750:	94800384 	addi	r18,r18,14
   22754:	80c0000f 	ldh	r3,0(r16)
   22758:	8c7fffc4 	addi	r17,r17,-1
   2275c:	813ffd04 	addi	r4,r16,-12
   22760:	18000426 	beq	r3,zero,22774 <_fwalk+0x74>
   22764:	90c0000f 	ldh	r3,0(r18)
   22768:	1cc00226 	beq	r3,r19,22774 <_fwalk+0x74>
   2276c:	a03ee83a 	callr	r20
   22770:	b0acb03a 	or	r22,r22,r2
   22774:	84001a04 	addi	r16,r16,104
   22778:	94801a04 	addi	r18,r18,104
   2277c:	8cfff51e 	bne	r17,r19,22754 <__alt_data_end+0xfffe5294>
   22780:	ad400017 	ldw	r21,0(r21)
   22784:	a83fed1e 	bne	r21,zero,2273c <__alt_data_end+0xfffe527c>
   22788:	00222b00 	call	222b0 <__sfp_lock_release>
   2278c:	b005883a 	mov	r2,r22
   22790:	dfc00717 	ldw	ra,28(sp)
   22794:	dd800617 	ldw	r22,24(sp)
   22798:	dd400517 	ldw	r21,20(sp)
   2279c:	dd000417 	ldw	r20,16(sp)
   227a0:	dcc00317 	ldw	r19,12(sp)
   227a4:	dc800217 	ldw	r18,8(sp)
   227a8:	dc400117 	ldw	r17,4(sp)
   227ac:	dc000017 	ldw	r16,0(sp)
   227b0:	dec00804 	addi	sp,sp,32
   227b4:	f800283a 	ret

000227b8 <_fwalk_reent>:
   227b8:	defff804 	addi	sp,sp,-32
   227bc:	dd400515 	stw	r21,20(sp)
   227c0:	2540b804 	addi	r21,r4,736
   227c4:	dd800615 	stw	r22,24(sp)
   227c8:	dd000415 	stw	r20,16(sp)
   227cc:	dcc00315 	stw	r19,12(sp)
   227d0:	dfc00715 	stw	ra,28(sp)
   227d4:	dc800215 	stw	r18,8(sp)
   227d8:	dc400115 	stw	r17,4(sp)
   227dc:	dc000015 	stw	r16,0(sp)
   227e0:	2027883a 	mov	r19,r4
   227e4:	2829883a 	mov	r20,r5
   227e8:	002d883a 	mov	r22,zero
   227ec:	00222ac0 	call	222ac <__sfp_lock_acquire>
   227f0:	a8001326 	beq	r21,zero,22840 <_fwalk_reent+0x88>
   227f4:	04bfffc4 	movi	r18,-1
   227f8:	ac400117 	ldw	r17,4(r21)
   227fc:	ac000217 	ldw	r16,8(r21)
   22800:	8c7fffc4 	addi	r17,r17,-1
   22804:	88000c16 	blt	r17,zero,22838 <_fwalk_reent+0x80>
   22808:	84000304 	addi	r16,r16,12
   2280c:	80c0000f 	ldh	r3,0(r16)
   22810:	8c7fffc4 	addi	r17,r17,-1
   22814:	817ffd04 	addi	r5,r16,-12
   22818:	18000526 	beq	r3,zero,22830 <_fwalk_reent+0x78>
   2281c:	80c0008f 	ldh	r3,2(r16)
   22820:	9809883a 	mov	r4,r19
   22824:	1c800226 	beq	r3,r18,22830 <_fwalk_reent+0x78>
   22828:	a03ee83a 	callr	r20
   2282c:	b0acb03a 	or	r22,r22,r2
   22830:	84001a04 	addi	r16,r16,104
   22834:	8cbff51e 	bne	r17,r18,2280c <__alt_data_end+0xfffe534c>
   22838:	ad400017 	ldw	r21,0(r21)
   2283c:	a83fee1e 	bne	r21,zero,227f8 <__alt_data_end+0xfffe5338>
   22840:	00222b00 	call	222b0 <__sfp_lock_release>
   22844:	b005883a 	mov	r2,r22
   22848:	dfc00717 	ldw	ra,28(sp)
   2284c:	dd800617 	ldw	r22,24(sp)
   22850:	dd400517 	ldw	r21,20(sp)
   22854:	dd000417 	ldw	r20,16(sp)
   22858:	dcc00317 	ldw	r19,12(sp)
   2285c:	dc800217 	ldw	r18,8(sp)
   22860:	dc400117 	ldw	r17,4(sp)
   22864:	dc000017 	ldw	r16,0(sp)
   22868:	dec00804 	addi	sp,sp,32
   2286c:	f800283a 	ret

00022870 <__smakebuf_r>:
   22870:	2880030b 	ldhu	r2,12(r5)
   22874:	10c0008c 	andi	r3,r2,2
   22878:	1800401e 	bne	r3,zero,2297c <__smakebuf_r+0x10c>
   2287c:	deffec04 	addi	sp,sp,-80
   22880:	dc000f15 	stw	r16,60(sp)
   22884:	2821883a 	mov	r16,r5
   22888:	2940038f 	ldh	r5,14(r5)
   2288c:	dc401015 	stw	r17,64(sp)
   22890:	dfc01315 	stw	ra,76(sp)
   22894:	dcc01215 	stw	r19,72(sp)
   22898:	dc801115 	stw	r18,68(sp)
   2289c:	2023883a 	mov	r17,r4
   228a0:	28001b16 	blt	r5,zero,22910 <__smakebuf_r+0xa0>
   228a4:	d80d883a 	mov	r6,sp
   228a8:	0022e4c0 	call	22e4c <_fstat_r>
   228ac:	10001716 	blt	r2,zero,2290c <__smakebuf_r+0x9c>
   228b0:	d8800117 	ldw	r2,4(sp)
   228b4:	00e00014 	movui	r3,32768
   228b8:	10bc000c 	andi	r2,r2,61440
   228bc:	10c03726 	beq	r2,r3,2299c <__smakebuf_r+0x12c>
   228c0:	80c0030b 	ldhu	r3,12(r16)
   228c4:	18c20014 	ori	r3,r3,2048
   228c8:	80c0030d 	sth	r3,12(r16)
   228cc:	00c80004 	movi	r3,8192
   228d0:	10c03c1e 	bne	r2,r3,229c4 <__smakebuf_r+0x154>
   228d4:	8140038f 	ldh	r5,14(r16)
   228d8:	8809883a 	mov	r4,r17
   228dc:	0022ea40 	call	22ea4 <_isatty_r>
   228e0:	10004e26 	beq	r2,zero,22a1c <__smakebuf_r+0x1ac>
   228e4:	8080030b 	ldhu	r2,12(r16)
   228e8:	04c00044 	movi	r19,1
   228ec:	80c010c4 	addi	r3,r16,67
   228f0:	14c4b03a 	or	r2,r2,r19
   228f4:	8080030d 	sth	r2,12(r16)
   228f8:	80c00015 	stw	r3,0(r16)
   228fc:	80c00415 	stw	r3,16(r16)
   22900:	84c00515 	stw	r19,20(r16)
   22904:	04810004 	movi	r18,1024
   22908:	00000706 	br	22928 <__smakebuf_r+0xb8>
   2290c:	8080030b 	ldhu	r2,12(r16)
   22910:	10c0200c 	andi	r3,r2,128
   22914:	18001f1e 	bne	r3,zero,22994 <__smakebuf_r+0x124>
   22918:	04810004 	movi	r18,1024
   2291c:	10820014 	ori	r2,r2,2048
   22920:	8080030d 	sth	r2,12(r16)
   22924:	0027883a 	mov	r19,zero
   22928:	8809883a 	mov	r4,r17
   2292c:	900b883a 	mov	r5,r18
   22930:	0020aac0 	call	20aac <_malloc_r>
   22934:	10002e26 	beq	r2,zero,229f0 <__smakebuf_r+0x180>
   22938:	80c0030b 	ldhu	r3,12(r16)
   2293c:	010000b4 	movhi	r4,2
   22940:	2107d704 	addi	r4,r4,8028
   22944:	89000f15 	stw	r4,60(r17)
   22948:	18c02014 	ori	r3,r3,128
   2294c:	80c0030d 	sth	r3,12(r16)
   22950:	80800015 	stw	r2,0(r16)
   22954:	80800415 	stw	r2,16(r16)
   22958:	84800515 	stw	r18,20(r16)
   2295c:	98001c1e 	bne	r19,zero,229d0 <__smakebuf_r+0x160>
   22960:	dfc01317 	ldw	ra,76(sp)
   22964:	dcc01217 	ldw	r19,72(sp)
   22968:	dc801117 	ldw	r18,68(sp)
   2296c:	dc401017 	ldw	r17,64(sp)
   22970:	dc000f17 	ldw	r16,60(sp)
   22974:	dec01404 	addi	sp,sp,80
   22978:	f800283a 	ret
   2297c:	288010c4 	addi	r2,r5,67
   22980:	28800015 	stw	r2,0(r5)
   22984:	28800415 	stw	r2,16(r5)
   22988:	00800044 	movi	r2,1
   2298c:	28800515 	stw	r2,20(r5)
   22990:	f800283a 	ret
   22994:	04801004 	movi	r18,64
   22998:	003fe006 	br	2291c <__alt_data_end+0xfffe545c>
   2299c:	81000a17 	ldw	r4,40(r16)
   229a0:	00c000b4 	movhi	r3,2
   229a4:	18cb0904 	addi	r3,r3,11300
   229a8:	20ffc51e 	bne	r4,r3,228c0 <__alt_data_end+0xfffe5400>
   229ac:	80c0030b 	ldhu	r3,12(r16)
   229b0:	01010004 	movi	r4,1024
   229b4:	81001315 	stw	r4,76(r16)
   229b8:	1906b03a 	or	r3,r3,r4
   229bc:	80c0030d 	sth	r3,12(r16)
   229c0:	003fc206 	br	228cc <__alt_data_end+0xfffe540c>
   229c4:	0027883a 	mov	r19,zero
   229c8:	04810004 	movi	r18,1024
   229cc:	003fd606 	br	22928 <__alt_data_end+0xfffe5468>
   229d0:	8140038f 	ldh	r5,14(r16)
   229d4:	8809883a 	mov	r4,r17
   229d8:	0022ea40 	call	22ea4 <_isatty_r>
   229dc:	103fe026 	beq	r2,zero,22960 <__alt_data_end+0xfffe54a0>
   229e0:	8080030b 	ldhu	r2,12(r16)
   229e4:	10800054 	ori	r2,r2,1
   229e8:	8080030d 	sth	r2,12(r16)
   229ec:	003fdc06 	br	22960 <__alt_data_end+0xfffe54a0>
   229f0:	8080030b 	ldhu	r2,12(r16)
   229f4:	10c0800c 	andi	r3,r2,512
   229f8:	183fd91e 	bne	r3,zero,22960 <__alt_data_end+0xfffe54a0>
   229fc:	10800094 	ori	r2,r2,2
   22a00:	80c010c4 	addi	r3,r16,67
   22a04:	8080030d 	sth	r2,12(r16)
   22a08:	00800044 	movi	r2,1
   22a0c:	80c00015 	stw	r3,0(r16)
   22a10:	80c00415 	stw	r3,16(r16)
   22a14:	80800515 	stw	r2,20(r16)
   22a18:	003fd106 	br	22960 <__alt_data_end+0xfffe54a0>
   22a1c:	04c00044 	movi	r19,1
   22a20:	04810004 	movi	r18,1024
   22a24:	003fc006 	br	22928 <__alt_data_end+0xfffe5468>

00022a28 <memset>:
   22a28:	20c000cc 	andi	r3,r4,3
   22a2c:	2005883a 	mov	r2,r4
   22a30:	18004326 	beq	r3,zero,22b40 <memset+0x118>
   22a34:	31ffffc4 	addi	r7,r6,-1
   22a38:	30004026 	beq	r6,zero,22b3c <memset+0x114>
   22a3c:	2813883a 	mov	r9,r5
   22a40:	200d883a 	mov	r6,r4
   22a44:	2007883a 	mov	r3,r4
   22a48:	00000406 	br	22a5c <memset+0x34>
   22a4c:	3a3fffc4 	addi	r8,r7,-1
   22a50:	31800044 	addi	r6,r6,1
   22a54:	38003926 	beq	r7,zero,22b3c <memset+0x114>
   22a58:	400f883a 	mov	r7,r8
   22a5c:	18c00044 	addi	r3,r3,1
   22a60:	32400005 	stb	r9,0(r6)
   22a64:	1a0000cc 	andi	r8,r3,3
   22a68:	403ff81e 	bne	r8,zero,22a4c <__alt_data_end+0xfffe558c>
   22a6c:	010000c4 	movi	r4,3
   22a70:	21c02d2e 	bgeu	r4,r7,22b28 <memset+0x100>
   22a74:	29803fcc 	andi	r6,r5,255
   22a78:	3008923a 	slli	r4,r6,8
   22a7c:	218cb03a 	or	r6,r4,r6
   22a80:	3008943a 	slli	r4,r6,16
   22a84:	218cb03a 	or	r6,r4,r6
   22a88:	010003c4 	movi	r4,15
   22a8c:	21c0182e 	bgeu	r4,r7,22af0 <memset+0xc8>
   22a90:	3b3ffc04 	addi	r12,r7,-16
   22a94:	6018d13a 	srli	r12,r12,4
   22a98:	1a000104 	addi	r8,r3,4
   22a9c:	1ac00204 	addi	r11,r3,8
   22aa0:	6008913a 	slli	r4,r12,4
   22aa4:	1a800304 	addi	r10,r3,12
   22aa8:	1813883a 	mov	r9,r3
   22aac:	21000504 	addi	r4,r4,20
   22ab0:	1909883a 	add	r4,r3,r4
   22ab4:	49800015 	stw	r6,0(r9)
   22ab8:	41800015 	stw	r6,0(r8)
   22abc:	59800015 	stw	r6,0(r11)
   22ac0:	51800015 	stw	r6,0(r10)
   22ac4:	42000404 	addi	r8,r8,16
   22ac8:	4a400404 	addi	r9,r9,16
   22acc:	5ac00404 	addi	r11,r11,16
   22ad0:	52800404 	addi	r10,r10,16
   22ad4:	413ff71e 	bne	r8,r4,22ab4 <__alt_data_end+0xfffe55f4>
   22ad8:	63000044 	addi	r12,r12,1
   22adc:	6018913a 	slli	r12,r12,4
   22ae0:	39c003cc 	andi	r7,r7,15
   22ae4:	010000c4 	movi	r4,3
   22ae8:	1b07883a 	add	r3,r3,r12
   22aec:	21c00e2e 	bgeu	r4,r7,22b28 <memset+0x100>
   22af0:	1813883a 	mov	r9,r3
   22af4:	3811883a 	mov	r8,r7
   22af8:	010000c4 	movi	r4,3
   22afc:	49800015 	stw	r6,0(r9)
   22b00:	423fff04 	addi	r8,r8,-4
   22b04:	4a400104 	addi	r9,r9,4
   22b08:	223ffc36 	bltu	r4,r8,22afc <__alt_data_end+0xfffe563c>
   22b0c:	393fff04 	addi	r4,r7,-4
   22b10:	2008d0ba 	srli	r4,r4,2
   22b14:	39c000cc 	andi	r7,r7,3
   22b18:	21000044 	addi	r4,r4,1
   22b1c:	2109883a 	add	r4,r4,r4
   22b20:	2109883a 	add	r4,r4,r4
   22b24:	1907883a 	add	r3,r3,r4
   22b28:	38000426 	beq	r7,zero,22b3c <memset+0x114>
   22b2c:	19cf883a 	add	r7,r3,r7
   22b30:	19400005 	stb	r5,0(r3)
   22b34:	18c00044 	addi	r3,r3,1
   22b38:	19fffd1e 	bne	r3,r7,22b30 <__alt_data_end+0xfffe5670>
   22b3c:	f800283a 	ret
   22b40:	2007883a 	mov	r3,r4
   22b44:	300f883a 	mov	r7,r6
   22b48:	003fc806 	br	22a6c <__alt_data_end+0xfffe55ac>

00022b4c <__sread>:
   22b4c:	defffe04 	addi	sp,sp,-8
   22b50:	dc000015 	stw	r16,0(sp)
   22b54:	2821883a 	mov	r16,r5
   22b58:	2940038f 	ldh	r5,14(r5)
   22b5c:	dfc00115 	stw	ra,4(sp)
   22b60:	0022f540 	call	22f54 <_read_r>
   22b64:	10000716 	blt	r2,zero,22b84 <__sread+0x38>
   22b68:	80c01417 	ldw	r3,80(r16)
   22b6c:	1887883a 	add	r3,r3,r2
   22b70:	80c01415 	stw	r3,80(r16)
   22b74:	dfc00117 	ldw	ra,4(sp)
   22b78:	dc000017 	ldw	r16,0(sp)
   22b7c:	dec00204 	addi	sp,sp,8
   22b80:	f800283a 	ret
   22b84:	80c0030b 	ldhu	r3,12(r16)
   22b88:	18fbffcc 	andi	r3,r3,61439
   22b8c:	80c0030d 	sth	r3,12(r16)
   22b90:	dfc00117 	ldw	ra,4(sp)
   22b94:	dc000017 	ldw	r16,0(sp)
   22b98:	dec00204 	addi	sp,sp,8
   22b9c:	f800283a 	ret

00022ba0 <__seofread>:
   22ba0:	0005883a 	mov	r2,zero
   22ba4:	f800283a 	ret

00022ba8 <__swrite>:
   22ba8:	2880030b 	ldhu	r2,12(r5)
   22bac:	defffb04 	addi	sp,sp,-20
   22bb0:	dcc00315 	stw	r19,12(sp)
   22bb4:	dc800215 	stw	r18,8(sp)
   22bb8:	dc400115 	stw	r17,4(sp)
   22bbc:	dc000015 	stw	r16,0(sp)
   22bc0:	dfc00415 	stw	ra,16(sp)
   22bc4:	10c0400c 	andi	r3,r2,256
   22bc8:	2821883a 	mov	r16,r5
   22bcc:	2027883a 	mov	r19,r4
   22bd0:	3025883a 	mov	r18,r6
   22bd4:	3823883a 	mov	r17,r7
   22bd8:	18000526 	beq	r3,zero,22bf0 <__swrite+0x48>
   22bdc:	2940038f 	ldh	r5,14(r5)
   22be0:	000d883a 	mov	r6,zero
   22be4:	01c00084 	movi	r7,2
   22be8:	0022ef80 	call	22ef8 <_lseek_r>
   22bec:	8080030b 	ldhu	r2,12(r16)
   22bf0:	8140038f 	ldh	r5,14(r16)
   22bf4:	10bbffcc 	andi	r2,r2,61439
   22bf8:	9809883a 	mov	r4,r19
   22bfc:	900d883a 	mov	r6,r18
   22c00:	880f883a 	mov	r7,r17
   22c04:	8080030d 	sth	r2,12(r16)
   22c08:	dfc00417 	ldw	ra,16(sp)
   22c0c:	dcc00317 	ldw	r19,12(sp)
   22c10:	dc800217 	ldw	r18,8(sp)
   22c14:	dc400117 	ldw	r17,4(sp)
   22c18:	dc000017 	ldw	r16,0(sp)
   22c1c:	dec00504 	addi	sp,sp,20
   22c20:	0022c881 	jmpi	22c88 <_write_r>

00022c24 <__sseek>:
   22c24:	defffe04 	addi	sp,sp,-8
   22c28:	dc000015 	stw	r16,0(sp)
   22c2c:	2821883a 	mov	r16,r5
   22c30:	2940038f 	ldh	r5,14(r5)
   22c34:	dfc00115 	stw	ra,4(sp)
   22c38:	0022ef80 	call	22ef8 <_lseek_r>
   22c3c:	00ffffc4 	movi	r3,-1
   22c40:	10c00826 	beq	r2,r3,22c64 <__sseek+0x40>
   22c44:	80c0030b 	ldhu	r3,12(r16)
   22c48:	80801415 	stw	r2,80(r16)
   22c4c:	18c40014 	ori	r3,r3,4096
   22c50:	80c0030d 	sth	r3,12(r16)
   22c54:	dfc00117 	ldw	ra,4(sp)
   22c58:	dc000017 	ldw	r16,0(sp)
   22c5c:	dec00204 	addi	sp,sp,8
   22c60:	f800283a 	ret
   22c64:	80c0030b 	ldhu	r3,12(r16)
   22c68:	18fbffcc 	andi	r3,r3,61439
   22c6c:	80c0030d 	sth	r3,12(r16)
   22c70:	dfc00117 	ldw	ra,4(sp)
   22c74:	dc000017 	ldw	r16,0(sp)
   22c78:	dec00204 	addi	sp,sp,8
   22c7c:	f800283a 	ret

00022c80 <__sclose>:
   22c80:	2940038f 	ldh	r5,14(r5)
   22c84:	0022ce41 	jmpi	22ce4 <_close_r>

00022c88 <_write_r>:
   22c88:	defffd04 	addi	sp,sp,-12
   22c8c:	dc000015 	stw	r16,0(sp)
   22c90:	040000f4 	movhi	r16,3
   22c94:	dc400115 	stw	r17,4(sp)
   22c98:	8423f204 	addi	r16,r16,-28728
   22c9c:	2023883a 	mov	r17,r4
   22ca0:	2809883a 	mov	r4,r5
   22ca4:	300b883a 	mov	r5,r6
   22ca8:	380d883a 	mov	r6,r7
   22cac:	dfc00215 	stw	ra,8(sp)
   22cb0:	80000015 	stw	zero,0(r16)
   22cb4:	002388c0 	call	2388c <write>
   22cb8:	00ffffc4 	movi	r3,-1
   22cbc:	10c00526 	beq	r2,r3,22cd4 <_write_r+0x4c>
   22cc0:	dfc00217 	ldw	ra,8(sp)
   22cc4:	dc400117 	ldw	r17,4(sp)
   22cc8:	dc000017 	ldw	r16,0(sp)
   22ccc:	dec00304 	addi	sp,sp,12
   22cd0:	f800283a 	ret
   22cd4:	80c00017 	ldw	r3,0(r16)
   22cd8:	183ff926 	beq	r3,zero,22cc0 <__alt_data_end+0xfffe5800>
   22cdc:	88c00015 	stw	r3,0(r17)
   22ce0:	003ff706 	br	22cc0 <__alt_data_end+0xfffe5800>

00022ce4 <_close_r>:
   22ce4:	defffd04 	addi	sp,sp,-12
   22ce8:	dc000015 	stw	r16,0(sp)
   22cec:	040000f4 	movhi	r16,3
   22cf0:	dc400115 	stw	r17,4(sp)
   22cf4:	8423f204 	addi	r16,r16,-28728
   22cf8:	2023883a 	mov	r17,r4
   22cfc:	2809883a 	mov	r4,r5
   22d00:	dfc00215 	stw	ra,8(sp)
   22d04:	80000015 	stw	zero,0(r16)
   22d08:	00230000 	call	23000 <close>
   22d0c:	00ffffc4 	movi	r3,-1
   22d10:	10c00526 	beq	r2,r3,22d28 <_close_r+0x44>
   22d14:	dfc00217 	ldw	ra,8(sp)
   22d18:	dc400117 	ldw	r17,4(sp)
   22d1c:	dc000017 	ldw	r16,0(sp)
   22d20:	dec00304 	addi	sp,sp,12
   22d24:	f800283a 	ret
   22d28:	80c00017 	ldw	r3,0(r16)
   22d2c:	183ff926 	beq	r3,zero,22d14 <__alt_data_end+0xfffe5854>
   22d30:	88c00015 	stw	r3,0(r17)
   22d34:	003ff706 	br	22d14 <__alt_data_end+0xfffe5854>

00022d38 <_fclose_r>:
   22d38:	28003226 	beq	r5,zero,22e04 <_fclose_r+0xcc>
   22d3c:	defffc04 	addi	sp,sp,-16
   22d40:	dc400115 	stw	r17,4(sp)
   22d44:	2023883a 	mov	r17,r4
   22d48:	dc000015 	stw	r16,0(sp)
   22d4c:	dfc00315 	stw	ra,12(sp)
   22d50:	dc800215 	stw	r18,8(sp)
   22d54:	2821883a 	mov	r16,r5
   22d58:	00222ac0 	call	222ac <__sfp_lock_acquire>
   22d5c:	88000226 	beq	r17,zero,22d68 <_fclose_r+0x30>
   22d60:	88800e17 	ldw	r2,56(r17)
   22d64:	10002926 	beq	r2,zero,22e0c <_fclose_r+0xd4>
   22d68:	8080030f 	ldh	r2,12(r16)
   22d6c:	10002226 	beq	r2,zero,22df8 <_fclose_r+0xc0>
   22d70:	8809883a 	mov	r4,r17
   22d74:	800b883a 	mov	r5,r16
   22d78:	0021cf40 	call	21cf4 <_fflush_r>
   22d7c:	1025883a 	mov	r18,r2
   22d80:	80800b17 	ldw	r2,44(r16)
   22d84:	10000426 	beq	r2,zero,22d98 <_fclose_r+0x60>
   22d88:	81400717 	ldw	r5,28(r16)
   22d8c:	8809883a 	mov	r4,r17
   22d90:	103ee83a 	callr	r2
   22d94:	10002616 	blt	r2,zero,22e30 <_fclose_r+0xf8>
   22d98:	8080030b 	ldhu	r2,12(r16)
   22d9c:	1080200c 	andi	r2,r2,128
   22da0:	10001f1e 	bne	r2,zero,22e20 <_fclose_r+0xe8>
   22da4:	81400c17 	ldw	r5,48(r16)
   22da8:	28000526 	beq	r5,zero,22dc0 <_fclose_r+0x88>
   22dac:	80801004 	addi	r2,r16,64
   22db0:	28800226 	beq	r5,r2,22dbc <_fclose_r+0x84>
   22db4:	8809883a 	mov	r4,r17
   22db8:	00224100 	call	22410 <_free_r>
   22dbc:	80000c15 	stw	zero,48(r16)
   22dc0:	81401117 	ldw	r5,68(r16)
   22dc4:	28000326 	beq	r5,zero,22dd4 <_fclose_r+0x9c>
   22dc8:	8809883a 	mov	r4,r17
   22dcc:	00224100 	call	22410 <_free_r>
   22dd0:	80001115 	stw	zero,68(r16)
   22dd4:	8000030d 	sth	zero,12(r16)
   22dd8:	00222b00 	call	222b0 <__sfp_lock_release>
   22ddc:	9005883a 	mov	r2,r18
   22de0:	dfc00317 	ldw	ra,12(sp)
   22de4:	dc800217 	ldw	r18,8(sp)
   22de8:	dc400117 	ldw	r17,4(sp)
   22dec:	dc000017 	ldw	r16,0(sp)
   22df0:	dec00404 	addi	sp,sp,16
   22df4:	f800283a 	ret
   22df8:	00222b00 	call	222b0 <__sfp_lock_release>
   22dfc:	0005883a 	mov	r2,zero
   22e00:	003ff706 	br	22de0 <__alt_data_end+0xfffe5920>
   22e04:	0005883a 	mov	r2,zero
   22e08:	f800283a 	ret
   22e0c:	8809883a 	mov	r4,r17
   22e10:	002229c0 	call	2229c <__sinit>
   22e14:	8080030f 	ldh	r2,12(r16)
   22e18:	103fd51e 	bne	r2,zero,22d70 <__alt_data_end+0xfffe58b0>
   22e1c:	003ff606 	br	22df8 <__alt_data_end+0xfffe5938>
   22e20:	81400417 	ldw	r5,16(r16)
   22e24:	8809883a 	mov	r4,r17
   22e28:	00224100 	call	22410 <_free_r>
   22e2c:	003fdd06 	br	22da4 <__alt_data_end+0xfffe58e4>
   22e30:	04bfffc4 	movi	r18,-1
   22e34:	003fd806 	br	22d98 <__alt_data_end+0xfffe58d8>

00022e38 <fclose>:
   22e38:	008000b4 	movhi	r2,2
   22e3c:	109d4104 	addi	r2,r2,29956
   22e40:	200b883a 	mov	r5,r4
   22e44:	11000017 	ldw	r4,0(r2)
   22e48:	0022d381 	jmpi	22d38 <_fclose_r>

00022e4c <_fstat_r>:
   22e4c:	defffd04 	addi	sp,sp,-12
   22e50:	dc000015 	stw	r16,0(sp)
   22e54:	040000f4 	movhi	r16,3
   22e58:	dc400115 	stw	r17,4(sp)
   22e5c:	8423f204 	addi	r16,r16,-28728
   22e60:	2023883a 	mov	r17,r4
   22e64:	2809883a 	mov	r4,r5
   22e68:	300b883a 	mov	r5,r6
   22e6c:	dfc00215 	stw	ra,8(sp)
   22e70:	80000015 	stw	zero,0(r16)
   22e74:	002314c0 	call	2314c <fstat>
   22e78:	00ffffc4 	movi	r3,-1
   22e7c:	10c00526 	beq	r2,r3,22e94 <_fstat_r+0x48>
   22e80:	dfc00217 	ldw	ra,8(sp)
   22e84:	dc400117 	ldw	r17,4(sp)
   22e88:	dc000017 	ldw	r16,0(sp)
   22e8c:	dec00304 	addi	sp,sp,12
   22e90:	f800283a 	ret
   22e94:	80c00017 	ldw	r3,0(r16)
   22e98:	183ff926 	beq	r3,zero,22e80 <__alt_data_end+0xfffe59c0>
   22e9c:	88c00015 	stw	r3,0(r17)
   22ea0:	003ff706 	br	22e80 <__alt_data_end+0xfffe59c0>

00022ea4 <_isatty_r>:
   22ea4:	defffd04 	addi	sp,sp,-12
   22ea8:	dc000015 	stw	r16,0(sp)
   22eac:	040000f4 	movhi	r16,3
   22eb0:	dc400115 	stw	r17,4(sp)
   22eb4:	8423f204 	addi	r16,r16,-28728
   22eb8:	2023883a 	mov	r17,r4
   22ebc:	2809883a 	mov	r4,r5
   22ec0:	dfc00215 	stw	ra,8(sp)
   22ec4:	80000015 	stw	zero,0(r16)
   22ec8:	002324c0 	call	2324c <isatty>
   22ecc:	00ffffc4 	movi	r3,-1
   22ed0:	10c00526 	beq	r2,r3,22ee8 <_isatty_r+0x44>
   22ed4:	dfc00217 	ldw	ra,8(sp)
   22ed8:	dc400117 	ldw	r17,4(sp)
   22edc:	dc000017 	ldw	r16,0(sp)
   22ee0:	dec00304 	addi	sp,sp,12
   22ee4:	f800283a 	ret
   22ee8:	80c00017 	ldw	r3,0(r16)
   22eec:	183ff926 	beq	r3,zero,22ed4 <__alt_data_end+0xfffe5a14>
   22ef0:	88c00015 	stw	r3,0(r17)
   22ef4:	003ff706 	br	22ed4 <__alt_data_end+0xfffe5a14>

00022ef8 <_lseek_r>:
   22ef8:	defffd04 	addi	sp,sp,-12
   22efc:	dc000015 	stw	r16,0(sp)
   22f00:	040000f4 	movhi	r16,3
   22f04:	dc400115 	stw	r17,4(sp)
   22f08:	8423f204 	addi	r16,r16,-28728
   22f0c:	2023883a 	mov	r17,r4
   22f10:	2809883a 	mov	r4,r5
   22f14:	300b883a 	mov	r5,r6
   22f18:	380d883a 	mov	r6,r7
   22f1c:	dfc00215 	stw	ra,8(sp)
   22f20:	80000015 	stw	zero,0(r16)
   22f24:	00234240 	call	23424 <lseek>
   22f28:	00ffffc4 	movi	r3,-1
   22f2c:	10c00526 	beq	r2,r3,22f44 <_lseek_r+0x4c>
   22f30:	dfc00217 	ldw	ra,8(sp)
   22f34:	dc400117 	ldw	r17,4(sp)
   22f38:	dc000017 	ldw	r16,0(sp)
   22f3c:	dec00304 	addi	sp,sp,12
   22f40:	f800283a 	ret
   22f44:	80c00017 	ldw	r3,0(r16)
   22f48:	183ff926 	beq	r3,zero,22f30 <__alt_data_end+0xfffe5a70>
   22f4c:	88c00015 	stw	r3,0(r17)
   22f50:	003ff706 	br	22f30 <__alt_data_end+0xfffe5a70>

00022f54 <_read_r>:
   22f54:	defffd04 	addi	sp,sp,-12
   22f58:	dc000015 	stw	r16,0(sp)
   22f5c:	040000f4 	movhi	r16,3
   22f60:	dc400115 	stw	r17,4(sp)
   22f64:	8423f204 	addi	r16,r16,-28728
   22f68:	2023883a 	mov	r17,r4
   22f6c:	2809883a 	mov	r4,r5
   22f70:	300b883a 	mov	r5,r6
   22f74:	380d883a 	mov	r6,r7
   22f78:	dfc00215 	stw	ra,8(sp)
   22f7c:	80000015 	stw	zero,0(r16)
   22f80:	00236000 	call	23600 <read>
   22f84:	00ffffc4 	movi	r3,-1
   22f88:	10c00526 	beq	r2,r3,22fa0 <_read_r+0x4c>
   22f8c:	dfc00217 	ldw	ra,8(sp)
   22f90:	dc400117 	ldw	r17,4(sp)
   22f94:	dc000017 	ldw	r16,0(sp)
   22f98:	dec00304 	addi	sp,sp,12
   22f9c:	f800283a 	ret
   22fa0:	80c00017 	ldw	r3,0(r16)
   22fa4:	183ff926 	beq	r3,zero,22f8c <__alt_data_end+0xfffe5acc>
   22fa8:	88c00015 	stw	r3,0(r17)
   22fac:	003ff706 	br	22f8c <__alt_data_end+0xfffe5acc>

00022fb0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   22fb0:	defffe04 	addi	sp,sp,-8
   22fb4:	dfc00115 	stw	ra,4(sp)
   22fb8:	df000015 	stw	fp,0(sp)
   22fbc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   22fc0:	008000b4 	movhi	r2,2
   22fc4:	109d4904 	addi	r2,r2,29988
   22fc8:	10800017 	ldw	r2,0(r2)
   22fcc:	10000526 	beq	r2,zero,22fe4 <alt_get_errno+0x34>
   22fd0:	008000b4 	movhi	r2,2
   22fd4:	109d4904 	addi	r2,r2,29988
   22fd8:	10800017 	ldw	r2,0(r2)
   22fdc:	103ee83a 	callr	r2
   22fe0:	00000206 	br	22fec <alt_get_errno+0x3c>
   22fe4:	008000f4 	movhi	r2,3
   22fe8:	10a3f204 	addi	r2,r2,-28728
}
   22fec:	e037883a 	mov	sp,fp
   22ff0:	dfc00117 	ldw	ra,4(sp)
   22ff4:	df000017 	ldw	fp,0(sp)
   22ff8:	dec00204 	addi	sp,sp,8
   22ffc:	f800283a 	ret

00023000 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   23000:	defffb04 	addi	sp,sp,-20
   23004:	dfc00415 	stw	ra,16(sp)
   23008:	df000315 	stw	fp,12(sp)
   2300c:	df000304 	addi	fp,sp,12
   23010:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   23014:	e0bfff17 	ldw	r2,-4(fp)
   23018:	10000616 	blt	r2,zero,23034 <close+0x34>
   2301c:	e0bfff17 	ldw	r2,-4(fp)
   23020:	10c00324 	muli	r3,r2,12
   23024:	008000b4 	movhi	r2,2
   23028:	1098c804 	addi	r2,r2,25376
   2302c:	1885883a 	add	r2,r3,r2
   23030:	00000106 	br	23038 <close+0x38>
   23034:	0005883a 	mov	r2,zero
   23038:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   2303c:	e0bffd17 	ldw	r2,-12(fp)
   23040:	10001926 	beq	r2,zero,230a8 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   23044:	e0bffd17 	ldw	r2,-12(fp)
   23048:	10800017 	ldw	r2,0(r2)
   2304c:	10800417 	ldw	r2,16(r2)
   23050:	10000626 	beq	r2,zero,2306c <close+0x6c>
   23054:	e0bffd17 	ldw	r2,-12(fp)
   23058:	10800017 	ldw	r2,0(r2)
   2305c:	10800417 	ldw	r2,16(r2)
   23060:	e13ffd17 	ldw	r4,-12(fp)
   23064:	103ee83a 	callr	r2
   23068:	00000106 	br	23070 <close+0x70>
   2306c:	0005883a 	mov	r2,zero
   23070:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   23074:	e13fff17 	ldw	r4,-4(fp)
   23078:	00236fc0 	call	236fc <alt_release_fd>
    if (rval < 0)
   2307c:	e0bffe17 	ldw	r2,-8(fp)
   23080:	1000070e 	bge	r2,zero,230a0 <close+0xa0>
    {
      ALT_ERRNO = -rval;
   23084:	0022fb00 	call	22fb0 <alt_get_errno>
   23088:	1007883a 	mov	r3,r2
   2308c:	e0bffe17 	ldw	r2,-8(fp)
   23090:	0085c83a 	sub	r2,zero,r2
   23094:	18800015 	stw	r2,0(r3)
      return -1;
   23098:	00bfffc4 	movi	r2,-1
   2309c:	00000706 	br	230bc <close+0xbc>
    }
    return 0;
   230a0:	0005883a 	mov	r2,zero
   230a4:	00000506 	br	230bc <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   230a8:	0022fb00 	call	22fb0 <alt_get_errno>
   230ac:	1007883a 	mov	r3,r2
   230b0:	00801444 	movi	r2,81
   230b4:	18800015 	stw	r2,0(r3)
    return -1;
   230b8:	00bfffc4 	movi	r2,-1
  }
}
   230bc:	e037883a 	mov	sp,fp
   230c0:	dfc00117 	ldw	ra,4(sp)
   230c4:	df000017 	ldw	fp,0(sp)
   230c8:	dec00204 	addi	sp,sp,8
   230cc:	f800283a 	ret

000230d0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   230d0:	defffc04 	addi	sp,sp,-16
   230d4:	df000315 	stw	fp,12(sp)
   230d8:	df000304 	addi	fp,sp,12
   230dc:	e13ffd15 	stw	r4,-12(fp)
   230e0:	e17ffe15 	stw	r5,-8(fp)
   230e4:	e1bfff15 	stw	r6,-4(fp)
  return len;
   230e8:	e0bfff17 	ldw	r2,-4(fp)
}
   230ec:	e037883a 	mov	sp,fp
   230f0:	df000017 	ldw	fp,0(sp)
   230f4:	dec00104 	addi	sp,sp,4
   230f8:	f800283a 	ret

000230fc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   230fc:	defffe04 	addi	sp,sp,-8
   23100:	dfc00115 	stw	ra,4(sp)
   23104:	df000015 	stw	fp,0(sp)
   23108:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2310c:	008000b4 	movhi	r2,2
   23110:	109d4904 	addi	r2,r2,29988
   23114:	10800017 	ldw	r2,0(r2)
   23118:	10000526 	beq	r2,zero,23130 <alt_get_errno+0x34>
   2311c:	008000b4 	movhi	r2,2
   23120:	109d4904 	addi	r2,r2,29988
   23124:	10800017 	ldw	r2,0(r2)
   23128:	103ee83a 	callr	r2
   2312c:	00000206 	br	23138 <alt_get_errno+0x3c>
   23130:	008000f4 	movhi	r2,3
   23134:	10a3f204 	addi	r2,r2,-28728
}
   23138:	e037883a 	mov	sp,fp
   2313c:	dfc00117 	ldw	ra,4(sp)
   23140:	df000017 	ldw	fp,0(sp)
   23144:	dec00204 	addi	sp,sp,8
   23148:	f800283a 	ret

0002314c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   2314c:	defffb04 	addi	sp,sp,-20
   23150:	dfc00415 	stw	ra,16(sp)
   23154:	df000315 	stw	fp,12(sp)
   23158:	df000304 	addi	fp,sp,12
   2315c:	e13ffe15 	stw	r4,-8(fp)
   23160:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   23164:	e0bffe17 	ldw	r2,-8(fp)
   23168:	10000616 	blt	r2,zero,23184 <fstat+0x38>
   2316c:	e0bffe17 	ldw	r2,-8(fp)
   23170:	10c00324 	muli	r3,r2,12
   23174:	008000b4 	movhi	r2,2
   23178:	1098c804 	addi	r2,r2,25376
   2317c:	1885883a 	add	r2,r3,r2
   23180:	00000106 	br	23188 <fstat+0x3c>
   23184:	0005883a 	mov	r2,zero
   23188:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   2318c:	e0bffd17 	ldw	r2,-12(fp)
   23190:	10001026 	beq	r2,zero,231d4 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   23194:	e0bffd17 	ldw	r2,-12(fp)
   23198:	10800017 	ldw	r2,0(r2)
   2319c:	10800817 	ldw	r2,32(r2)
   231a0:	10000726 	beq	r2,zero,231c0 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
   231a4:	e0bffd17 	ldw	r2,-12(fp)
   231a8:	10800017 	ldw	r2,0(r2)
   231ac:	10800817 	ldw	r2,32(r2)
   231b0:	e13ffd17 	ldw	r4,-12(fp)
   231b4:	e17fff17 	ldw	r5,-4(fp)
   231b8:	103ee83a 	callr	r2
   231bc:	00000a06 	br	231e8 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   231c0:	e0bfff17 	ldw	r2,-4(fp)
   231c4:	00c80004 	movi	r3,8192
   231c8:	10c00115 	stw	r3,4(r2)
      return 0;
   231cc:	0005883a 	mov	r2,zero
   231d0:	00000506 	br	231e8 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   231d4:	00230fc0 	call	230fc <alt_get_errno>
   231d8:	1007883a 	mov	r3,r2
   231dc:	00801444 	movi	r2,81
   231e0:	18800015 	stw	r2,0(r3)
    return -1;
   231e4:	00bfffc4 	movi	r2,-1
  }
}
   231e8:	e037883a 	mov	sp,fp
   231ec:	dfc00117 	ldw	ra,4(sp)
   231f0:	df000017 	ldw	fp,0(sp)
   231f4:	dec00204 	addi	sp,sp,8
   231f8:	f800283a 	ret

000231fc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   231fc:	defffe04 	addi	sp,sp,-8
   23200:	dfc00115 	stw	ra,4(sp)
   23204:	df000015 	stw	fp,0(sp)
   23208:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2320c:	008000b4 	movhi	r2,2
   23210:	109d4904 	addi	r2,r2,29988
   23214:	10800017 	ldw	r2,0(r2)
   23218:	10000526 	beq	r2,zero,23230 <alt_get_errno+0x34>
   2321c:	008000b4 	movhi	r2,2
   23220:	109d4904 	addi	r2,r2,29988
   23224:	10800017 	ldw	r2,0(r2)
   23228:	103ee83a 	callr	r2
   2322c:	00000206 	br	23238 <alt_get_errno+0x3c>
   23230:	008000f4 	movhi	r2,3
   23234:	10a3f204 	addi	r2,r2,-28728
}
   23238:	e037883a 	mov	sp,fp
   2323c:	dfc00117 	ldw	ra,4(sp)
   23240:	df000017 	ldw	fp,0(sp)
   23244:	dec00204 	addi	sp,sp,8
   23248:	f800283a 	ret

0002324c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   2324c:	deffed04 	addi	sp,sp,-76
   23250:	dfc01215 	stw	ra,72(sp)
   23254:	df001115 	stw	fp,68(sp)
   23258:	df001104 	addi	fp,sp,68
   2325c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   23260:	e0bfff17 	ldw	r2,-4(fp)
   23264:	10000616 	blt	r2,zero,23280 <isatty+0x34>
   23268:	e0bfff17 	ldw	r2,-4(fp)
   2326c:	10c00324 	muli	r3,r2,12
   23270:	008000b4 	movhi	r2,2
   23274:	1098c804 	addi	r2,r2,25376
   23278:	1885883a 	add	r2,r3,r2
   2327c:	00000106 	br	23284 <isatty+0x38>
   23280:	0005883a 	mov	r2,zero
   23284:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   23288:	e0bfef17 	ldw	r2,-68(fp)
   2328c:	10000e26 	beq	r2,zero,232c8 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   23290:	e0bfef17 	ldw	r2,-68(fp)
   23294:	10800017 	ldw	r2,0(r2)
   23298:	10800817 	ldw	r2,32(r2)
   2329c:	1000021e 	bne	r2,zero,232a8 <isatty+0x5c>
    {
      return 1;
   232a0:	00800044 	movi	r2,1
   232a4:	00000d06 	br	232dc <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   232a8:	e0bff004 	addi	r2,fp,-64
   232ac:	e13fff17 	ldw	r4,-4(fp)
   232b0:	100b883a 	mov	r5,r2
   232b4:	002314c0 	call	2314c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   232b8:	e0bff117 	ldw	r2,-60(fp)
   232bc:	10880020 	cmpeqi	r2,r2,8192
   232c0:	10803fcc 	andi	r2,r2,255
   232c4:	00000506 	br	232dc <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   232c8:	00231fc0 	call	231fc <alt_get_errno>
   232cc:	1007883a 	mov	r3,r2
   232d0:	00801444 	movi	r2,81
   232d4:	18800015 	stw	r2,0(r3)
    return 0;
   232d8:	0005883a 	mov	r2,zero
  }
}
   232dc:	e037883a 	mov	sp,fp
   232e0:	dfc00117 	ldw	ra,4(sp)
   232e4:	df000017 	ldw	fp,0(sp)
   232e8:	dec00204 	addi	sp,sp,8
   232ec:	f800283a 	ret

000232f0 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   232f0:	defffc04 	addi	sp,sp,-16
   232f4:	df000315 	stw	fp,12(sp)
   232f8:	df000304 	addi	fp,sp,12
   232fc:	e13ffd15 	stw	r4,-12(fp)
   23300:	e17ffe15 	stw	r5,-8(fp)
   23304:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   23308:	e0fffe17 	ldw	r3,-8(fp)
   2330c:	e0bffd17 	ldw	r2,-12(fp)
   23310:	18800c26 	beq	r3,r2,23344 <alt_load_section+0x54>
  {
    while( to != end )
   23314:	00000806 	br	23338 <alt_load_section+0x48>
    {
      *to++ = *from++;
   23318:	e0bffe17 	ldw	r2,-8(fp)
   2331c:	10c00104 	addi	r3,r2,4
   23320:	e0fffe15 	stw	r3,-8(fp)
   23324:	e0fffd17 	ldw	r3,-12(fp)
   23328:	19000104 	addi	r4,r3,4
   2332c:	e13ffd15 	stw	r4,-12(fp)
   23330:	18c00017 	ldw	r3,0(r3)
   23334:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   23338:	e0fffe17 	ldw	r3,-8(fp)
   2333c:	e0bfff17 	ldw	r2,-4(fp)
   23340:	18bff51e 	bne	r3,r2,23318 <__alt_data_end+0xfffe5e58>
    {
      *to++ = *from++;
    }
  }
}
   23344:	e037883a 	mov	sp,fp
   23348:	df000017 	ldw	fp,0(sp)
   2334c:	dec00104 	addi	sp,sp,4
   23350:	f800283a 	ret

00023354 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   23354:	defffe04 	addi	sp,sp,-8
   23358:	dfc00115 	stw	ra,4(sp)
   2335c:	df000015 	stw	fp,0(sp)
   23360:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   23364:	010000b4 	movhi	r4,2
   23368:	211d4e04 	addi	r4,r4,30008
   2336c:	014000b4 	movhi	r5,2
   23370:	2956af04 	addi	r5,r5,23228
   23374:	018000b4 	movhi	r6,2
   23378:	319d4e04 	addi	r6,r6,30008
   2337c:	00232f00 	call	232f0 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   23380:	010000b4 	movhi	r4,2
   23384:	21000804 	addi	r4,r4,32
   23388:	014000b4 	movhi	r5,2
   2338c:	29400804 	addi	r5,r5,32
   23390:	018000b4 	movhi	r6,2
   23394:	31806f04 	addi	r6,r6,444
   23398:	00232f00 	call	232f0 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   2339c:	010000b4 	movhi	r4,2
   233a0:	21168504 	addi	r4,r4,23060
   233a4:	014000b4 	movhi	r5,2
   233a8:	29568504 	addi	r5,r5,23060
   233ac:	018000b4 	movhi	r6,2
   233b0:	3196af04 	addi	r6,r6,23228
   233b4:	00232f00 	call	232f0 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   233b8:	00248300 	call	24830 <alt_dcache_flush_all>
  alt_icache_flush_all();
   233bc:	00249f80 	call	249f8 <alt_icache_flush_all>
}
   233c0:	e037883a 	mov	sp,fp
   233c4:	dfc00117 	ldw	ra,4(sp)
   233c8:	df000017 	ldw	fp,0(sp)
   233cc:	dec00204 	addi	sp,sp,8
   233d0:	f800283a 	ret

000233d4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   233d4:	defffe04 	addi	sp,sp,-8
   233d8:	dfc00115 	stw	ra,4(sp)
   233dc:	df000015 	stw	fp,0(sp)
   233e0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   233e4:	008000b4 	movhi	r2,2
   233e8:	109d4904 	addi	r2,r2,29988
   233ec:	10800017 	ldw	r2,0(r2)
   233f0:	10000526 	beq	r2,zero,23408 <alt_get_errno+0x34>
   233f4:	008000b4 	movhi	r2,2
   233f8:	109d4904 	addi	r2,r2,29988
   233fc:	10800017 	ldw	r2,0(r2)
   23400:	103ee83a 	callr	r2
   23404:	00000206 	br	23410 <alt_get_errno+0x3c>
   23408:	008000f4 	movhi	r2,3
   2340c:	10a3f204 	addi	r2,r2,-28728
}
   23410:	e037883a 	mov	sp,fp
   23414:	dfc00117 	ldw	ra,4(sp)
   23418:	df000017 	ldw	fp,0(sp)
   2341c:	dec00204 	addi	sp,sp,8
   23420:	f800283a 	ret

00023424 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   23424:	defff904 	addi	sp,sp,-28
   23428:	dfc00615 	stw	ra,24(sp)
   2342c:	df000515 	stw	fp,20(sp)
   23430:	df000504 	addi	fp,sp,20
   23434:	e13ffd15 	stw	r4,-12(fp)
   23438:	e17ffe15 	stw	r5,-8(fp)
   2343c:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   23440:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   23444:	e0bffd17 	ldw	r2,-12(fp)
   23448:	10000616 	blt	r2,zero,23464 <lseek+0x40>
   2344c:	e0bffd17 	ldw	r2,-12(fp)
   23450:	10c00324 	muli	r3,r2,12
   23454:	008000b4 	movhi	r2,2
   23458:	1098c804 	addi	r2,r2,25376
   2345c:	1885883a 	add	r2,r3,r2
   23460:	00000106 	br	23468 <lseek+0x44>
   23464:	0005883a 	mov	r2,zero
   23468:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   2346c:	e0bffc17 	ldw	r2,-16(fp)
   23470:	10001026 	beq	r2,zero,234b4 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   23474:	e0bffc17 	ldw	r2,-16(fp)
   23478:	10800017 	ldw	r2,0(r2)
   2347c:	10800717 	ldw	r2,28(r2)
   23480:	10000926 	beq	r2,zero,234a8 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   23484:	e0bffc17 	ldw	r2,-16(fp)
   23488:	10800017 	ldw	r2,0(r2)
   2348c:	10800717 	ldw	r2,28(r2)
   23490:	e13ffc17 	ldw	r4,-16(fp)
   23494:	e17ffe17 	ldw	r5,-8(fp)
   23498:	e1bfff17 	ldw	r6,-4(fp)
   2349c:	103ee83a 	callr	r2
   234a0:	e0bffb15 	stw	r2,-20(fp)
   234a4:	00000506 	br	234bc <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   234a8:	00bfde84 	movi	r2,-134
   234ac:	e0bffb15 	stw	r2,-20(fp)
   234b0:	00000206 	br	234bc <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
   234b4:	00bfebc4 	movi	r2,-81
   234b8:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   234bc:	e0bffb17 	ldw	r2,-20(fp)
   234c0:	1000070e 	bge	r2,zero,234e0 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
   234c4:	00233d40 	call	233d4 <alt_get_errno>
   234c8:	1007883a 	mov	r3,r2
   234cc:	e0bffb17 	ldw	r2,-20(fp)
   234d0:	0085c83a 	sub	r2,zero,r2
   234d4:	18800015 	stw	r2,0(r3)
    rc = -1;
   234d8:	00bfffc4 	movi	r2,-1
   234dc:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   234e0:	e0bffb17 	ldw	r2,-20(fp)
}
   234e4:	e037883a 	mov	sp,fp
   234e8:	dfc00117 	ldw	ra,4(sp)
   234ec:	df000017 	ldw	fp,0(sp)
   234f0:	dec00204 	addi	sp,sp,8
   234f4:	f800283a 	ret

000234f8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   234f8:	defffd04 	addi	sp,sp,-12
   234fc:	dfc00215 	stw	ra,8(sp)
   23500:	df000115 	stw	fp,4(sp)
   23504:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   23508:	0009883a 	mov	r4,zero
   2350c:	00239bc0 	call	239bc <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   23510:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   23514:	00239f00 	call	239f0 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   23518:	010000b4 	movhi	r4,2
   2351c:	2116a704 	addi	r4,r4,23196
   23520:	014000b4 	movhi	r5,2
   23524:	2956a704 	addi	r5,r5,23196
   23528:	018000b4 	movhi	r6,2
   2352c:	3196a704 	addi	r6,r6,23196
   23530:	0024db80 	call	24db8 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   23534:	00249400 	call	24940 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   23538:	010000b4 	movhi	r4,2
   2353c:	21126704 	addi	r4,r4,18844
   23540:	00255440 	call	25544 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   23544:	d126b317 	ldw	r4,-25908(gp)
   23548:	d0e6b417 	ldw	r3,-25904(gp)
   2354c:	d0a6b517 	ldw	r2,-25900(gp)
   23550:	180b883a 	mov	r5,r3
   23554:	100d883a 	mov	r6,r2
   23558:	00204840 	call	20484 <main>
   2355c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   23560:	01000044 	movi	r4,1
   23564:	00230000 	call	23000 <close>
  exit (result);
   23568:	e13fff17 	ldw	r4,-4(fp)
   2356c:	00255580 	call	25558 <exit>

00023570 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   23570:	defffe04 	addi	sp,sp,-8
   23574:	df000115 	stw	fp,4(sp)
   23578:	df000104 	addi	fp,sp,4
   2357c:	e13fff15 	stw	r4,-4(fp)
}
   23580:	e037883a 	mov	sp,fp
   23584:	df000017 	ldw	fp,0(sp)
   23588:	dec00104 	addi	sp,sp,4
   2358c:	f800283a 	ret

00023590 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   23590:	defffe04 	addi	sp,sp,-8
   23594:	df000115 	stw	fp,4(sp)
   23598:	df000104 	addi	fp,sp,4
   2359c:	e13fff15 	stw	r4,-4(fp)
}
   235a0:	e037883a 	mov	sp,fp
   235a4:	df000017 	ldw	fp,0(sp)
   235a8:	dec00104 	addi	sp,sp,4
   235ac:	f800283a 	ret

000235b0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   235b0:	defffe04 	addi	sp,sp,-8
   235b4:	dfc00115 	stw	ra,4(sp)
   235b8:	df000015 	stw	fp,0(sp)
   235bc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   235c0:	008000b4 	movhi	r2,2
   235c4:	109d4904 	addi	r2,r2,29988
   235c8:	10800017 	ldw	r2,0(r2)
   235cc:	10000526 	beq	r2,zero,235e4 <alt_get_errno+0x34>
   235d0:	008000b4 	movhi	r2,2
   235d4:	109d4904 	addi	r2,r2,29988
   235d8:	10800017 	ldw	r2,0(r2)
   235dc:	103ee83a 	callr	r2
   235e0:	00000206 	br	235ec <alt_get_errno+0x3c>
   235e4:	008000f4 	movhi	r2,3
   235e8:	10a3f204 	addi	r2,r2,-28728
}
   235ec:	e037883a 	mov	sp,fp
   235f0:	dfc00117 	ldw	ra,4(sp)
   235f4:	df000017 	ldw	fp,0(sp)
   235f8:	dec00204 	addi	sp,sp,8
   235fc:	f800283a 	ret

00023600 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   23600:	defff904 	addi	sp,sp,-28
   23604:	dfc00615 	stw	ra,24(sp)
   23608:	df000515 	stw	fp,20(sp)
   2360c:	df000504 	addi	fp,sp,20
   23610:	e13ffd15 	stw	r4,-12(fp)
   23614:	e17ffe15 	stw	r5,-8(fp)
   23618:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2361c:	e0bffd17 	ldw	r2,-12(fp)
   23620:	10000616 	blt	r2,zero,2363c <read+0x3c>
   23624:	e0bffd17 	ldw	r2,-12(fp)
   23628:	10c00324 	muli	r3,r2,12
   2362c:	008000b4 	movhi	r2,2
   23630:	1098c804 	addi	r2,r2,25376
   23634:	1885883a 	add	r2,r3,r2
   23638:	00000106 	br	23640 <read+0x40>
   2363c:	0005883a 	mov	r2,zero
   23640:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   23644:	e0bffb17 	ldw	r2,-20(fp)
   23648:	10002226 	beq	r2,zero,236d4 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   2364c:	e0bffb17 	ldw	r2,-20(fp)
   23650:	10800217 	ldw	r2,8(r2)
   23654:	108000cc 	andi	r2,r2,3
   23658:	10800060 	cmpeqi	r2,r2,1
   2365c:	1000181e 	bne	r2,zero,236c0 <read+0xc0>
        (fd->dev->read))
   23660:	e0bffb17 	ldw	r2,-20(fp)
   23664:	10800017 	ldw	r2,0(r2)
   23668:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   2366c:	10001426 	beq	r2,zero,236c0 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   23670:	e0bffb17 	ldw	r2,-20(fp)
   23674:	10800017 	ldw	r2,0(r2)
   23678:	10800517 	ldw	r2,20(r2)
   2367c:	e0ffff17 	ldw	r3,-4(fp)
   23680:	e13ffb17 	ldw	r4,-20(fp)
   23684:	e17ffe17 	ldw	r5,-8(fp)
   23688:	180d883a 	mov	r6,r3
   2368c:	103ee83a 	callr	r2
   23690:	e0bffc15 	stw	r2,-16(fp)
   23694:	e0bffc17 	ldw	r2,-16(fp)
   23698:	1000070e 	bge	r2,zero,236b8 <read+0xb8>
        {
          ALT_ERRNO = -rval;
   2369c:	00235b00 	call	235b0 <alt_get_errno>
   236a0:	1007883a 	mov	r3,r2
   236a4:	e0bffc17 	ldw	r2,-16(fp)
   236a8:	0085c83a 	sub	r2,zero,r2
   236ac:	18800015 	stw	r2,0(r3)
          return -1;
   236b0:	00bfffc4 	movi	r2,-1
   236b4:	00000c06 	br	236e8 <read+0xe8>
        }
        return rval;
   236b8:	e0bffc17 	ldw	r2,-16(fp)
   236bc:	00000a06 	br	236e8 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
   236c0:	00235b00 	call	235b0 <alt_get_errno>
   236c4:	1007883a 	mov	r3,r2
   236c8:	00800344 	movi	r2,13
   236cc:	18800015 	stw	r2,0(r3)
   236d0:	00000406 	br	236e4 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   236d4:	00235b00 	call	235b0 <alt_get_errno>
   236d8:	1007883a 	mov	r3,r2
   236dc:	00801444 	movi	r2,81
   236e0:	18800015 	stw	r2,0(r3)
  }
  return -1;
   236e4:	00bfffc4 	movi	r2,-1
}
   236e8:	e037883a 	mov	sp,fp
   236ec:	dfc00117 	ldw	ra,4(sp)
   236f0:	df000017 	ldw	fp,0(sp)
   236f4:	dec00204 	addi	sp,sp,8
   236f8:	f800283a 	ret

000236fc <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   236fc:	defffe04 	addi	sp,sp,-8
   23700:	df000115 	stw	fp,4(sp)
   23704:	df000104 	addi	fp,sp,4
   23708:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   2370c:	e0bfff17 	ldw	r2,-4(fp)
   23710:	108000d0 	cmplti	r2,r2,3
   23714:	10000d1e 	bne	r2,zero,2374c <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   23718:	008000b4 	movhi	r2,2
   2371c:	1098c804 	addi	r2,r2,25376
   23720:	e0ffff17 	ldw	r3,-4(fp)
   23724:	18c00324 	muli	r3,r3,12
   23728:	10c5883a 	add	r2,r2,r3
   2372c:	10800204 	addi	r2,r2,8
   23730:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   23734:	008000b4 	movhi	r2,2
   23738:	1098c804 	addi	r2,r2,25376
   2373c:	e0ffff17 	ldw	r3,-4(fp)
   23740:	18c00324 	muli	r3,r3,12
   23744:	10c5883a 	add	r2,r2,r3
   23748:	10000015 	stw	zero,0(r2)
  }
}
   2374c:	e037883a 	mov	sp,fp
   23750:	df000017 	ldw	fp,0(sp)
   23754:	dec00104 	addi	sp,sp,4
   23758:	f800283a 	ret

0002375c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   2375c:	defff904 	addi	sp,sp,-28
   23760:	df000615 	stw	fp,24(sp)
   23764:	df000604 	addi	fp,sp,24
   23768:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2376c:	0005303a 	rdctl	r2,status
   23770:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   23774:	e0fffc17 	ldw	r3,-16(fp)
   23778:	00bfff84 	movi	r2,-2
   2377c:	1884703a 	and	r2,r3,r2
   23780:	1001703a 	wrctl	status,r2
  
  return context;
   23784:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   23788:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   2378c:	d0a00a17 	ldw	r2,-32728(gp)
   23790:	10c000c4 	addi	r3,r2,3
   23794:	00bfff04 	movi	r2,-4
   23798:	1884703a 	and	r2,r3,r2
   2379c:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   237a0:	d0e00a17 	ldw	r3,-32728(gp)
   237a4:	e0bfff17 	ldw	r2,-4(fp)
   237a8:	1887883a 	add	r3,r3,r2
   237ac:	00800134 	movhi	r2,4
   237b0:	10b53004 	addi	r2,r2,-11072
   237b4:	10c0062e 	bgeu	r2,r3,237d0 <sbrk+0x74>
   237b8:	e0bffa17 	ldw	r2,-24(fp)
   237bc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   237c0:	e0bffd17 	ldw	r2,-12(fp)
   237c4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   237c8:	00bfffc4 	movi	r2,-1
   237cc:	00000b06 	br	237fc <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   237d0:	d0a00a17 	ldw	r2,-32728(gp)
   237d4:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
   237d8:	d0e00a17 	ldw	r3,-32728(gp)
   237dc:	e0bfff17 	ldw	r2,-4(fp)
   237e0:	1885883a 	add	r2,r3,r2
   237e4:	d0a00a15 	stw	r2,-32728(gp)
   237e8:	e0bffa17 	ldw	r2,-24(fp)
   237ec:	e0bffe15 	stw	r2,-8(fp)
   237f0:	e0bffe17 	ldw	r2,-8(fp)
   237f4:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   237f8:	e0bffb17 	ldw	r2,-20(fp)
} 
   237fc:	e037883a 	mov	sp,fp
   23800:	df000017 	ldw	fp,0(sp)
   23804:	dec00104 	addi	sp,sp,4
   23808:	f800283a 	ret

0002380c <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   2380c:	defffd04 	addi	sp,sp,-12
   23810:	dfc00215 	stw	ra,8(sp)
   23814:	df000115 	stw	fp,4(sp)
   23818:	df000104 	addi	fp,sp,4
   2381c:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   23820:	e13fff17 	ldw	r4,-4(fp)
   23824:	00246d80 	call	246d8 <alt_busy_sleep>
}
   23828:	e037883a 	mov	sp,fp
   2382c:	dfc00117 	ldw	ra,4(sp)
   23830:	df000017 	ldw	fp,0(sp)
   23834:	dec00204 	addi	sp,sp,8
   23838:	f800283a 	ret

0002383c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2383c:	defffe04 	addi	sp,sp,-8
   23840:	dfc00115 	stw	ra,4(sp)
   23844:	df000015 	stw	fp,0(sp)
   23848:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2384c:	008000b4 	movhi	r2,2
   23850:	109d4904 	addi	r2,r2,29988
   23854:	10800017 	ldw	r2,0(r2)
   23858:	10000526 	beq	r2,zero,23870 <alt_get_errno+0x34>
   2385c:	008000b4 	movhi	r2,2
   23860:	109d4904 	addi	r2,r2,29988
   23864:	10800017 	ldw	r2,0(r2)
   23868:	103ee83a 	callr	r2
   2386c:	00000206 	br	23878 <alt_get_errno+0x3c>
   23870:	008000f4 	movhi	r2,3
   23874:	10a3f204 	addi	r2,r2,-28728
}
   23878:	e037883a 	mov	sp,fp
   2387c:	dfc00117 	ldw	ra,4(sp)
   23880:	df000017 	ldw	fp,0(sp)
   23884:	dec00204 	addi	sp,sp,8
   23888:	f800283a 	ret

0002388c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   2388c:	defff904 	addi	sp,sp,-28
   23890:	dfc00615 	stw	ra,24(sp)
   23894:	df000515 	stw	fp,20(sp)
   23898:	df000504 	addi	fp,sp,20
   2389c:	e13ffd15 	stw	r4,-12(fp)
   238a0:	e17ffe15 	stw	r5,-8(fp)
   238a4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   238a8:	e0bffd17 	ldw	r2,-12(fp)
   238ac:	10000616 	blt	r2,zero,238c8 <write+0x3c>
   238b0:	e0bffd17 	ldw	r2,-12(fp)
   238b4:	10c00324 	muli	r3,r2,12
   238b8:	008000b4 	movhi	r2,2
   238bc:	1098c804 	addi	r2,r2,25376
   238c0:	1885883a 	add	r2,r3,r2
   238c4:	00000106 	br	238cc <write+0x40>
   238c8:	0005883a 	mov	r2,zero
   238cc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   238d0:	e0bffb17 	ldw	r2,-20(fp)
   238d4:	10002126 	beq	r2,zero,2395c <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   238d8:	e0bffb17 	ldw	r2,-20(fp)
   238dc:	10800217 	ldw	r2,8(r2)
   238e0:	108000cc 	andi	r2,r2,3
   238e4:	10001826 	beq	r2,zero,23948 <write+0xbc>
   238e8:	e0bffb17 	ldw	r2,-20(fp)
   238ec:	10800017 	ldw	r2,0(r2)
   238f0:	10800617 	ldw	r2,24(r2)
   238f4:	10001426 	beq	r2,zero,23948 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   238f8:	e0bffb17 	ldw	r2,-20(fp)
   238fc:	10800017 	ldw	r2,0(r2)
   23900:	10800617 	ldw	r2,24(r2)
   23904:	e0ffff17 	ldw	r3,-4(fp)
   23908:	e13ffb17 	ldw	r4,-20(fp)
   2390c:	e17ffe17 	ldw	r5,-8(fp)
   23910:	180d883a 	mov	r6,r3
   23914:	103ee83a 	callr	r2
   23918:	e0bffc15 	stw	r2,-16(fp)
   2391c:	e0bffc17 	ldw	r2,-16(fp)
   23920:	1000070e 	bge	r2,zero,23940 <write+0xb4>
      {
        ALT_ERRNO = -rval;
   23924:	002383c0 	call	2383c <alt_get_errno>
   23928:	1007883a 	mov	r3,r2
   2392c:	e0bffc17 	ldw	r2,-16(fp)
   23930:	0085c83a 	sub	r2,zero,r2
   23934:	18800015 	stw	r2,0(r3)
        return -1;
   23938:	00bfffc4 	movi	r2,-1
   2393c:	00000c06 	br	23970 <write+0xe4>
      }
      return rval;
   23940:	e0bffc17 	ldw	r2,-16(fp)
   23944:	00000a06 	br	23970 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
   23948:	002383c0 	call	2383c <alt_get_errno>
   2394c:	1007883a 	mov	r3,r2
   23950:	00800344 	movi	r2,13
   23954:	18800015 	stw	r2,0(r3)
   23958:	00000406 	br	2396c <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   2395c:	002383c0 	call	2383c <alt_get_errno>
   23960:	1007883a 	mov	r3,r2
   23964:	00801444 	movi	r2,81
   23968:	18800015 	stw	r2,0(r3)
  }
  return -1;
   2396c:	00bfffc4 	movi	r2,-1
}
   23970:	e037883a 	mov	sp,fp
   23974:	dfc00117 	ldw	ra,4(sp)
   23978:	df000017 	ldw	fp,0(sp)
   2397c:	dec00204 	addi	sp,sp,8
   23980:	f800283a 	ret

00023984 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   23984:	defffd04 	addi	sp,sp,-12
   23988:	dfc00215 	stw	ra,8(sp)
   2398c:	df000115 	stw	fp,4(sp)
   23990:	df000104 	addi	fp,sp,4
   23994:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   23998:	e13fff17 	ldw	r4,-4(fp)
   2399c:	014000b4 	movhi	r5,2
   239a0:	295d4604 	addi	r5,r5,29976
   239a4:	002489c0 	call	2489c <alt_dev_llist_insert>
}
   239a8:	e037883a 	mov	sp,fp
   239ac:	dfc00117 	ldw	ra,4(sp)
   239b0:	df000017 	ldw	fp,0(sp)
   239b4:	dec00204 	addi	sp,sp,8
   239b8:	f800283a 	ret

000239bc <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   239bc:	defffd04 	addi	sp,sp,-12
   239c0:	dfc00215 	stw	ra,8(sp)
   239c4:	df000115 	stw	fp,4(sp)
   239c8:	df000104 	addi	fp,sp,4
   239cc:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_PROC, nios2_proc);
   239d0:	00252400 	call	25240 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   239d4:	00800044 	movi	r2,1
   239d8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   239dc:	e037883a 	mov	sp,fp
   239e0:	dfc00117 	ldw	ra,4(sp)
   239e4:	df000017 	ldw	fp,0(sp)
   239e8:	dec00204 	addi	sp,sp,8
   239ec:	f800283a 	ret

000239f0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   239f0:	defffe04 	addi	sp,sp,-8
   239f4:	dfc00115 	stw	ra,4(sp)
   239f8:	df000015 	stw	fp,0(sp)
   239fc:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYS_CLK_TIMER, sys_clk_timer);
   23a00:	01000134 	movhi	r4,4
   23a04:	21040004 	addi	r4,r4,4096
   23a08:	000b883a 	mov	r5,zero
   23a0c:	01800044 	movi	r6,1
   23a10:	01c0fa04 	movi	r7,1000
   23a14:	00245100 	call	24510 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   23a18:	010000b4 	movhi	r4,2
   23a1c:	21193204 	addi	r4,r4,25800
   23a20:	000b883a 	mov	r5,zero
   23a24:	01800404 	movi	r6,16
   23a28:	0023bb40 	call	23bb4 <altera_avalon_jtag_uart_init>
   23a2c:	010000b4 	movhi	r4,2
   23a30:	21192804 	addi	r4,r4,25760
   23a34:	00239840 	call	23984 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_2019, sysid_2019);
   23a38:	0001883a 	nop
}
   23a3c:	e037883a 	mov	sp,fp
   23a40:	dfc00117 	ldw	ra,4(sp)
   23a44:	df000017 	ldw	fp,0(sp)
   23a48:	dec00204 	addi	sp,sp,8
   23a4c:	f800283a 	ret

00023a50 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   23a50:	defffa04 	addi	sp,sp,-24
   23a54:	dfc00515 	stw	ra,20(sp)
   23a58:	df000415 	stw	fp,16(sp)
   23a5c:	df000404 	addi	fp,sp,16
   23a60:	e13ffd15 	stw	r4,-12(fp)
   23a64:	e17ffe15 	stw	r5,-8(fp)
   23a68:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   23a6c:	e0bffd17 	ldw	r2,-12(fp)
   23a70:	10800017 	ldw	r2,0(r2)
   23a74:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   23a78:	e0bffc17 	ldw	r2,-16(fp)
   23a7c:	10c00a04 	addi	r3,r2,40
   23a80:	e0bffd17 	ldw	r2,-12(fp)
   23a84:	10800217 	ldw	r2,8(r2)
   23a88:	1809883a 	mov	r4,r3
   23a8c:	e17ffe17 	ldw	r5,-8(fp)
   23a90:	e1bfff17 	ldw	r6,-4(fp)
   23a94:	100f883a 	mov	r7,r2
   23a98:	00240780 	call	24078 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   23a9c:	e037883a 	mov	sp,fp
   23aa0:	dfc00117 	ldw	ra,4(sp)
   23aa4:	df000017 	ldw	fp,0(sp)
   23aa8:	dec00204 	addi	sp,sp,8
   23aac:	f800283a 	ret

00023ab0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   23ab0:	defffa04 	addi	sp,sp,-24
   23ab4:	dfc00515 	stw	ra,20(sp)
   23ab8:	df000415 	stw	fp,16(sp)
   23abc:	df000404 	addi	fp,sp,16
   23ac0:	e13ffd15 	stw	r4,-12(fp)
   23ac4:	e17ffe15 	stw	r5,-8(fp)
   23ac8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   23acc:	e0bffd17 	ldw	r2,-12(fp)
   23ad0:	10800017 	ldw	r2,0(r2)
   23ad4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   23ad8:	e0bffc17 	ldw	r2,-16(fp)
   23adc:	10c00a04 	addi	r3,r2,40
   23ae0:	e0bffd17 	ldw	r2,-12(fp)
   23ae4:	10800217 	ldw	r2,8(r2)
   23ae8:	1809883a 	mov	r4,r3
   23aec:	e17ffe17 	ldw	r5,-8(fp)
   23af0:	e1bfff17 	ldw	r6,-4(fp)
   23af4:	100f883a 	mov	r7,r2
   23af8:	00242840 	call	24284 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   23afc:	e037883a 	mov	sp,fp
   23b00:	dfc00117 	ldw	ra,4(sp)
   23b04:	df000017 	ldw	fp,0(sp)
   23b08:	dec00204 	addi	sp,sp,8
   23b0c:	f800283a 	ret

00023b10 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   23b10:	defffc04 	addi	sp,sp,-16
   23b14:	dfc00315 	stw	ra,12(sp)
   23b18:	df000215 	stw	fp,8(sp)
   23b1c:	df000204 	addi	fp,sp,8
   23b20:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   23b24:	e0bfff17 	ldw	r2,-4(fp)
   23b28:	10800017 	ldw	r2,0(r2)
   23b2c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   23b30:	e0bffe17 	ldw	r2,-8(fp)
   23b34:	10c00a04 	addi	r3,r2,40
   23b38:	e0bfff17 	ldw	r2,-4(fp)
   23b3c:	10800217 	ldw	r2,8(r2)
   23b40:	1809883a 	mov	r4,r3
   23b44:	100b883a 	mov	r5,r2
   23b48:	0023f240 	call	23f24 <altera_avalon_jtag_uart_close>
}
   23b4c:	e037883a 	mov	sp,fp
   23b50:	dfc00117 	ldw	ra,4(sp)
   23b54:	df000017 	ldw	fp,0(sp)
   23b58:	dec00204 	addi	sp,sp,8
   23b5c:	f800283a 	ret

00023b60 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   23b60:	defffa04 	addi	sp,sp,-24
   23b64:	dfc00515 	stw	ra,20(sp)
   23b68:	df000415 	stw	fp,16(sp)
   23b6c:	df000404 	addi	fp,sp,16
   23b70:	e13ffd15 	stw	r4,-12(fp)
   23b74:	e17ffe15 	stw	r5,-8(fp)
   23b78:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   23b7c:	e0bffd17 	ldw	r2,-12(fp)
   23b80:	10800017 	ldw	r2,0(r2)
   23b84:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   23b88:	e0bffc17 	ldw	r2,-16(fp)
   23b8c:	10800a04 	addi	r2,r2,40
   23b90:	1009883a 	mov	r4,r2
   23b94:	e17ffe17 	ldw	r5,-8(fp)
   23b98:	e1bfff17 	ldw	r6,-4(fp)
   23b9c:	0023f8c0 	call	23f8c <altera_avalon_jtag_uart_ioctl>
}
   23ba0:	e037883a 	mov	sp,fp
   23ba4:	dfc00117 	ldw	ra,4(sp)
   23ba8:	df000017 	ldw	fp,0(sp)
   23bac:	dec00204 	addi	sp,sp,8
   23bb0:	f800283a 	ret

00023bb4 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   23bb4:	defffa04 	addi	sp,sp,-24
   23bb8:	dfc00515 	stw	ra,20(sp)
   23bbc:	df000415 	stw	fp,16(sp)
   23bc0:	df000404 	addi	fp,sp,16
   23bc4:	e13ffd15 	stw	r4,-12(fp)
   23bc8:	e17ffe15 	stw	r5,-8(fp)
   23bcc:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   23bd0:	e0bffd17 	ldw	r2,-12(fp)
   23bd4:	00c00044 	movi	r3,1
   23bd8:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   23bdc:	e0bffd17 	ldw	r2,-12(fp)
   23be0:	10800017 	ldw	r2,0(r2)
   23be4:	10800104 	addi	r2,r2,4
   23be8:	1007883a 	mov	r3,r2
   23bec:	e0bffd17 	ldw	r2,-12(fp)
   23bf0:	10800817 	ldw	r2,32(r2)
   23bf4:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   23bf8:	e0fffe17 	ldw	r3,-8(fp)
   23bfc:	e0bfff17 	ldw	r2,-4(fp)
   23c00:	d8000015 	stw	zero,0(sp)
   23c04:	1809883a 	mov	r4,r3
   23c08:	100b883a 	mov	r5,r2
   23c0c:	018000b4 	movhi	r6,2
   23c10:	318f1e04 	addi	r6,r6,15480
   23c14:	e1fffd17 	ldw	r7,-12(fp)
   23c18:	0024a280 	call	24a28 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   23c1c:	e0bffd17 	ldw	r2,-12(fp)
   23c20:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   23c24:	e0bffd17 	ldw	r2,-12(fp)
   23c28:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   23c2c:	008000f4 	movhi	r2,3
   23c30:	10a3f704 	addi	r2,r2,-28708
   23c34:	10800017 	ldw	r2,0(r2)
   23c38:	1809883a 	mov	r4,r3
   23c3c:	100b883a 	mov	r5,r2
   23c40:	018000b4 	movhi	r6,2
   23c44:	318f9f04 	addi	r6,r6,15996
   23c48:	e1fffd17 	ldw	r7,-12(fp)
   23c4c:	00245980 	call	24598 <alt_alarm_start>
   23c50:	1000040e 	bge	r2,zero,23c64 <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   23c54:	e0fffd17 	ldw	r3,-12(fp)
   23c58:	00a00034 	movhi	r2,32768
   23c5c:	10bfffc4 	addi	r2,r2,-1
   23c60:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   23c64:	e037883a 	mov	sp,fp
   23c68:	dfc00117 	ldw	ra,4(sp)
   23c6c:	df000017 	ldw	fp,0(sp)
   23c70:	dec00204 	addi	sp,sp,8
   23c74:	f800283a 	ret

00023c78 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   23c78:	defff804 	addi	sp,sp,-32
   23c7c:	df000715 	stw	fp,28(sp)
   23c80:	df000704 	addi	fp,sp,28
   23c84:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   23c88:	e0bfff17 	ldw	r2,-4(fp)
   23c8c:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   23c90:	e0bffb17 	ldw	r2,-20(fp)
   23c94:	10800017 	ldw	r2,0(r2)
   23c98:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   23c9c:	e0bffc17 	ldw	r2,-16(fp)
   23ca0:	10800104 	addi	r2,r2,4
   23ca4:	10800037 	ldwio	r2,0(r2)
   23ca8:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   23cac:	e0bffd17 	ldw	r2,-12(fp)
   23cb0:	1080c00c 	andi	r2,r2,768
   23cb4:	1000011e 	bne	r2,zero,23cbc <altera_avalon_jtag_uart_irq+0x44>
      break;
   23cb8:	00006c06 	br	23e6c <altera_avalon_jtag_uart_irq+0x1f4>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   23cbc:	e0bffd17 	ldw	r2,-12(fp)
   23cc0:	1080400c 	andi	r2,r2,256
   23cc4:	10003426 	beq	r2,zero,23d98 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   23cc8:	00800074 	movhi	r2,1
   23ccc:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   23cd0:	e0bffb17 	ldw	r2,-20(fp)
   23cd4:	10800a17 	ldw	r2,40(r2)
   23cd8:	10800044 	addi	r2,r2,1
   23cdc:	1081ffcc 	andi	r2,r2,2047
   23ce0:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   23ce4:	e0bffb17 	ldw	r2,-20(fp)
   23ce8:	10c00b17 	ldw	r3,44(r2)
   23cec:	e0bffe17 	ldw	r2,-8(fp)
   23cf0:	1880011e 	bne	r3,r2,23cf8 <altera_avalon_jtag_uart_irq+0x80>
          break;
   23cf4:	00001606 	br	23d50 <altera_avalon_jtag_uart_irq+0xd8>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   23cf8:	e0bffc17 	ldw	r2,-16(fp)
   23cfc:	10800037 	ldwio	r2,0(r2)
   23d00:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   23d04:	e0bff917 	ldw	r2,-28(fp)
   23d08:	10a0000c 	andi	r2,r2,32768
   23d0c:	1000011e 	bne	r2,zero,23d14 <altera_avalon_jtag_uart_irq+0x9c>
          break;
   23d10:	00000f06 	br	23d50 <altera_avalon_jtag_uart_irq+0xd8>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   23d14:	e0bffb17 	ldw	r2,-20(fp)
   23d18:	10800a17 	ldw	r2,40(r2)
   23d1c:	e0fff917 	ldw	r3,-28(fp)
   23d20:	1809883a 	mov	r4,r3
   23d24:	e0fffb17 	ldw	r3,-20(fp)
   23d28:	1885883a 	add	r2,r3,r2
   23d2c:	10800e04 	addi	r2,r2,56
   23d30:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   23d34:	e0bffb17 	ldw	r2,-20(fp)
   23d38:	10800a17 	ldw	r2,40(r2)
   23d3c:	10800044 	addi	r2,r2,1
   23d40:	10c1ffcc 	andi	r3,r2,2047
   23d44:	e0bffb17 	ldw	r2,-20(fp)
   23d48:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   23d4c:	003fe006 	br	23cd0 <__alt_data_end+0xfffe6810>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   23d50:	e0bff917 	ldw	r2,-28(fp)
   23d54:	10bfffec 	andhi	r2,r2,65535
   23d58:	10000f26 	beq	r2,zero,23d98 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   23d5c:	e0bffb17 	ldw	r2,-20(fp)
   23d60:	10c00817 	ldw	r3,32(r2)
   23d64:	00bfff84 	movi	r2,-2
   23d68:	1886703a 	and	r3,r3,r2
   23d6c:	e0bffb17 	ldw	r2,-20(fp)
   23d70:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   23d74:	e0bffc17 	ldw	r2,-16(fp)
   23d78:	10800104 	addi	r2,r2,4
   23d7c:	1007883a 	mov	r3,r2
   23d80:	e0bffb17 	ldw	r2,-20(fp)
   23d84:	10800817 	ldw	r2,32(r2)
   23d88:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   23d8c:	e0bffc17 	ldw	r2,-16(fp)
   23d90:	10800104 	addi	r2,r2,4
   23d94:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   23d98:	e0bffd17 	ldw	r2,-12(fp)
   23d9c:	1080800c 	andi	r2,r2,512
   23da0:	10003126 	beq	r2,zero,23e68 <altera_avalon_jtag_uart_irq+0x1f0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   23da4:	e0bffd17 	ldw	r2,-12(fp)
   23da8:	1004d43a 	srli	r2,r2,16
   23dac:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   23db0:	00001406 	br	23e04 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   23db4:	e0bffc17 	ldw	r2,-16(fp)
   23db8:	e0fffb17 	ldw	r3,-20(fp)
   23dbc:	18c00d17 	ldw	r3,52(r3)
   23dc0:	e13ffb17 	ldw	r4,-20(fp)
   23dc4:	20c7883a 	add	r3,r4,r3
   23dc8:	18c20e04 	addi	r3,r3,2104
   23dcc:	18c00003 	ldbu	r3,0(r3)
   23dd0:	18c03fcc 	andi	r3,r3,255
   23dd4:	18c0201c 	xori	r3,r3,128
   23dd8:	18ffe004 	addi	r3,r3,-128
   23ddc:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   23de0:	e0bffb17 	ldw	r2,-20(fp)
   23de4:	10800d17 	ldw	r2,52(r2)
   23de8:	10800044 	addi	r2,r2,1
   23dec:	10c1ffcc 	andi	r3,r2,2047
   23df0:	e0bffb17 	ldw	r2,-20(fp)
   23df4:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   23df8:	e0bffa17 	ldw	r2,-24(fp)
   23dfc:	10bfffc4 	addi	r2,r2,-1
   23e00:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   23e04:	e0bffa17 	ldw	r2,-24(fp)
   23e08:	10000526 	beq	r2,zero,23e20 <altera_avalon_jtag_uart_irq+0x1a8>
   23e0c:	e0bffb17 	ldw	r2,-20(fp)
   23e10:	10c00d17 	ldw	r3,52(r2)
   23e14:	e0bffb17 	ldw	r2,-20(fp)
   23e18:	10800c17 	ldw	r2,48(r2)
   23e1c:	18bfe51e 	bne	r3,r2,23db4 <__alt_data_end+0xfffe68f4>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   23e20:	e0bffa17 	ldw	r2,-24(fp)
   23e24:	10001026 	beq	r2,zero,23e68 <altera_avalon_jtag_uart_irq+0x1f0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   23e28:	e0bffb17 	ldw	r2,-20(fp)
   23e2c:	10c00817 	ldw	r3,32(r2)
   23e30:	00bfff44 	movi	r2,-3
   23e34:	1886703a 	and	r3,r3,r2
   23e38:	e0bffb17 	ldw	r2,-20(fp)
   23e3c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   23e40:	e0bffb17 	ldw	r2,-20(fp)
   23e44:	10800017 	ldw	r2,0(r2)
   23e48:	10800104 	addi	r2,r2,4
   23e4c:	1007883a 	mov	r3,r2
   23e50:	e0bffb17 	ldw	r2,-20(fp)
   23e54:	10800817 	ldw	r2,32(r2)
   23e58:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   23e5c:	e0bffc17 	ldw	r2,-16(fp)
   23e60:	10800104 	addi	r2,r2,4
   23e64:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   23e68:	003f8c06 	br	23c9c <__alt_data_end+0xfffe67dc>
}
   23e6c:	e037883a 	mov	sp,fp
   23e70:	df000017 	ldw	fp,0(sp)
   23e74:	dec00104 	addi	sp,sp,4
   23e78:	f800283a 	ret

00023e7c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   23e7c:	defff804 	addi	sp,sp,-32
   23e80:	df000715 	stw	fp,28(sp)
   23e84:	df000704 	addi	fp,sp,28
   23e88:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   23e8c:	e0bffb17 	ldw	r2,-20(fp)
   23e90:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   23e94:	e0bff917 	ldw	r2,-28(fp)
   23e98:	10800017 	ldw	r2,0(r2)
   23e9c:	10800104 	addi	r2,r2,4
   23ea0:	10800037 	ldwio	r2,0(r2)
   23ea4:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   23ea8:	e0bffa17 	ldw	r2,-24(fp)
   23eac:	1081000c 	andi	r2,r2,1024
   23eb0:	10000b26 	beq	r2,zero,23ee0 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   23eb4:	e0bff917 	ldw	r2,-28(fp)
   23eb8:	10800017 	ldw	r2,0(r2)
   23ebc:	10800104 	addi	r2,r2,4
   23ec0:	1007883a 	mov	r3,r2
   23ec4:	e0bff917 	ldw	r2,-28(fp)
   23ec8:	10800817 	ldw	r2,32(r2)
   23ecc:	10810014 	ori	r2,r2,1024
   23ed0:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   23ed4:	e0bff917 	ldw	r2,-28(fp)
   23ed8:	10000915 	stw	zero,36(r2)
   23edc:	00000a06 	br	23f08 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   23ee0:	e0bff917 	ldw	r2,-28(fp)
   23ee4:	10c00917 	ldw	r3,36(r2)
   23ee8:	00a00034 	movhi	r2,32768
   23eec:	10bfff04 	addi	r2,r2,-4
   23ef0:	10c00536 	bltu	r2,r3,23f08 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   23ef4:	e0bff917 	ldw	r2,-28(fp)
   23ef8:	10800917 	ldw	r2,36(r2)
   23efc:	10c00044 	addi	r3,r2,1
   23f00:	e0bff917 	ldw	r2,-28(fp)
   23f04:	10c00915 	stw	r3,36(r2)
   23f08:	008000f4 	movhi	r2,3
   23f0c:	10a3f704 	addi	r2,r2,-28708
   23f10:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   23f14:	e037883a 	mov	sp,fp
   23f18:	df000017 	ldw	fp,0(sp)
   23f1c:	dec00104 	addi	sp,sp,4
   23f20:	f800283a 	ret

00023f24 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   23f24:	defffd04 	addi	sp,sp,-12
   23f28:	df000215 	stw	fp,8(sp)
   23f2c:	df000204 	addi	fp,sp,8
   23f30:	e13ffe15 	stw	r4,-8(fp)
   23f34:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   23f38:	00000506 	br	23f50 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   23f3c:	e0bfff17 	ldw	r2,-4(fp)
   23f40:	1090000c 	andi	r2,r2,16384
   23f44:	10000226 	beq	r2,zero,23f50 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   23f48:	00bffd44 	movi	r2,-11
   23f4c:	00000b06 	br	23f7c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   23f50:	e0bffe17 	ldw	r2,-8(fp)
   23f54:	10c00d17 	ldw	r3,52(r2)
   23f58:	e0bffe17 	ldw	r2,-8(fp)
   23f5c:	10800c17 	ldw	r2,48(r2)
   23f60:	18800526 	beq	r3,r2,23f78 <altera_avalon_jtag_uart_close+0x54>
   23f64:	e0bffe17 	ldw	r2,-8(fp)
   23f68:	10c00917 	ldw	r3,36(r2)
   23f6c:	e0bffe17 	ldw	r2,-8(fp)
   23f70:	10800117 	ldw	r2,4(r2)
   23f74:	18bff136 	bltu	r3,r2,23f3c <__alt_data_end+0xfffe6a7c>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   23f78:	0005883a 	mov	r2,zero
}
   23f7c:	e037883a 	mov	sp,fp
   23f80:	df000017 	ldw	fp,0(sp)
   23f84:	dec00104 	addi	sp,sp,4
   23f88:	f800283a 	ret

00023f8c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   23f8c:	defffa04 	addi	sp,sp,-24
   23f90:	df000515 	stw	fp,20(sp)
   23f94:	df000504 	addi	fp,sp,20
   23f98:	e13ffd15 	stw	r4,-12(fp)
   23f9c:	e17ffe15 	stw	r5,-8(fp)
   23fa0:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   23fa4:	00bff9c4 	movi	r2,-25
   23fa8:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   23fac:	e0bffe17 	ldw	r2,-8(fp)
   23fb0:	10da8060 	cmpeqi	r3,r2,27137
   23fb4:	1800031e 	bne	r3,zero,23fc4 <altera_avalon_jtag_uart_ioctl+0x38>
   23fb8:	109a80a0 	cmpeqi	r2,r2,27138
   23fbc:	1000191e 	bne	r2,zero,24024 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
   23fc0:	00002806 	br	24064 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   23fc4:	e0bffd17 	ldw	r2,-12(fp)
   23fc8:	10c00117 	ldw	r3,4(r2)
   23fcc:	00a00034 	movhi	r2,32768
   23fd0:	10bfffc4 	addi	r2,r2,-1
   23fd4:	18801226 	beq	r3,r2,24020 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
   23fd8:	e0bfff17 	ldw	r2,-4(fp)
   23fdc:	10800017 	ldw	r2,0(r2)
   23fe0:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   23fe4:	e0bffc17 	ldw	r2,-16(fp)
   23fe8:	10800090 	cmplti	r2,r2,2
   23fec:	1000061e 	bne	r2,zero,24008 <altera_avalon_jtag_uart_ioctl+0x7c>
   23ff0:	e0fffc17 	ldw	r3,-16(fp)
   23ff4:	00a00034 	movhi	r2,32768
   23ff8:	10bfffc4 	addi	r2,r2,-1
   23ffc:	18800226 	beq	r3,r2,24008 <altera_avalon_jtag_uart_ioctl+0x7c>
   24000:	e0bffc17 	ldw	r2,-16(fp)
   24004:	00000206 	br	24010 <altera_avalon_jtag_uart_ioctl+0x84>
   24008:	00a00034 	movhi	r2,32768
   2400c:	10bfff84 	addi	r2,r2,-2
   24010:	e0fffd17 	ldw	r3,-12(fp)
   24014:	18800115 	stw	r2,4(r3)
      rc = 0;
   24018:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   2401c:	00001106 	br	24064 <altera_avalon_jtag_uart_ioctl+0xd8>
   24020:	00001006 	br	24064 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   24024:	e0bffd17 	ldw	r2,-12(fp)
   24028:	10c00117 	ldw	r3,4(r2)
   2402c:	00a00034 	movhi	r2,32768
   24030:	10bfffc4 	addi	r2,r2,-1
   24034:	18800a26 	beq	r3,r2,24060 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   24038:	e0bffd17 	ldw	r2,-12(fp)
   2403c:	10c00917 	ldw	r3,36(r2)
   24040:	e0bffd17 	ldw	r2,-12(fp)
   24044:	10800117 	ldw	r2,4(r2)
   24048:	1885803a 	cmpltu	r2,r3,r2
   2404c:	10c03fcc 	andi	r3,r2,255
   24050:	e0bfff17 	ldw	r2,-4(fp)
   24054:	10c00015 	stw	r3,0(r2)
      rc = 0;
   24058:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   2405c:	00000006 	br	24060 <altera_avalon_jtag_uart_ioctl+0xd4>
   24060:	0001883a 	nop

  default:
    break;
  }

  return rc;
   24064:	e0bffb17 	ldw	r2,-20(fp)
}
   24068:	e037883a 	mov	sp,fp
   2406c:	df000017 	ldw	fp,0(sp)
   24070:	dec00104 	addi	sp,sp,4
   24074:	f800283a 	ret

00024078 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   24078:	defff304 	addi	sp,sp,-52
   2407c:	dfc00c15 	stw	ra,48(sp)
   24080:	df000b15 	stw	fp,44(sp)
   24084:	df000b04 	addi	fp,sp,44
   24088:	e13ffc15 	stw	r4,-16(fp)
   2408c:	e17ffd15 	stw	r5,-12(fp)
   24090:	e1bffe15 	stw	r6,-8(fp)
   24094:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   24098:	e0bffd17 	ldw	r2,-12(fp)
   2409c:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   240a0:	00004906 	br	241c8 <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   240a4:	e0bffc17 	ldw	r2,-16(fp)
   240a8:	10800a17 	ldw	r2,40(r2)
   240ac:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   240b0:	e0bffc17 	ldw	r2,-16(fp)
   240b4:	10800b17 	ldw	r2,44(r2)
   240b8:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   240bc:	e0fff717 	ldw	r3,-36(fp)
   240c0:	e0bff817 	ldw	r2,-32(fp)
   240c4:	18800536 	bltu	r3,r2,240dc <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   240c8:	e0fff717 	ldw	r3,-36(fp)
   240cc:	e0bff817 	ldw	r2,-32(fp)
   240d0:	1885c83a 	sub	r2,r3,r2
   240d4:	e0bff615 	stw	r2,-40(fp)
   240d8:	00000406 	br	240ec <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   240dc:	00c20004 	movi	r3,2048
   240e0:	e0bff817 	ldw	r2,-32(fp)
   240e4:	1885c83a 	sub	r2,r3,r2
   240e8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   240ec:	e0bff617 	ldw	r2,-40(fp)
   240f0:	1000011e 	bne	r2,zero,240f8 <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
   240f4:	00001d06 	br	2416c <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
   240f8:	e0fffe17 	ldw	r3,-8(fp)
   240fc:	e0bff617 	ldw	r2,-40(fp)
   24100:	1880022e 	bgeu	r3,r2,2410c <altera_avalon_jtag_uart_read+0x94>
        n = space;
   24104:	e0bffe17 	ldw	r2,-8(fp)
   24108:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   2410c:	e0bff817 	ldw	r2,-32(fp)
   24110:	10800e04 	addi	r2,r2,56
   24114:	e0fffc17 	ldw	r3,-16(fp)
   24118:	1885883a 	add	r2,r3,r2
   2411c:	e13ff517 	ldw	r4,-44(fp)
   24120:	100b883a 	mov	r5,r2
   24124:	e1bff617 	ldw	r6,-40(fp)
   24128:	002133c0 	call	2133c <memcpy>
      ptr   += n;
   2412c:	e0fff517 	ldw	r3,-44(fp)
   24130:	e0bff617 	ldw	r2,-40(fp)
   24134:	1885883a 	add	r2,r3,r2
   24138:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   2413c:	e0fffe17 	ldw	r3,-8(fp)
   24140:	e0bff617 	ldw	r2,-40(fp)
   24144:	1885c83a 	sub	r2,r3,r2
   24148:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   2414c:	e0fff817 	ldw	r3,-32(fp)
   24150:	e0bff617 	ldw	r2,-40(fp)
   24154:	1885883a 	add	r2,r3,r2
   24158:	10c1ffcc 	andi	r3,r2,2047
   2415c:	e0bffc17 	ldw	r2,-16(fp)
   24160:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   24164:	e0bffe17 	ldw	r2,-8(fp)
   24168:	00bfce16 	blt	zero,r2,240a4 <__alt_data_end+0xfffe6be4>

    /* If we read any data then return it */
    if (ptr != buffer)
   2416c:	e0fff517 	ldw	r3,-44(fp)
   24170:	e0bffd17 	ldw	r2,-12(fp)
   24174:	18800126 	beq	r3,r2,2417c <altera_avalon_jtag_uart_read+0x104>
      break;
   24178:	00001506 	br	241d0 <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   2417c:	e0bfff17 	ldw	r2,-4(fp)
   24180:	1090000c 	andi	r2,r2,16384
   24184:	10000126 	beq	r2,zero,2418c <altera_avalon_jtag_uart_read+0x114>
      break;
   24188:	00001106 	br	241d0 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   2418c:	0001883a 	nop
   24190:	e0bffc17 	ldw	r2,-16(fp)
   24194:	10c00a17 	ldw	r3,40(r2)
   24198:	e0bff717 	ldw	r2,-36(fp)
   2419c:	1880051e 	bne	r3,r2,241b4 <altera_avalon_jtag_uart_read+0x13c>
   241a0:	e0bffc17 	ldw	r2,-16(fp)
   241a4:	10c00917 	ldw	r3,36(r2)
   241a8:	e0bffc17 	ldw	r2,-16(fp)
   241ac:	10800117 	ldw	r2,4(r2)
   241b0:	18bff736 	bltu	r3,r2,24190 <__alt_data_end+0xfffe6cd0>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   241b4:	e0bffc17 	ldw	r2,-16(fp)
   241b8:	10c00a17 	ldw	r3,40(r2)
   241bc:	e0bff717 	ldw	r2,-36(fp)
   241c0:	1880011e 	bne	r3,r2,241c8 <altera_avalon_jtag_uart_read+0x150>
      break;
   241c4:	00000206 	br	241d0 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   241c8:	e0bffe17 	ldw	r2,-8(fp)
   241cc:	00bfb516 	blt	zero,r2,240a4 <__alt_data_end+0xfffe6be4>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   241d0:	e0fff517 	ldw	r3,-44(fp)
   241d4:	e0bffd17 	ldw	r2,-12(fp)
   241d8:	18801826 	beq	r3,r2,2423c <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   241dc:	0005303a 	rdctl	r2,status
   241e0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   241e4:	e0fffa17 	ldw	r3,-24(fp)
   241e8:	00bfff84 	movi	r2,-2
   241ec:	1884703a 	and	r2,r3,r2
   241f0:	1001703a 	wrctl	status,r2
  
  return context;
   241f4:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   241f8:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   241fc:	e0bffc17 	ldw	r2,-16(fp)
   24200:	10800817 	ldw	r2,32(r2)
   24204:	10c00054 	ori	r3,r2,1
   24208:	e0bffc17 	ldw	r2,-16(fp)
   2420c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   24210:	e0bffc17 	ldw	r2,-16(fp)
   24214:	10800017 	ldw	r2,0(r2)
   24218:	10800104 	addi	r2,r2,4
   2421c:	1007883a 	mov	r3,r2
   24220:	e0bffc17 	ldw	r2,-16(fp)
   24224:	10800817 	ldw	r2,32(r2)
   24228:	18800035 	stwio	r2,0(r3)
   2422c:	e0bff917 	ldw	r2,-28(fp)
   24230:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   24234:	e0bffb17 	ldw	r2,-20(fp)
   24238:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   2423c:	e0fff517 	ldw	r3,-44(fp)
   24240:	e0bffd17 	ldw	r2,-12(fp)
   24244:	18800426 	beq	r3,r2,24258 <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
   24248:	e0fff517 	ldw	r3,-44(fp)
   2424c:	e0bffd17 	ldw	r2,-12(fp)
   24250:	1885c83a 	sub	r2,r3,r2
   24254:	00000606 	br	24270 <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
   24258:	e0bfff17 	ldw	r2,-4(fp)
   2425c:	1090000c 	andi	r2,r2,16384
   24260:	10000226 	beq	r2,zero,2426c <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
   24264:	00bffd44 	movi	r2,-11
   24268:	00000106 	br	24270 <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
   2426c:	00bffec4 	movi	r2,-5
}
   24270:	e037883a 	mov	sp,fp
   24274:	dfc00117 	ldw	ra,4(sp)
   24278:	df000017 	ldw	fp,0(sp)
   2427c:	dec00204 	addi	sp,sp,8
   24280:	f800283a 	ret

00024284 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   24284:	defff304 	addi	sp,sp,-52
   24288:	dfc00c15 	stw	ra,48(sp)
   2428c:	df000b15 	stw	fp,44(sp)
   24290:	df000b04 	addi	fp,sp,44
   24294:	e13ffc15 	stw	r4,-16(fp)
   24298:	e17ffd15 	stw	r5,-12(fp)
   2429c:	e1bffe15 	stw	r6,-8(fp)
   242a0:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   242a4:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   242a8:	e0bffd17 	ldw	r2,-12(fp)
   242ac:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   242b0:	00003806 	br	24394 <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   242b4:	e0bffc17 	ldw	r2,-16(fp)
   242b8:	10800c17 	ldw	r2,48(r2)
   242bc:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
   242c0:	e0bffc17 	ldw	r2,-16(fp)
   242c4:	10800d17 	ldw	r2,52(r2)
   242c8:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   242cc:	e0fff817 	ldw	r3,-32(fp)
   242d0:	e0bff517 	ldw	r2,-44(fp)
   242d4:	1880062e 	bgeu	r3,r2,242f0 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   242d8:	e0fff517 	ldw	r3,-44(fp)
   242dc:	e0bff817 	ldw	r2,-32(fp)
   242e0:	1885c83a 	sub	r2,r3,r2
   242e4:	10bfffc4 	addi	r2,r2,-1
   242e8:	e0bff615 	stw	r2,-40(fp)
   242ec:	00000b06 	br	2431c <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   242f0:	e0bff517 	ldw	r2,-44(fp)
   242f4:	10000526 	beq	r2,zero,2430c <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   242f8:	00c20004 	movi	r3,2048
   242fc:	e0bff817 	ldw	r2,-32(fp)
   24300:	1885c83a 	sub	r2,r3,r2
   24304:	e0bff615 	stw	r2,-40(fp)
   24308:	00000406 	br	2431c <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   2430c:	00c1ffc4 	movi	r3,2047
   24310:	e0bff817 	ldw	r2,-32(fp)
   24314:	1885c83a 	sub	r2,r3,r2
   24318:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   2431c:	e0bff617 	ldw	r2,-40(fp)
   24320:	1000011e 	bne	r2,zero,24328 <altera_avalon_jtag_uart_write+0xa4>
        break;
   24324:	00001d06 	br	2439c <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
   24328:	e0fffe17 	ldw	r3,-8(fp)
   2432c:	e0bff617 	ldw	r2,-40(fp)
   24330:	1880022e 	bgeu	r3,r2,2433c <altera_avalon_jtag_uart_write+0xb8>
        n = count;
   24334:	e0bffe17 	ldw	r2,-8(fp)
   24338:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   2433c:	e0bff817 	ldw	r2,-32(fp)
   24340:	10820e04 	addi	r2,r2,2104
   24344:	e0fffc17 	ldw	r3,-16(fp)
   24348:	1885883a 	add	r2,r3,r2
   2434c:	1009883a 	mov	r4,r2
   24350:	e17ffd17 	ldw	r5,-12(fp)
   24354:	e1bff617 	ldw	r6,-40(fp)
   24358:	002133c0 	call	2133c <memcpy>
      ptr   += n;
   2435c:	e0fffd17 	ldw	r3,-12(fp)
   24360:	e0bff617 	ldw	r2,-40(fp)
   24364:	1885883a 	add	r2,r3,r2
   24368:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   2436c:	e0fffe17 	ldw	r3,-8(fp)
   24370:	e0bff617 	ldw	r2,-40(fp)
   24374:	1885c83a 	sub	r2,r3,r2
   24378:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   2437c:	e0fff817 	ldw	r3,-32(fp)
   24380:	e0bff617 	ldw	r2,-40(fp)
   24384:	1885883a 	add	r2,r3,r2
   24388:	10c1ffcc 	andi	r3,r2,2047
   2438c:	e0bffc17 	ldw	r2,-16(fp)
   24390:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   24394:	e0bffe17 	ldw	r2,-8(fp)
   24398:	00bfc616 	blt	zero,r2,242b4 <__alt_data_end+0xfffe6df4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2439c:	0005303a 	rdctl	r2,status
   243a0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   243a4:	e0fffa17 	ldw	r3,-24(fp)
   243a8:	00bfff84 	movi	r2,-2
   243ac:	1884703a 	and	r2,r3,r2
   243b0:	1001703a 	wrctl	status,r2
  
  return context;
   243b4:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   243b8:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   243bc:	e0bffc17 	ldw	r2,-16(fp)
   243c0:	10800817 	ldw	r2,32(r2)
   243c4:	10c00094 	ori	r3,r2,2
   243c8:	e0bffc17 	ldw	r2,-16(fp)
   243cc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   243d0:	e0bffc17 	ldw	r2,-16(fp)
   243d4:	10800017 	ldw	r2,0(r2)
   243d8:	10800104 	addi	r2,r2,4
   243dc:	1007883a 	mov	r3,r2
   243e0:	e0bffc17 	ldw	r2,-16(fp)
   243e4:	10800817 	ldw	r2,32(r2)
   243e8:	18800035 	stwio	r2,0(r3)
   243ec:	e0bff917 	ldw	r2,-28(fp)
   243f0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   243f4:	e0bffb17 	ldw	r2,-20(fp)
   243f8:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   243fc:	e0bffe17 	ldw	r2,-8(fp)
   24400:	0080120e 	bge	zero,r2,2444c <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
   24404:	e0bfff17 	ldw	r2,-4(fp)
   24408:	1090000c 	andi	r2,r2,16384
   2440c:	10000126 	beq	r2,zero,24414 <altera_avalon_jtag_uart_write+0x190>
        break;
   24410:	00001006 	br	24454 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   24414:	0001883a 	nop
   24418:	e0bffc17 	ldw	r2,-16(fp)
   2441c:	10c00d17 	ldw	r3,52(r2)
   24420:	e0bff517 	ldw	r2,-44(fp)
   24424:	1880051e 	bne	r3,r2,2443c <altera_avalon_jtag_uart_write+0x1b8>
   24428:	e0bffc17 	ldw	r2,-16(fp)
   2442c:	10c00917 	ldw	r3,36(r2)
   24430:	e0bffc17 	ldw	r2,-16(fp)
   24434:	10800117 	ldw	r2,4(r2)
   24438:	18bff736 	bltu	r3,r2,24418 <__alt_data_end+0xfffe6f58>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   2443c:	e0bffc17 	ldw	r2,-16(fp)
   24440:	10800917 	ldw	r2,36(r2)
   24444:	10000126 	beq	r2,zero,2444c <altera_avalon_jtag_uart_write+0x1c8>
         break;
   24448:	00000206 	br	24454 <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
   2444c:	e0bffe17 	ldw	r2,-8(fp)
   24450:	00bf9716 	blt	zero,r2,242b0 <__alt_data_end+0xfffe6df0>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   24454:	e0fffd17 	ldw	r3,-12(fp)
   24458:	e0bff717 	ldw	r2,-36(fp)
   2445c:	18800426 	beq	r3,r2,24470 <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
   24460:	e0fffd17 	ldw	r3,-12(fp)
   24464:	e0bff717 	ldw	r2,-36(fp)
   24468:	1885c83a 	sub	r2,r3,r2
   2446c:	00000606 	br	24488 <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
   24470:	e0bfff17 	ldw	r2,-4(fp)
   24474:	1090000c 	andi	r2,r2,16384
   24478:	10000226 	beq	r2,zero,24484 <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
   2447c:	00bffd44 	movi	r2,-11
   24480:	00000106 	br	24488 <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   24484:	00bffec4 	movi	r2,-5
}
   24488:	e037883a 	mov	sp,fp
   2448c:	dfc00117 	ldw	ra,4(sp)
   24490:	df000017 	ldw	fp,0(sp)
   24494:	dec00204 	addi	sp,sp,8
   24498:	f800283a 	ret

0002449c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   2449c:	defffa04 	addi	sp,sp,-24
   244a0:	dfc00515 	stw	ra,20(sp)
   244a4:	df000415 	stw	fp,16(sp)
   244a8:	df000404 	addi	fp,sp,16
   244ac:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   244b0:	0007883a 	mov	r3,zero
   244b4:	e0bfff17 	ldw	r2,-4(fp)
   244b8:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   244bc:	e0bfff17 	ldw	r2,-4(fp)
   244c0:	10800104 	addi	r2,r2,4
   244c4:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   244c8:	0005303a 	rdctl	r2,status
   244cc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   244d0:	e0fffd17 	ldw	r3,-12(fp)
   244d4:	00bfff84 	movi	r2,-2
   244d8:	1884703a 	and	r2,r3,r2
   244dc:	1001703a 	wrctl	status,r2
  
  return context;
   244e0:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   244e4:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   244e8:	002513c0 	call	2513c <alt_tick>
   244ec:	e0bffc17 	ldw	r2,-16(fp)
   244f0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   244f4:	e0bffe17 	ldw	r2,-8(fp)
   244f8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   244fc:	e037883a 	mov	sp,fp
   24500:	dfc00117 	ldw	ra,4(sp)
   24504:	df000017 	ldw	fp,0(sp)
   24508:	dec00204 	addi	sp,sp,8
   2450c:	f800283a 	ret

00024510 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   24510:	defff804 	addi	sp,sp,-32
   24514:	dfc00715 	stw	ra,28(sp)
   24518:	df000615 	stw	fp,24(sp)
   2451c:	df000604 	addi	fp,sp,24
   24520:	e13ffc15 	stw	r4,-16(fp)
   24524:	e17ffd15 	stw	r5,-12(fp)
   24528:	e1bffe15 	stw	r6,-8(fp)
   2452c:	e1ffff15 	stw	r7,-4(fp)
   24530:	e0bfff17 	ldw	r2,-4(fp)
   24534:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   24538:	008000f4 	movhi	r2,3
   2453c:	10a3f704 	addi	r2,r2,-28708
   24540:	10800017 	ldw	r2,0(r2)
   24544:	1000041e 	bne	r2,zero,24558 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
   24548:	008000f4 	movhi	r2,3
   2454c:	10a3f704 	addi	r2,r2,-28708
   24550:	e0fffb17 	ldw	r3,-20(fp)
   24554:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   24558:	e0bffc17 	ldw	r2,-16(fp)
   2455c:	10800104 	addi	r2,r2,4
   24560:	00c001c4 	movi	r3,7
   24564:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   24568:	d8000015 	stw	zero,0(sp)
   2456c:	e13ffd17 	ldw	r4,-12(fp)
   24570:	e17ffe17 	ldw	r5,-8(fp)
   24574:	018000b4 	movhi	r6,2
   24578:	31912704 	addi	r6,r6,17564
   2457c:	e1fffc17 	ldw	r7,-16(fp)
   24580:	0024a280 	call	24a28 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   24584:	e037883a 	mov	sp,fp
   24588:	dfc00117 	ldw	ra,4(sp)
   2458c:	df000017 	ldw	fp,0(sp)
   24590:	dec00204 	addi	sp,sp,8
   24594:	f800283a 	ret

00024598 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   24598:	defff504 	addi	sp,sp,-44
   2459c:	df000a15 	stw	fp,40(sp)
   245a0:	df000a04 	addi	fp,sp,40
   245a4:	e13ffc15 	stw	r4,-16(fp)
   245a8:	e17ffd15 	stw	r5,-12(fp)
   245ac:	e1bffe15 	stw	r6,-8(fp)
   245b0:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   245b4:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   245b8:	008000f4 	movhi	r2,3
   245bc:	10a3f704 	addi	r2,r2,-28708
   245c0:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   245c4:	10003f26 	beq	r2,zero,246c4 <alt_alarm_start+0x12c>
  {
    if (alarm)
   245c8:	e0bffc17 	ldw	r2,-16(fp)
   245cc:	10003b26 	beq	r2,zero,246bc <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
   245d0:	e0bffc17 	ldw	r2,-16(fp)
   245d4:	e0fffe17 	ldw	r3,-8(fp)
   245d8:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   245dc:	e0bffc17 	ldw	r2,-16(fp)
   245e0:	e0ffff17 	ldw	r3,-4(fp)
   245e4:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   245e8:	0005303a 	rdctl	r2,status
   245ec:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   245f0:	e0fff817 	ldw	r3,-32(fp)
   245f4:	00bfff84 	movi	r2,-2
   245f8:	1884703a 	and	r2,r3,r2
   245fc:	1001703a 	wrctl	status,r2
  
  return context;
   24600:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   24604:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   24608:	008000f4 	movhi	r2,3
   2460c:	10a3f804 	addi	r2,r2,-28704
   24610:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   24614:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   24618:	e0fffd17 	ldw	r3,-12(fp)
   2461c:	e0bff617 	ldw	r2,-40(fp)
   24620:	1885883a 	add	r2,r3,r2
   24624:	10c00044 	addi	r3,r2,1
   24628:	e0bffc17 	ldw	r2,-16(fp)
   2462c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   24630:	e0bffc17 	ldw	r2,-16(fp)
   24634:	10c00217 	ldw	r3,8(r2)
   24638:	e0bff617 	ldw	r2,-40(fp)
   2463c:	1880042e 	bgeu	r3,r2,24650 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
   24640:	e0bffc17 	ldw	r2,-16(fp)
   24644:	00c00044 	movi	r3,1
   24648:	10c00405 	stb	r3,16(r2)
   2464c:	00000206 	br	24658 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
   24650:	e0bffc17 	ldw	r2,-16(fp)
   24654:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   24658:	e0fffc17 	ldw	r3,-16(fp)
   2465c:	008000b4 	movhi	r2,2
   24660:	109d4c04 	addi	r2,r2,30000
   24664:	e0bff915 	stw	r2,-28(fp)
   24668:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   2466c:	e0bffa17 	ldw	r2,-24(fp)
   24670:	e0fff917 	ldw	r3,-28(fp)
   24674:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   24678:	e0bff917 	ldw	r2,-28(fp)
   2467c:	10c00017 	ldw	r3,0(r2)
   24680:	e0bffa17 	ldw	r2,-24(fp)
   24684:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   24688:	e0bff917 	ldw	r2,-28(fp)
   2468c:	10800017 	ldw	r2,0(r2)
   24690:	e0fffa17 	ldw	r3,-24(fp)
   24694:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   24698:	e0bff917 	ldw	r2,-28(fp)
   2469c:	e0fffa17 	ldw	r3,-24(fp)
   246a0:	10c00015 	stw	r3,0(r2)
   246a4:	e0bff717 	ldw	r2,-36(fp)
   246a8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   246ac:	e0bffb17 	ldw	r2,-20(fp)
   246b0:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   246b4:	0005883a 	mov	r2,zero
   246b8:	00000306 	br	246c8 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
   246bc:	00bffa84 	movi	r2,-22
   246c0:	00000106 	br	246c8 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
   246c4:	00bfde84 	movi	r2,-134
  }
}
   246c8:	e037883a 	mov	sp,fp
   246cc:	df000017 	ldw	fp,0(sp)
   246d0:	dec00104 	addi	sp,sp,4
   246d4:	f800283a 	ret

000246d8 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   246d8:	defffa04 	addi	sp,sp,-24
   246dc:	dfc00515 	stw	ra,20(sp)
   246e0:	df000415 	stw	fp,16(sp)
   246e4:	df000404 	addi	fp,sp,16
   246e8:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
   246ec:	008000c4 	movi	r2,3
   246f0:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   246f4:	e0fffd17 	ldw	r3,-12(fp)
   246f8:	008003f4 	movhi	r2,15
   246fc:	10909004 	addi	r2,r2,16960
   24700:	1885383a 	mul	r2,r3,r2
   24704:	0100bef4 	movhi	r4,763
   24708:	213c2004 	addi	r4,r4,-3968
   2470c:	100b883a 	mov	r5,r2
   24710:	00259d00 	call	259d0 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   24714:	01200034 	movhi	r4,32768
   24718:	213fffc4 	addi	r4,r4,-1
   2471c:	100b883a 	mov	r5,r2
   24720:	00259d00 	call	259d0 <__udivsi3>
   24724:	e13fff17 	ldw	r4,-4(fp)
   24728:	100b883a 	mov	r5,r2
   2472c:	00259d00 	call	259d0 <__udivsi3>
   24730:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   24734:	e0bffe17 	ldw	r2,-8(fp)
   24738:	10002a26 	beq	r2,zero,247e4 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
   2473c:	e03ffc15 	stw	zero,-16(fp)
   24740:	00001706 	br	247a0 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   24744:	00a00034 	movhi	r2,32768
   24748:	10bfffc4 	addi	r2,r2,-1
   2474c:	10bfffc4 	addi	r2,r2,-1
   24750:	103ffe1e 	bne	r2,zero,2474c <__alt_data_end+0xfffe728c>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   24754:	e0fffd17 	ldw	r3,-12(fp)
   24758:	008003f4 	movhi	r2,15
   2475c:	10909004 	addi	r2,r2,16960
   24760:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   24764:	0100bef4 	movhi	r4,763
   24768:	213c2004 	addi	r4,r4,-3968
   2476c:	100b883a 	mov	r5,r2
   24770:	00259d00 	call	259d0 <__udivsi3>
   24774:	01200034 	movhi	r4,32768
   24778:	213fffc4 	addi	r4,r4,-1
   2477c:	100b883a 	mov	r5,r2
   24780:	00259d00 	call	259d0 <__udivsi3>
   24784:	1007883a 	mov	r3,r2
   24788:	e0bfff17 	ldw	r2,-4(fp)
   2478c:	10c5c83a 	sub	r2,r2,r3
   24790:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   24794:	e0bffc17 	ldw	r2,-16(fp)
   24798:	10800044 	addi	r2,r2,1
   2479c:	e0bffc15 	stw	r2,-16(fp)
   247a0:	e0fffc17 	ldw	r3,-16(fp)
   247a4:	e0bffe17 	ldw	r2,-8(fp)
   247a8:	18bfe616 	blt	r3,r2,24744 <__alt_data_end+0xfffe7284>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   247ac:	e0fffd17 	ldw	r3,-12(fp)
   247b0:	008003f4 	movhi	r2,15
   247b4:	10909004 	addi	r2,r2,16960
   247b8:	1885383a 	mul	r2,r3,r2
   247bc:	0100bef4 	movhi	r4,763
   247c0:	213c2004 	addi	r4,r4,-3968
   247c4:	100b883a 	mov	r5,r2
   247c8:	00259d00 	call	259d0 <__udivsi3>
   247cc:	1007883a 	mov	r3,r2
   247d0:	e0bfff17 	ldw	r2,-4(fp)
   247d4:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   247d8:	10bfffc4 	addi	r2,r2,-1
   247dc:	103ffe1e 	bne	r2,zero,247d8 <__alt_data_end+0xfffe7318>
   247e0:	00000d06 	br	24818 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   247e4:	e0fffd17 	ldw	r3,-12(fp)
   247e8:	008003f4 	movhi	r2,15
   247ec:	10909004 	addi	r2,r2,16960
   247f0:	1885383a 	mul	r2,r3,r2
   247f4:	0100bef4 	movhi	r4,763
   247f8:	213c2004 	addi	r4,r4,-3968
   247fc:	100b883a 	mov	r5,r2
   24800:	00259d00 	call	259d0 <__udivsi3>
   24804:	1007883a 	mov	r3,r2
   24808:	e0bfff17 	ldw	r2,-4(fp)
   2480c:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   24810:	10bfffc4 	addi	r2,r2,-1
   24814:	00bffe16 	blt	zero,r2,24810 <__alt_data_end+0xfffe7350>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   24818:	0005883a 	mov	r2,zero
}
   2481c:	e037883a 	mov	sp,fp
   24820:	dfc00117 	ldw	ra,4(sp)
   24824:	df000017 	ldw	fp,0(sp)
   24828:	dec00204 	addi	sp,sp,8
   2482c:	f800283a 	ret

00024830 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   24830:	deffff04 	addi	sp,sp,-4
   24834:	df000015 	stw	fp,0(sp)
   24838:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   2483c:	e037883a 	mov	sp,fp
   24840:	df000017 	ldw	fp,0(sp)
   24844:	dec00104 	addi	sp,sp,4
   24848:	f800283a 	ret

0002484c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2484c:	defffe04 	addi	sp,sp,-8
   24850:	dfc00115 	stw	ra,4(sp)
   24854:	df000015 	stw	fp,0(sp)
   24858:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2485c:	008000b4 	movhi	r2,2
   24860:	109d4904 	addi	r2,r2,29988
   24864:	10800017 	ldw	r2,0(r2)
   24868:	10000526 	beq	r2,zero,24880 <alt_get_errno+0x34>
   2486c:	008000b4 	movhi	r2,2
   24870:	109d4904 	addi	r2,r2,29988
   24874:	10800017 	ldw	r2,0(r2)
   24878:	103ee83a 	callr	r2
   2487c:	00000206 	br	24888 <alt_get_errno+0x3c>
   24880:	008000f4 	movhi	r2,3
   24884:	10a3f204 	addi	r2,r2,-28728
}
   24888:	e037883a 	mov	sp,fp
   2488c:	dfc00117 	ldw	ra,4(sp)
   24890:	df000017 	ldw	fp,0(sp)
   24894:	dec00204 	addi	sp,sp,8
   24898:	f800283a 	ret

0002489c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   2489c:	defffa04 	addi	sp,sp,-24
   248a0:	dfc00515 	stw	ra,20(sp)
   248a4:	df000415 	stw	fp,16(sp)
   248a8:	df000404 	addi	fp,sp,16
   248ac:	e13ffe15 	stw	r4,-8(fp)
   248b0:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   248b4:	e0bffe17 	ldw	r2,-8(fp)
   248b8:	10000326 	beq	r2,zero,248c8 <alt_dev_llist_insert+0x2c>
   248bc:	e0bffe17 	ldw	r2,-8(fp)
   248c0:	10800217 	ldw	r2,8(r2)
   248c4:	1000061e 	bne	r2,zero,248e0 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   248c8:	002484c0 	call	2484c <alt_get_errno>
   248cc:	1007883a 	mov	r3,r2
   248d0:	00800584 	movi	r2,22
   248d4:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   248d8:	00bffa84 	movi	r2,-22
   248dc:	00001306 	br	2492c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   248e0:	e0bffe17 	ldw	r2,-8(fp)
   248e4:	e0ffff17 	ldw	r3,-4(fp)
   248e8:	e0fffc15 	stw	r3,-16(fp)
   248ec:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   248f0:	e0bffd17 	ldw	r2,-12(fp)
   248f4:	e0fffc17 	ldw	r3,-16(fp)
   248f8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   248fc:	e0bffc17 	ldw	r2,-16(fp)
   24900:	10c00017 	ldw	r3,0(r2)
   24904:	e0bffd17 	ldw	r2,-12(fp)
   24908:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   2490c:	e0bffc17 	ldw	r2,-16(fp)
   24910:	10800017 	ldw	r2,0(r2)
   24914:	e0fffd17 	ldw	r3,-12(fp)
   24918:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   2491c:	e0bffc17 	ldw	r2,-16(fp)
   24920:	e0fffd17 	ldw	r3,-12(fp)
   24924:	10c00015 	stw	r3,0(r2)

  return 0;  
   24928:	0005883a 	mov	r2,zero
}
   2492c:	e037883a 	mov	sp,fp
   24930:	dfc00117 	ldw	ra,4(sp)
   24934:	df000017 	ldw	fp,0(sp)
   24938:	dec00204 	addi	sp,sp,8
   2493c:	f800283a 	ret

00024940 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   24940:	defffd04 	addi	sp,sp,-12
   24944:	dfc00215 	stw	ra,8(sp)
   24948:	df000115 	stw	fp,4(sp)
   2494c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   24950:	008000b4 	movhi	r2,2
   24954:	10968404 	addi	r2,r2,23056
   24958:	e0bfff15 	stw	r2,-4(fp)
   2495c:	00000606 	br	24978 <_do_ctors+0x38>
        (*ctor) (); 
   24960:	e0bfff17 	ldw	r2,-4(fp)
   24964:	10800017 	ldw	r2,0(r2)
   24968:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   2496c:	e0bfff17 	ldw	r2,-4(fp)
   24970:	10bfff04 	addi	r2,r2,-4
   24974:	e0bfff15 	stw	r2,-4(fp)
   24978:	e0ffff17 	ldw	r3,-4(fp)
   2497c:	008000b4 	movhi	r2,2
   24980:	10968504 	addi	r2,r2,23060
   24984:	18bff62e 	bgeu	r3,r2,24960 <__alt_data_end+0xfffe74a0>
        (*ctor) (); 
}
   24988:	e037883a 	mov	sp,fp
   2498c:	dfc00117 	ldw	ra,4(sp)
   24990:	df000017 	ldw	fp,0(sp)
   24994:	dec00204 	addi	sp,sp,8
   24998:	f800283a 	ret

0002499c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   2499c:	defffd04 	addi	sp,sp,-12
   249a0:	dfc00215 	stw	ra,8(sp)
   249a4:	df000115 	stw	fp,4(sp)
   249a8:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   249ac:	008000b4 	movhi	r2,2
   249b0:	10968404 	addi	r2,r2,23056
   249b4:	e0bfff15 	stw	r2,-4(fp)
   249b8:	00000606 	br	249d4 <_do_dtors+0x38>
        (*dtor) (); 
   249bc:	e0bfff17 	ldw	r2,-4(fp)
   249c0:	10800017 	ldw	r2,0(r2)
   249c4:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   249c8:	e0bfff17 	ldw	r2,-4(fp)
   249cc:	10bfff04 	addi	r2,r2,-4
   249d0:	e0bfff15 	stw	r2,-4(fp)
   249d4:	e0ffff17 	ldw	r3,-4(fp)
   249d8:	008000b4 	movhi	r2,2
   249dc:	10968504 	addi	r2,r2,23060
   249e0:	18bff62e 	bgeu	r3,r2,249bc <__alt_data_end+0xfffe74fc>
        (*dtor) (); 
}
   249e4:	e037883a 	mov	sp,fp
   249e8:	dfc00117 	ldw	ra,4(sp)
   249ec:	df000017 	ldw	fp,0(sp)
   249f0:	dec00204 	addi	sp,sp,8
   249f4:	f800283a 	ret

000249f8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   249f8:	defffe04 	addi	sp,sp,-8
   249fc:	dfc00115 	stw	ra,4(sp)
   24a00:	df000015 	stw	fp,0(sp)
   24a04:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   24a08:	0009883a 	mov	r4,zero
   24a0c:	01480004 	movi	r5,8192
   24a10:	00254b80 	call	254b8 <alt_icache_flush>
#endif
}
   24a14:	e037883a 	mov	sp,fp
   24a18:	dfc00117 	ldw	ra,4(sp)
   24a1c:	df000017 	ldw	fp,0(sp)
   24a20:	dec00204 	addi	sp,sp,8
   24a24:	f800283a 	ret

00024a28 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   24a28:	defff904 	addi	sp,sp,-28
   24a2c:	dfc00615 	stw	ra,24(sp)
   24a30:	df000515 	stw	fp,20(sp)
   24a34:	df000504 	addi	fp,sp,20
   24a38:	e13ffc15 	stw	r4,-16(fp)
   24a3c:	e17ffd15 	stw	r5,-12(fp)
   24a40:	e1bffe15 	stw	r6,-8(fp)
   24a44:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   24a48:	e0800217 	ldw	r2,8(fp)
   24a4c:	d8800015 	stw	r2,0(sp)
   24a50:	e13ffc17 	ldw	r4,-16(fp)
   24a54:	e17ffd17 	ldw	r5,-12(fp)
   24a58:	e1bffe17 	ldw	r6,-8(fp)
   24a5c:	e1ffff17 	ldw	r7,-4(fp)
   24a60:	0024c080 	call	24c08 <alt_iic_isr_register>
}  
   24a64:	e037883a 	mov	sp,fp
   24a68:	dfc00117 	ldw	ra,4(sp)
   24a6c:	df000017 	ldw	fp,0(sp)
   24a70:	dec00204 	addi	sp,sp,8
   24a74:	f800283a 	ret

00024a78 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   24a78:	defff904 	addi	sp,sp,-28
   24a7c:	df000615 	stw	fp,24(sp)
   24a80:	df000604 	addi	fp,sp,24
   24a84:	e13ffe15 	stw	r4,-8(fp)
   24a88:	e17fff15 	stw	r5,-4(fp)
   24a8c:	e0bfff17 	ldw	r2,-4(fp)
   24a90:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   24a94:	0005303a 	rdctl	r2,status
   24a98:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   24a9c:	e0fffb17 	ldw	r3,-20(fp)
   24aa0:	00bfff84 	movi	r2,-2
   24aa4:	1884703a 	and	r2,r3,r2
   24aa8:	1001703a 	wrctl	status,r2
  
  return context;
   24aac:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   24ab0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   24ab4:	e0bffa17 	ldw	r2,-24(fp)
   24ab8:	00c00044 	movi	r3,1
   24abc:	1884983a 	sll	r2,r3,r2
   24ac0:	1007883a 	mov	r3,r2
   24ac4:	008000f4 	movhi	r2,3
   24ac8:	10a3f604 	addi	r2,r2,-28712
   24acc:	10800017 	ldw	r2,0(r2)
   24ad0:	1886b03a 	or	r3,r3,r2
   24ad4:	008000f4 	movhi	r2,3
   24ad8:	10a3f604 	addi	r2,r2,-28712
   24adc:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   24ae0:	008000f4 	movhi	r2,3
   24ae4:	10a3f604 	addi	r2,r2,-28712
   24ae8:	10800017 	ldw	r2,0(r2)
   24aec:	100170fa 	wrctl	ienable,r2
   24af0:	e0bffc17 	ldw	r2,-16(fp)
   24af4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   24af8:	e0bffd17 	ldw	r2,-12(fp)
   24afc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   24b00:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   24b04:	0001883a 	nop
}
   24b08:	e037883a 	mov	sp,fp
   24b0c:	df000017 	ldw	fp,0(sp)
   24b10:	dec00104 	addi	sp,sp,4
   24b14:	f800283a 	ret

00024b18 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   24b18:	defff904 	addi	sp,sp,-28
   24b1c:	df000615 	stw	fp,24(sp)
   24b20:	df000604 	addi	fp,sp,24
   24b24:	e13ffe15 	stw	r4,-8(fp)
   24b28:	e17fff15 	stw	r5,-4(fp)
   24b2c:	e0bfff17 	ldw	r2,-4(fp)
   24b30:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   24b34:	0005303a 	rdctl	r2,status
   24b38:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   24b3c:	e0fffb17 	ldw	r3,-20(fp)
   24b40:	00bfff84 	movi	r2,-2
   24b44:	1884703a 	and	r2,r3,r2
   24b48:	1001703a 	wrctl	status,r2
  
  return context;
   24b4c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   24b50:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   24b54:	e0bffa17 	ldw	r2,-24(fp)
   24b58:	00c00044 	movi	r3,1
   24b5c:	1884983a 	sll	r2,r3,r2
   24b60:	0084303a 	nor	r2,zero,r2
   24b64:	1007883a 	mov	r3,r2
   24b68:	008000f4 	movhi	r2,3
   24b6c:	10a3f604 	addi	r2,r2,-28712
   24b70:	10800017 	ldw	r2,0(r2)
   24b74:	1886703a 	and	r3,r3,r2
   24b78:	008000f4 	movhi	r2,3
   24b7c:	10a3f604 	addi	r2,r2,-28712
   24b80:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   24b84:	008000f4 	movhi	r2,3
   24b88:	10a3f604 	addi	r2,r2,-28712
   24b8c:	10800017 	ldw	r2,0(r2)
   24b90:	100170fa 	wrctl	ienable,r2
   24b94:	e0bffc17 	ldw	r2,-16(fp)
   24b98:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   24b9c:	e0bffd17 	ldw	r2,-12(fp)
   24ba0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   24ba4:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   24ba8:	0001883a 	nop
}
   24bac:	e037883a 	mov	sp,fp
   24bb0:	df000017 	ldw	fp,0(sp)
   24bb4:	dec00104 	addi	sp,sp,4
   24bb8:	f800283a 	ret

00024bbc <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   24bbc:	defffc04 	addi	sp,sp,-16
   24bc0:	df000315 	stw	fp,12(sp)
   24bc4:	df000304 	addi	fp,sp,12
   24bc8:	e13ffe15 	stw	r4,-8(fp)
   24bcc:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   24bd0:	000530fa 	rdctl	r2,ienable
   24bd4:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   24bd8:	e0bfff17 	ldw	r2,-4(fp)
   24bdc:	00c00044 	movi	r3,1
   24be0:	1884983a 	sll	r2,r3,r2
   24be4:	1007883a 	mov	r3,r2
   24be8:	e0bffd17 	ldw	r2,-12(fp)
   24bec:	1884703a 	and	r2,r3,r2
   24bf0:	1004c03a 	cmpne	r2,r2,zero
   24bf4:	10803fcc 	andi	r2,r2,255
}
   24bf8:	e037883a 	mov	sp,fp
   24bfc:	df000017 	ldw	fp,0(sp)
   24c00:	dec00104 	addi	sp,sp,4
   24c04:	f800283a 	ret

00024c08 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   24c08:	defff504 	addi	sp,sp,-44
   24c0c:	dfc00a15 	stw	ra,40(sp)
   24c10:	df000915 	stw	fp,36(sp)
   24c14:	df000904 	addi	fp,sp,36
   24c18:	e13ffc15 	stw	r4,-16(fp)
   24c1c:	e17ffd15 	stw	r5,-12(fp)
   24c20:	e1bffe15 	stw	r6,-8(fp)
   24c24:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   24c28:	00bffa84 	movi	r2,-22
   24c2c:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   24c30:	e0bffd17 	ldw	r2,-12(fp)
   24c34:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   24c38:	e0bff817 	ldw	r2,-32(fp)
   24c3c:	10800808 	cmpgei	r2,r2,32
   24c40:	1000271e 	bne	r2,zero,24ce0 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   24c44:	0005303a 	rdctl	r2,status
   24c48:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   24c4c:	e0fffa17 	ldw	r3,-24(fp)
   24c50:	00bfff84 	movi	r2,-2
   24c54:	1884703a 	and	r2,r3,r2
   24c58:	1001703a 	wrctl	status,r2
  
  return context;
   24c5c:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   24c60:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
   24c64:	008000f4 	movhi	r2,3
   24c68:	10a40304 	addi	r2,r2,-28660
   24c6c:	e0fff817 	ldw	r3,-32(fp)
   24c70:	180690fa 	slli	r3,r3,3
   24c74:	10c5883a 	add	r2,r2,r3
   24c78:	e0fffe17 	ldw	r3,-8(fp)
   24c7c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   24c80:	008000f4 	movhi	r2,3
   24c84:	10a40304 	addi	r2,r2,-28660
   24c88:	e0fff817 	ldw	r3,-32(fp)
   24c8c:	180690fa 	slli	r3,r3,3
   24c90:	10c5883a 	add	r2,r2,r3
   24c94:	10800104 	addi	r2,r2,4
   24c98:	e0ffff17 	ldw	r3,-4(fp)
   24c9c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   24ca0:	e0bffe17 	ldw	r2,-8(fp)
   24ca4:	10000526 	beq	r2,zero,24cbc <alt_iic_isr_register+0xb4>
   24ca8:	e0bff817 	ldw	r2,-32(fp)
   24cac:	e13ffc17 	ldw	r4,-16(fp)
   24cb0:	100b883a 	mov	r5,r2
   24cb4:	0024a780 	call	24a78 <alt_ic_irq_enable>
   24cb8:	00000406 	br	24ccc <alt_iic_isr_register+0xc4>
   24cbc:	e0bff817 	ldw	r2,-32(fp)
   24cc0:	e13ffc17 	ldw	r4,-16(fp)
   24cc4:	100b883a 	mov	r5,r2
   24cc8:	0024b180 	call	24b18 <alt_ic_irq_disable>
   24ccc:	e0bff715 	stw	r2,-36(fp)
   24cd0:	e0bff917 	ldw	r2,-28(fp)
   24cd4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   24cd8:	e0bffb17 	ldw	r2,-20(fp)
   24cdc:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   24ce0:	e0bff717 	ldw	r2,-36(fp)
}
   24ce4:	e037883a 	mov	sp,fp
   24ce8:	dfc00117 	ldw	ra,4(sp)
   24cec:	df000017 	ldw	fp,0(sp)
   24cf0:	dec00204 	addi	sp,sp,8
   24cf4:	f800283a 	ret

00024cf8 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   24cf8:	defff904 	addi	sp,sp,-28
   24cfc:	dfc00615 	stw	ra,24(sp)
   24d00:	df000515 	stw	fp,20(sp)
   24d04:	df000504 	addi	fp,sp,20
   24d08:	e13ffc15 	stw	r4,-16(fp)
   24d0c:	e17ffd15 	stw	r5,-12(fp)
   24d10:	e1bffe15 	stw	r6,-8(fp)
   24d14:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   24d18:	e13ffd17 	ldw	r4,-12(fp)
   24d1c:	e17ffe17 	ldw	r5,-8(fp)
   24d20:	e1bfff17 	ldw	r6,-4(fp)
   24d24:	0024f4c0 	call	24f4c <open>
   24d28:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   24d2c:	e0bffb17 	ldw	r2,-20(fp)
   24d30:	10001c16 	blt	r2,zero,24da4 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   24d34:	008000b4 	movhi	r2,2
   24d38:	1098c804 	addi	r2,r2,25376
   24d3c:	e0fffb17 	ldw	r3,-20(fp)
   24d40:	18c00324 	muli	r3,r3,12
   24d44:	10c5883a 	add	r2,r2,r3
   24d48:	10c00017 	ldw	r3,0(r2)
   24d4c:	e0bffc17 	ldw	r2,-16(fp)
   24d50:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   24d54:	008000b4 	movhi	r2,2
   24d58:	1098c804 	addi	r2,r2,25376
   24d5c:	e0fffb17 	ldw	r3,-20(fp)
   24d60:	18c00324 	muli	r3,r3,12
   24d64:	10c5883a 	add	r2,r2,r3
   24d68:	10800104 	addi	r2,r2,4
   24d6c:	10c00017 	ldw	r3,0(r2)
   24d70:	e0bffc17 	ldw	r2,-16(fp)
   24d74:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   24d78:	008000b4 	movhi	r2,2
   24d7c:	1098c804 	addi	r2,r2,25376
   24d80:	e0fffb17 	ldw	r3,-20(fp)
   24d84:	18c00324 	muli	r3,r3,12
   24d88:	10c5883a 	add	r2,r2,r3
   24d8c:	10800204 	addi	r2,r2,8
   24d90:	10c00017 	ldw	r3,0(r2)
   24d94:	e0bffc17 	ldw	r2,-16(fp)
   24d98:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   24d9c:	e13ffb17 	ldw	r4,-20(fp)
   24da0:	00236fc0 	call	236fc <alt_release_fd>
  }
} 
   24da4:	e037883a 	mov	sp,fp
   24da8:	dfc00117 	ldw	ra,4(sp)
   24dac:	df000017 	ldw	fp,0(sp)
   24db0:	dec00204 	addi	sp,sp,8
   24db4:	f800283a 	ret

00024db8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   24db8:	defffb04 	addi	sp,sp,-20
   24dbc:	dfc00415 	stw	ra,16(sp)
   24dc0:	df000315 	stw	fp,12(sp)
   24dc4:	df000304 	addi	fp,sp,12
   24dc8:	e13ffd15 	stw	r4,-12(fp)
   24dcc:	e17ffe15 	stw	r5,-8(fp)
   24dd0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   24dd4:	010000b4 	movhi	r4,2
   24dd8:	2118cb04 	addi	r4,r4,25388
   24ddc:	e17ffd17 	ldw	r5,-12(fp)
   24de0:	01800044 	movi	r6,1
   24de4:	01c07fc4 	movi	r7,511
   24de8:	0024cf80 	call	24cf8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   24dec:	010000b4 	movhi	r4,2
   24df0:	2118c804 	addi	r4,r4,25376
   24df4:	e17ffe17 	ldw	r5,-8(fp)
   24df8:	000d883a 	mov	r6,zero
   24dfc:	01c07fc4 	movi	r7,511
   24e00:	0024cf80 	call	24cf8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   24e04:	010000b4 	movhi	r4,2
   24e08:	2118ce04 	addi	r4,r4,25400
   24e0c:	e17fff17 	ldw	r5,-4(fp)
   24e10:	01800044 	movi	r6,1
   24e14:	01c07fc4 	movi	r7,511
   24e18:	0024cf80 	call	24cf8 <alt_open_fd>
}  
   24e1c:	e037883a 	mov	sp,fp
   24e20:	dfc00117 	ldw	ra,4(sp)
   24e24:	df000017 	ldw	fp,0(sp)
   24e28:	dec00204 	addi	sp,sp,8
   24e2c:	f800283a 	ret

00024e30 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   24e30:	defffe04 	addi	sp,sp,-8
   24e34:	dfc00115 	stw	ra,4(sp)
   24e38:	df000015 	stw	fp,0(sp)
   24e3c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   24e40:	008000b4 	movhi	r2,2
   24e44:	109d4904 	addi	r2,r2,29988
   24e48:	10800017 	ldw	r2,0(r2)
   24e4c:	10000526 	beq	r2,zero,24e64 <alt_get_errno+0x34>
   24e50:	008000b4 	movhi	r2,2
   24e54:	109d4904 	addi	r2,r2,29988
   24e58:	10800017 	ldw	r2,0(r2)
   24e5c:	103ee83a 	callr	r2
   24e60:	00000206 	br	24e6c <alt_get_errno+0x3c>
   24e64:	008000f4 	movhi	r2,3
   24e68:	10a3f204 	addi	r2,r2,-28728
}
   24e6c:	e037883a 	mov	sp,fp
   24e70:	dfc00117 	ldw	ra,4(sp)
   24e74:	df000017 	ldw	fp,0(sp)
   24e78:	dec00204 	addi	sp,sp,8
   24e7c:	f800283a 	ret

00024e80 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   24e80:	defffd04 	addi	sp,sp,-12
   24e84:	df000215 	stw	fp,8(sp)
   24e88:	df000204 	addi	fp,sp,8
   24e8c:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   24e90:	e0bfff17 	ldw	r2,-4(fp)
   24e94:	10800217 	ldw	r2,8(r2)
   24e98:	10d00034 	orhi	r3,r2,16384
   24e9c:	e0bfff17 	ldw	r2,-4(fp)
   24ea0:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   24ea4:	e03ffe15 	stw	zero,-8(fp)
   24ea8:	00001d06 	br	24f20 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   24eac:	008000b4 	movhi	r2,2
   24eb0:	1098c804 	addi	r2,r2,25376
   24eb4:	e0fffe17 	ldw	r3,-8(fp)
   24eb8:	18c00324 	muli	r3,r3,12
   24ebc:	10c5883a 	add	r2,r2,r3
   24ec0:	10c00017 	ldw	r3,0(r2)
   24ec4:	e0bfff17 	ldw	r2,-4(fp)
   24ec8:	10800017 	ldw	r2,0(r2)
   24ecc:	1880111e 	bne	r3,r2,24f14 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   24ed0:	008000b4 	movhi	r2,2
   24ed4:	1098c804 	addi	r2,r2,25376
   24ed8:	e0fffe17 	ldw	r3,-8(fp)
   24edc:	18c00324 	muli	r3,r3,12
   24ee0:	10c5883a 	add	r2,r2,r3
   24ee4:	10800204 	addi	r2,r2,8
   24ee8:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   24eec:	1000090e 	bge	r2,zero,24f14 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   24ef0:	e0bffe17 	ldw	r2,-8(fp)
   24ef4:	10c00324 	muli	r3,r2,12
   24ef8:	008000b4 	movhi	r2,2
   24efc:	1098c804 	addi	r2,r2,25376
   24f00:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   24f04:	e0bfff17 	ldw	r2,-4(fp)
   24f08:	18800226 	beq	r3,r2,24f14 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   24f0c:	00bffcc4 	movi	r2,-13
   24f10:	00000a06 	br	24f3c <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   24f14:	e0bffe17 	ldw	r2,-8(fp)
   24f18:	10800044 	addi	r2,r2,1
   24f1c:	e0bffe15 	stw	r2,-8(fp)
   24f20:	008000b4 	movhi	r2,2
   24f24:	109d4804 	addi	r2,r2,29984
   24f28:	10800017 	ldw	r2,0(r2)
   24f2c:	1007883a 	mov	r3,r2
   24f30:	e0bffe17 	ldw	r2,-8(fp)
   24f34:	18bfdd2e 	bgeu	r3,r2,24eac <__alt_data_end+0xfffe79ec>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   24f38:	0005883a 	mov	r2,zero
}
   24f3c:	e037883a 	mov	sp,fp
   24f40:	df000017 	ldw	fp,0(sp)
   24f44:	dec00104 	addi	sp,sp,4
   24f48:	f800283a 	ret

00024f4c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   24f4c:	defff604 	addi	sp,sp,-40
   24f50:	dfc00915 	stw	ra,36(sp)
   24f54:	df000815 	stw	fp,32(sp)
   24f58:	df000804 	addi	fp,sp,32
   24f5c:	e13ffd15 	stw	r4,-12(fp)
   24f60:	e17ffe15 	stw	r5,-8(fp)
   24f64:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   24f68:	00bfffc4 	movi	r2,-1
   24f6c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   24f70:	00bffb44 	movi	r2,-19
   24f74:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   24f78:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   24f7c:	e13ffd17 	ldw	r4,-12(fp)
   24f80:	014000b4 	movhi	r5,2
   24f84:	295d4604 	addi	r5,r5,29976
   24f88:	00252600 	call	25260 <alt_find_dev>
   24f8c:	e0bff815 	stw	r2,-32(fp)
   24f90:	e0bff817 	ldw	r2,-32(fp)
   24f94:	1000051e 	bne	r2,zero,24fac <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   24f98:	e13ffd17 	ldw	r4,-12(fp)
   24f9c:	00252f00 	call	252f0 <alt_find_file>
   24fa0:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   24fa4:	00800044 	movi	r2,1
   24fa8:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   24fac:	e0bff817 	ldw	r2,-32(fp)
   24fb0:	10002926 	beq	r2,zero,25058 <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
   24fb4:	e13ff817 	ldw	r4,-32(fp)
   24fb8:	00254040 	call	25404 <alt_get_fd>
   24fbc:	e0bff915 	stw	r2,-28(fp)
   24fc0:	e0bff917 	ldw	r2,-28(fp)
   24fc4:	1000030e 	bge	r2,zero,24fd4 <open+0x88>
    {
      status = index;
   24fc8:	e0bff917 	ldw	r2,-28(fp)
   24fcc:	e0bffa15 	stw	r2,-24(fp)
   24fd0:	00002306 	br	25060 <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
   24fd4:	e0bff917 	ldw	r2,-28(fp)
   24fd8:	10c00324 	muli	r3,r2,12
   24fdc:	008000b4 	movhi	r2,2
   24fe0:	1098c804 	addi	r2,r2,25376
   24fe4:	1885883a 	add	r2,r3,r2
   24fe8:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   24fec:	e0fffe17 	ldw	r3,-8(fp)
   24ff0:	00900034 	movhi	r2,16384
   24ff4:	10bfffc4 	addi	r2,r2,-1
   24ff8:	1886703a 	and	r3,r3,r2
   24ffc:	e0bffc17 	ldw	r2,-16(fp)
   25000:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   25004:	e0bffb17 	ldw	r2,-20(fp)
   25008:	1000051e 	bne	r2,zero,25020 <open+0xd4>
   2500c:	e13ffc17 	ldw	r4,-16(fp)
   25010:	0024e800 	call	24e80 <alt_file_locked>
   25014:	e0bffa15 	stw	r2,-24(fp)
   25018:	e0bffa17 	ldw	r2,-24(fp)
   2501c:	10001016 	blt	r2,zero,25060 <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   25020:	e0bff817 	ldw	r2,-32(fp)
   25024:	10800317 	ldw	r2,12(r2)
   25028:	10000826 	beq	r2,zero,2504c <open+0x100>
   2502c:	e0bff817 	ldw	r2,-32(fp)
   25030:	10800317 	ldw	r2,12(r2)
   25034:	e13ffc17 	ldw	r4,-16(fp)
   25038:	e17ffd17 	ldw	r5,-12(fp)
   2503c:	e1bffe17 	ldw	r6,-8(fp)
   25040:	e1ffff17 	ldw	r7,-4(fp)
   25044:	103ee83a 	callr	r2
   25048:	00000106 	br	25050 <open+0x104>
   2504c:	0005883a 	mov	r2,zero
   25050:	e0bffa15 	stw	r2,-24(fp)
   25054:	00000206 	br	25060 <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
   25058:	00bffb44 	movi	r2,-19
   2505c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   25060:	e0bffa17 	ldw	r2,-24(fp)
   25064:	1000090e 	bge	r2,zero,2508c <open+0x140>
  {
    alt_release_fd (index);  
   25068:	e13ff917 	ldw	r4,-28(fp)
   2506c:	00236fc0 	call	236fc <alt_release_fd>
    ALT_ERRNO = -status;
   25070:	0024e300 	call	24e30 <alt_get_errno>
   25074:	1007883a 	mov	r3,r2
   25078:	e0bffa17 	ldw	r2,-24(fp)
   2507c:	0085c83a 	sub	r2,zero,r2
   25080:	18800015 	stw	r2,0(r3)
    return -1;
   25084:	00bfffc4 	movi	r2,-1
   25088:	00000106 	br	25090 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
   2508c:	e0bff917 	ldw	r2,-28(fp)
}
   25090:	e037883a 	mov	sp,fp
   25094:	dfc00117 	ldw	ra,4(sp)
   25098:	df000017 	ldw	fp,0(sp)
   2509c:	dec00204 	addi	sp,sp,8
   250a0:	f800283a 	ret

000250a4 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   250a4:	defffa04 	addi	sp,sp,-24
   250a8:	df000515 	stw	fp,20(sp)
   250ac:	df000504 	addi	fp,sp,20
   250b0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   250b4:	0005303a 	rdctl	r2,status
   250b8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   250bc:	e0fffc17 	ldw	r3,-16(fp)
   250c0:	00bfff84 	movi	r2,-2
   250c4:	1884703a 	and	r2,r3,r2
   250c8:	1001703a 	wrctl	status,r2
  
  return context;
   250cc:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   250d0:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   250d4:	e0bfff17 	ldw	r2,-4(fp)
   250d8:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   250dc:	e0bffd17 	ldw	r2,-12(fp)
   250e0:	10800017 	ldw	r2,0(r2)
   250e4:	e0fffd17 	ldw	r3,-12(fp)
   250e8:	18c00117 	ldw	r3,4(r3)
   250ec:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   250f0:	e0bffd17 	ldw	r2,-12(fp)
   250f4:	10800117 	ldw	r2,4(r2)
   250f8:	e0fffd17 	ldw	r3,-12(fp)
   250fc:	18c00017 	ldw	r3,0(r3)
   25100:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   25104:	e0bffd17 	ldw	r2,-12(fp)
   25108:	e0fffd17 	ldw	r3,-12(fp)
   2510c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   25110:	e0bffd17 	ldw	r2,-12(fp)
   25114:	e0fffd17 	ldw	r3,-12(fp)
   25118:	10c00015 	stw	r3,0(r2)
   2511c:	e0bffb17 	ldw	r2,-20(fp)
   25120:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   25124:	e0bffe17 	ldw	r2,-8(fp)
   25128:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   2512c:	e037883a 	mov	sp,fp
   25130:	df000017 	ldw	fp,0(sp)
   25134:	dec00104 	addi	sp,sp,4
   25138:	f800283a 	ret

0002513c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   2513c:	defffb04 	addi	sp,sp,-20
   25140:	dfc00415 	stw	ra,16(sp)
   25144:	df000315 	stw	fp,12(sp)
   25148:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   2514c:	d0a00c17 	ldw	r2,-32720(gp)
   25150:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   25154:	d0a6b817 	ldw	r2,-25888(gp)
   25158:	10800044 	addi	r2,r2,1
   2515c:	d0a6b815 	stw	r2,-25888(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   25160:	00002e06 	br	2521c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   25164:	e0bffd17 	ldw	r2,-12(fp)
   25168:	10800017 	ldw	r2,0(r2)
   2516c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   25170:	e0bffd17 	ldw	r2,-12(fp)
   25174:	10800403 	ldbu	r2,16(r2)
   25178:	10803fcc 	andi	r2,r2,255
   2517c:	10000426 	beq	r2,zero,25190 <alt_tick+0x54>
   25180:	d0a6b817 	ldw	r2,-25888(gp)
   25184:	1000021e 	bne	r2,zero,25190 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   25188:	e0bffd17 	ldw	r2,-12(fp)
   2518c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   25190:	e0bffd17 	ldw	r2,-12(fp)
   25194:	10800217 	ldw	r2,8(r2)
   25198:	d0e6b817 	ldw	r3,-25888(gp)
   2519c:	18801d36 	bltu	r3,r2,25214 <alt_tick+0xd8>
   251a0:	e0bffd17 	ldw	r2,-12(fp)
   251a4:	10800403 	ldbu	r2,16(r2)
   251a8:	10803fcc 	andi	r2,r2,255
   251ac:	1000191e 	bne	r2,zero,25214 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   251b0:	e0bffd17 	ldw	r2,-12(fp)
   251b4:	10800317 	ldw	r2,12(r2)
   251b8:	e0fffd17 	ldw	r3,-12(fp)
   251bc:	18c00517 	ldw	r3,20(r3)
   251c0:	1809883a 	mov	r4,r3
   251c4:	103ee83a 	callr	r2
   251c8:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   251cc:	e0bfff17 	ldw	r2,-4(fp)
   251d0:	1000031e 	bne	r2,zero,251e0 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   251d4:	e13ffd17 	ldw	r4,-12(fp)
   251d8:	00250a40 	call	250a4 <alt_alarm_stop>
   251dc:	00000d06 	br	25214 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   251e0:	e0bffd17 	ldw	r2,-12(fp)
   251e4:	10c00217 	ldw	r3,8(r2)
   251e8:	e0bfff17 	ldw	r2,-4(fp)
   251ec:	1887883a 	add	r3,r3,r2
   251f0:	e0bffd17 	ldw	r2,-12(fp)
   251f4:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   251f8:	e0bffd17 	ldw	r2,-12(fp)
   251fc:	10c00217 	ldw	r3,8(r2)
   25200:	d0a6b817 	ldw	r2,-25888(gp)
   25204:	1880032e 	bgeu	r3,r2,25214 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   25208:	e0bffd17 	ldw	r2,-12(fp)
   2520c:	00c00044 	movi	r3,1
   25210:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   25214:	e0bffe17 	ldw	r2,-8(fp)
   25218:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   2521c:	e0fffd17 	ldw	r3,-12(fp)
   25220:	d0a00c04 	addi	r2,gp,-32720
   25224:	18bfcf1e 	bne	r3,r2,25164 <__alt_data_end+0xfffe7ca4>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   25228:	0001883a 	nop
}
   2522c:	e037883a 	mov	sp,fp
   25230:	dfc00117 	ldw	ra,4(sp)
   25234:	df000017 	ldw	fp,0(sp)
   25238:	dec00204 	addi	sp,sp,8
   2523c:	f800283a 	ret

00025240 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   25240:	deffff04 	addi	sp,sp,-4
   25244:	df000015 	stw	fp,0(sp)
   25248:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   2524c:	000170fa 	wrctl	ienable,zero
}
   25250:	e037883a 	mov	sp,fp
   25254:	df000017 	ldw	fp,0(sp)
   25258:	dec00104 	addi	sp,sp,4
   2525c:	f800283a 	ret

00025260 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   25260:	defffa04 	addi	sp,sp,-24
   25264:	dfc00515 	stw	ra,20(sp)
   25268:	df000415 	stw	fp,16(sp)
   2526c:	df000404 	addi	fp,sp,16
   25270:	e13ffe15 	stw	r4,-8(fp)
   25274:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   25278:	e0bfff17 	ldw	r2,-4(fp)
   2527c:	10800017 	ldw	r2,0(r2)
   25280:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   25284:	e13ffe17 	ldw	r4,-8(fp)
   25288:	00205700 	call	20570 <strlen>
   2528c:	10800044 	addi	r2,r2,1
   25290:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   25294:	00000d06 	br	252cc <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   25298:	e0bffc17 	ldw	r2,-16(fp)
   2529c:	10c00217 	ldw	r3,8(r2)
   252a0:	e0bffd17 	ldw	r2,-12(fp)
   252a4:	1809883a 	mov	r4,r3
   252a8:	e17ffe17 	ldw	r5,-8(fp)
   252ac:	100d883a 	mov	r6,r2
   252b0:	00255900 	call	25590 <memcmp>
   252b4:	1000021e 	bne	r2,zero,252c0 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   252b8:	e0bffc17 	ldw	r2,-16(fp)
   252bc:	00000706 	br	252dc <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   252c0:	e0bffc17 	ldw	r2,-16(fp)
   252c4:	10800017 	ldw	r2,0(r2)
   252c8:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   252cc:	e0fffc17 	ldw	r3,-16(fp)
   252d0:	e0bfff17 	ldw	r2,-4(fp)
   252d4:	18bff01e 	bne	r3,r2,25298 <__alt_data_end+0xfffe7dd8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   252d8:	0005883a 	mov	r2,zero
}
   252dc:	e037883a 	mov	sp,fp
   252e0:	dfc00117 	ldw	ra,4(sp)
   252e4:	df000017 	ldw	fp,0(sp)
   252e8:	dec00204 	addi	sp,sp,8
   252ec:	f800283a 	ret

000252f0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   252f0:	defffb04 	addi	sp,sp,-20
   252f4:	dfc00415 	stw	ra,16(sp)
   252f8:	df000315 	stw	fp,12(sp)
   252fc:	df000304 	addi	fp,sp,12
   25300:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   25304:	008000b4 	movhi	r2,2
   25308:	109d4404 	addi	r2,r2,29968
   2530c:	10800017 	ldw	r2,0(r2)
   25310:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   25314:	00003106 	br	253dc <alt_find_file+0xec>
  {
    len = strlen(next->name);
   25318:	e0bffd17 	ldw	r2,-12(fp)
   2531c:	10800217 	ldw	r2,8(r2)
   25320:	1009883a 	mov	r4,r2
   25324:	00205700 	call	20570 <strlen>
   25328:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   2532c:	e0bffd17 	ldw	r2,-12(fp)
   25330:	10c00217 	ldw	r3,8(r2)
   25334:	e0bffe17 	ldw	r2,-8(fp)
   25338:	10bfffc4 	addi	r2,r2,-1
   2533c:	1885883a 	add	r2,r3,r2
   25340:	10800003 	ldbu	r2,0(r2)
   25344:	10803fcc 	andi	r2,r2,255
   25348:	1080201c 	xori	r2,r2,128
   2534c:	10bfe004 	addi	r2,r2,-128
   25350:	10800bd8 	cmpnei	r2,r2,47
   25354:	1000031e 	bne	r2,zero,25364 <alt_find_file+0x74>
    {
      len -= 1;
   25358:	e0bffe17 	ldw	r2,-8(fp)
   2535c:	10bfffc4 	addi	r2,r2,-1
   25360:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   25364:	e0bffe17 	ldw	r2,-8(fp)
   25368:	e0ffff17 	ldw	r3,-4(fp)
   2536c:	1885883a 	add	r2,r3,r2
   25370:	10800003 	ldbu	r2,0(r2)
   25374:	10803fcc 	andi	r2,r2,255
   25378:	1080201c 	xori	r2,r2,128
   2537c:	10bfe004 	addi	r2,r2,-128
   25380:	10800be0 	cmpeqi	r2,r2,47
   25384:	1000081e 	bne	r2,zero,253a8 <alt_find_file+0xb8>
   25388:	e0bffe17 	ldw	r2,-8(fp)
   2538c:	e0ffff17 	ldw	r3,-4(fp)
   25390:	1885883a 	add	r2,r3,r2
   25394:	10800003 	ldbu	r2,0(r2)
   25398:	10803fcc 	andi	r2,r2,255
   2539c:	1080201c 	xori	r2,r2,128
   253a0:	10bfe004 	addi	r2,r2,-128
   253a4:	10000a1e 	bne	r2,zero,253d0 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   253a8:	e0bffd17 	ldw	r2,-12(fp)
   253ac:	10c00217 	ldw	r3,8(r2)
   253b0:	e0bffe17 	ldw	r2,-8(fp)
   253b4:	1809883a 	mov	r4,r3
   253b8:	e17fff17 	ldw	r5,-4(fp)
   253bc:	100d883a 	mov	r6,r2
   253c0:	00255900 	call	25590 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   253c4:	1000021e 	bne	r2,zero,253d0 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   253c8:	e0bffd17 	ldw	r2,-12(fp)
   253cc:	00000806 	br	253f0 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   253d0:	e0bffd17 	ldw	r2,-12(fp)
   253d4:	10800017 	ldw	r2,0(r2)
   253d8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   253dc:	e0fffd17 	ldw	r3,-12(fp)
   253e0:	008000b4 	movhi	r2,2
   253e4:	109d4404 	addi	r2,r2,29968
   253e8:	18bfcb1e 	bne	r3,r2,25318 <__alt_data_end+0xfffe7e58>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   253ec:	0005883a 	mov	r2,zero
}
   253f0:	e037883a 	mov	sp,fp
   253f4:	dfc00117 	ldw	ra,4(sp)
   253f8:	df000017 	ldw	fp,0(sp)
   253fc:	dec00204 	addi	sp,sp,8
   25400:	f800283a 	ret

00025404 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   25404:	defffc04 	addi	sp,sp,-16
   25408:	df000315 	stw	fp,12(sp)
   2540c:	df000304 	addi	fp,sp,12
   25410:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   25414:	00bffa04 	movi	r2,-24
   25418:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   2541c:	e03ffd15 	stw	zero,-12(fp)
   25420:	00001d06 	br	25498 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
   25424:	008000b4 	movhi	r2,2
   25428:	1098c804 	addi	r2,r2,25376
   2542c:	e0fffd17 	ldw	r3,-12(fp)
   25430:	18c00324 	muli	r3,r3,12
   25434:	10c5883a 	add	r2,r2,r3
   25438:	10800017 	ldw	r2,0(r2)
   2543c:	1000131e 	bne	r2,zero,2548c <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
   25440:	008000b4 	movhi	r2,2
   25444:	1098c804 	addi	r2,r2,25376
   25448:	e0fffd17 	ldw	r3,-12(fp)
   2544c:	18c00324 	muli	r3,r3,12
   25450:	10c5883a 	add	r2,r2,r3
   25454:	e0ffff17 	ldw	r3,-4(fp)
   25458:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   2545c:	008000b4 	movhi	r2,2
   25460:	109d4804 	addi	r2,r2,29984
   25464:	10c00017 	ldw	r3,0(r2)
   25468:	e0bffd17 	ldw	r2,-12(fp)
   2546c:	1880040e 	bge	r3,r2,25480 <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
   25470:	008000b4 	movhi	r2,2
   25474:	109d4804 	addi	r2,r2,29984
   25478:	e0fffd17 	ldw	r3,-12(fp)
   2547c:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   25480:	e0bffd17 	ldw	r2,-12(fp)
   25484:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   25488:	00000606 	br	254a4 <alt_get_fd+0xa0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   2548c:	e0bffd17 	ldw	r2,-12(fp)
   25490:	10800044 	addi	r2,r2,1
   25494:	e0bffd15 	stw	r2,-12(fp)
   25498:	e0bffd17 	ldw	r2,-12(fp)
   2549c:	10800810 	cmplti	r2,r2,32
   254a0:	103fe01e 	bne	r2,zero,25424 <__alt_data_end+0xfffe7f64>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   254a4:	e0bffe17 	ldw	r2,-8(fp)
}
   254a8:	e037883a 	mov	sp,fp
   254ac:	df000017 	ldw	fp,0(sp)
   254b0:	dec00104 	addi	sp,sp,4
   254b4:	f800283a 	ret

000254b8 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   254b8:	defffb04 	addi	sp,sp,-20
   254bc:	df000415 	stw	fp,16(sp)
   254c0:	df000404 	addi	fp,sp,16
   254c4:	e13ffe15 	stw	r4,-8(fp)
   254c8:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   254cc:	e0bfff17 	ldw	r2,-4(fp)
   254d0:	10880070 	cmpltui	r2,r2,8193
   254d4:	1000021e 	bne	r2,zero,254e0 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   254d8:	00880004 	movi	r2,8192
   254dc:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   254e0:	e0fffe17 	ldw	r3,-8(fp)
   254e4:	e0bfff17 	ldw	r2,-4(fp)
   254e8:	1885883a 	add	r2,r3,r2
   254ec:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   254f0:	e0bffe17 	ldw	r2,-8(fp)
   254f4:	e0bffc15 	stw	r2,-16(fp)
   254f8:	00000506 	br	25510 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   254fc:	e0bffc17 	ldw	r2,-16(fp)
   25500:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   25504:	e0bffc17 	ldw	r2,-16(fp)
   25508:	10800804 	addi	r2,r2,32
   2550c:	e0bffc15 	stw	r2,-16(fp)
   25510:	e0fffc17 	ldw	r3,-16(fp)
   25514:	e0bffd17 	ldw	r2,-12(fp)
   25518:	18bff836 	bltu	r3,r2,254fc <__alt_data_end+0xfffe803c>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   2551c:	e0bffe17 	ldw	r2,-8(fp)
   25520:	108007cc 	andi	r2,r2,31
   25524:	10000226 	beq	r2,zero,25530 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   25528:	e0bffc17 	ldw	r2,-16(fp)
   2552c:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   25530:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   25534:	e037883a 	mov	sp,fp
   25538:	df000017 	ldw	fp,0(sp)
   2553c:	dec00104 	addi	sp,sp,4
   25540:	f800283a 	ret

00025544 <atexit>:
   25544:	200b883a 	mov	r5,r4
   25548:	000d883a 	mov	r6,zero
   2554c:	0009883a 	mov	r4,zero
   25550:	000f883a 	mov	r7,zero
   25554:	002560c1 	jmpi	2560c <__register_exitproc>

00025558 <exit>:
   25558:	defffe04 	addi	sp,sp,-8
   2555c:	000b883a 	mov	r5,zero
   25560:	dc000015 	stw	r16,0(sp)
   25564:	dfc00115 	stw	ra,4(sp)
   25568:	2021883a 	mov	r16,r4
   2556c:	00257200 	call	25720 <__call_exitprocs>
   25570:	008000b4 	movhi	r2,2
   25574:	109d4004 	addi	r2,r2,29952
   25578:	11000017 	ldw	r4,0(r2)
   2557c:	20800f17 	ldw	r2,60(r4)
   25580:	10000126 	beq	r2,zero,25588 <exit+0x30>
   25584:	103ee83a 	callr	r2
   25588:	8009883a 	mov	r4,r16
   2558c:	00259e00 	call	259e0 <_exit>

00025590 <memcmp>:
   25590:	01c000c4 	movi	r7,3
   25594:	3980192e 	bgeu	r7,r6,255fc <memcmp+0x6c>
   25598:	2144b03a 	or	r2,r4,r5
   2559c:	11c4703a 	and	r2,r2,r7
   255a0:	10000f26 	beq	r2,zero,255e0 <memcmp+0x50>
   255a4:	20800003 	ldbu	r2,0(r4)
   255a8:	28c00003 	ldbu	r3,0(r5)
   255ac:	10c0151e 	bne	r2,r3,25604 <memcmp+0x74>
   255b0:	31bfff84 	addi	r6,r6,-2
   255b4:	01ffffc4 	movi	r7,-1
   255b8:	00000406 	br	255cc <memcmp+0x3c>
   255bc:	20800003 	ldbu	r2,0(r4)
   255c0:	28c00003 	ldbu	r3,0(r5)
   255c4:	31bfffc4 	addi	r6,r6,-1
   255c8:	10c00e1e 	bne	r2,r3,25604 <memcmp+0x74>
   255cc:	21000044 	addi	r4,r4,1
   255d0:	29400044 	addi	r5,r5,1
   255d4:	31fff91e 	bne	r6,r7,255bc <__alt_data_end+0xfffe80fc>
   255d8:	0005883a 	mov	r2,zero
   255dc:	f800283a 	ret
   255e0:	20c00017 	ldw	r3,0(r4)
   255e4:	28800017 	ldw	r2,0(r5)
   255e8:	1880041e 	bne	r3,r2,255fc <memcmp+0x6c>
   255ec:	31bfff04 	addi	r6,r6,-4
   255f0:	21000104 	addi	r4,r4,4
   255f4:	29400104 	addi	r5,r5,4
   255f8:	39bff936 	bltu	r7,r6,255e0 <__alt_data_end+0xfffe8120>
   255fc:	303fe91e 	bne	r6,zero,255a4 <__alt_data_end+0xfffe80e4>
   25600:	003ff506 	br	255d8 <__alt_data_end+0xfffe8118>
   25604:	10c5c83a 	sub	r2,r2,r3
   25608:	f800283a 	ret

0002560c <__register_exitproc>:
   2560c:	008000b4 	movhi	r2,2
   25610:	defffa04 	addi	sp,sp,-24
   25614:	109d4004 	addi	r2,r2,29952
   25618:	dc000315 	stw	r16,12(sp)
   2561c:	14000017 	ldw	r16,0(r2)
   25620:	dc400415 	stw	r17,16(sp)
   25624:	dfc00515 	stw	ra,20(sp)
   25628:	80805217 	ldw	r2,328(r16)
   2562c:	2023883a 	mov	r17,r4
   25630:	10003626 	beq	r2,zero,2570c <__register_exitproc+0x100>
   25634:	10c00117 	ldw	r3,4(r2)
   25638:	010007c4 	movi	r4,31
   2563c:	20c00e16 	blt	r4,r3,25678 <__register_exitproc+0x6c>
   25640:	1a400044 	addi	r9,r3,1
   25644:	8800211e 	bne	r17,zero,256cc <__register_exitproc+0xc0>
   25648:	18c00084 	addi	r3,r3,2
   2564c:	18c7883a 	add	r3,r3,r3
   25650:	18c7883a 	add	r3,r3,r3
   25654:	12400115 	stw	r9,4(r2)
   25658:	10c7883a 	add	r3,r2,r3
   2565c:	19400015 	stw	r5,0(r3)
   25660:	0005883a 	mov	r2,zero
   25664:	dfc00517 	ldw	ra,20(sp)
   25668:	dc400417 	ldw	r17,16(sp)
   2566c:	dc000317 	ldw	r16,12(sp)
   25670:	dec00604 	addi	sp,sp,24
   25674:	f800283a 	ret
   25678:	00800034 	movhi	r2,0
   2567c:	10800004 	addi	r2,r2,0
   25680:	10002526 	beq	r2,zero,25718 <__register_exitproc+0x10c>
   25684:	01006404 	movi	r4,400
   25688:	d9400015 	stw	r5,0(sp)
   2568c:	d9800115 	stw	r6,4(sp)
   25690:	d9c00215 	stw	r7,8(sp)
   25694:	00000000 	call	0 <__alt_mem_onchip_memory-0x20000>
   25698:	d9400017 	ldw	r5,0(sp)
   2569c:	d9800117 	ldw	r6,4(sp)
   256a0:	d9c00217 	ldw	r7,8(sp)
   256a4:	10001c26 	beq	r2,zero,25718 <__register_exitproc+0x10c>
   256a8:	80c05217 	ldw	r3,328(r16)
   256ac:	10000115 	stw	zero,4(r2)
   256b0:	02400044 	movi	r9,1
   256b4:	10c00015 	stw	r3,0(r2)
   256b8:	80805215 	stw	r2,328(r16)
   256bc:	10006215 	stw	zero,392(r2)
   256c0:	10006315 	stw	zero,396(r2)
   256c4:	0007883a 	mov	r3,zero
   256c8:	883fdf26 	beq	r17,zero,25648 <__alt_data_end+0xfffe8188>
   256cc:	18d1883a 	add	r8,r3,r3
   256d0:	4211883a 	add	r8,r8,r8
   256d4:	1211883a 	add	r8,r2,r8
   256d8:	41802215 	stw	r6,136(r8)
   256dc:	01000044 	movi	r4,1
   256e0:	11806217 	ldw	r6,392(r2)
   256e4:	20c8983a 	sll	r4,r4,r3
   256e8:	310cb03a 	or	r6,r6,r4
   256ec:	11806215 	stw	r6,392(r2)
   256f0:	41c04215 	stw	r7,264(r8)
   256f4:	01800084 	movi	r6,2
   256f8:	89bfd31e 	bne	r17,r6,25648 <__alt_data_end+0xfffe8188>
   256fc:	11806317 	ldw	r6,396(r2)
   25700:	3108b03a 	or	r4,r6,r4
   25704:	11006315 	stw	r4,396(r2)
   25708:	003fcf06 	br	25648 <__alt_data_end+0xfffe8188>
   2570c:	80805304 	addi	r2,r16,332
   25710:	80805215 	stw	r2,328(r16)
   25714:	003fc706 	br	25634 <__alt_data_end+0xfffe8174>
   25718:	00bfffc4 	movi	r2,-1
   2571c:	003fd106 	br	25664 <__alt_data_end+0xfffe81a4>

00025720 <__call_exitprocs>:
   25720:	008000b4 	movhi	r2,2
   25724:	109d4004 	addi	r2,r2,29952
   25728:	10800017 	ldw	r2,0(r2)
   2572c:	defff404 	addi	sp,sp,-48
   25730:	dd800815 	stw	r22,32(sp)
   25734:	d8800015 	stw	r2,0(sp)
   25738:	10805204 	addi	r2,r2,328
   2573c:	dd000615 	stw	r20,24(sp)
   25740:	dc800415 	stw	r18,16(sp)
   25744:	dfc00b15 	stw	ra,44(sp)
   25748:	df000a15 	stw	fp,40(sp)
   2574c:	ddc00915 	stw	r23,36(sp)
   25750:	dd400715 	stw	r21,28(sp)
   25754:	dcc00515 	stw	r19,20(sp)
   25758:	dc400315 	stw	r17,12(sp)
   2575c:	dc000215 	stw	r16,8(sp)
   25760:	2025883a 	mov	r18,r4
   25764:	2829883a 	mov	r20,r5
   25768:	d8800115 	stw	r2,4(sp)
   2576c:	05bfffc4 	movi	r22,-1
   25770:	d8800017 	ldw	r2,0(sp)
   25774:	14c05217 	ldw	r19,328(r2)
   25778:	98001d26 	beq	r19,zero,257f0 <__call_exitprocs+0xd0>
   2577c:	dd400117 	ldw	r21,4(sp)
   25780:	98800117 	ldw	r2,4(r19)
   25784:	173fffc4 	addi	fp,r2,-1
   25788:	e0000d16 	blt	fp,zero,257c0 <__call_exitprocs+0xa0>
   2578c:	14000044 	addi	r16,r2,1
   25790:	8421883a 	add	r16,r16,r16
   25794:	8421883a 	add	r16,r16,r16
   25798:	84402004 	addi	r17,r16,128
   2579c:	9c63883a 	add	r17,r19,r17
   257a0:	9c21883a 	add	r16,r19,r16
   257a4:	a0001e26 	beq	r20,zero,25820 <__call_exitprocs+0x100>
   257a8:	80804017 	ldw	r2,256(r16)
   257ac:	15001c26 	beq	r2,r20,25820 <__call_exitprocs+0x100>
   257b0:	e73fffc4 	addi	fp,fp,-1
   257b4:	843fff04 	addi	r16,r16,-4
   257b8:	8c7fff04 	addi	r17,r17,-4
   257bc:	e5bff91e 	bne	fp,r22,257a4 <__alt_data_end+0xfffe82e4>
   257c0:	00800034 	movhi	r2,0
   257c4:	10800004 	addi	r2,r2,0
   257c8:	10000926 	beq	r2,zero,257f0 <__call_exitprocs+0xd0>
   257cc:	98800117 	ldw	r2,4(r19)
   257d0:	1000311e 	bne	r2,zero,25898 <__call_exitprocs+0x178>
   257d4:	98800017 	ldw	r2,0(r19)
   257d8:	10003426 	beq	r2,zero,258ac <__call_exitprocs+0x18c>
   257dc:	9809883a 	mov	r4,r19
   257e0:	a8800015 	stw	r2,0(r21)
   257e4:	00000000 	call	0 <__alt_mem_onchip_memory-0x20000>
   257e8:	acc00017 	ldw	r19,0(r21)
   257ec:	983fe41e 	bne	r19,zero,25780 <__alt_data_end+0xfffe82c0>
   257f0:	dfc00b17 	ldw	ra,44(sp)
   257f4:	df000a17 	ldw	fp,40(sp)
   257f8:	ddc00917 	ldw	r23,36(sp)
   257fc:	dd800817 	ldw	r22,32(sp)
   25800:	dd400717 	ldw	r21,28(sp)
   25804:	dd000617 	ldw	r20,24(sp)
   25808:	dcc00517 	ldw	r19,20(sp)
   2580c:	dc800417 	ldw	r18,16(sp)
   25810:	dc400317 	ldw	r17,12(sp)
   25814:	dc000217 	ldw	r16,8(sp)
   25818:	dec00c04 	addi	sp,sp,48
   2581c:	f800283a 	ret
   25820:	98800117 	ldw	r2,4(r19)
   25824:	80c00017 	ldw	r3,0(r16)
   25828:	10bfffc4 	addi	r2,r2,-1
   2582c:	17001526 	beq	r2,fp,25884 <__call_exitprocs+0x164>
   25830:	80000015 	stw	zero,0(r16)
   25834:	183fde26 	beq	r3,zero,257b0 <__alt_data_end+0xfffe82f0>
   25838:	00800044 	movi	r2,1
   2583c:	1708983a 	sll	r4,r2,fp
   25840:	98806217 	ldw	r2,392(r19)
   25844:	9dc00117 	ldw	r23,4(r19)
   25848:	2084703a 	and	r2,r4,r2
   2584c:	1000061e 	bne	r2,zero,25868 <__call_exitprocs+0x148>
   25850:	183ee83a 	callr	r3
   25854:	98800117 	ldw	r2,4(r19)
   25858:	15ffc51e 	bne	r2,r23,25770 <__alt_data_end+0xfffe82b0>
   2585c:	a8800017 	ldw	r2,0(r21)
   25860:	14ffd326 	beq	r2,r19,257b0 <__alt_data_end+0xfffe82f0>
   25864:	003fc206 	br	25770 <__alt_data_end+0xfffe82b0>
   25868:	98806317 	ldw	r2,396(r19)
   2586c:	2084703a 	and	r2,r4,r2
   25870:	1000061e 	bne	r2,zero,2588c <__call_exitprocs+0x16c>
   25874:	89400017 	ldw	r5,0(r17)
   25878:	9009883a 	mov	r4,r18
   2587c:	183ee83a 	callr	r3
   25880:	003ff406 	br	25854 <__alt_data_end+0xfffe8394>
   25884:	9f000115 	stw	fp,4(r19)
   25888:	003fea06 	br	25834 <__alt_data_end+0xfffe8374>
   2588c:	89000017 	ldw	r4,0(r17)
   25890:	183ee83a 	callr	r3
   25894:	003fef06 	br	25854 <__alt_data_end+0xfffe8394>
   25898:	98800017 	ldw	r2,0(r19)
   2589c:	982b883a 	mov	r21,r19
   258a0:	1027883a 	mov	r19,r2
   258a4:	983fb61e 	bne	r19,zero,25780 <__alt_data_end+0xfffe82c0>
   258a8:	003fd106 	br	257f0 <__alt_data_end+0xfffe8330>
   258ac:	0005883a 	mov	r2,zero
   258b0:	003ffa06 	br	2589c <__alt_data_end+0xfffe83dc>

000258b4 <udivmodsi4>:
   258b4:	2900182e 	bgeu	r5,r4,25918 <udivmodsi4+0x64>
   258b8:	28001716 	blt	r5,zero,25918 <udivmodsi4+0x64>
   258bc:	00800804 	movi	r2,32
   258c0:	00c00044 	movi	r3,1
   258c4:	00000206 	br	258d0 <udivmodsi4+0x1c>
   258c8:	10001126 	beq	r2,zero,25910 <udivmodsi4+0x5c>
   258cc:	28000516 	blt	r5,zero,258e4 <udivmodsi4+0x30>
   258d0:	294b883a 	add	r5,r5,r5
   258d4:	10bfffc4 	addi	r2,r2,-1
   258d8:	18c7883a 	add	r3,r3,r3
   258dc:	293ffa36 	bltu	r5,r4,258c8 <__alt_data_end+0xfffe8408>
   258e0:	18000b26 	beq	r3,zero,25910 <udivmodsi4+0x5c>
   258e4:	0005883a 	mov	r2,zero
   258e8:	21400236 	bltu	r4,r5,258f4 <udivmodsi4+0x40>
   258ec:	2149c83a 	sub	r4,r4,r5
   258f0:	10c4b03a 	or	r2,r2,r3
   258f4:	1806d07a 	srli	r3,r3,1
   258f8:	280ad07a 	srli	r5,r5,1
   258fc:	183ffa1e 	bne	r3,zero,258e8 <__alt_data_end+0xfffe8428>
   25900:	3000011e 	bne	r6,zero,25908 <udivmodsi4+0x54>
   25904:	f800283a 	ret
   25908:	2005883a 	mov	r2,r4
   2590c:	f800283a 	ret
   25910:	0005883a 	mov	r2,zero
   25914:	003ffa06 	br	25900 <__alt_data_end+0xfffe8440>
   25918:	00c00044 	movi	r3,1
   2591c:	003ff106 	br	258e4 <__alt_data_end+0xfffe8424>

00025920 <__divsi3>:
   25920:	defffe04 	addi	sp,sp,-8
   25924:	dfc00115 	stw	ra,4(sp)
   25928:	dc000015 	stw	r16,0(sp)
   2592c:	20000b16 	blt	r4,zero,2595c <__divsi3+0x3c>
   25930:	0021883a 	mov	r16,zero
   25934:	28000c16 	blt	r5,zero,25968 <__divsi3+0x48>
   25938:	000d883a 	mov	r6,zero
   2593c:	00258b40 	call	258b4 <udivmodsi4>
   25940:	0407c83a 	sub	r3,zero,r16
   25944:	1884f03a 	xor	r2,r3,r2
   25948:	1405883a 	add	r2,r2,r16
   2594c:	dfc00117 	ldw	ra,4(sp)
   25950:	dc000017 	ldw	r16,0(sp)
   25954:	dec00204 	addi	sp,sp,8
   25958:	f800283a 	ret
   2595c:	0109c83a 	sub	r4,zero,r4
   25960:	04000044 	movi	r16,1
   25964:	283ff40e 	bge	r5,zero,25938 <__alt_data_end+0xfffe8478>
   25968:	014bc83a 	sub	r5,zero,r5
   2596c:	8400005c 	xori	r16,r16,1
   25970:	003ff106 	br	25938 <__alt_data_end+0xfffe8478>

00025974 <__modsi3>:
   25974:	defffd04 	addi	sp,sp,-12
   25978:	dfc00215 	stw	ra,8(sp)
   2597c:	dc400115 	stw	r17,4(sp)
   25980:	dc000015 	stw	r16,0(sp)
   25984:	20000c16 	blt	r4,zero,259b8 <__modsi3+0x44>
   25988:	0023883a 	mov	r17,zero
   2598c:	0021883a 	mov	r16,zero
   25990:	28000d16 	blt	r5,zero,259c8 <__modsi3+0x54>
   25994:	01800044 	movi	r6,1
   25998:	00258b40 	call	258b4 <udivmodsi4>
   2599c:	1404f03a 	xor	r2,r2,r16
   259a0:	8885883a 	add	r2,r17,r2
   259a4:	dfc00217 	ldw	ra,8(sp)
   259a8:	dc400117 	ldw	r17,4(sp)
   259ac:	dc000017 	ldw	r16,0(sp)
   259b0:	dec00304 	addi	sp,sp,12
   259b4:	f800283a 	ret
   259b8:	0109c83a 	sub	r4,zero,r4
   259bc:	04400044 	movi	r17,1
   259c0:	043fffc4 	movi	r16,-1
   259c4:	283ff30e 	bge	r5,zero,25994 <__alt_data_end+0xfffe84d4>
   259c8:	014bc83a 	sub	r5,zero,r5
   259cc:	003ff106 	br	25994 <__alt_data_end+0xfffe84d4>

000259d0 <__udivsi3>:
   259d0:	000d883a 	mov	r6,zero
   259d4:	00258b41 	jmpi	258b4 <udivmodsi4>

000259d8 <__umodsi3>:
   259d8:	01800044 	movi	r6,1
   259dc:	00258b41 	jmpi	258b4 <udivmodsi4>

000259e0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   259e0:	defffd04 	addi	sp,sp,-12
   259e4:	df000215 	stw	fp,8(sp)
   259e8:	df000204 	addi	fp,sp,8
   259ec:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   259f0:	0001883a 	nop
   259f4:	e0bfff17 	ldw	r2,-4(fp)
   259f8:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   259fc:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   25a00:	10000226 	beq	r2,zero,25a0c <_exit+0x2c>
    ALT_SIM_FAIL();
   25a04:	002af070 	cmpltui	zero,zero,43969
   25a08:	00000106 	br	25a10 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   25a0c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   25a10:	003fff06 	br	25a10 <__alt_data_end+0xfffe8550>
