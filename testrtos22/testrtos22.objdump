
testrtos22.elf:     file format elf32-littlenios2
testrtos22.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000401bc

Program Header:
    LOAD off    0x00001000 vaddr 0x00040000 paddr 0x00040000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00040020 paddr 0x00040020 align 2**12
         filesz 0x00017d98 memsz 0x00017d98 flags r-x
    LOAD off    0x00018db8 vaddr 0x00057db8 paddr 0x0005993c align 2**12
         filesz 0x00001b84 memsz 0x00001b84 flags rw-
    LOAD off    0x0001b4c0 vaddr 0x0005b4c0 paddr 0x0005b4c0 align 2**12
         filesz 0x00000000 memsz 0x000073ec flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00040000  00040000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000019c  00040020  00040020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000176d4  000401bc  000401bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000528  00057890  00057890  00018890  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b84  00057db8  0005993c  00018db8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000073ec  0005b4c0  0005b4c0  0001b4c0  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  000628ac  000628ac  0001a93c  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  0001a93c  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000e28  00000000  00000000  0001a960  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0002cbf9  00000000  00000000  0001b788  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000a911  00000000  00000000  00048381  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000d25f  00000000  00000000  00052c92  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00003094  00000000  00000000  0005fef4  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00004290  00000000  00000000  00062f88  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00016d3e  00000000  00000000  00067218  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000020  00000000  00000000  0007df58  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001368  00000000  00000000  0007df78  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000006  00000000  00000000  00083cfd  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000a  00000000  00000000  00083d03  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00083d0d  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00083d0e  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00083d0f  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00083d13  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00083d17  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  00083d1b  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  00083d24  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  00083d2d  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000008  00000000  00000000  00083d36  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000022  00000000  00000000  00083d3e  2**0
                  CONTENTS, READONLY
 29 .jdi          00003e86  00000000  00000000  00083d60  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00044f68  00000000  00000000  00087be6  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00040000 l    d  .entry	00000000 .entry
00040020 l    d  .exceptions	00000000 .exceptions
000401bc l    d  .text	00000000 .text
00057890 l    d  .rodata	00000000 .rodata
00057db8 l    d  .rwdata	00000000 .rwdata
0005b4c0 l    d  .bss	00000000 .bss
000628ac l    d  .onchip_memory	00000000 .onchip_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../testrtos22_bsp//obj/HAL/src/crt0.o
000401f4 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
00040094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_ucosii.c
000401f8 l     F .text	000000c8 foursevensegDisplay
00057db8 l     O .rwdata	00000010 segments.2962
000402c0 l     F .text	00000078 foursevensegDisplayAnyNumber
00040338 l     F .text	00000030 readSwitchValue
0005b4c4 l     O .bss	00000004 compteur.2993
00000000 l    df *ABS*	00000000 lib2-divmod.c
00040604 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
000579e2 l     O .rodata	00000010 zeroes.4181
000579f2 l     O .rodata	00000010 blanks.4180
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00042a4c l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
000445cc l     F .text	00000008 __fp_lock
000445d4 l     F .text	00000008 __fp_unlock
000445e8 l     F .text	000001a0 __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00057dc8 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
0005820c l     O .rwdata	00000020 lc_ctype_charset
000581ec l     O .rwdata	00000020 lc_message_charset
0005822c l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00057a24 l     O .rodata	0000000c p05.2678
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
00047a48 l     F .text	000000fc __sprint_r.part.0
00057b58 l     O .rodata	00000010 blanks.4125
00057b48 l     O .rodata	00000010 zeroes.4126
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0004c964 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0004ca84 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0004cab0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0004cbb0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0004cca4 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0004cd88 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_read.c
0004cf80 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
000598b0 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0004d1dc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 alt_env_lock.c
000598b4 l     O .rwdata	00000004 lockid
0005b4f4 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
000598b8 l     O .rwdata	00000004 lockid
0005b4fc l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
0004eff0 l     F .text	00000044 OS_InitMisc
0004f034 l     F .text	00000068 OS_InitRdyList
0004f194 l     F .text	000000e0 OS_InitTCBList
0004ef14 l     F .text	000000dc OS_InitEventList
0004f09c l     F .text	0000007c OS_InitTaskIdle
0004f118 l     F .text	0000007c OS_InitTaskStat
0004f3f4 l     F .text	00000070 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
000511e8 l     F .text	00000110 OS_FlagTaskRdy
00050f40 l     F .text	000001c4 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00055684 l     F .text	00000038 alt_dev_reg
00058814 l     O .rwdata	0000106c jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00055a00 l     F .text	000002a4 altera_avalon_jtag_uart_irq
00055ca4 l     F .text	00000110 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0005647c l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
000566d4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00056b80 l     F .text	000000c0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00056cb8 l     F .text	00000050 alt_get_errno
00056d08 l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 os_cpu_a.o
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00047088 g     F .text	00000074 _mprec_log10
00059906 g     O .rwdata	00000002 OSTaskNameSize
00047174 g     F .text	0000008c __any_on
00049398 g     F .text	00000054 _isatty_r
00057a30 g     O .rodata	00000028 __mprec_tinytens
0004ceac g     F .text	000000d4 alt_main
00040798 g     F .text	000000b8 _puts_r
000627ac g     O .bss	00000100 alt_irq
000493ec g     F .text	0000005c _lseek_r
00051a4c g     F .text	000000d0 OS_MemInit
0005993c g       *ABS*	00000000 __flash_rwdata_start
00055620 g     F .text	00000064 OSTimeSet
0004b4cc g     F .text	00000084 .hidden __eqdf2
0004dc6c g     F .text	00000610 OSEventPendMulti
000628ac g       *ABS*	00000000 __alt_heap_start
0004d618 g     F .text	00000020 OSTaskCreateHook
0005b588 g     O .bss	00002000 task1_stk
0004075c g     F .text	0000003c printf
000598de g     O .rwdata	00000002 OSMboxEn
0004e2d0 g     F .text	0000007c OSIntEnter
00049614 g     F .text	0000009c _wcrtomb_r
00047940 g     F .text	0000005c __sseek
0004491c g     F .text	00000010 __sinit
000494a4 g     F .text	00000154 __swbuf_r
000598ee g     O .rwdata	00000002 OSQEn
00045394 g     F .text	0000007c _setlocale_r
00044788 g     F .text	00000064 __sfmoreglue
0004d940 g     F .text	000000d0 __malloc_unlock
0004d674 g     F .text	0000001c OSTaskStatHook
0005b504 g     O .bss	00000001 OSLockNesting
0005992c g     O .rwdata	00000002 OSDataSize
0005b505 g     O .bss	00000001 OSRunning
00045ff4 g     F .text	0000015c memmove
0004d690 g     F .text	0000001c OSInitHookBegin
00059924 g     O .rwdata	00000002 OSTmrSize
00044904 g     F .text	00000018 _cleanup
00046274 g     F .text	000000a8 _Balloc
0005b508 g     O .bss	00000004 OSIdleCtr
0004b550 g     F .text	000000e0 .hidden __gtdf2
00057194 g       .text	00000000 OSStartTsk
00000000  w      *UND*	00000000 __errno
0004f71c g     F .text	000002d4 OS_TCBInit
00040000 g     F .entry	0000001c __reset
0005992a g     O .rwdata	00000002 OSTmrWheelTblSize
00040020 g       *ABS*	00000000 __flash_exceptions_start
000598ca g     O .rwdata	00000002 OSEventSize
0005b50c g     O .bss	00000001 OSPrioHighRdy
00049340 g     F .text	00000058 _fstat_r
0004d638 g     F .text	00000020 OSTaskDelHook
0005b4e0 g     O .bss	00000004 errno
000478bc g     F .text	00000008 __seofread
00057174 g       .text	00000000 OSStartHighRdy
00053f30 g     F .text	000001ec OSTaskCreateExt
00050a8c g     F .text	00000068 OSFlagPendGetFlagsRdy
0005990a g     O .rwdata	00000002 OSTaskStatStkSize
0004fb7c g     F .text	00000308 OSFlagAccept
00052120 g     F .text	000000b8 OSQFlush
00051b1c g     F .text	00000140 OSQAccept
0005b4ec g     O .bss	00000004 alt_argv
00061880 g       *ABS*	00000000 _gp
00053d74 g     F .text	000001bc OSTaskCreate
00053834 g     F .text	00000540 OSTaskChangePrio
0005b500 g     O .bss	00000004 alt_heapsem
0004f9f0 g     F .text	0000018c OSDebugInit
0005411c g     F .text	000003e0 OSTaskDel
00058694 g     O .rwdata	00000180 alt_fd_list
0005f588 g     O .bss	00000370 OSFlagTbl
0004ed00 g     F .text	000000b4 OS_EventTaskRemove
000571b8 g     F .text	00000090 alt_find_dev
00045ebc g     F .text	00000138 memcpy
000598f4 g     O .rwdata	00000002 OSRdyTblSize
000445dc g     F .text	0000000c _cleanup_r
0004c78c g     F .text	000000d0 .hidden __floatsidf
00056c40 g     F .text	00000078 alt_io_redirect
0004b630 g     F .text	000000e0 .hidden __ltdf2
00057890 g       *ABS*	00000000 __DTOR_END__
00040850 g     F .text	00000014 puts
0004da10 g     F .text	00000120 OSEventNameGet
000598d8 g     O .rwdata	00000002 OSFlagMax
000477a0 g     F .text	00000074 __fpclassifyd
00046fe4 g     F .text	000000a4 __ratio
0004e34c g     F .text	000000f4 OSIntExit
00048eb8 g     F .text	00000024 __vfiprintf_internal
00059912 g     O .rwdata	00000002 OSTCBSize
0005b50d g     O .bss	00000001 OSPrioCur
00055f08 g     F .text	000002b4 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00040730 g     F .text	0000002c _printf_r
00040720 g     F .text	00000008 .hidden __udivsi3
0004cc00 g     F .text	000000a4 isatty
000598f8 g     O .rwdata	00000002 OSStkWidth
00057a80 g     O .rodata	000000c8 __mprec_tens
000598ec g     O .rwdata	00000002 OSPtrSize
00045410 g     F .text	0000000c __locale_charset
000598cc g     O .rwdata	00000002 OSEventTblSize
000570e8 g       .text	00000000 OSCtxSw
00057458 g     F .text	0000008c alt_icache_flush
0005b4dc g     O .bss	00000004 __malloc_top_pad
0005b510 g     O .bss	00000004 OSTCBList
0005b4e4 g     O .bss	00000004 alt_fd_list_lock
00059888 g     O .rwdata	00000004 __mb_cur_max
00045440 g     F .text	0000000c _localeconv_r
00046674 g     F .text	0000003c __i2b
00044d80 g     F .text	000004a4 __sfvwrite_r
0005f8f8 g     O .bss	00000c30 OSMemTbl
0005b514 g     O .bss	00000001 OSTickStepState
00047814 g     F .text	00000054 _sbrk_r
000598f0 g     O .rwdata	00000002 OSQMax
00060528 g     O .bss	00000800 OSTaskStatStk
0005167c g     F .text	000000f8 OSMemNameGet
000598d0 g     O .rwdata	00000002 OSFlagEn
00049448 g     F .text	0000005c _read_r
00059916 g     O .rwdata	00000002 OSTimeTickHookEn
00052640 g     F .text	00000168 OSQPost
000512f8 g     F .text	000000a0 OS_FlagUnlink
000598a8 g     O .rwdata	00000004 alt_max_fd
0004f2c4 g     F .text	00000064 OS_MemCopy
0004f328 g     F .text	000000cc OS_Sched
00049050 g     F .text	00000100 _fclose_r
0005158c g     F .text	000000f0 OSMemGet
000547fc g     F .text	000001c0 OSTaskNameSet
0004459c g     F .text	00000030 fflush
0005b4d8 g     O .bss	00000004 __malloc_max_sbrked_mem
0005b518 g     O .bss	00000004 OSCtxSwCtr
000405b4 g     F .text	00000050 OSTimeTickHook
000598da g     O .rwdata	00000002 OSFlagNameSize
0004edb4 g     F .text	000000fc OS_EventTaskRemoveMulti
0004a364 g     F .text	0000089c .hidden __adddf3
0004ebb4 g     F .text	0000014c OS_EventTaskWaitMulti
00046d8c g     F .text	0000011c __b2d
000598f2 g     O .rwdata	00000002 OSQSize
00049dd4 g     F .text	00000590 .hidden __umoddi3
0004cdd8 g     F .text	000000d4 lseek
00053144 g     F .text	00000268 OSSemPend
00059880 g     O .rwdata	00000004 _global_impure_ptr
00047200 g     F .text	000005a0 _realloc_r
000598dc g     O .rwdata	00000002 OSLowestPrio
000628ac g       *ABS*	00000000 __bss_end
00056a90 g     F .text	000000f0 alt_iic_isr_register
0004d6e4 g     F .text	00000020 OSTCBInitHook
00059922 g     O .rwdata	00000002 OSTmrCfgTicksPerSec
00056fc4 g     F .text	00000104 alt_tick
00049814 g     F .text	000005c0 .hidden __udivdi3
00049164 g     F .text	00000184 _fputwc_r
000598c4 g     O .rwdata	00000002 OSEventEn
00057a58 g     O .rodata	00000028 __mprec_bigtens
00046458 g     F .text	00000104 __s2b
0005991e g     O .rwdata	00000002 OSTmrCfgNameSize
0004c85c g     F .text	000000a4 .hidden __floatunsidf
00046b34 g     F .text	00000060 __mcmp
0004493c g     F .text	00000018 __fp_lock_all
00056a44 g     F .text	0000004c alt_ic_irq_enabled
00051104 g     F .text	000000e4 OS_FlagInit
00056f2c g     F .text	00000098 alt_alarm_stop
00059900 g     O .rwdata	00000002 OSTaskIdleStkSize
0005b554 g     O .bss	00000004 alt_irq_active
00052d2c g     F .text	000000b0 OSSemAccept
0005188c g     F .text	000000d8 OSMemPut
00051398 g     F .text	000001f4 OSMemCreate
0005b51c g     O .bss	00000004 OSIdleCtrMax
000400ec g     F .exceptions	000000d0 alt_irq_handler
0005866c g     O .rwdata	00000028 alt_dev_null
00059914 g     O .rwdata	00000002 OSTicksPerSec
000570e8 g       .text	00000000 OSIntCtxSw
000566b8 g     F .text	0000001c alt_dcache_flush_all
0004655c g     F .text	00000068 __hi0bits
0004c704 g     F .text	00000088 .hidden __fixdfsi
0005b520 g     O .bss	00000004 OSTCBFreeList
0005993c g       *ABS*	00000000 __ram_rwdata_end
000533ac g     F .text	0000016c OSSemPendAbort
00040000 g       *ABS*	00000000 __alt_mem_onchip_memory
000598a0 g     O .rwdata	00000008 alt_dev_list
0004d22c g     F .text	000000f8 write
00059918 g     O .rwdata	00000002 OSVersionNbr
00057db8 g       *ABS*	00000000 __ram_rodata_end
0004cb00 g     F .text	000000b0 fstat
0004b630 g     F .text	000000e0 .hidden __ledf2
000598c0 g     O .rwdata	00000004 OSEndiannessTest
000468ac g     F .text	00000140 __pow5mult
00047b5c g     F .text	0000135c ___vfiprintf_internal_r
0005b4d0 g     O .bss	00000004 __nlocale_changed
00040728 g     F .text	00000008 .hidden __umodsi3
000598d2 g     O .rwdata	00000002 OSFlagGrpSize
000628ac g       *ABS*	00000000 end
000558b4 g     F .text	0000014c altera_avalon_jtag_uart_init
0004f588 g     F .text	000000cc OS_TaskStat
00057890 g       *ABS*	00000000 __CTOR_LIST__
00070d40 g       *ABS*	00000000 __alt_stack_pointer
000564f0 g     F .text	00000088 alt_avalon_timer_sc_init
0004c900 g     F .text	00000064 .hidden __clzsi2
000561bc g     F .text	000002c0 altera_avalon_jtag_uart_write
0004492c g     F .text	00000004 __sfp_lock_acquire
00045dd4 g     F .text	000000e8 memchr
0004f274 g     F .text	00000050 OS_MemClr
000408fc g     F .text	00001ffc ___vfprintf_internal_r
0004d324 g     F .text	000002f4 OSTaskStkInit
00040368 g     F .text	000000a0 task1
00044a90 g     F .text	000002f0 _free_r
0004541c g     F .text	00000010 __locale_mb_cur_max
0004e910 g     F .text	00000198 OS_EventTaskRdy
000576c0 g     F .text	00000194 __call_exitprocs
0005b524 g     O .bss	00000001 OSCPUUsage
0005b4cc g     O .bss	00000004 __mlocale_changed
0005988c g     O .rwdata	00000004 __malloc_sbrk_base
000401bc g     F .text	0000003c _start
00040408 g     F .text	000000b4 task2
0005b558 g     O .bss	00000004 _alt_tick_rate
000521d8 g     F .text	000002fc OSQPend
00055128 g     F .text	00000148 OSTimeDly
000469ec g     F .text	00000148 __lshift
0005b55c g     O .bss	00000004 _alt_nticks
0004cfd0 g     F .text	000000fc read
000556f0 g     F .text	00000060 alt_sys_init
000575ac g     F .text	00000114 __register_exitproc
0005b525 g     O .bss	00000001 OSTaskCtr
00055270 g     F .text	0000015c OSTimeDlyHMSM
000466b0 g     F .text	000001fc __multiply
00055db4 g     F .text	00000068 altera_avalon_jtag_uart_close
00057db8 g       *ABS*	00000000 __ram_rwdata_start
00057890 g       *ABS*	00000000 __ram_rodata_start
0005b560 g     O .bss	00000028 __malloc_current_mallinfo
000598c6 g     O .rwdata	00000002 OSEventMax
00046ea8 g     F .text	0000013c __d2b
00053518 g     F .text	00000110 OSSemPost
0004e4c8 g     F .text	000000d8 OSSchedUnlock
00055750 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0005735c g     F .text	000000fc alt_get_fd
0005b528 g     O .bss	00000004 OSMemFreeList
0004e60c g     F .text	000000ac OSStatInit
00050e7c g     F .text	000000c4 OSFlagQuery
000598fc g     O .rwdata	00000002 OSTaskCreateExtEn
00048f38 g     F .text	00000054 _close_r
00057530 g     F .text	0000007c memcmp
0004e8f4 g     F .text	0000001c OS_Dummy
00055810 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
000628ac g       *ABS*	00000000 __alt_stack_base
00055860 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0004291c g     F .text	00000130 __swsetup_r
00060d28 g     O .bss	000001e0 OSQTbl
0004ac00 g     F .text	000008cc .hidden __divdf3
000447ec g     F .text	00000118 __sfp
000470fc g     F .text	00000078 __copybits
00058264 g     O .rwdata	00000408 __malloc_av_
00044938 g     F .text	00000004 __sinit_lock_release
0005b52c g     O .bss	00000004 OSTCBHighRdy
0004b710 g     F .text	00000724 .hidden __muldf3
00047868 g     F .text	00000054 __sread
0005b530 g     O .bss	00000004 OSQFreeList
00057248 g     F .text	00000114 alt_find_file
00056724 g     F .text	000000a4 alt_dev_llist_insert
0004d820 g     F .text	00000120 __malloc_lock
0004d12c g     F .text	000000b0 sbrk
0004db30 g     F .text	0000013c OSEventNameSet
00044374 g     F .text	00000228 _fflush_r
00048f8c g     F .text	000000c4 _calloc_r
0005b534 g     O .bss	00000001 OSRdyGrp
0005b4c0 g       *ABS*	00000000 __bss_start
00046150 g     F .text	00000124 memset
000404bc g     F .text	000000f8 main
0005b4f0 g     O .bss	00000004 alt_envp
0005b4d4 g     O .bss	00000004 __malloc_max_total_mem
000557b0 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
000495f8 g     F .text	0000001c __swbuf
00057c88 g     O .rodata	00000100 OSUnMapTbl
000598f6 g     O .rwdata	00000002 OSSemEn
00050af4 g     F .text	00000388 OSFlagPost
0004799c g     F .text	00000008 __sclose
00070d40 g       *ABS*	00000000 __alt_heap_limit
00049150 g     F .text	00000014 fclose
0004eaa8 g     F .text	0000010c OS_EventTaskWait
0005d588 g     O .bss	00002000 task2_stk
0004f654 g     F .text	000000c8 OS_TaskStatStkChk
000544fc g     F .text	00000158 OSTaskDelReq
00042c4c g     F .text	00001728 _dtoa_r
0004562c g     F .text	000007a8 _malloc_r
00049788 g     F .text	00000030 __ascii_wctomb
000598ac g     O .rwdata	00000004 alt_errno
0004e5a0 g     F .text	0000006c OSStart
0004d7c4 g     F .text	0000005c __env_unlock
00045224 g     F .text	000000b8 _fwalk
000549bc g     F .text	000001f8 OSTaskResume
00051964 g     F .text	000000e8 OSMemQuery
00059908 g     O .rwdata	00000002 OSTaskStatEn
000598e2 g     O .rwdata	00000002 OSMemMax
000527a8 g     F .text	00000170 OSQPostFront
00040670 g     F .text	00000054 .hidden __divsi3
0005b535 g     O .bss	00000003 OSRdyTbl
000598bc g     O .rwdata	00000002 OSDebugEn
0004496c g     F .text	00000124 _malloc_trim_r
00057890 g       *ABS*	00000000 __CTOR_END__
000598d4 g     O .rwdata	00000002 OSFlagNodeSize
0005991c g     O .rwdata	00000002 OSTmrCfgMax
000479a4 g     F .text	000000a4 strcmp
00051c5c g     F .text	000001fc OSQCreate
00054654 g     F .text	000001a8 OSTaskNameGet
00057890 g       *ABS*	00000000 __flash_rodata_start
00052918 g     F .text	0000020c OSQPostOpt
0004e6b8 g     F .text	0000021c OSTimeTick
00059904 g     O .rwdata	00000002 OSTaskMax
00057890 g       *ABS*	00000000 __DTOR_LIST__
00052ddc g     F .text	00000100 OSSemCreate
00059928 g     O .rwdata	00000002 OSTmrWheelSize
0004b4cc g     F .text	00000084 .hidden __nedf2
000598fe g     O .rwdata	00000002 OSTaskDelEn
00053628 g     F .text	00000110 OSSemQuery
00051e58 g     F .text	000002c8 OSQDel
000524d4 g     F .text	0000016c OSQPendAbort
000556bc g     F .text	00000034 alt_irq_init
0004d0cc g     F .text	00000060 alt_release_fd
00057b68 g     O .rodata	00000100 .hidden __clz_tab
0005b4c8 g     O .bss	00000004 _PathLocale
000574e4 g     F .text	00000014 atexit
00048edc g     F .text	0000005c _write_r
0004e440 g     F .text	00000088 OSSchedLock
0004544c g     F .text	0000001c setlocale
0004fe84 g     F .text	00000128 OSFlagCreate
00059884 g     O .rwdata	00000004 _impure_ptr
0005b4e8 g     O .bss	00000004 alt_argc
00056824 g     F .text	0000005c _do_dtors
00045438 g     F .text	00000008 __locale_cjk_lang
000598ce g     O .rwdata	00000002 OSEventMultiEn
0004ffac g     F .text	00000270 OSFlagDel
0005b538 g     O .bss	00000004 OSEventFreeList
00040020 g       .exceptions	00000000 alt_irq_entry
00046d2c g     F .text	00000060 __ulp
0005049c g     F .text	000005f0 OSFlagPend
0005991a g     O .rwdata	00000002 OSTmrEn
00044954 g     F .text	00000018 __fp_unlock_all
00059898 g     O .rwdata	00000008 alt_fs_list
0004f464 g     F .text	00000074 OS_StrCopy
000598e4 g     O .rwdata	00000002 OSMemNameSize
0004d6ac g     F .text	0000001c OSInitHookEnd
00040020 g       *ABS*	00000000 __ram_exceptions_start
00059910 g     O .rwdata	00000002 OSTCBPrioTblMax
00045468 g     F .text	0000000c localeconv
0005990c g     O .rwdata	00000002 OSTaskStatStkChkEn
000568b0 g     F .text	00000050 alt_ic_isr_register
000598e0 g     O .rwdata	00000002 OSMemEn
000598ea g     O .rwdata	00000002 OSMutexEn
0005993c g       *ABS*	00000000 _edata
000628ac g       *ABS*	00000000 _end
0005b53c g     O .bss	00000001 OSIntNesting
000401bc g       *ABS*	00000000 __ram_exceptions_end
00055e1c g     F .text	000000ec altera_avalon_jtag_uart_ioctl
000553cc g     F .text	000001f0 OSTimeDlyResume
0005034c g     F .text	00000150 OSFlagNameSet
00054bb4 g     F .text	000001c8 OSTaskStkChk
000569a0 g     F .text	000000a4 alt_ic_irq_disable
000598e6 g     O .rwdata	00000002 OSMemSize
000478c4 g     F .text	0000007c __swrite
00059890 g     O .rwdata	00000004 __malloc_trim_threshold
0005b4c0 g     O .bss	00000004 time_sec
000570c8 g     F .text	00000020 altera_nios2_qsys_irq_init
0004542c g     F .text	0000000c __locale_msgcharset
0005b540 g     O .bss	00000004 OSTCBCur
000574f8 g     F .text	00000038 exit
000598e8 g     O .rwdata	00000002 OSMemTblSize
000452dc g     F .text	000000b8 _fwalk_reent
00046b94 g     F .text	00000198 __mdiff
000406c4 g     F .text	0000005c .hidden __modsi3
00070d40 g       *ABS*	00000000 __alt_data_end
00040020 g     F .exceptions	00000000 alt_exception
00044930 g     F .text	00000004 __sfp_lock_release
0004e27c g     F .text	00000054 OSInit
00054f90 g     F .text	0000012c OSTaskQuery
00052c80 g     F .text	000000ac OS_QInit
0004f4d8 g     F .text	00000054 OS_StrLen
00051774 g     F .text	00000118 OSMemNameSet
00059902 g     O .rwdata	00000002 OSTaskProfileEn
0005b544 g     O .bss	00000004 OSTime
00060f08 g     O .bss	00000800 OSTaskIdleStk
00057854 g     F .text	0000003c _exit
00056578 g     F .text	00000140 alt_alarm_start
0005021c g     F .text	00000130 OSFlagNameGet
000555bc g     F .text	00000064 OSTimeGet
00045474 g     F .text	000001b8 __smakebuf_r
00040864 g     F .text	00000098 strlen
00056dd4 g     F .text	00000158 open
0004d658 g     F .text	0000001c OSTaskSwHook
00061708 g     O .bss	00000b40 OSEventTbl
0004b550 g     F .text	000000e0 .hidden __gedf2
00062248 g     O .bss	00000510 OSTCBTbl
00053738 g     F .text	000000fc OSSemSet
00059894 g     O .rwdata	00000004 __wctomb
00047b44 g     F .text	00000018 __sprint_r
00056880 g     F .text	00000030 alt_icache_flush_all
00059930 g     O .rwdata	00000004 alt_priority_mask
00052edc g     F .text	00000268 OSSemDel
0005b548 g     O .bss	00000004 OSFlagFreeList
00056900 g     F .text	000000a0 alt_ic_irq_enable
000598c8 g     O .rwdata	00000002 OSEventNameSize
000428f8 g     F .text	00000024 __vfprintf_internal
0005b54c g     O .bss	00000001 OSStatRdy
00062758 g     O .bss	00000054 OSTCBPrioTbl
000497b8 g     F .text	0000005c _wctomb_r
0004d704 g     F .text	000000c0 __env_lock
0005990e g     O .rwdata	00000002 OSTaskSwHookEn
0004be34 g     F .text	000008d0 .hidden __subdf3
000465c4 g     F .text	000000b0 __lo0bits
00059934 g     O .rwdata	00000008 alt_alarm_list
000598d6 g     O .rwdata	00000002 OSFlagWidth
000567c8 g     F .text	0000005c _do_ctors
000496b0 g     F .text	000000d8 wcrtomb
0004c9b4 g     F .text	000000d0 close
0005b4f8 g     O .bss	00000004 alt_envsem
0005b550 g     O .bss	00000004 OSIdleCtrRun
0004e8d4 g     F .text	00000020 OSVersion
00059920 g     O .rwdata	00000002 OSTmrCfgWheelSize
0004cd08 g     F .text	00000080 alt_load
000550bc g     F .text	0000006c OS_TaskStkClr
000598fa g     O .rwdata	00000002 OSTaskCreateEn
0004eeb0 g     F .text	00000064 OS_EventWaitListInit
000492e8 g     F .text	00000058 fputwc
0004d6c8 g     F .text	0000001c OSTaskIdleHook
00000000  w      *UND*	00000000 free
00044934 g     F .text	00000004 __sinit_lock_acquire
00046344 g     F .text	00000114 __multadd
00054d7c g     F .text	00000214 OSTaskSuspend
0004631c g     F .text	00000028 _Bfree
0004f52c g     F .text	0000005c OS_TaskIdle
00059926 g     O .rwdata	00000002 OSTmrTblSize
00052b24 g     F .text	0000015c OSQQuery



Disassembly of section .entry:

00040000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   40000:	00880014 	movui	r2,8192
#endif

0:
    initi r2
   40004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   40008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   4000c:	00bffd16 	blt	zero,r2,40004 <__alt_data_end+0xfffcf2c4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   40010:	00400134 	movhi	at,4
    ori r1, r1, %lo(_start)
   40014:	08406f14 	ori	at,at,444
    jmp r1
   40018:	0800683a 	jmp	at
   4001c:	00000000 	call	0 <OSTCBStkPtr_OFFSET>

Disassembly of section .exceptions:

00040020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   40020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   40024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   40028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   4002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   40030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   40034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   40038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   4003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   40040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   40044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   40048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   4004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   40050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   40054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   40058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   4005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   40060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   40064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   40068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   4006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   40070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   40074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   40078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   4007c:	10000326 	beq	r2,zero,4008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   40080:	20000226 	beq	r4,zero,4008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   40084:	00400ec0 	call	400ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   40088:	00000306 	br	40098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   4008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   40090:	e8bfff17 	ldw	r2,-4(ea)

00040094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
   40094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   40098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   4009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   400a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   400a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   400a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   400ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   400b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   400b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   400b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   400bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   400c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   400c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   400c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   400cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   400d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   400d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   400d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   400dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   400e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   400e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   400e8:	ef80083a 	eret

000400ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   400ec:	defff904 	addi	sp,sp,-28
   400f0:	dfc00615 	stw	ra,24(sp)
   400f4:	df000515 	stw	fp,20(sp)
   400f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   400fc:	004e2d00 	call	4e2d0 <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   40100:	0005313a 	rdctl	r2,ipending
   40104:	e0bffe15 	stw	r2,-8(fp)

  return active;
   40108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   4010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   40110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   40114:	00800044 	movi	r2,1
   40118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   4011c:	e0fffb17 	ldw	r3,-20(fp)
   40120:	e0bffc17 	ldw	r2,-16(fp)
   40124:	1884703a 	and	r2,r3,r2
   40128:	10001426 	beq	r2,zero,4017c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   4012c:	008001b4 	movhi	r2,6
   40130:	1089eb04 	addi	r2,r2,10156
   40134:	e0fffd17 	ldw	r3,-12(fp)
   40138:	180690fa 	slli	r3,r3,3
   4013c:	10c5883a 	add	r2,r2,r3
   40140:	10c00017 	ldw	r3,0(r2)
   40144:	008001b4 	movhi	r2,6
   40148:	1089eb04 	addi	r2,r2,10156
   4014c:	e13ffd17 	ldw	r4,-12(fp)
   40150:	200890fa 	slli	r4,r4,3
   40154:	1105883a 	add	r2,r2,r4
   40158:	10800104 	addi	r2,r2,4
   4015c:	10800017 	ldw	r2,0(r2)
   40160:	1009883a 	mov	r4,r2
   40164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   40168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   4016c:	0005313a 	rdctl	r2,ipending
   40170:	e0bfff15 	stw	r2,-4(fp)

  return active;
   40174:	e0bfff17 	ldw	r2,-4(fp)
   40178:	00000706 	br	40198 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   4017c:	e0bffc17 	ldw	r2,-16(fp)
   40180:	1085883a 	add	r2,r2,r2
   40184:	e0bffc15 	stw	r2,-16(fp)
      i++;
   40188:	e0bffd17 	ldw	r2,-12(fp)
   4018c:	10800044 	addi	r2,r2,1
   40190:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   40194:	003fe106 	br	4011c <__alt_data_end+0xfffcf3dc>

    active = alt_irq_pending ();
   40198:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   4019c:	e0bffb17 	ldw	r2,-20(fp)
   401a0:	103fdb1e 	bne	r2,zero,40110 <__alt_data_end+0xfffcf3d0>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   401a4:	004e34c0 	call	4e34c <OSIntExit>
}
   401a8:	e037883a 	mov	sp,fp
   401ac:	dfc00117 	ldw	ra,4(sp)
   401b0:	df000017 	ldw	fp,0(sp)
   401b4:	dec00204 	addi	sp,sp,8
   401b8:	f800283a 	ret

Disassembly of section .text:

000401bc <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   401bc:	06c001f4 	movhi	sp,7
    ori sp, sp, %lo(__alt_stack_pointer)
   401c0:	dec35014 	ori	sp,sp,3392
    movhi gp, %hi(_gp)
   401c4:	068001b4 	movhi	gp,6
    ori gp, gp, %lo(_gp)
   401c8:	d6862014 	ori	gp,gp,6272
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   401cc:	00800174 	movhi	r2,5
    ori r2, r2, %lo(__bss_start)
   401d0:	10ad3014 	ori	r2,r2,46272

    movhi r3, %hi(__bss_end)
   401d4:	00c001b4 	movhi	r3,6
    ori r3, r3, %lo(__bss_end)
   401d8:	18ca2b14 	ori	r3,r3,10412

    beq r2, r3, 1f
   401dc:	10c00326 	beq	r2,r3,401ec <_start+0x30>

0:
    stw zero, (r2)
   401e0:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   401e4:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   401e8:	10fffd36 	bltu	r2,r3,401e0 <__alt_data_end+0xfffcf4a0>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   401ec:	004cd080 	call	4cd08 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   401f0:	004ceac0 	call	4ceac <alt_main>

000401f4 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   401f4:	003fff06 	br	401f4 <__alt_data_end+0xfffcf4b4>

000401f8 <foursevensegDisplay>:
INT32U time_sec = 0;
#define SEVEN_SEG_PIO_BASE 0x81020
#define SWITCH_PIO_BASE 0x81040
/*Senven segment display*/
static void foursevensegDisplay(int afficheurNumber1, int afficheurNumber2, int afficheurNumber3, int afficheurNumber4)
{
   401f8:	defffa04 	addi	sp,sp,-24
   401fc:	df000515 	stw	fp,20(sp)
   40200:	df000504 	addi	fp,sp,20
   40204:	e13ffc15 	stw	r4,-16(fp)
   40208:	e17ffd15 	stw	r5,-12(fp)
   4020c:	e1bffe15 	stw	r6,-8(fp)
   40210:	e1ffff15 	stw	r7,-4(fp)
    static alt_u8 segments[16] = {0x40, 0x79, 0x24, 0x30, 0x19, 0x12, 0x02, 0x78, 0x00, 0x10, 0x08, 0x03, 0x46, 0x21, 0x06, 0x0e};
    alt_u32 data = segments[afficheurNumber1 & 0xff] | (segments[afficheurNumber2 & 0xff] << 8) | (segments[afficheurNumber3 & 0xff] << 16) | (segments[afficheurNumber4 & 15] << 24);
   40214:	e0bffc17 	ldw	r2,-16(fp)
   40218:	10c03fcc 	andi	r3,r2,255
   4021c:	00800174 	movhi	r2,5
   40220:	109f6e04 	addi	r2,r2,32184
   40224:	10c5883a 	add	r2,r2,r3
   40228:	10800003 	ldbu	r2,0(r2)
   4022c:	10c03fcc 	andi	r3,r2,255
   40230:	e0bffd17 	ldw	r2,-12(fp)
   40234:	11003fcc 	andi	r4,r2,255
   40238:	00800174 	movhi	r2,5
   4023c:	109f6e04 	addi	r2,r2,32184
   40240:	1105883a 	add	r2,r2,r4
   40244:	10800003 	ldbu	r2,0(r2)
   40248:	10803fcc 	andi	r2,r2,255
   4024c:	1004923a 	slli	r2,r2,8
   40250:	1886b03a 	or	r3,r3,r2
   40254:	e0bffe17 	ldw	r2,-8(fp)
   40258:	11003fcc 	andi	r4,r2,255
   4025c:	00800174 	movhi	r2,5
   40260:	109f6e04 	addi	r2,r2,32184
   40264:	1105883a 	add	r2,r2,r4
   40268:	10800003 	ldbu	r2,0(r2)
   4026c:	10803fcc 	andi	r2,r2,255
   40270:	1004943a 	slli	r2,r2,16
   40274:	1886b03a 	or	r3,r3,r2
   40278:	e0bfff17 	ldw	r2,-4(fp)
   4027c:	110003cc 	andi	r4,r2,15
   40280:	00800174 	movhi	r2,5
   40284:	109f6e04 	addi	r2,r2,32184
   40288:	1105883a 	add	r2,r2,r4
   4028c:	10800003 	ldbu	r2,0(r2)
   40290:	10803fcc 	andi	r2,r2,255
   40294:	1004963a 	slli	r2,r2,24
   40298:	1884b03a 	or	r2,r3,r2
   4029c:	e0bffb15 	stw	r2,-20(fp)
    IOWR_ALTERA_AVALON_PIO_DATA(SEVEN_SEG_PIO_BASE, data);
   402a0:	e0fffb17 	ldw	r3,-20(fp)
   402a4:	00800234 	movhi	r2,8
   402a8:	10840804 	addi	r2,r2,4128
   402ac:	10c00035 	stwio	r3,0(r2)
}
   402b0:	e037883a 	mov	sp,fp
   402b4:	df000017 	ldw	fp,0(sp)
   402b8:	dec00104 	addi	sp,sp,4
   402bc:	f800283a 	ret

000402c0 <foursevensegDisplayAnyNumber>:
static void foursevensegDisplayAnyNumber(int number)
{
   402c0:	defff904 	addi	sp,sp,-28
   402c4:	dfc00615 	stw	ra,24(sp)
   402c8:	df000515 	stw	fp,20(sp)
   402cc:	df000504 	addi	fp,sp,20
   402d0:	e13fff15 	stw	r4,-4(fp)
    int afficheurNumber1 = (number / 10) % 10;
   402d4:	e0bfff17 	ldw	r2,-4(fp)
   402d8:	1009883a 	mov	r4,r2
   402dc:	01400284 	movi	r5,10
   402e0:	00406700 	call	40670 <__divsi3>
   402e4:	1009883a 	mov	r4,r2
   402e8:	01400284 	movi	r5,10
   402ec:	00406c40 	call	406c4 <__modsi3>
   402f0:	e0bffb15 	stw	r2,-20(fp)
    int afficheurNumber2 = number % 10;
   402f4:	e0bfff17 	ldw	r2,-4(fp)
   402f8:	1009883a 	mov	r4,r2
   402fc:	01400284 	movi	r5,10
   40300:	00406c40 	call	406c4 <__modsi3>
   40304:	e0bffc15 	stw	r2,-16(fp)
    int afficheurNumber3 = 0;
   40308:	e03ffd15 	stw	zero,-12(fp)
    int afficheurNumber4 = 0;
   4030c:	e03ffe15 	stw	zero,-8(fp)
    foursevensegDisplay(afficheurNumber1, afficheurNumber2, afficheurNumber3, afficheurNumber4);
   40310:	e13ffb17 	ldw	r4,-20(fp)
   40314:	e17ffc17 	ldw	r5,-16(fp)
   40318:	e1bffd17 	ldw	r6,-12(fp)
   4031c:	e1fffe17 	ldw	r7,-8(fp)
   40320:	00401f80 	call	401f8 <foursevensegDisplay>
}
   40324:	e037883a 	mov	sp,fp
   40328:	dfc00117 	ldw	ra,4(sp)
   4032c:	df000017 	ldw	fp,0(sp)
   40330:	dec00204 	addi	sp,sp,8
   40334:	f800283a 	ret

00040338 <readSwitchValue>:

/*Read the 4 switches value*/
static int readSwitchValue()
{
   40338:	defffe04 	addi	sp,sp,-8
   4033c:	df000115 	stw	fp,4(sp)
   40340:	df000104 	addi	fp,sp,4
    int switchValue = IORD_ALTERA_AVALON_PIO_DATA(SWITCH_PIO_BASE);
   40344:	00800234 	movhi	r2,8
   40348:	10841004 	addi	r2,r2,4160
   4034c:	10800037 	ldwio	r2,0(r2)
   40350:	e0bfff15 	stw	r2,-4(fp)
    return switchValue;
   40354:	e0bfff17 	ldw	r2,-4(fp)
}
   40358:	e037883a 	mov	sp,fp
   4035c:	df000017 	ldw	fp,0(sp)
   40360:	dec00104 	addi	sp,sp,4
   40364:	f800283a 	ret

00040368 <task1>:

/* Prints "Hello World" and sleeps for three seconds */
void task1(void *pdata)
{
   40368:	defffa04 	addi	sp,sp,-24
   4036c:	dfc00515 	stw	ra,20(sp)
   40370:	df000415 	stw	fp,16(sp)
   40374:	df000404 	addi	fp,sp,16
   40378:	e13fff15 	stw	r4,-4(fp)
    INT8U err;
    OS_STK_DATA taskstkcheckdata;

    // check the task satck check option
    err = OSTaskStkChk(TASK1_PRIORITY, &taskstkcheckdata);
   4037c:	e0bffd04 	addi	r2,fp,-12
   40380:	01000044 	movi	r4,1
   40384:	100b883a 	mov	r5,r2
   40388:	0054bb40 	call	54bb4 <OSTaskStkChk>
   4038c:	e0bffc05 	stb	r2,-16(fp)
    if (err == OS_ERR_NONE)
   40390:	e0bffc03 	ldbu	r2,-16(fp)
   40394:	10000b1e 	bne	r2,zero,403c4 <task1+0x5c>
    {
        printf("Task1 free stack size is %ld\n", taskstkcheckdata.OSFree);
   40398:	e0bffd17 	ldw	r2,-12(fp)
   4039c:	01000174 	movhi	r4,5
   403a0:	211e2404 	addi	r4,r4,30864
   403a4:	100b883a 	mov	r5,r2
   403a8:	004075c0 	call	4075c <printf>
        printf("Task1 used stack size is %ld\n", taskstkcheckdata.OSUsed);
   403ac:	e0bffe17 	ldw	r2,-8(fp)
   403b0:	01000174 	movhi	r4,5
   403b4:	211e2c04 	addi	r4,r4,30896
   403b8:	100b883a 	mov	r5,r2
   403bc:	004075c0 	call	4075c <printf>
   403c0:	00000506 	br	403d8 <task1+0x70>
    }
    else
    {
        printf("error code for task1 stack check is %d\n", err);
   403c4:	e0bffc03 	ldbu	r2,-16(fp)
   403c8:	01000174 	movhi	r4,5
   403cc:	211e3404 	addi	r4,r4,30928
   403d0:	100b883a 	mov	r5,r2
   403d4:	004075c0 	call	4075c <printf>
    }
    while (1)
    {
        printf("Hello from task1\n");
   403d8:	01000174 	movhi	r4,5
   403dc:	211e3e04 	addi	r4,r4,30968
   403e0:	00408500 	call	40850 <puts>
        foursevensegDisplayAnyNumber(time_sec);
   403e4:	d0a71017 	ldw	r2,-25536(gp)
   403e8:	1009883a 	mov	r4,r2
   403ec:	00402c00 	call	402c0 <foursevensegDisplayAnyNumber>
        OSTimeDlyHMSM(0, 0, 1, 0);
   403f0:	0009883a 	mov	r4,zero
   403f4:	000b883a 	mov	r5,zero
   403f8:	01800044 	movi	r6,1
   403fc:	000f883a 	mov	r7,zero
   40400:	00552700 	call	55270 <OSTimeDlyHMSM>
    }
   40404:	003ff406 	br	403d8 <__alt_data_end+0xfffcf698>

00040408 <task2>:
}
/* Prints "Hello World" and sleeps for three seconds */
void task2(void *pdata)
{
   40408:	defffa04 	addi	sp,sp,-24
   4040c:	dfc00515 	stw	ra,20(sp)
   40410:	df000415 	stw	fp,16(sp)
   40414:	df000404 	addi	fp,sp,16
   40418:	e13fff15 	stw	r4,-4(fp)
    INT8U err;
    OS_STK_DATA taskstkcheckdata2;
    err = OSTaskStkChk(TASK2_PRIORITY, &taskstkcheckdata2);
   4041c:	e0bffd04 	addi	r2,fp,-12
   40420:	01000084 	movi	r4,2
   40424:	100b883a 	mov	r5,r2
   40428:	0054bb40 	call	54bb4 <OSTaskStkChk>
   4042c:	e0bffc05 	stb	r2,-16(fp)
    if (err == OS_ERR_NONE)
   40430:	e0bffc03 	ldbu	r2,-16(fp)
   40434:	10000b1e 	bne	r2,zero,40464 <task2+0x5c>
    {
        printf("Task2 free stack size is %ld\n", taskstkcheckdata2.OSFree);
   40438:	e0bffd17 	ldw	r2,-12(fp)
   4043c:	01000174 	movhi	r4,5
   40440:	211e4304 	addi	r4,r4,30988
   40444:	100b883a 	mov	r5,r2
   40448:	004075c0 	call	4075c <printf>
        printf("Task2 used stack size is %ld\n", taskstkcheckdata2.OSUsed);
   4044c:	e0bffe17 	ldw	r2,-8(fp)
   40450:	01000174 	movhi	r4,5
   40454:	211e4b04 	addi	r4,r4,31020
   40458:	100b883a 	mov	r5,r2
   4045c:	004075c0 	call	4075c <printf>
   40460:	00000506 	br	40478 <task2+0x70>
    }
    else
    {
        printf("error code for task2 stack check is %d\n", err);
   40464:	e0bffc03 	ldbu	r2,-16(fp)
   40468:	01000174 	movhi	r4,5
   4046c:	211e5304 	addi	r4,r4,31052
   40470:	100b883a 	mov	r5,r2
   40474:	004075c0 	call	4075c <printf>
    }
    while (1)
    {
        INT8U switchValue = readSwitchValue();
   40478:	00403380 	call	40338 <readSwitchValue>
   4047c:	e0bffc45 	stb	r2,-15(fp)
        switchValue = switchValue << 4 | 0x0f;
   40480:	e0bffc43 	ldbu	r2,-15(fp)
   40484:	1004913a 	slli	r2,r2,4
   40488:	108003d4 	ori	r2,r2,15
   4048c:	e0bffc45 	stb	r2,-15(fp)
        printf("Switch value is %d\n", switchValue);
   40490:	e0bffc43 	ldbu	r2,-15(fp)
   40494:	01000174 	movhi	r4,5
   40498:	211e5d04 	addi	r4,r4,31092
   4049c:	100b883a 	mov	r5,r2
   404a0:	004075c0 	call	4075c <printf>
        OSTimeDlyHMSM(0, 0, 3, 0);
   404a4:	0009883a 	mov	r4,zero
   404a8:	000b883a 	mov	r5,zero
   404ac:	018000c4 	movi	r6,3
   404b0:	000f883a 	mov	r7,zero
   404b4:	00552700 	call	55270 <OSTimeDlyHMSM>
    }
   404b8:	003fef06 	br	40478 <__alt_data_end+0xfffcf738>

000404bc <main>:
}
/* The main function creates two task and starts multi-tasking */
int main(void)
{
   404bc:	defff904 	addi	sp,sp,-28
   404c0:	dfc00615 	stw	ra,24(sp)
   404c4:	df000515 	stw	fp,20(sp)
   404c8:	df000504 	addi	fp,sp,20
    printf("Hello from Nios II!\n");
   404cc:	01000174 	movhi	r4,5
   404d0:	211e6204 	addi	r4,r4,31112
   404d4:	00408500 	call	40850 <puts>
    OSTaskStkInit(task1, NULL, (void *)&task1_stk[TASK_STACKSIZE - 1], 0);
   404d8:	01000134 	movhi	r4,4
   404dc:	2100da04 	addi	r4,r4,872
   404e0:	000b883a 	mov	r5,zero
   404e4:	018001b4 	movhi	r6,6
   404e8:	31b56104 	addi	r6,r6,-10876
   404ec:	000f883a 	mov	r7,zero
   404f0:	004d3240 	call	4d324 <OSTaskStkInit>
    OSTaskCreateExt(task1,
   404f4:	00800044 	movi	r2,1
   404f8:	d8800015 	stw	r2,0(sp)
   404fc:	008001b4 	movhi	r2,6
   40500:	10ad6204 	addi	r2,r2,-19064
   40504:	d8800115 	stw	r2,4(sp)
   40508:	00820004 	movi	r2,2048
   4050c:	d8800215 	stw	r2,8(sp)
   40510:	d8000315 	stw	zero,12(sp)
   40514:	008000c4 	movi	r2,3
   40518:	d8800415 	stw	r2,16(sp)
   4051c:	01000134 	movhi	r4,4
   40520:	2100da04 	addi	r4,r4,872
   40524:	000b883a 	mov	r5,zero
   40528:	018001b4 	movhi	r6,6
   4052c:	31b56104 	addi	r6,r6,-10876
   40530:	01c00044 	movi	r7,1
   40534:	0053f300 	call	53f30 <OSTaskCreateExt>
                    task1_stk,
                    TASK_STACKSIZE,
                    NULL,
                    OS_TASK_OPT_STK_CHK | OS_TASK_OPT_STK_CLR);

    OSTaskStkInit(task2, NULL, (void *)&task2_stk[TASK_STACKSIZE - 1], 0);
   40538:	01000134 	movhi	r4,4
   4053c:	21010204 	addi	r4,r4,1032
   40540:	000b883a 	mov	r5,zero
   40544:	018001b4 	movhi	r6,6
   40548:	31bd6104 	addi	r6,r6,-2684
   4054c:	000f883a 	mov	r7,zero
   40550:	004d3240 	call	4d324 <OSTaskStkInit>
    OSTaskCreateExt(task2,
   40554:	00800084 	movi	r2,2
   40558:	d8800015 	stw	r2,0(sp)
   4055c:	008001b4 	movhi	r2,6
   40560:	10b56204 	addi	r2,r2,-10872
   40564:	d8800115 	stw	r2,4(sp)
   40568:	00820004 	movi	r2,2048
   4056c:	d8800215 	stw	r2,8(sp)
   40570:	d8000315 	stw	zero,12(sp)
   40574:	008000c4 	movi	r2,3
   40578:	d8800415 	stw	r2,16(sp)
   4057c:	01000134 	movhi	r4,4
   40580:	21010204 	addi	r4,r4,1032
   40584:	000b883a 	mov	r5,zero
   40588:	018001b4 	movhi	r6,6
   4058c:	31bd6104 	addi	r6,r6,-2684
   40590:	01c00084 	movi	r7,2
   40594:	0053f300 	call	53f30 <OSTaskCreateExt>
                    task2_stk,
                    TASK_STACKSIZE,
                    NULL,
                    OS_TASK_OPT_STK_CHK | OS_TASK_OPT_STK_CLR);

    OSStart();
   40598:	004e5a00 	call	4e5a0 <OSStart>
    return 0;
   4059c:	0005883a 	mov	r2,zero
}
   405a0:	e037883a 	mov	sp,fp
   405a4:	dfc00117 	ldw	ra,4(sp)
   405a8:	df000017 	ldw	fp,0(sp)
   405ac:	dec00204 	addi	sp,sp,8
   405b0:	f800283a 	ret

000405b4 <OSTimeTickHook>:
void OSTimeTickHook(void)
{
   405b4:	defffe04 	addi	sp,sp,-8
   405b8:	dfc00115 	stw	ra,4(sp)
   405bc:	df000015 	stw	fp,0(sp)
   405c0:	d839883a 	mov	fp,sp
    {
        OSTmrCtr = 0;
        OSTmrSignal();
    }
#endif
    if (compteur % OS_TICKS_PER_SEC == 0)
   405c4:	d0a71117 	ldw	r2,-25532(gp)
   405c8:	1009883a 	mov	r4,r2
   405cc:	0140fa04 	movi	r5,1000
   405d0:	00407280 	call	40728 <__umodsi3>
   405d4:	1000031e 	bne	r2,zero,405e4 <OSTimeTickHook+0x30>
    {
        time_sec++;
   405d8:	d0a71017 	ldw	r2,-25536(gp)
   405dc:	10800044 	addi	r2,r2,1
   405e0:	d0a71015 	stw	r2,-25536(gp)
    }
    compteur++;
   405e4:	d0a71117 	ldw	r2,-25532(gp)
   405e8:	10800044 	addi	r2,r2,1
   405ec:	d0a71115 	stw	r2,-25532(gp)
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
   405f0:	e037883a 	mov	sp,fp
   405f4:	dfc00117 	ldw	ra,4(sp)
   405f8:	df000017 	ldw	fp,0(sp)
   405fc:	dec00204 	addi	sp,sp,8
   40600:	f800283a 	ret

00040604 <udivmodsi4>:
   40604:	2900182e 	bgeu	r5,r4,40668 <udivmodsi4+0x64>
   40608:	28001716 	blt	r5,zero,40668 <udivmodsi4+0x64>
   4060c:	00800804 	movi	r2,32
   40610:	00c00044 	movi	r3,1
   40614:	00000206 	br	40620 <udivmodsi4+0x1c>
   40618:	10001126 	beq	r2,zero,40660 <udivmodsi4+0x5c>
   4061c:	28000516 	blt	r5,zero,40634 <udivmodsi4+0x30>
   40620:	294b883a 	add	r5,r5,r5
   40624:	10bfffc4 	addi	r2,r2,-1
   40628:	18c7883a 	add	r3,r3,r3
   4062c:	293ffa36 	bltu	r5,r4,40618 <__alt_data_end+0xfffcf8d8>
   40630:	18000b26 	beq	r3,zero,40660 <udivmodsi4+0x5c>
   40634:	0005883a 	mov	r2,zero
   40638:	21400236 	bltu	r4,r5,40644 <udivmodsi4+0x40>
   4063c:	2149c83a 	sub	r4,r4,r5
   40640:	10c4b03a 	or	r2,r2,r3
   40644:	1806d07a 	srli	r3,r3,1
   40648:	280ad07a 	srli	r5,r5,1
   4064c:	183ffa1e 	bne	r3,zero,40638 <__alt_data_end+0xfffcf8f8>
   40650:	3000011e 	bne	r6,zero,40658 <udivmodsi4+0x54>
   40654:	f800283a 	ret
   40658:	2005883a 	mov	r2,r4
   4065c:	f800283a 	ret
   40660:	0005883a 	mov	r2,zero
   40664:	003ffa06 	br	40650 <__alt_data_end+0xfffcf910>
   40668:	00c00044 	movi	r3,1
   4066c:	003ff106 	br	40634 <__alt_data_end+0xfffcf8f4>

00040670 <__divsi3>:
   40670:	defffe04 	addi	sp,sp,-8
   40674:	dfc00115 	stw	ra,4(sp)
   40678:	dc000015 	stw	r16,0(sp)
   4067c:	20000b16 	blt	r4,zero,406ac <__divsi3+0x3c>
   40680:	0021883a 	mov	r16,zero
   40684:	28000c16 	blt	r5,zero,406b8 <__divsi3+0x48>
   40688:	000d883a 	mov	r6,zero
   4068c:	00406040 	call	40604 <udivmodsi4>
   40690:	0407c83a 	sub	r3,zero,r16
   40694:	1884f03a 	xor	r2,r3,r2
   40698:	1405883a 	add	r2,r2,r16
   4069c:	dfc00117 	ldw	ra,4(sp)
   406a0:	dc000017 	ldw	r16,0(sp)
   406a4:	dec00204 	addi	sp,sp,8
   406a8:	f800283a 	ret
   406ac:	0109c83a 	sub	r4,zero,r4
   406b0:	04000044 	movi	r16,1
   406b4:	283ff40e 	bge	r5,zero,40688 <__alt_data_end+0xfffcf948>
   406b8:	014bc83a 	sub	r5,zero,r5
   406bc:	8400005c 	xori	r16,r16,1
   406c0:	003ff106 	br	40688 <__alt_data_end+0xfffcf948>

000406c4 <__modsi3>:
   406c4:	defffd04 	addi	sp,sp,-12
   406c8:	dfc00215 	stw	ra,8(sp)
   406cc:	dc400115 	stw	r17,4(sp)
   406d0:	dc000015 	stw	r16,0(sp)
   406d4:	20000c16 	blt	r4,zero,40708 <__modsi3+0x44>
   406d8:	0023883a 	mov	r17,zero
   406dc:	0021883a 	mov	r16,zero
   406e0:	28000d16 	blt	r5,zero,40718 <__modsi3+0x54>
   406e4:	01800044 	movi	r6,1
   406e8:	00406040 	call	40604 <udivmodsi4>
   406ec:	1404f03a 	xor	r2,r2,r16
   406f0:	8885883a 	add	r2,r17,r2
   406f4:	dfc00217 	ldw	ra,8(sp)
   406f8:	dc400117 	ldw	r17,4(sp)
   406fc:	dc000017 	ldw	r16,0(sp)
   40700:	dec00304 	addi	sp,sp,12
   40704:	f800283a 	ret
   40708:	0109c83a 	sub	r4,zero,r4
   4070c:	04400044 	movi	r17,1
   40710:	043fffc4 	movi	r16,-1
   40714:	283ff30e 	bge	r5,zero,406e4 <__alt_data_end+0xfffcf9a4>
   40718:	014bc83a 	sub	r5,zero,r5
   4071c:	003ff106 	br	406e4 <__alt_data_end+0xfffcf9a4>

00040720 <__udivsi3>:
   40720:	000d883a 	mov	r6,zero
   40724:	00406041 	jmpi	40604 <udivmodsi4>

00040728 <__umodsi3>:
   40728:	01800044 	movi	r6,1
   4072c:	00406041 	jmpi	40604 <udivmodsi4>

00040730 <_printf_r>:
   40730:	defffd04 	addi	sp,sp,-12
   40734:	dfc00015 	stw	ra,0(sp)
   40738:	d9800115 	stw	r6,4(sp)
   4073c:	d9c00215 	stw	r7,8(sp)
   40740:	280d883a 	mov	r6,r5
   40744:	21400217 	ldw	r5,8(r4)
   40748:	d9c00104 	addi	r7,sp,4
   4074c:	00408fc0 	call	408fc <___vfprintf_internal_r>
   40750:	dfc00017 	ldw	ra,0(sp)
   40754:	dec00304 	addi	sp,sp,12
   40758:	f800283a 	ret

0004075c <printf>:
   4075c:	defffc04 	addi	sp,sp,-16
   40760:	dfc00015 	stw	ra,0(sp)
   40764:	d9400115 	stw	r5,4(sp)
   40768:	d9800215 	stw	r6,8(sp)
   4076c:	d9c00315 	stw	r7,12(sp)
   40770:	008001b4 	movhi	r2,6
   40774:	10a62104 	addi	r2,r2,-26492
   40778:	10800017 	ldw	r2,0(r2)
   4077c:	200b883a 	mov	r5,r4
   40780:	d9800104 	addi	r6,sp,4
   40784:	11000217 	ldw	r4,8(r2)
   40788:	00428f80 	call	428f8 <__vfprintf_internal>
   4078c:	dfc00017 	ldw	ra,0(sp)
   40790:	dec00404 	addi	sp,sp,16
   40794:	f800283a 	ret

00040798 <_puts_r>:
   40798:	defff604 	addi	sp,sp,-40
   4079c:	dc000715 	stw	r16,28(sp)
   407a0:	2021883a 	mov	r16,r4
   407a4:	2809883a 	mov	r4,r5
   407a8:	dc400815 	stw	r17,32(sp)
   407ac:	dfc00915 	stw	ra,36(sp)
   407b0:	2823883a 	mov	r17,r5
   407b4:	00408640 	call	40864 <strlen>
   407b8:	00c001b4 	movhi	r3,6
   407bc:	18e62104 	addi	r3,r3,-26492
   407c0:	18c00017 	ldw	r3,0(r3)
   407c4:	11000044 	addi	r4,r2,1
   407c8:	d8800115 	stw	r2,4(sp)
   407cc:	18c00217 	ldw	r3,8(r3)
   407d0:	01400174 	movhi	r5,5
   407d4:	295e6704 	addi	r5,r5,31132
   407d8:	1880030b 	ldhu	r2,12(r3)
   407dc:	d9400215 	stw	r5,8(sp)
   407e0:	d9000615 	stw	r4,24(sp)
   407e4:	01400044 	movi	r5,1
   407e8:	01000084 	movi	r4,2
   407ec:	d9000515 	stw	r4,20(sp)
   407f0:	dc400015 	stw	r17,0(sp)
   407f4:	d9400315 	stw	r5,12(sp)
   407f8:	dec00415 	stw	sp,16(sp)
   407fc:	1108000c 	andi	r4,r2,8192
   40800:	2000061e 	bne	r4,zero,4081c <_puts_r+0x84>
   40804:	19401917 	ldw	r5,100(r3)
   40808:	0137ffc4 	movi	r4,-8193
   4080c:	10880014 	ori	r2,r2,8192
   40810:	2908703a 	and	r4,r5,r4
   40814:	1880030d 	sth	r2,12(r3)
   40818:	19001915 	stw	r4,100(r3)
   4081c:	81400217 	ldw	r5,8(r16)
   40820:	8009883a 	mov	r4,r16
   40824:	d9800404 	addi	r6,sp,16
   40828:	0044d800 	call	44d80 <__sfvwrite_r>
   4082c:	1000061e 	bne	r2,zero,40848 <_puts_r+0xb0>
   40830:	00800284 	movi	r2,10
   40834:	dfc00917 	ldw	ra,36(sp)
   40838:	dc400817 	ldw	r17,32(sp)
   4083c:	dc000717 	ldw	r16,28(sp)
   40840:	dec00a04 	addi	sp,sp,40
   40844:	f800283a 	ret
   40848:	00bfffc4 	movi	r2,-1
   4084c:	003ff906 	br	40834 <__alt_data_end+0xfffcfaf4>

00040850 <puts>:
   40850:	008001b4 	movhi	r2,6
   40854:	10a62104 	addi	r2,r2,-26492
   40858:	200b883a 	mov	r5,r4
   4085c:	11000017 	ldw	r4,0(r2)
   40860:	00407981 	jmpi	40798 <_puts_r>

00040864 <strlen>:
   40864:	208000cc 	andi	r2,r4,3
   40868:	10002026 	beq	r2,zero,408ec <strlen+0x88>
   4086c:	20800007 	ldb	r2,0(r4)
   40870:	10002026 	beq	r2,zero,408f4 <strlen+0x90>
   40874:	2005883a 	mov	r2,r4
   40878:	00000206 	br	40884 <strlen+0x20>
   4087c:	10c00007 	ldb	r3,0(r2)
   40880:	18001826 	beq	r3,zero,408e4 <strlen+0x80>
   40884:	10800044 	addi	r2,r2,1
   40888:	10c000cc 	andi	r3,r2,3
   4088c:	183ffb1e 	bne	r3,zero,4087c <__alt_data_end+0xfffcfb3c>
   40890:	10c00017 	ldw	r3,0(r2)
   40894:	01ffbff4 	movhi	r7,65279
   40898:	39ffbfc4 	addi	r7,r7,-257
   4089c:	00ca303a 	nor	r5,zero,r3
   408a0:	01a02074 	movhi	r6,32897
   408a4:	19c7883a 	add	r3,r3,r7
   408a8:	31a02004 	addi	r6,r6,-32640
   408ac:	1946703a 	and	r3,r3,r5
   408b0:	1986703a 	and	r3,r3,r6
   408b4:	1800091e 	bne	r3,zero,408dc <strlen+0x78>
   408b8:	10800104 	addi	r2,r2,4
   408bc:	10c00017 	ldw	r3,0(r2)
   408c0:	19cb883a 	add	r5,r3,r7
   408c4:	00c6303a 	nor	r3,zero,r3
   408c8:	28c6703a 	and	r3,r5,r3
   408cc:	1986703a 	and	r3,r3,r6
   408d0:	183ff926 	beq	r3,zero,408b8 <__alt_data_end+0xfffcfb78>
   408d4:	00000106 	br	408dc <strlen+0x78>
   408d8:	10800044 	addi	r2,r2,1
   408dc:	10c00007 	ldb	r3,0(r2)
   408e0:	183ffd1e 	bne	r3,zero,408d8 <__alt_data_end+0xfffcfb98>
   408e4:	1105c83a 	sub	r2,r2,r4
   408e8:	f800283a 	ret
   408ec:	2005883a 	mov	r2,r4
   408f0:	003fe706 	br	40890 <__alt_data_end+0xfffcfb50>
   408f4:	0005883a 	mov	r2,zero
   408f8:	f800283a 	ret

000408fc <___vfprintf_internal_r>:
   408fc:	defeb604 	addi	sp,sp,-1320
   40900:	dfc14915 	stw	ra,1316(sp)
   40904:	ddc14715 	stw	r23,1308(sp)
   40908:	dd814615 	stw	r22,1304(sp)
   4090c:	282f883a 	mov	r23,r5
   40910:	202d883a 	mov	r22,r4
   40914:	d9812a15 	stw	r6,1192(sp)
   40918:	d9c12d15 	stw	r7,1204(sp)
   4091c:	df014815 	stw	fp,1312(sp)
   40920:	dd414515 	stw	r21,1300(sp)
   40924:	dd014415 	stw	r20,1296(sp)
   40928:	dcc14315 	stw	r19,1292(sp)
   4092c:	dc814215 	stw	r18,1288(sp)
   40930:	dc414115 	stw	r17,1284(sp)
   40934:	dc014015 	stw	r16,1280(sp)
   40938:	00454400 	call	45440 <_localeconv_r>
   4093c:	10800017 	ldw	r2,0(r2)
   40940:	1009883a 	mov	r4,r2
   40944:	d8813515 	stw	r2,1236(sp)
   40948:	00408640 	call	40864 <strlen>
   4094c:	d8813815 	stw	r2,1248(sp)
   40950:	b0000226 	beq	r22,zero,4095c <___vfprintf_internal_r+0x60>
   40954:	b0800e17 	ldw	r2,56(r22)
   40958:	10010426 	beq	r2,zero,40d6c <___vfprintf_internal_r+0x470>
   4095c:	b8c0030b 	ldhu	r3,12(r23)
   40960:	1908000c 	andi	r4,r3,8192
   40964:	1805883a 	mov	r2,r3
   40968:	2000071e 	bne	r4,zero,40988 <___vfprintf_internal_r+0x8c>
   4096c:	b9001917 	ldw	r4,100(r23)
   40970:	18880014 	ori	r2,r3,8192
   40974:	00f7ffc4 	movi	r3,-8193
   40978:	20c8703a 	and	r4,r4,r3
   4097c:	b880030d 	sth	r2,12(r23)
   40980:	1007883a 	mov	r3,r2
   40984:	b9001915 	stw	r4,100(r23)
   40988:	1100020c 	andi	r4,r2,8
   4098c:	2000a726 	beq	r4,zero,40c2c <___vfprintf_internal_r+0x330>
   40990:	b9000417 	ldw	r4,16(r23)
   40994:	2000a526 	beq	r4,zero,40c2c <___vfprintf_internal_r+0x330>
   40998:	1080068c 	andi	r2,r2,26
   4099c:	01000284 	movi	r4,10
   409a0:	1100ab26 	beq	r2,r4,40c50 <___vfprintf_internal_r+0x354>
   409a4:	dac10e04 	addi	r11,sp,1080
   409a8:	db010dc4 	addi	r12,sp,1079
   409ac:	d8800404 	addi	r2,sp,16
   409b0:	05000174 	movhi	r20,5
   409b4:	dac12815 	stw	r11,1184(sp)
   409b8:	5b17c83a 	sub	r11,r11,r12
   409bc:	a51e7884 	addi	r20,r20,31202
   409c0:	db012915 	stw	r12,1188(sp)
   409c4:	d8811e15 	stw	r2,1144(sp)
   409c8:	d8012015 	stw	zero,1152(sp)
   409cc:	d8011f15 	stw	zero,1148(sp)
   409d0:	d8013315 	stw	zero,1228(sp)
   409d4:	d8013715 	stw	zero,1244(sp)
   409d8:	d8013915 	stw	zero,1252(sp)
   409dc:	d8013b15 	stw	zero,1260(sp)
   409e0:	d8013a15 	stw	zero,1256(sp)
   409e4:	d8012f15 	stw	zero,1212(sp)
   409e8:	1011883a 	mov	r8,r2
   409ec:	dac13c15 	stw	r11,1264(sp)
   409f0:	db012a17 	ldw	r12,1192(sp)
   409f4:	60800007 	ldb	r2,0(r12)
   409f8:	1000df26 	beq	r2,zero,40d78 <___vfprintf_internal_r+0x47c>
   409fc:	00c00944 	movi	r3,37
   40a00:	10c0dd26 	beq	r2,r3,40d78 <___vfprintf_internal_r+0x47c>
   40a04:	6021883a 	mov	r16,r12
   40a08:	00000106 	br	40a10 <___vfprintf_internal_r+0x114>
   40a0c:	10c08426 	beq	r2,r3,40c20 <___vfprintf_internal_r+0x324>
   40a10:	84000044 	addi	r16,r16,1
   40a14:	80800007 	ldb	r2,0(r16)
   40a18:	103ffc1e 	bne	r2,zero,40a0c <__alt_data_end+0xfffcfccc>
   40a1c:	dac12a17 	ldw	r11,1192(sp)
   40a20:	82e3c83a 	sub	r17,r16,r11
   40a24:	88000f26 	beq	r17,zero,40a64 <___vfprintf_internal_r+0x168>
   40a28:	d8c12017 	ldw	r3,1152(sp)
   40a2c:	d8811f17 	ldw	r2,1148(sp)
   40a30:	dac12a17 	ldw	r11,1192(sp)
   40a34:	1c47883a 	add	r3,r3,r17
   40a38:	10800044 	addi	r2,r2,1
   40a3c:	d8c12015 	stw	r3,1152(sp)
   40a40:	42c00015 	stw	r11,0(r8)
   40a44:	44400115 	stw	r17,4(r8)
   40a48:	d8811f15 	stw	r2,1148(sp)
   40a4c:	00c001c4 	movi	r3,7
   40a50:	1880b416 	blt	r3,r2,40d24 <___vfprintf_internal_r+0x428>
   40a54:	42000204 	addi	r8,r8,8
   40a58:	db012f17 	ldw	r12,1212(sp)
   40a5c:	6459883a 	add	r12,r12,r17
   40a60:	db012f15 	stw	r12,1212(sp)
   40a64:	80800007 	ldb	r2,0(r16)
   40a68:	1000b526 	beq	r2,zero,40d40 <___vfprintf_internal_r+0x444>
   40a6c:	80800044 	addi	r2,r16,1
   40a70:	84000047 	ldb	r16,1(r16)
   40a74:	d8012785 	stb	zero,1182(sp)
   40a78:	000d883a 	mov	r6,zero
   40a7c:	027fffc4 	movi	r9,-1
   40a80:	d8012e15 	stw	zero,1208(sp)
   40a84:	0023883a 	mov	r17,zero
   40a88:	01001604 	movi	r4,88
   40a8c:	01400244 	movi	r5,9
   40a90:	02800a84 	movi	r10,42
   40a94:	01c01b04 	movi	r7,108
   40a98:	10c00044 	addi	r3,r2,1
   40a9c:	80bff804 	addi	r2,r16,-32
   40aa0:	2082f236 	bltu	r4,r2,4166c <___vfprintf_internal_r+0xd70>
   40aa4:	100490ba 	slli	r2,r2,2
   40aa8:	02c00134 	movhi	r11,4
   40aac:	5ac2af04 	addi	r11,r11,2748
   40ab0:	12c5883a 	add	r2,r2,r11
   40ab4:	10800017 	ldw	r2,0(r2)
   40ab8:	1000683a 	jmp	r2
   40abc:	000414b4 	movhi	zero,4178
   40ac0:	0004166c 	andhi	zero,zero,4185
   40ac4:	0004166c 	andhi	zero,zero,4185
   40ac8:	000414d4 	movui	zero,4179
   40acc:	0004166c 	andhi	zero,zero,4185
   40ad0:	0004166c 	andhi	zero,zero,4185
   40ad4:	0004166c 	andhi	zero,zero,4185
   40ad8:	0004166c 	andhi	zero,zero,4185
   40adc:	0004166c 	andhi	zero,zero,4185
   40ae0:	0004166c 	andhi	zero,zero,4185
   40ae4:	00041630 	cmpltui	zero,zero,4184
   40ae8:	0004165c 	xori	zero,zero,4185
   40aec:	0004166c 	andhi	zero,zero,4185
   40af0:	00040d80 	call	40d8 <OSCtxSw_SWITCH_PC+0x4098>
   40af4:	00040d90 	cmplti	zero,zero,4150
   40af8:	0004166c 	andhi	zero,zero,4185
   40afc:	00040dd0 	cmplti	zero,zero,4151
   40b00:	000412c4 	movi	zero,4171
   40b04:	000412c4 	movi	zero,4171
   40b08:	000412c4 	movi	zero,4171
   40b0c:	000412c4 	movi	zero,4171
   40b10:	000412c4 	movi	zero,4171
   40b14:	000412c4 	movi	zero,4171
   40b18:	000412c4 	movi	zero,4171
   40b1c:	000412c4 	movi	zero,4171
   40b20:	000412c4 	movi	zero,4171
   40b24:	0004166c 	andhi	zero,zero,4185
   40b28:	0004166c 	andhi	zero,zero,4185
   40b2c:	0004166c 	andhi	zero,zero,4185
   40b30:	0004166c 	andhi	zero,zero,4185
   40b34:	0004166c 	andhi	zero,zero,4185
   40b38:	0004166c 	andhi	zero,zero,4185
   40b3c:	0004166c 	andhi	zero,zero,4185
   40b40:	0004166c 	andhi	zero,zero,4185
   40b44:	0004166c 	andhi	zero,zero,4185
   40b48:	0004166c 	andhi	zero,zero,4185
   40b4c:	000412f8 	rdprs	zero,zero,4171
   40b50:	00040de0 	cmpeqi	zero,zero,4151
   40b54:	0004166c 	andhi	zero,zero,4185
   40b58:	00040de0 	cmpeqi	zero,zero,4151
   40b5c:	0004166c 	andhi	zero,zero,4185
   40b60:	0004166c 	andhi	zero,zero,4185
   40b64:	0004166c 	andhi	zero,zero,4185
   40b68:	0004166c 	andhi	zero,zero,4185
   40b6c:	00040e84 	movi	zero,4154
   40b70:	0004166c 	andhi	zero,zero,4185
   40b74:	0004166c 	andhi	zero,zero,4185
   40b78:	00040e94 	movui	zero,4154
   40b7c:	0004166c 	andhi	zero,zero,4185
   40b80:	0004166c 	andhi	zero,zero,4185
   40b84:	0004166c 	andhi	zero,zero,4185
   40b88:	0004166c 	andhi	zero,zero,4185
   40b8c:	0004166c 	andhi	zero,zero,4185
   40b90:	00041290 	cmplti	zero,zero,4170
   40b94:	0004166c 	andhi	zero,zero,4185
   40b98:	0004166c 	andhi	zero,zero,4185
   40b9c:	00041340 	call	4134 <OSCtxSw_SWITCH_PC+0x40f4>
   40ba0:	0004166c 	andhi	zero,zero,4185
   40ba4:	0004166c 	andhi	zero,zero,4185
   40ba8:	0004166c 	andhi	zero,zero,4185
   40bac:	0004166c 	andhi	zero,zero,4185
   40bb0:	0004166c 	andhi	zero,zero,4185
   40bb4:	0004166c 	andhi	zero,zero,4185
   40bb8:	0004166c 	andhi	zero,zero,4185
   40bbc:	0004166c 	andhi	zero,zero,4185
   40bc0:	0004166c 	andhi	zero,zero,4185
   40bc4:	0004166c 	andhi	zero,zero,4185
   40bc8:	00041534 	movhi	zero,4180
   40bcc:	000414e4 	muli	zero,zero,4179
   40bd0:	00040de0 	cmpeqi	zero,zero,4151
   40bd4:	00040de0 	cmpeqi	zero,zero,4151
   40bd8:	00040de0 	cmpeqi	zero,zero,4151
   40bdc:	00041524 	muli	zero,zero,4180
   40be0:	000414e4 	muli	zero,zero,4179
   40be4:	0004166c 	andhi	zero,zero,4185
   40be8:	0004166c 	andhi	zero,zero,4185
   40bec:	0004142c 	andhi	zero,zero,4176
   40bf0:	0004166c 	andhi	zero,zero,4185
   40bf4:	00041440 	call	4144 <OSCtxSw_SWITCH_PC+0x4104>
   40bf8:	00041474 	movhi	zero,4177
   40bfc:	00041574 	movhi	zero,4181
   40c00:	0004139c 	xori	zero,zero,4174
   40c04:	0004166c 	andhi	zero,zero,4185
   40c08:	000415bc 	xorhi	zero,zero,4182
   40c0c:	0004166c 	andhi	zero,zero,4185
   40c10:	000413ac 	andhi	zero,zero,4174
   40c14:	0004166c 	andhi	zero,zero,4185
   40c18:	0004166c 	andhi	zero,zero,4185
   40c1c:	000413ec 	andhi	zero,zero,4175
   40c20:	db012a17 	ldw	r12,1192(sp)
   40c24:	8323c83a 	sub	r17,r16,r12
   40c28:	003f7e06 	br	40a24 <__alt_data_end+0xfffcfce4>
   40c2c:	b009883a 	mov	r4,r22
   40c30:	b80b883a 	mov	r5,r23
   40c34:	004291c0 	call	4291c <__swsetup_r>
   40c38:	10002d1e 	bne	r2,zero,40cf0 <___vfprintf_internal_r+0x3f4>
   40c3c:	b8c0030b 	ldhu	r3,12(r23)
   40c40:	01000284 	movi	r4,10
   40c44:	1805883a 	mov	r2,r3
   40c48:	1080068c 	andi	r2,r2,26
   40c4c:	113f551e 	bne	r2,r4,409a4 <__alt_data_end+0xfffcfc64>
   40c50:	b880038b 	ldhu	r2,14(r23)
   40c54:	113fffcc 	andi	r4,r2,65535
   40c58:	2120001c 	xori	r4,r4,32768
   40c5c:	21200004 	addi	r4,r4,-32768
   40c60:	203f5016 	blt	r4,zero,409a4 <__alt_data_end+0xfffcfc64>
   40c64:	bac01917 	ldw	r11,100(r23)
   40c68:	ba800717 	ldw	r10,28(r23)
   40c6c:	ba400917 	ldw	r9,36(r23)
   40c70:	d9812a17 	ldw	r6,1192(sp)
   40c74:	d9c12d17 	ldw	r7,1204(sp)
   40c78:	02010004 	movi	r8,1024
   40c7c:	18ffff4c 	andi	r3,r3,65533
   40c80:	d881078d 	sth	r2,1054(sp)
   40c84:	b009883a 	mov	r4,r22
   40c88:	d8800404 	addi	r2,sp,16
   40c8c:	d9410404 	addi	r5,sp,1040
   40c90:	d8c1070d 	sth	r3,1052(sp)
   40c94:	dac11d15 	stw	r11,1140(sp)
   40c98:	da810b15 	stw	r10,1068(sp)
   40c9c:	da410d15 	stw	r9,1076(sp)
   40ca0:	d8810415 	stw	r2,1040(sp)
   40ca4:	d8810815 	stw	r2,1056(sp)
   40ca8:	da010615 	stw	r8,1048(sp)
   40cac:	da010915 	stw	r8,1060(sp)
   40cb0:	d8010a15 	stw	zero,1064(sp)
   40cb4:	00408fc0 	call	408fc <___vfprintf_internal_r>
   40cb8:	1021883a 	mov	r16,r2
   40cbc:	10000416 	blt	r2,zero,40cd0 <___vfprintf_internal_r+0x3d4>
   40cc0:	b009883a 	mov	r4,r22
   40cc4:	d9410404 	addi	r5,sp,1040
   40cc8:	00443740 	call	44374 <_fflush_r>
   40ccc:	1006ee1e 	bne	r2,zero,42888 <___vfprintf_internal_r+0x1f8c>
   40cd0:	d881070b 	ldhu	r2,1052(sp)
   40cd4:	1080100c 	andi	r2,r2,64
   40cd8:	10000326 	beq	r2,zero,40ce8 <___vfprintf_internal_r+0x3ec>
   40cdc:	b880030b 	ldhu	r2,12(r23)
   40ce0:	10801014 	ori	r2,r2,64
   40ce4:	b880030d 	sth	r2,12(r23)
   40ce8:	8005883a 	mov	r2,r16
   40cec:	00000106 	br	40cf4 <___vfprintf_internal_r+0x3f8>
   40cf0:	00bfffc4 	movi	r2,-1
   40cf4:	dfc14917 	ldw	ra,1316(sp)
   40cf8:	df014817 	ldw	fp,1312(sp)
   40cfc:	ddc14717 	ldw	r23,1308(sp)
   40d00:	dd814617 	ldw	r22,1304(sp)
   40d04:	dd414517 	ldw	r21,1300(sp)
   40d08:	dd014417 	ldw	r20,1296(sp)
   40d0c:	dcc14317 	ldw	r19,1292(sp)
   40d10:	dc814217 	ldw	r18,1288(sp)
   40d14:	dc414117 	ldw	r17,1284(sp)
   40d18:	dc014017 	ldw	r16,1280(sp)
   40d1c:	dec14a04 	addi	sp,sp,1320
   40d20:	f800283a 	ret
   40d24:	b009883a 	mov	r4,r22
   40d28:	b80b883a 	mov	r5,r23
   40d2c:	d9811e04 	addi	r6,sp,1144
   40d30:	0047b440 	call	47b44 <__sprint_r>
   40d34:	1000081e 	bne	r2,zero,40d58 <___vfprintf_internal_r+0x45c>
   40d38:	da000404 	addi	r8,sp,16
   40d3c:	003f4606 	br	40a58 <__alt_data_end+0xfffcfd18>
   40d40:	d8812017 	ldw	r2,1152(sp)
   40d44:	10000426 	beq	r2,zero,40d58 <___vfprintf_internal_r+0x45c>
   40d48:	b009883a 	mov	r4,r22
   40d4c:	b80b883a 	mov	r5,r23
   40d50:	d9811e04 	addi	r6,sp,1144
   40d54:	0047b440 	call	47b44 <__sprint_r>
   40d58:	b880030b 	ldhu	r2,12(r23)
   40d5c:	1080100c 	andi	r2,r2,64
   40d60:	103fe31e 	bne	r2,zero,40cf0 <__alt_data_end+0xfffcffb0>
   40d64:	d8812f17 	ldw	r2,1212(sp)
   40d68:	003fe206 	br	40cf4 <__alt_data_end+0xfffcffb4>
   40d6c:	b009883a 	mov	r4,r22
   40d70:	004491c0 	call	4491c <__sinit>
   40d74:	003ef906 	br	4095c <__alt_data_end+0xfffcfc1c>
   40d78:	dc012a17 	ldw	r16,1192(sp)
   40d7c:	003f3906 	br	40a64 <__alt_data_end+0xfffcfd24>
   40d80:	1805883a 	mov	r2,r3
   40d84:	8c400114 	ori	r17,r17,4
   40d88:	1c000007 	ldb	r16,0(r3)
   40d8c:	003f4206 	br	40a98 <__alt_data_end+0xfffcfd58>
   40d90:	1c000007 	ldb	r16,0(r3)
   40d94:	18800044 	addi	r2,r3,1
   40d98:	8286b326 	beq	r16,r10,42868 <___vfprintf_internal_r+0x1f6c>
   40d9c:	82fff404 	addi	r11,r16,-48
   40da0:	1007883a 	mov	r3,r2
   40da4:	0013883a 	mov	r9,zero
   40da8:	2aff3c36 	bltu	r5,r11,40a9c <__alt_data_end+0xfffcfd5c>
   40dac:	1c000007 	ldb	r16,0(r3)
   40db0:	4a4002a4 	muli	r9,r9,10
   40db4:	18c00044 	addi	r3,r3,1
   40db8:	5a53883a 	add	r9,r11,r9
   40dbc:	82fff404 	addi	r11,r16,-48
   40dc0:	2afffa2e 	bgeu	r5,r11,40dac <__alt_data_end+0xfffd006c>
   40dc4:	483f350e 	bge	r9,zero,40a9c <__alt_data_end+0xfffcfd5c>
   40dc8:	027fffc4 	movi	r9,-1
   40dcc:	003f3306 	br	40a9c <__alt_data_end+0xfffcfd5c>
   40dd0:	8c402014 	ori	r17,r17,128
   40dd4:	1805883a 	mov	r2,r3
   40dd8:	1c000007 	ldb	r16,0(r3)
   40ddc:	003f2e06 	br	40a98 <__alt_data_end+0xfffcfd58>
   40de0:	db012d17 	ldw	r12,1204(sp)
   40de4:	dac12d17 	ldw	r11,1204(sp)
   40de8:	d8c12a15 	stw	r3,1192(sp)
   40dec:	63000017 	ldw	r12,0(r12)
   40df0:	5ac00117 	ldw	r11,4(r11)
   40df4:	d9812785 	stb	r6,1182(sp)
   40df8:	6009883a 	mov	r4,r12
   40dfc:	580b883a 	mov	r5,r11
   40e00:	db013715 	stw	r12,1244(sp)
   40e04:	da013f15 	stw	r8,1276(sp)
   40e08:	da413e15 	stw	r9,1272(sp)
   40e0c:	dac13915 	stw	r11,1252(sp)
   40e10:	00477a00 	call	477a0 <__fpclassifyd>
   40e14:	db012d17 	ldw	r12,1204(sp)
   40e18:	04800044 	movi	r18,1
   40e1c:	da013f17 	ldw	r8,1276(sp)
   40e20:	64c00204 	addi	r19,r12,8
   40e24:	da413e17 	ldw	r9,1272(sp)
   40e28:	d9013717 	ldw	r4,1244(sp)
   40e2c:	d9413917 	ldw	r5,1252(sp)
   40e30:	1484581e 	bne	r2,r18,41f94 <___vfprintf_internal_r+0x1698>
   40e34:	000d883a 	mov	r6,zero
   40e38:	000f883a 	mov	r7,zero
   40e3c:	004b6300 	call	4b630 <__ledf2>
   40e40:	da013f17 	ldw	r8,1276(sp)
   40e44:	1005ef16 	blt	r2,zero,42604 <___vfprintf_internal_r+0x1d08>
   40e48:	dd412783 	ldbu	r21,1182(sp)
   40e4c:	008011c4 	movi	r2,71
   40e50:	14053b0e 	bge	r2,r16,42340 <___vfprintf_internal_r+0x1a44>
   40e54:	00c00174 	movhi	r3,5
   40e58:	18de6904 	addi	r3,r3,31140
   40e5c:	d8c13115 	stw	r3,1220(sp)
   40e60:	02c000c4 	movi	r11,3
   40e64:	00bfdfc4 	movi	r2,-129
   40e68:	dac12b15 	stw	r11,1196(sp)
   40e6c:	88a2703a 	and	r17,r17,r2
   40e70:	dcc12d15 	stw	r19,1204(sp)
   40e74:	5825883a 	mov	r18,r11
   40e78:	d8013215 	stw	zero,1224(sp)
   40e7c:	d8013415 	stw	zero,1232(sp)
   40e80:	00003206 	br	40f4c <___vfprintf_internal_r+0x650>
   40e84:	8c400214 	ori	r17,r17,8
   40e88:	1805883a 	mov	r2,r3
   40e8c:	1c000007 	ldb	r16,0(r3)
   40e90:	003f0106 	br	40a98 <__alt_data_end+0xfffcfd58>
   40e94:	8c400414 	ori	r17,r17,16
   40e98:	d8c12a15 	stw	r3,1192(sp)
   40e9c:	88c0080c 	andi	r3,r17,32
   40ea0:	d8812d17 	ldw	r2,1204(sp)
   40ea4:	18017726 	beq	r3,zero,41484 <___vfprintf_internal_r+0xb88>
   40ea8:	db012d17 	ldw	r12,1204(sp)
   40eac:	14c00017 	ldw	r19,0(r2)
   40eb0:	17000117 	ldw	fp,4(r2)
   40eb4:	63000204 	addi	r12,r12,8
   40eb8:	db012d15 	stw	r12,1204(sp)
   40ebc:	0005883a 	mov	r2,zero
   40ec0:	9f06b03a 	or	r3,r19,fp
   40ec4:	d8012785 	stb	zero,1182(sp)
   40ec8:	da413215 	stw	r9,1224(sp)
   40ecc:	002b883a 	mov	r21,zero
   40ed0:	48000216 	blt	r9,zero,40edc <___vfprintf_internal_r+0x5e0>
   40ed4:	013fdfc4 	movi	r4,-129
   40ed8:	8922703a 	and	r17,r17,r4
   40edc:	1801ed1e 	bne	r3,zero,41694 <___vfprintf_internal_r+0xd98>
   40ee0:	4802e026 	beq	r9,zero,41a64 <___vfprintf_internal_r+0x1168>
   40ee4:	10803fcc 	andi	r2,r2,255
   40ee8:	00c00044 	movi	r3,1
   40eec:	10c20f26 	beq	r2,r3,4172c <___vfprintf_internal_r+0xe30>
   40ef0:	00c00084 	movi	r3,2
   40ef4:	10c2fd26 	beq	r2,r3,41aec <___vfprintf_internal_r+0x11f0>
   40ef8:	d8c10e04 	addi	r3,sp,1080
   40efc:	9808d0fa 	srli	r4,r19,3
   40f00:	e00a977a 	slli	r5,fp,29
   40f04:	e038d0fa 	srli	fp,fp,3
   40f08:	9cc001cc 	andi	r19,r19,7
   40f0c:	98800c04 	addi	r2,r19,48
   40f10:	18ffffc4 	addi	r3,r3,-1
   40f14:	2926b03a 	or	r19,r5,r4
   40f18:	18800005 	stb	r2,0(r3)
   40f1c:	9f08b03a 	or	r4,r19,fp
   40f20:	203ff61e 	bne	r4,zero,40efc <__alt_data_end+0xfffd01bc>
   40f24:	8900004c 	andi	r4,r17,1
   40f28:	d8c13115 	stw	r3,1220(sp)
   40f2c:	2003791e 	bne	r4,zero,41d14 <___vfprintf_internal_r+0x1418>
   40f30:	dac12817 	ldw	r11,1184(sp)
   40f34:	58e5c83a 	sub	r18,r11,r3
   40f38:	9005883a 	mov	r2,r18
   40f3c:	9240010e 	bge	r18,r9,40f44 <___vfprintf_internal_r+0x648>
   40f40:	4805883a 	mov	r2,r9
   40f44:	d8812b15 	stw	r2,1196(sp)
   40f48:	d8013415 	stw	zero,1232(sp)
   40f4c:	a8803fcc 	andi	r2,r21,255
   40f50:	1080201c 	xori	r2,r2,128
   40f54:	10bfe004 	addi	r2,r2,-128
   40f58:	10000326 	beq	r2,zero,40f68 <___vfprintf_internal_r+0x66c>
   40f5c:	db012b17 	ldw	r12,1196(sp)
   40f60:	63000044 	addi	r12,r12,1
   40f64:	db012b15 	stw	r12,1196(sp)
   40f68:	88c0008c 	andi	r3,r17,2
   40f6c:	d8c12c15 	stw	r3,1200(sp)
   40f70:	18000326 	beq	r3,zero,40f80 <___vfprintf_internal_r+0x684>
   40f74:	dac12b17 	ldw	r11,1196(sp)
   40f78:	5ac00084 	addi	r11,r11,2
   40f7c:	dac12b15 	stw	r11,1196(sp)
   40f80:	8b00210c 	andi	r12,r17,132
   40f84:	db013015 	stw	r12,1216(sp)
   40f88:	6001c01e 	bne	r12,zero,4168c <___vfprintf_internal_r+0xd90>
   40f8c:	dac12e17 	ldw	r11,1208(sp)
   40f90:	db012b17 	ldw	r12,1196(sp)
   40f94:	5b39c83a 	sub	fp,r11,r12
   40f98:	0701bc0e 	bge	zero,fp,4168c <___vfprintf_internal_r+0xd90>
   40f9c:	02400404 	movi	r9,16
   40fa0:	d8c12017 	ldw	r3,1152(sp)
   40fa4:	d8811f17 	ldw	r2,1148(sp)
   40fa8:	4f05220e 	bge	r9,fp,42434 <___vfprintf_internal_r+0x1b38>
   40fac:	01400174 	movhi	r5,5
   40fb0:	295e7c84 	addi	r5,r5,31218
   40fb4:	d9413615 	stw	r5,1240(sp)
   40fb8:	482b883a 	mov	r21,r9
   40fbc:	04c001c4 	movi	r19,7
   40fc0:	00000306 	br	40fd0 <___vfprintf_internal_r+0x6d4>
   40fc4:	e73ffc04 	addi	fp,fp,-16
   40fc8:	42000204 	addi	r8,r8,8
   40fcc:	af00130e 	bge	r21,fp,4101c <___vfprintf_internal_r+0x720>
   40fd0:	02c00174 	movhi	r11,5
   40fd4:	18c00404 	addi	r3,r3,16
   40fd8:	10800044 	addi	r2,r2,1
   40fdc:	5ade7c84 	addi	r11,r11,31218
   40fe0:	42c00015 	stw	r11,0(r8)
   40fe4:	45400115 	stw	r21,4(r8)
   40fe8:	d8c12015 	stw	r3,1152(sp)
   40fec:	d8811f15 	stw	r2,1148(sp)
   40ff0:	98bff40e 	bge	r19,r2,40fc4 <__alt_data_end+0xfffd0284>
   40ff4:	b009883a 	mov	r4,r22
   40ff8:	b80b883a 	mov	r5,r23
   40ffc:	d9811e04 	addi	r6,sp,1144
   41000:	0047b440 	call	47b44 <__sprint_r>
   41004:	103f541e 	bne	r2,zero,40d58 <__alt_data_end+0xfffd0018>
   41008:	e73ffc04 	addi	fp,fp,-16
   4100c:	d8c12017 	ldw	r3,1152(sp)
   41010:	d8811f17 	ldw	r2,1148(sp)
   41014:	da000404 	addi	r8,sp,16
   41018:	af3fed16 	blt	r21,fp,40fd0 <__alt_data_end+0xfffd0290>
   4101c:	db013617 	ldw	r12,1240(sp)
   41020:	e0c7883a 	add	r3,fp,r3
   41024:	10800044 	addi	r2,r2,1
   41028:	43000015 	stw	r12,0(r8)
   4102c:	47000115 	stw	fp,4(r8)
   41030:	d8c12015 	stw	r3,1152(sp)
   41034:	d8811f15 	stw	r2,1148(sp)
   41038:	010001c4 	movi	r4,7
   4103c:	2082f416 	blt	r4,r2,41c10 <___vfprintf_internal_r+0x1314>
   41040:	d8812787 	ldb	r2,1182(sp)
   41044:	42000204 	addi	r8,r8,8
   41048:	10000c26 	beq	r2,zero,4107c <___vfprintf_internal_r+0x780>
   4104c:	d8811f17 	ldw	r2,1148(sp)
   41050:	d9012784 	addi	r4,sp,1182
   41054:	18c00044 	addi	r3,r3,1
   41058:	10800044 	addi	r2,r2,1
   4105c:	41000015 	stw	r4,0(r8)
   41060:	01000044 	movi	r4,1
   41064:	41000115 	stw	r4,4(r8)
   41068:	d8c12015 	stw	r3,1152(sp)
   4106c:	d8811f15 	stw	r2,1148(sp)
   41070:	010001c4 	movi	r4,7
   41074:	20828d16 	blt	r4,r2,41aac <___vfprintf_internal_r+0x11b0>
   41078:	42000204 	addi	r8,r8,8
   4107c:	dac12c17 	ldw	r11,1200(sp)
   41080:	58000c26 	beq	r11,zero,410b4 <___vfprintf_internal_r+0x7b8>
   41084:	d8811f17 	ldw	r2,1148(sp)
   41088:	d9012704 	addi	r4,sp,1180
   4108c:	18c00084 	addi	r3,r3,2
   41090:	10800044 	addi	r2,r2,1
   41094:	41000015 	stw	r4,0(r8)
   41098:	01000084 	movi	r4,2
   4109c:	41000115 	stw	r4,4(r8)
   410a0:	d8c12015 	stw	r3,1152(sp)
   410a4:	d8811f15 	stw	r2,1148(sp)
   410a8:	010001c4 	movi	r4,7
   410ac:	20828716 	blt	r4,r2,41acc <___vfprintf_internal_r+0x11d0>
   410b0:	42000204 	addi	r8,r8,8
   410b4:	db013017 	ldw	r12,1216(sp)
   410b8:	00802004 	movi	r2,128
   410bc:	6081e926 	beq	r12,r2,41864 <___vfprintf_internal_r+0xf68>
   410c0:	db013217 	ldw	r12,1224(sp)
   410c4:	64abc83a 	sub	r21,r12,r18
   410c8:	0540260e 	bge	zero,r21,41164 <___vfprintf_internal_r+0x868>
   410cc:	07000404 	movi	fp,16
   410d0:	d8811f17 	ldw	r2,1148(sp)
   410d4:	e5443d0e 	bge	fp,r21,421cc <___vfprintf_internal_r+0x18d0>
   410d8:	01400174 	movhi	r5,5
   410dc:	295e7884 	addi	r5,r5,31202
   410e0:	d9412c15 	stw	r5,1200(sp)
   410e4:	04c001c4 	movi	r19,7
   410e8:	00000306 	br	410f8 <___vfprintf_internal_r+0x7fc>
   410ec:	ad7ffc04 	addi	r21,r21,-16
   410f0:	42000204 	addi	r8,r8,8
   410f4:	e540110e 	bge	fp,r21,4113c <___vfprintf_internal_r+0x840>
   410f8:	18c00404 	addi	r3,r3,16
   410fc:	10800044 	addi	r2,r2,1
   41100:	45000015 	stw	r20,0(r8)
   41104:	47000115 	stw	fp,4(r8)
   41108:	d8c12015 	stw	r3,1152(sp)
   4110c:	d8811f15 	stw	r2,1148(sp)
   41110:	98bff60e 	bge	r19,r2,410ec <__alt_data_end+0xfffd03ac>
   41114:	b009883a 	mov	r4,r22
   41118:	b80b883a 	mov	r5,r23
   4111c:	d9811e04 	addi	r6,sp,1144
   41120:	0047b440 	call	47b44 <__sprint_r>
   41124:	103f0c1e 	bne	r2,zero,40d58 <__alt_data_end+0xfffd0018>
   41128:	ad7ffc04 	addi	r21,r21,-16
   4112c:	d8c12017 	ldw	r3,1152(sp)
   41130:	d8811f17 	ldw	r2,1148(sp)
   41134:	da000404 	addi	r8,sp,16
   41138:	e57fef16 	blt	fp,r21,410f8 <__alt_data_end+0xfffd03b8>
   4113c:	dac12c17 	ldw	r11,1200(sp)
   41140:	1d47883a 	add	r3,r3,r21
   41144:	10800044 	addi	r2,r2,1
   41148:	42c00015 	stw	r11,0(r8)
   4114c:	45400115 	stw	r21,4(r8)
   41150:	d8c12015 	stw	r3,1152(sp)
   41154:	d8811f15 	stw	r2,1148(sp)
   41158:	010001c4 	movi	r4,7
   4115c:	20824b16 	blt	r4,r2,41a8c <___vfprintf_internal_r+0x1190>
   41160:	42000204 	addi	r8,r8,8
   41164:	8880400c 	andi	r2,r17,256
   41168:	1001761e 	bne	r2,zero,41744 <___vfprintf_internal_r+0xe48>
   4116c:	d8811f17 	ldw	r2,1148(sp)
   41170:	db013117 	ldw	r12,1220(sp)
   41174:	1c87883a 	add	r3,r3,r18
   41178:	10800044 	addi	r2,r2,1
   4117c:	43000015 	stw	r12,0(r8)
   41180:	44800115 	stw	r18,4(r8)
   41184:	d8c12015 	stw	r3,1152(sp)
   41188:	d8811f15 	stw	r2,1148(sp)
   4118c:	010001c4 	movi	r4,7
   41190:	20822616 	blt	r4,r2,41a2c <___vfprintf_internal_r+0x1130>
   41194:	42000204 	addi	r8,r8,8
   41198:	8c40010c 	andi	r17,r17,4
   4119c:	88003126 	beq	r17,zero,41264 <___vfprintf_internal_r+0x968>
   411a0:	db012e17 	ldw	r12,1208(sp)
   411a4:	dac12b17 	ldw	r11,1196(sp)
   411a8:	62e1c83a 	sub	r16,r12,r11
   411ac:	04002d0e 	bge	zero,r16,41264 <___vfprintf_internal_r+0x968>
   411b0:	04400404 	movi	r17,16
   411b4:	d8811f17 	ldw	r2,1148(sp)
   411b8:	8c04df0e 	bge	r17,r16,42538 <___vfprintf_internal_r+0x1c3c>
   411bc:	01000174 	movhi	r4,5
   411c0:	211e7c84 	addi	r4,r4,31218
   411c4:	d9013615 	stw	r4,1240(sp)
   411c8:	048001c4 	movi	r18,7
   411cc:	00000306 	br	411dc <___vfprintf_internal_r+0x8e0>
   411d0:	843ffc04 	addi	r16,r16,-16
   411d4:	42000204 	addi	r8,r8,8
   411d8:	8c00130e 	bge	r17,r16,41228 <___vfprintf_internal_r+0x92c>
   411dc:	01400174 	movhi	r5,5
   411e0:	18c00404 	addi	r3,r3,16
   411e4:	10800044 	addi	r2,r2,1
   411e8:	295e7c84 	addi	r5,r5,31218
   411ec:	41400015 	stw	r5,0(r8)
   411f0:	44400115 	stw	r17,4(r8)
   411f4:	d8c12015 	stw	r3,1152(sp)
   411f8:	d8811f15 	stw	r2,1148(sp)
   411fc:	90bff40e 	bge	r18,r2,411d0 <__alt_data_end+0xfffd0490>
   41200:	b009883a 	mov	r4,r22
   41204:	b80b883a 	mov	r5,r23
   41208:	d9811e04 	addi	r6,sp,1144
   4120c:	0047b440 	call	47b44 <__sprint_r>
   41210:	103ed11e 	bne	r2,zero,40d58 <__alt_data_end+0xfffd0018>
   41214:	843ffc04 	addi	r16,r16,-16
   41218:	d8c12017 	ldw	r3,1152(sp)
   4121c:	d8811f17 	ldw	r2,1148(sp)
   41220:	da000404 	addi	r8,sp,16
   41224:	8c3fed16 	blt	r17,r16,411dc <__alt_data_end+0xfffd049c>
   41228:	dac13617 	ldw	r11,1240(sp)
   4122c:	1c07883a 	add	r3,r3,r16
   41230:	10800044 	addi	r2,r2,1
   41234:	42c00015 	stw	r11,0(r8)
   41238:	44000115 	stw	r16,4(r8)
   4123c:	d8c12015 	stw	r3,1152(sp)
   41240:	d8811f15 	stw	r2,1148(sp)
   41244:	010001c4 	movi	r4,7
   41248:	2080060e 	bge	r4,r2,41264 <___vfprintf_internal_r+0x968>
   4124c:	b009883a 	mov	r4,r22
   41250:	b80b883a 	mov	r5,r23
   41254:	d9811e04 	addi	r6,sp,1144
   41258:	0047b440 	call	47b44 <__sprint_r>
   4125c:	103ebe1e 	bne	r2,zero,40d58 <__alt_data_end+0xfffd0018>
   41260:	d8c12017 	ldw	r3,1152(sp)
   41264:	d8812b17 	ldw	r2,1196(sp)
   41268:	db012e17 	ldw	r12,1208(sp)
   4126c:	1300010e 	bge	r2,r12,41274 <___vfprintf_internal_r+0x978>
   41270:	6005883a 	mov	r2,r12
   41274:	dac12f17 	ldw	r11,1212(sp)
   41278:	5897883a 	add	r11,r11,r2
   4127c:	dac12f15 	stw	r11,1212(sp)
   41280:	1801f21e 	bne	r3,zero,41a4c <___vfprintf_internal_r+0x1150>
   41284:	d8011f15 	stw	zero,1148(sp)
   41288:	da000404 	addi	r8,sp,16
   4128c:	003dd806 	br	409f0 <__alt_data_end+0xfffcfcb0>
   41290:	8c400414 	ori	r17,r17,16
   41294:	d8c12a15 	stw	r3,1192(sp)
   41298:	88c0080c 	andi	r3,r17,32
   4129c:	d8812d17 	ldw	r2,1204(sp)
   412a0:	18004626 	beq	r3,zero,413bc <___vfprintf_internal_r+0xac0>
   412a4:	dac12d17 	ldw	r11,1204(sp)
   412a8:	14c00017 	ldw	r19,0(r2)
   412ac:	17000117 	ldw	fp,4(r2)
   412b0:	5ac00204 	addi	r11,r11,8
   412b4:	dac12d15 	stw	r11,1204(sp)
   412b8:	00800044 	movi	r2,1
   412bc:	9f06b03a 	or	r3,r19,fp
   412c0:	003f0006 	br	40ec4 <__alt_data_end+0xfffd0184>
   412c4:	1805883a 	mov	r2,r3
   412c8:	d8012e15 	stw	zero,1208(sp)
   412cc:	82fff404 	addi	r11,r16,-48
   412d0:	0019883a 	mov	r12,zero
   412d4:	14000007 	ldb	r16,0(r2)
   412d8:	630002a4 	muli	r12,r12,10
   412dc:	18c00044 	addi	r3,r3,1
   412e0:	1805883a 	mov	r2,r3
   412e4:	62d9883a 	add	r12,r12,r11
   412e8:	82fff404 	addi	r11,r16,-48
   412ec:	2afff92e 	bgeu	r5,r11,412d4 <__alt_data_end+0xfffd0594>
   412f0:	db012e15 	stw	r12,1208(sp)
   412f4:	003de906 	br	40a9c <__alt_data_end+0xfffcfd5c>
   412f8:	8c400414 	ori	r17,r17,16
   412fc:	d8c12a15 	stw	r3,1192(sp)
   41300:	d9812785 	stb	r6,1182(sp)
   41304:	8880080c 	andi	r2,r17,32
   41308:	d8c12d17 	ldw	r3,1204(sp)
   4130c:	10007a26 	beq	r2,zero,414f8 <___vfprintf_internal_r+0xbfc>
   41310:	db012d17 	ldw	r12,1204(sp)
   41314:	18800117 	ldw	r2,4(r3)
   41318:	1cc00017 	ldw	r19,0(r3)
   4131c:	63000204 	addi	r12,r12,8
   41320:	db012d15 	stw	r12,1204(sp)
   41324:	1039883a 	mov	fp,r2
   41328:	10031016 	blt	r2,zero,41f6c <___vfprintf_internal_r+0x1670>
   4132c:	dd412783 	ldbu	r21,1182(sp)
   41330:	da413215 	stw	r9,1224(sp)
   41334:	00800044 	movi	r2,1
   41338:	9f06b03a 	or	r3,r19,fp
   4133c:	003ee406 	br	40ed0 <__alt_data_end+0xfffd0190>
   41340:	03000174 	movhi	r12,5
   41344:	631e6c04 	addi	r12,r12,31152
   41348:	d8c12a15 	stw	r3,1192(sp)
   4134c:	d9812785 	stb	r6,1182(sp)
   41350:	db013b15 	stw	r12,1260(sp)
   41354:	88c0080c 	andi	r3,r17,32
   41358:	d8812d17 	ldw	r2,1204(sp)
   4135c:	18002b26 	beq	r3,zero,4140c <___vfprintf_internal_r+0xb10>
   41360:	dac12d17 	ldw	r11,1204(sp)
   41364:	14c00017 	ldw	r19,0(r2)
   41368:	17000117 	ldw	fp,4(r2)
   4136c:	5ac00204 	addi	r11,r11,8
   41370:	dac12d15 	stw	r11,1204(sp)
   41374:	8880004c 	andi	r2,r17,1
   41378:	10025b26 	beq	r2,zero,41ce8 <___vfprintf_internal_r+0x13ec>
   4137c:	9f06b03a 	or	r3,r19,fp
   41380:	18037026 	beq	r3,zero,42144 <___vfprintf_internal_r+0x1848>
   41384:	00800c04 	movi	r2,48
   41388:	d8812705 	stb	r2,1180(sp)
   4138c:	dc012745 	stb	r16,1181(sp)
   41390:	8c400094 	ori	r17,r17,2
   41394:	00800084 	movi	r2,2
   41398:	003eca06 	br	40ec4 <__alt_data_end+0xfffd0184>
   4139c:	8c400814 	ori	r17,r17,32
   413a0:	1805883a 	mov	r2,r3
   413a4:	1c000007 	ldb	r16,0(r3)
   413a8:	003dbb06 	br	40a98 <__alt_data_end+0xfffcfd58>
   413ac:	d8c12a15 	stw	r3,1192(sp)
   413b0:	88c0080c 	andi	r3,r17,32
   413b4:	d8812d17 	ldw	r2,1204(sp)
   413b8:	183fba1e 	bne	r3,zero,412a4 <__alt_data_end+0xfffd0564>
   413bc:	88c0040c 	andi	r3,r17,16
   413c0:	18024c1e 	bne	r3,zero,41cf4 <___vfprintf_internal_r+0x13f8>
   413c4:	88c0100c 	andi	r3,r17,64
   413c8:	18024a26 	beq	r3,zero,41cf4 <___vfprintf_internal_r+0x13f8>
   413cc:	dac12d17 	ldw	r11,1204(sp)
   413d0:	14c0000b 	ldhu	r19,0(r2)
   413d4:	0039883a 	mov	fp,zero
   413d8:	5ac00104 	addi	r11,r11,4
   413dc:	dac12d15 	stw	r11,1204(sp)
   413e0:	00800044 	movi	r2,1
   413e4:	9807883a 	mov	r3,r19
   413e8:	003eb606 	br	40ec4 <__alt_data_end+0xfffd0184>
   413ec:	00800174 	movhi	r2,5
   413f0:	109e7104 	addi	r2,r2,31172
   413f4:	d8c12a15 	stw	r3,1192(sp)
   413f8:	d8813b15 	stw	r2,1260(sp)
   413fc:	d9812785 	stb	r6,1182(sp)
   41400:	88c0080c 	andi	r3,r17,32
   41404:	d8812d17 	ldw	r2,1204(sp)
   41408:	183fd51e 	bne	r3,zero,41360 <__alt_data_end+0xfffd0620>
   4140c:	88c0040c 	andi	r3,r17,16
   41410:	18034126 	beq	r3,zero,42118 <___vfprintf_internal_r+0x181c>
   41414:	db012d17 	ldw	r12,1204(sp)
   41418:	14c00017 	ldw	r19,0(r2)
   4141c:	0039883a 	mov	fp,zero
   41420:	63000104 	addi	r12,r12,4
   41424:	db012d15 	stw	r12,1204(sp)
   41428:	003fd206 	br	41374 <__alt_data_end+0xfffd0634>
   4142c:	1c000007 	ldb	r16,0(r3)
   41430:	81c3d626 	beq	r16,r7,4238c <___vfprintf_internal_r+0x1a90>
   41434:	8c400414 	ori	r17,r17,16
   41438:	1805883a 	mov	r2,r3
   4143c:	003d9606 	br	40a98 <__alt_data_end+0xfffcfd58>
   41440:	d8c12a15 	stw	r3,1192(sp)
   41444:	d9812785 	stb	r6,1182(sp)
   41448:	8880080c 	andi	r2,r17,32
   4144c:	10033f26 	beq	r2,zero,4214c <___vfprintf_internal_r+0x1850>
   41450:	db012d17 	ldw	r12,1204(sp)
   41454:	dac12f17 	ldw	r11,1212(sp)
   41458:	60800017 	ldw	r2,0(r12)
   4145c:	5807d7fa 	srai	r3,r11,31
   41460:	63000104 	addi	r12,r12,4
   41464:	db012d15 	stw	r12,1204(sp)
   41468:	12c00015 	stw	r11,0(r2)
   4146c:	10c00115 	stw	r3,4(r2)
   41470:	003d5f06 	br	409f0 <__alt_data_end+0xfffcfcb0>
   41474:	d8c12a15 	stw	r3,1192(sp)
   41478:	88c0080c 	andi	r3,r17,32
   4147c:	d8812d17 	ldw	r2,1204(sp)
   41480:	183e891e 	bne	r3,zero,40ea8 <__alt_data_end+0xfffd0168>
   41484:	88c0040c 	andi	r3,r17,16
   41488:	1801ea1e 	bne	r3,zero,41c34 <___vfprintf_internal_r+0x1338>
   4148c:	88c0100c 	andi	r3,r17,64
   41490:	1801e826 	beq	r3,zero,41c34 <___vfprintf_internal_r+0x1338>
   41494:	db012d17 	ldw	r12,1204(sp)
   41498:	14c0000b 	ldhu	r19,0(r2)
   4149c:	0039883a 	mov	fp,zero
   414a0:	63000104 	addi	r12,r12,4
   414a4:	db012d15 	stw	r12,1204(sp)
   414a8:	0005883a 	mov	r2,zero
   414ac:	9807883a 	mov	r3,r19
   414b0:	003e8406 	br	40ec4 <__alt_data_end+0xfffd0184>
   414b4:	30803fcc 	andi	r2,r6,255
   414b8:	1080201c 	xori	r2,r2,128
   414bc:	10bfe004 	addi	r2,r2,-128
   414c0:	10031d1e 	bne	r2,zero,42138 <___vfprintf_internal_r+0x183c>
   414c4:	1805883a 	mov	r2,r3
   414c8:	01800804 	movi	r6,32
   414cc:	1c000007 	ldb	r16,0(r3)
   414d0:	003d7106 	br	40a98 <__alt_data_end+0xfffcfd58>
   414d4:	8c400054 	ori	r17,r17,1
   414d8:	1805883a 	mov	r2,r3
   414dc:	1c000007 	ldb	r16,0(r3)
   414e0:	003d6d06 	br	40a98 <__alt_data_end+0xfffcfd58>
   414e4:	d8c12a15 	stw	r3,1192(sp)
   414e8:	d9812785 	stb	r6,1182(sp)
   414ec:	8880080c 	andi	r2,r17,32
   414f0:	d8c12d17 	ldw	r3,1204(sp)
   414f4:	103f861e 	bne	r2,zero,41310 <__alt_data_end+0xfffd05d0>
   414f8:	8880040c 	andi	r2,r17,16
   414fc:	1001f31e 	bne	r2,zero,41ccc <___vfprintf_internal_r+0x13d0>
   41500:	8880100c 	andi	r2,r17,64
   41504:	1001f126 	beq	r2,zero,41ccc <___vfprintf_internal_r+0x13d0>
   41508:	1cc0000f 	ldh	r19,0(r3)
   4150c:	db012d17 	ldw	r12,1204(sp)
   41510:	9839d7fa 	srai	fp,r19,31
   41514:	63000104 	addi	r12,r12,4
   41518:	db012d15 	stw	r12,1204(sp)
   4151c:	e005883a 	mov	r2,fp
   41520:	003f8106 	br	41328 <__alt_data_end+0xfffd05e8>
   41524:	8c401014 	ori	r17,r17,64
   41528:	1805883a 	mov	r2,r3
   4152c:	1c000007 	ldb	r16,0(r3)
   41530:	003d5906 	br	40a98 <__alt_data_end+0xfffcfd58>
   41534:	db012d17 	ldw	r12,1204(sp)
   41538:	d8c12a15 	stw	r3,1192(sp)
   4153c:	00c00044 	movi	r3,1
   41540:	60800017 	ldw	r2,0(r12)
   41544:	63000104 	addi	r12,r12,4
   41548:	d8c12b15 	stw	r3,1196(sp)
   4154c:	d8012785 	stb	zero,1182(sp)
   41550:	d8810405 	stb	r2,1040(sp)
   41554:	db012d15 	stw	r12,1204(sp)
   41558:	dac10404 	addi	r11,sp,1040
   4155c:	1825883a 	mov	r18,r3
   41560:	d8013215 	stw	zero,1224(sp)
   41564:	d8013415 	stw	zero,1232(sp)
   41568:	dac13115 	stw	r11,1220(sp)
   4156c:	0005883a 	mov	r2,zero
   41570:	003e7d06 	br	40f68 <__alt_data_end+0xfffd0228>
   41574:	db012d17 	ldw	r12,1204(sp)
   41578:	00800c04 	movi	r2,48
   4157c:	d8812705 	stb	r2,1180(sp)
   41580:	64c00017 	ldw	r19,0(r12)
   41584:	00801e04 	movi	r2,120
   41588:	d8812745 	stb	r2,1181(sp)
   4158c:	00800174 	movhi	r2,5
   41590:	109e7104 	addi	r2,r2,31172
   41594:	63000104 	addi	r12,r12,4
   41598:	d8c12a15 	stw	r3,1192(sp)
   4159c:	d8813b15 	stw	r2,1260(sp)
   415a0:	0039883a 	mov	fp,zero
   415a4:	8c400094 	ori	r17,r17,2
   415a8:	db012d15 	stw	r12,1204(sp)
   415ac:	00800084 	movi	r2,2
   415b0:	04001e04 	movi	r16,120
   415b4:	9807883a 	mov	r3,r19
   415b8:	003e4206 	br	40ec4 <__alt_data_end+0xfffd0184>
   415bc:	dac12d17 	ldw	r11,1204(sp)
   415c0:	db012d17 	ldw	r12,1204(sp)
   415c4:	d8c12a15 	stw	r3,1192(sp)
   415c8:	5ac00017 	ldw	r11,0(r11)
   415cc:	d8012785 	stb	zero,1182(sp)
   415d0:	64c00104 	addi	r19,r12,4
   415d4:	dac13115 	stw	r11,1220(sp)
   415d8:	5803e826 	beq	r11,zero,4257c <___vfprintf_internal_r+0x1c80>
   415dc:	d9013117 	ldw	r4,1220(sp)
   415e0:	48037a16 	blt	r9,zero,423cc <___vfprintf_internal_r+0x1ad0>
   415e4:	480d883a 	mov	r6,r9
   415e8:	000b883a 	mov	r5,zero
   415ec:	da013f15 	stw	r8,1276(sp)
   415f0:	da413e15 	stw	r9,1272(sp)
   415f4:	0045dd40 	call	45dd4 <memchr>
   415f8:	da013f17 	ldw	r8,1276(sp)
   415fc:	da413e17 	ldw	r9,1272(sp)
   41600:	10044426 	beq	r2,zero,42714 <___vfprintf_internal_r+0x1e18>
   41604:	d8c13117 	ldw	r3,1220(sp)
   41608:	10e5c83a 	sub	r18,r2,r3
   4160c:	4c834416 	blt	r9,r18,42320 <___vfprintf_internal_r+0x1a24>
   41610:	9005883a 	mov	r2,r18
   41614:	90037216 	blt	r18,zero,423e0 <___vfprintf_internal_r+0x1ae4>
   41618:	dd412783 	ldbu	r21,1182(sp)
   4161c:	d8812b15 	stw	r2,1196(sp)
   41620:	dcc12d15 	stw	r19,1204(sp)
   41624:	d8013215 	stw	zero,1224(sp)
   41628:	d8013415 	stw	zero,1232(sp)
   4162c:	003e4706 	br	40f4c <__alt_data_end+0xfffd020c>
   41630:	dac12d17 	ldw	r11,1204(sp)
   41634:	db012d17 	ldw	r12,1204(sp)
   41638:	5ac00017 	ldw	r11,0(r11)
   4163c:	dac12e15 	stw	r11,1208(sp)
   41640:	62c00104 	addi	r11,r12,4
   41644:	db012e17 	ldw	r12,1208(sp)
   41648:	60034a16 	blt	r12,zero,42374 <___vfprintf_internal_r+0x1a78>
   4164c:	dac12d15 	stw	r11,1204(sp)
   41650:	1805883a 	mov	r2,r3
   41654:	1c000007 	ldb	r16,0(r3)
   41658:	003d0f06 	br	40a98 <__alt_data_end+0xfffcfd58>
   4165c:	1805883a 	mov	r2,r3
   41660:	01800ac4 	movi	r6,43
   41664:	1c000007 	ldb	r16,0(r3)
   41668:	003d0b06 	br	40a98 <__alt_data_end+0xfffcfd58>
   4166c:	d8c12a15 	stw	r3,1192(sp)
   41670:	d9812785 	stb	r6,1182(sp)
   41674:	803db226 	beq	r16,zero,40d40 <__alt_data_end+0xfffd0000>
   41678:	00c00044 	movi	r3,1
   4167c:	d8c12b15 	stw	r3,1196(sp)
   41680:	dc010405 	stb	r16,1040(sp)
   41684:	d8012785 	stb	zero,1182(sp)
   41688:	003fb306 	br	41558 <__alt_data_end+0xfffd0818>
   4168c:	d8c12017 	ldw	r3,1152(sp)
   41690:	003e6d06 	br	41048 <__alt_data_end+0xfffd0308>
   41694:	10803fcc 	andi	r2,r2,255
   41698:	00c00044 	movi	r3,1
   4169c:	10fe141e 	bne	r2,r3,40ef0 <__alt_data_end+0xfffd01b0>
   416a0:	e000021e 	bne	fp,zero,416ac <___vfprintf_internal_r+0xdb0>
   416a4:	00800244 	movi	r2,9
   416a8:	14c0202e 	bgeu	r2,r19,4172c <___vfprintf_internal_r+0xe30>
   416ac:	dc012b15 	stw	r16,1196(sp)
   416b0:	dc412c15 	stw	r17,1200(sp)
   416b4:	9821883a 	mov	r16,r19
   416b8:	e023883a 	mov	r17,fp
   416bc:	dc810e04 	addi	r18,sp,1080
   416c0:	4027883a 	mov	r19,r8
   416c4:	4839883a 	mov	fp,r9
   416c8:	8009883a 	mov	r4,r16
   416cc:	880b883a 	mov	r5,r17
   416d0:	01800284 	movi	r6,10
   416d4:	000f883a 	mov	r7,zero
   416d8:	0049dd40 	call	49dd4 <__umoddi3>
   416dc:	10800c04 	addi	r2,r2,48
   416e0:	94bfffc4 	addi	r18,r18,-1
   416e4:	8009883a 	mov	r4,r16
   416e8:	880b883a 	mov	r5,r17
   416ec:	01800284 	movi	r6,10
   416f0:	000f883a 	mov	r7,zero
   416f4:	90800005 	stb	r2,0(r18)
   416f8:	00498140 	call	49814 <__udivdi3>
   416fc:	1021883a 	mov	r16,r2
   41700:	10c4b03a 	or	r2,r2,r3
   41704:	1823883a 	mov	r17,r3
   41708:	103fef1e 	bne	r2,zero,416c8 <__alt_data_end+0xfffd0988>
   4170c:	dac12817 	ldw	r11,1184(sp)
   41710:	dc813115 	stw	r18,1220(sp)
   41714:	dc012b17 	ldw	r16,1196(sp)
   41718:	9811883a 	mov	r8,r19
   4171c:	dc412c17 	ldw	r17,1200(sp)
   41720:	e013883a 	mov	r9,fp
   41724:	5ca5c83a 	sub	r18,r11,r18
   41728:	003e0306 	br	40f38 <__alt_data_end+0xfffd01f8>
   4172c:	9cc00c04 	addi	r19,r19,48
   41730:	d8c10dc4 	addi	r3,sp,1079
   41734:	dcc10dc5 	stb	r19,1079(sp)
   41738:	dc813c17 	ldw	r18,1264(sp)
   4173c:	d8c13115 	stw	r3,1220(sp)
   41740:	003dfd06 	br	40f38 <__alt_data_end+0xfffd01f8>
   41744:	00801944 	movi	r2,101
   41748:	1400710e 	bge	r2,r16,41910 <___vfprintf_internal_r+0x1014>
   4174c:	d9013717 	ldw	r4,1244(sp)
   41750:	d9413917 	ldw	r5,1252(sp)
   41754:	000d883a 	mov	r6,zero
   41758:	000f883a 	mov	r7,zero
   4175c:	d8c13d15 	stw	r3,1268(sp)
   41760:	da013f15 	stw	r8,1276(sp)
   41764:	004b4cc0 	call	4b4cc <__eqdf2>
   41768:	d8c13d17 	ldw	r3,1268(sp)
   4176c:	da013f17 	ldw	r8,1276(sp)
   41770:	1000ef1e 	bne	r2,zero,41b30 <___vfprintf_internal_r+0x1234>
   41774:	d8811f17 	ldw	r2,1148(sp)
   41778:	01000174 	movhi	r4,5
   4177c:	211e7804 	addi	r4,r4,31200
   41780:	18c00044 	addi	r3,r3,1
   41784:	10800044 	addi	r2,r2,1
   41788:	41000015 	stw	r4,0(r8)
   4178c:	01000044 	movi	r4,1
   41790:	41000115 	stw	r4,4(r8)
   41794:	d8c12015 	stw	r3,1152(sp)
   41798:	d8811f15 	stw	r2,1148(sp)
   4179c:	010001c4 	movi	r4,7
   417a0:	20828e16 	blt	r4,r2,421dc <___vfprintf_internal_r+0x18e0>
   417a4:	42000204 	addi	r8,r8,8
   417a8:	d8812617 	ldw	r2,1176(sp)
   417ac:	dac13317 	ldw	r11,1228(sp)
   417b0:	12c00216 	blt	r2,r11,417bc <___vfprintf_internal_r+0xec0>
   417b4:	8880004c 	andi	r2,r17,1
   417b8:	103e7726 	beq	r2,zero,41198 <__alt_data_end+0xfffd0458>
   417bc:	db013817 	ldw	r12,1248(sp)
   417c0:	d8811f17 	ldw	r2,1148(sp)
   417c4:	dac13517 	ldw	r11,1236(sp)
   417c8:	1b07883a 	add	r3,r3,r12
   417cc:	10800044 	addi	r2,r2,1
   417d0:	42c00015 	stw	r11,0(r8)
   417d4:	43000115 	stw	r12,4(r8)
   417d8:	d8c12015 	stw	r3,1152(sp)
   417dc:	d8811f15 	stw	r2,1148(sp)
   417e0:	010001c4 	movi	r4,7
   417e4:	2082ed16 	blt	r4,r2,4239c <___vfprintf_internal_r+0x1aa0>
   417e8:	42000204 	addi	r8,r8,8
   417ec:	db013317 	ldw	r12,1228(sp)
   417f0:	643fffc4 	addi	r16,r12,-1
   417f4:	043e680e 	bge	zero,r16,41198 <__alt_data_end+0xfffd0458>
   417f8:	04800404 	movi	r18,16
   417fc:	d8811f17 	ldw	r2,1148(sp)
   41800:	94007e0e 	bge	r18,r16,419fc <___vfprintf_internal_r+0x1100>
   41804:	01400174 	movhi	r5,5
   41808:	295e7884 	addi	r5,r5,31202
   4180c:	d9412c15 	stw	r5,1200(sp)
   41810:	054001c4 	movi	r21,7
   41814:	00000306 	br	41824 <___vfprintf_internal_r+0xf28>
   41818:	42000204 	addi	r8,r8,8
   4181c:	843ffc04 	addi	r16,r16,-16
   41820:	9400790e 	bge	r18,r16,41a08 <___vfprintf_internal_r+0x110c>
   41824:	18c00404 	addi	r3,r3,16
   41828:	10800044 	addi	r2,r2,1
   4182c:	45000015 	stw	r20,0(r8)
   41830:	44800115 	stw	r18,4(r8)
   41834:	d8c12015 	stw	r3,1152(sp)
   41838:	d8811f15 	stw	r2,1148(sp)
   4183c:	a8bff60e 	bge	r21,r2,41818 <__alt_data_end+0xfffd0ad8>
   41840:	b009883a 	mov	r4,r22
   41844:	b80b883a 	mov	r5,r23
   41848:	d9811e04 	addi	r6,sp,1144
   4184c:	0047b440 	call	47b44 <__sprint_r>
   41850:	103d411e 	bne	r2,zero,40d58 <__alt_data_end+0xfffd0018>
   41854:	d8c12017 	ldw	r3,1152(sp)
   41858:	d8811f17 	ldw	r2,1148(sp)
   4185c:	da000404 	addi	r8,sp,16
   41860:	003fee06 	br	4181c <__alt_data_end+0xfffd0adc>
   41864:	dac12e17 	ldw	r11,1208(sp)
   41868:	db012b17 	ldw	r12,1196(sp)
   4186c:	5b2bc83a 	sub	r21,r11,r12
   41870:	057e130e 	bge	zero,r21,410c0 <__alt_data_end+0xfffd0380>
   41874:	07000404 	movi	fp,16
   41878:	d8811f17 	ldw	r2,1148(sp)
   4187c:	e543640e 	bge	fp,r21,42610 <___vfprintf_internal_r+0x1d14>
   41880:	01400174 	movhi	r5,5
   41884:	295e7884 	addi	r5,r5,31202
   41888:	d9412c15 	stw	r5,1200(sp)
   4188c:	04c001c4 	movi	r19,7
   41890:	00000306 	br	418a0 <___vfprintf_internal_r+0xfa4>
   41894:	ad7ffc04 	addi	r21,r21,-16
   41898:	42000204 	addi	r8,r8,8
   4189c:	e540110e 	bge	fp,r21,418e4 <___vfprintf_internal_r+0xfe8>
   418a0:	18c00404 	addi	r3,r3,16
   418a4:	10800044 	addi	r2,r2,1
   418a8:	45000015 	stw	r20,0(r8)
   418ac:	47000115 	stw	fp,4(r8)
   418b0:	d8c12015 	stw	r3,1152(sp)
   418b4:	d8811f15 	stw	r2,1148(sp)
   418b8:	98bff60e 	bge	r19,r2,41894 <__alt_data_end+0xfffd0b54>
   418bc:	b009883a 	mov	r4,r22
   418c0:	b80b883a 	mov	r5,r23
   418c4:	d9811e04 	addi	r6,sp,1144
   418c8:	0047b440 	call	47b44 <__sprint_r>
   418cc:	103d221e 	bne	r2,zero,40d58 <__alt_data_end+0xfffd0018>
   418d0:	ad7ffc04 	addi	r21,r21,-16
   418d4:	d8c12017 	ldw	r3,1152(sp)
   418d8:	d8811f17 	ldw	r2,1148(sp)
   418dc:	da000404 	addi	r8,sp,16
   418e0:	e57fef16 	blt	fp,r21,418a0 <__alt_data_end+0xfffd0b60>
   418e4:	dac12c17 	ldw	r11,1200(sp)
   418e8:	1d47883a 	add	r3,r3,r21
   418ec:	10800044 	addi	r2,r2,1
   418f0:	42c00015 	stw	r11,0(r8)
   418f4:	45400115 	stw	r21,4(r8)
   418f8:	d8c12015 	stw	r3,1152(sp)
   418fc:	d8811f15 	stw	r2,1148(sp)
   41900:	010001c4 	movi	r4,7
   41904:	20819116 	blt	r4,r2,41f4c <___vfprintf_internal_r+0x1650>
   41908:	42000204 	addi	r8,r8,8
   4190c:	003dec06 	br	410c0 <__alt_data_end+0xfffd0380>
   41910:	db013317 	ldw	r12,1228(sp)
   41914:	00800044 	movi	r2,1
   41918:	18c00044 	addi	r3,r3,1
   4191c:	1301530e 	bge	r2,r12,41e6c <___vfprintf_internal_r+0x1570>
   41920:	dc011f17 	ldw	r16,1148(sp)
   41924:	dac13117 	ldw	r11,1220(sp)
   41928:	00800044 	movi	r2,1
   4192c:	84000044 	addi	r16,r16,1
   41930:	40800115 	stw	r2,4(r8)
   41934:	42c00015 	stw	r11,0(r8)
   41938:	d8c12015 	stw	r3,1152(sp)
   4193c:	dc011f15 	stw	r16,1148(sp)
   41940:	008001c4 	movi	r2,7
   41944:	14016b16 	blt	r2,r16,41ef4 <___vfprintf_internal_r+0x15f8>
   41948:	42000204 	addi	r8,r8,8
   4194c:	db013817 	ldw	r12,1248(sp)
   41950:	dac13517 	ldw	r11,1236(sp)
   41954:	84000044 	addi	r16,r16,1
   41958:	1b07883a 	add	r3,r3,r12
   4195c:	42c00015 	stw	r11,0(r8)
   41960:	43000115 	stw	r12,4(r8)
   41964:	d8c12015 	stw	r3,1152(sp)
   41968:	dc011f15 	stw	r16,1148(sp)
   4196c:	008001c4 	movi	r2,7
   41970:	14016916 	blt	r2,r16,41f18 <___vfprintf_internal_r+0x161c>
   41974:	44800204 	addi	r18,r8,8
   41978:	d9013717 	ldw	r4,1244(sp)
   4197c:	d9413917 	ldw	r5,1252(sp)
   41980:	000d883a 	mov	r6,zero
   41984:	000f883a 	mov	r7,zero
   41988:	d8c13d15 	stw	r3,1268(sp)
   4198c:	004b4cc0 	call	4b4cc <__eqdf2>
   41990:	d8c13d17 	ldw	r3,1268(sp)
   41994:	db013317 	ldw	r12,1228(sp)
   41998:	1000ae26 	beq	r2,zero,41c54 <___vfprintf_internal_r+0x1358>
   4199c:	dac13117 	ldw	r11,1220(sp)
   419a0:	60bfffc4 	addi	r2,r12,-1
   419a4:	1887883a 	add	r3,r3,r2
   419a8:	59000044 	addi	r4,r11,1
   419ac:	84000044 	addi	r16,r16,1
   419b0:	90800115 	stw	r2,4(r18)
   419b4:	91000015 	stw	r4,0(r18)
   419b8:	d8c12015 	stw	r3,1152(sp)
   419bc:	dc011f15 	stw	r16,1148(sp)
   419c0:	008001c4 	movi	r2,7
   419c4:	14014216 	blt	r2,r16,41ed0 <___vfprintf_internal_r+0x15d4>
   419c8:	94800204 	addi	r18,r18,8
   419cc:	dac13a17 	ldw	r11,1256(sp)
   419d0:	dd4122c4 	addi	r21,sp,1163
   419d4:	84000044 	addi	r16,r16,1
   419d8:	58c7883a 	add	r3,r11,r3
   419dc:	95400015 	stw	r21,0(r18)
   419e0:	92c00115 	stw	r11,4(r18)
   419e4:	d8c12015 	stw	r3,1152(sp)
   419e8:	dc011f15 	stw	r16,1148(sp)
   419ec:	008001c4 	movi	r2,7
   419f0:	14000e16 	blt	r2,r16,41a2c <___vfprintf_internal_r+0x1130>
   419f4:	92000204 	addi	r8,r18,8
   419f8:	003de706 	br	41198 <__alt_data_end+0xfffd0458>
   419fc:	01000174 	movhi	r4,5
   41a00:	211e7884 	addi	r4,r4,31202
   41a04:	d9012c15 	stw	r4,1200(sp)
   41a08:	dac12c17 	ldw	r11,1200(sp)
   41a0c:	1c07883a 	add	r3,r3,r16
   41a10:	44000115 	stw	r16,4(r8)
   41a14:	42c00015 	stw	r11,0(r8)
   41a18:	10800044 	addi	r2,r2,1
   41a1c:	d8c12015 	stw	r3,1152(sp)
   41a20:	d8811f15 	stw	r2,1148(sp)
   41a24:	010001c4 	movi	r4,7
   41a28:	20bdda0e 	bge	r4,r2,41194 <__alt_data_end+0xfffd0454>
   41a2c:	b009883a 	mov	r4,r22
   41a30:	b80b883a 	mov	r5,r23
   41a34:	d9811e04 	addi	r6,sp,1144
   41a38:	0047b440 	call	47b44 <__sprint_r>
   41a3c:	103cc61e 	bne	r2,zero,40d58 <__alt_data_end+0xfffd0018>
   41a40:	d8c12017 	ldw	r3,1152(sp)
   41a44:	da000404 	addi	r8,sp,16
   41a48:	003dd306 	br	41198 <__alt_data_end+0xfffd0458>
   41a4c:	b009883a 	mov	r4,r22
   41a50:	b80b883a 	mov	r5,r23
   41a54:	d9811e04 	addi	r6,sp,1144
   41a58:	0047b440 	call	47b44 <__sprint_r>
   41a5c:	103e0926 	beq	r2,zero,41284 <__alt_data_end+0xfffd0544>
   41a60:	003cbd06 	br	40d58 <__alt_data_end+0xfffd0018>
   41a64:	10803fcc 	andi	r2,r2,255
   41a68:	1000651e 	bne	r2,zero,41c00 <___vfprintf_internal_r+0x1304>
   41a6c:	8880004c 	andi	r2,r17,1
   41a70:	10013226 	beq	r2,zero,41f3c <___vfprintf_internal_r+0x1640>
   41a74:	00800c04 	movi	r2,48
   41a78:	d8c10dc4 	addi	r3,sp,1079
   41a7c:	d8810dc5 	stb	r2,1079(sp)
   41a80:	dc813c17 	ldw	r18,1264(sp)
   41a84:	d8c13115 	stw	r3,1220(sp)
   41a88:	003d2b06 	br	40f38 <__alt_data_end+0xfffd01f8>
   41a8c:	b009883a 	mov	r4,r22
   41a90:	b80b883a 	mov	r5,r23
   41a94:	d9811e04 	addi	r6,sp,1144
   41a98:	0047b440 	call	47b44 <__sprint_r>
   41a9c:	103cae1e 	bne	r2,zero,40d58 <__alt_data_end+0xfffd0018>
   41aa0:	d8c12017 	ldw	r3,1152(sp)
   41aa4:	da000404 	addi	r8,sp,16
   41aa8:	003dae06 	br	41164 <__alt_data_end+0xfffd0424>
   41aac:	b009883a 	mov	r4,r22
   41ab0:	b80b883a 	mov	r5,r23
   41ab4:	d9811e04 	addi	r6,sp,1144
   41ab8:	0047b440 	call	47b44 <__sprint_r>
   41abc:	103ca61e 	bne	r2,zero,40d58 <__alt_data_end+0xfffd0018>
   41ac0:	d8c12017 	ldw	r3,1152(sp)
   41ac4:	da000404 	addi	r8,sp,16
   41ac8:	003d6c06 	br	4107c <__alt_data_end+0xfffd033c>
   41acc:	b009883a 	mov	r4,r22
   41ad0:	b80b883a 	mov	r5,r23
   41ad4:	d9811e04 	addi	r6,sp,1144
   41ad8:	0047b440 	call	47b44 <__sprint_r>
   41adc:	103c9e1e 	bne	r2,zero,40d58 <__alt_data_end+0xfffd0018>
   41ae0:	d8c12017 	ldw	r3,1152(sp)
   41ae4:	da000404 	addi	r8,sp,16
   41ae8:	003d7206 	br	410b4 <__alt_data_end+0xfffd0374>
   41aec:	d9413b17 	ldw	r5,1260(sp)
   41af0:	d8c10e04 	addi	r3,sp,1080
   41af4:	988003cc 	andi	r2,r19,15
   41af8:	e008973a 	slli	r4,fp,28
   41afc:	2885883a 	add	r2,r5,r2
   41b00:	9826d13a 	srli	r19,r19,4
   41b04:	10800003 	ldbu	r2,0(r2)
   41b08:	e038d13a 	srli	fp,fp,4
   41b0c:	18ffffc4 	addi	r3,r3,-1
   41b10:	24e6b03a 	or	r19,r4,r19
   41b14:	18800005 	stb	r2,0(r3)
   41b18:	9f04b03a 	or	r2,r19,fp
   41b1c:	103ff51e 	bne	r2,zero,41af4 <__alt_data_end+0xfffd0db4>
   41b20:	db012817 	ldw	r12,1184(sp)
   41b24:	d8c13115 	stw	r3,1220(sp)
   41b28:	60e5c83a 	sub	r18,r12,r3
   41b2c:	003d0206 	br	40f38 <__alt_data_end+0xfffd01f8>
   41b30:	dc012617 	ldw	r16,1176(sp)
   41b34:	0401b10e 	bge	zero,r16,421fc <___vfprintf_internal_r+0x1900>
   41b38:	db013117 	ldw	r12,1220(sp)
   41b3c:	dac13317 	ldw	r11,1228(sp)
   41b40:	62e1883a 	add	r16,r12,r11
   41b44:	db013417 	ldw	r12,1232(sp)
   41b48:	5825883a 	mov	r18,r11
   41b4c:	62c0010e 	bge	r12,r11,41b54 <___vfprintf_internal_r+0x1258>
   41b50:	6025883a 	mov	r18,r12
   41b54:	04800b0e 	bge	zero,r18,41b84 <___vfprintf_internal_r+0x1288>
   41b58:	d8811f17 	ldw	r2,1148(sp)
   41b5c:	dac13117 	ldw	r11,1220(sp)
   41b60:	1c87883a 	add	r3,r3,r18
   41b64:	10800044 	addi	r2,r2,1
   41b68:	42c00015 	stw	r11,0(r8)
   41b6c:	44800115 	stw	r18,4(r8)
   41b70:	d8c12015 	stw	r3,1152(sp)
   41b74:	d8811f15 	stw	r2,1148(sp)
   41b78:	010001c4 	movi	r4,7
   41b7c:	20824f16 	blt	r4,r2,424bc <___vfprintf_internal_r+0x1bc0>
   41b80:	42000204 	addi	r8,r8,8
   41b84:	90024b16 	blt	r18,zero,424b4 <___vfprintf_internal_r+0x1bb8>
   41b88:	db013417 	ldw	r12,1232(sp)
   41b8c:	64a5c83a 	sub	r18,r12,r18
   41b90:	0480730e 	bge	zero,r18,41d60 <___vfprintf_internal_r+0x1464>
   41b94:	05400404 	movi	r21,16
   41b98:	d8811f17 	ldw	r2,1148(sp)
   41b9c:	ac817d0e 	bge	r21,r18,42194 <___vfprintf_internal_r+0x1898>
   41ba0:	01400174 	movhi	r5,5
   41ba4:	295e7884 	addi	r5,r5,31202
   41ba8:	d9412c15 	stw	r5,1200(sp)
   41bac:	070001c4 	movi	fp,7
   41bb0:	00000306 	br	41bc0 <___vfprintf_internal_r+0x12c4>
   41bb4:	42000204 	addi	r8,r8,8
   41bb8:	94bffc04 	addi	r18,r18,-16
   41bbc:	ac81780e 	bge	r21,r18,421a0 <___vfprintf_internal_r+0x18a4>
   41bc0:	18c00404 	addi	r3,r3,16
   41bc4:	10800044 	addi	r2,r2,1
   41bc8:	45000015 	stw	r20,0(r8)
   41bcc:	45400115 	stw	r21,4(r8)
   41bd0:	d8c12015 	stw	r3,1152(sp)
   41bd4:	d8811f15 	stw	r2,1148(sp)
   41bd8:	e0bff60e 	bge	fp,r2,41bb4 <__alt_data_end+0xfffd0e74>
   41bdc:	b009883a 	mov	r4,r22
   41be0:	b80b883a 	mov	r5,r23
   41be4:	d9811e04 	addi	r6,sp,1144
   41be8:	0047b440 	call	47b44 <__sprint_r>
   41bec:	103c5a1e 	bne	r2,zero,40d58 <__alt_data_end+0xfffd0018>
   41bf0:	d8c12017 	ldw	r3,1152(sp)
   41bf4:	d8811f17 	ldw	r2,1148(sp)
   41bf8:	da000404 	addi	r8,sp,16
   41bfc:	003fee06 	br	41bb8 <__alt_data_end+0xfffd0e78>
   41c00:	dac10e04 	addi	r11,sp,1080
   41c04:	0025883a 	mov	r18,zero
   41c08:	dac13115 	stw	r11,1220(sp)
   41c0c:	003cca06 	br	40f38 <__alt_data_end+0xfffd01f8>
   41c10:	b009883a 	mov	r4,r22
   41c14:	b80b883a 	mov	r5,r23
   41c18:	d9811e04 	addi	r6,sp,1144
   41c1c:	0047b440 	call	47b44 <__sprint_r>
   41c20:	103c4d1e 	bne	r2,zero,40d58 <__alt_data_end+0xfffd0018>
   41c24:	d8c12017 	ldw	r3,1152(sp)
   41c28:	d8812787 	ldb	r2,1182(sp)
   41c2c:	da000404 	addi	r8,sp,16
   41c30:	003d0506 	br	41048 <__alt_data_end+0xfffd0308>
   41c34:	dac12d17 	ldw	r11,1204(sp)
   41c38:	14c00017 	ldw	r19,0(r2)
   41c3c:	0039883a 	mov	fp,zero
   41c40:	5ac00104 	addi	r11,r11,4
   41c44:	dac12d15 	stw	r11,1204(sp)
   41c48:	0005883a 	mov	r2,zero
   41c4c:	9807883a 	mov	r3,r19
   41c50:	003c9c06 	br	40ec4 <__alt_data_end+0xfffd0184>
   41c54:	657fffc4 	addi	r21,r12,-1
   41c58:	057f5c0e 	bge	zero,r21,419cc <__alt_data_end+0xfffd0c8c>
   41c5c:	07000404 	movi	fp,16
   41c60:	e5408f0e 	bge	fp,r21,41ea0 <___vfprintf_internal_r+0x15a4>
   41c64:	01000174 	movhi	r4,5
   41c68:	211e7884 	addi	r4,r4,31202
   41c6c:	d9012c15 	stw	r4,1200(sp)
   41c70:	01c001c4 	movi	r7,7
   41c74:	00000306 	br	41c84 <___vfprintf_internal_r+0x1388>
   41c78:	94800204 	addi	r18,r18,8
   41c7c:	ad7ffc04 	addi	r21,r21,-16
   41c80:	e5408a0e 	bge	fp,r21,41eac <___vfprintf_internal_r+0x15b0>
   41c84:	18c00404 	addi	r3,r3,16
   41c88:	84000044 	addi	r16,r16,1
   41c8c:	95000015 	stw	r20,0(r18)
   41c90:	97000115 	stw	fp,4(r18)
   41c94:	d8c12015 	stw	r3,1152(sp)
   41c98:	dc011f15 	stw	r16,1148(sp)
   41c9c:	3c3ff60e 	bge	r7,r16,41c78 <__alt_data_end+0xfffd0f38>
   41ca0:	b009883a 	mov	r4,r22
   41ca4:	b80b883a 	mov	r5,r23
   41ca8:	d9811e04 	addi	r6,sp,1144
   41cac:	d9c13d15 	stw	r7,1268(sp)
   41cb0:	0047b440 	call	47b44 <__sprint_r>
   41cb4:	d9c13d17 	ldw	r7,1268(sp)
   41cb8:	103c271e 	bne	r2,zero,40d58 <__alt_data_end+0xfffd0018>
   41cbc:	d8c12017 	ldw	r3,1152(sp)
   41cc0:	dc011f17 	ldw	r16,1148(sp)
   41cc4:	dc800404 	addi	r18,sp,16
   41cc8:	003fec06 	br	41c7c <__alt_data_end+0xfffd0f3c>
   41ccc:	1cc00017 	ldw	r19,0(r3)
   41cd0:	dac12d17 	ldw	r11,1204(sp)
   41cd4:	9839d7fa 	srai	fp,r19,31
   41cd8:	5ac00104 	addi	r11,r11,4
   41cdc:	dac12d15 	stw	r11,1204(sp)
   41ce0:	e005883a 	mov	r2,fp
   41ce4:	003d9006 	br	41328 <__alt_data_end+0xfffd05e8>
   41ce8:	00800084 	movi	r2,2
   41cec:	9f06b03a 	or	r3,r19,fp
   41cf0:	003c7406 	br	40ec4 <__alt_data_end+0xfffd0184>
   41cf4:	db012d17 	ldw	r12,1204(sp)
   41cf8:	14c00017 	ldw	r19,0(r2)
   41cfc:	0039883a 	mov	fp,zero
   41d00:	63000104 	addi	r12,r12,4
   41d04:	db012d15 	stw	r12,1204(sp)
   41d08:	00800044 	movi	r2,1
   41d0c:	9807883a 	mov	r3,r19
   41d10:	003c6c06 	br	40ec4 <__alt_data_end+0xfffd0184>
   41d14:	10803fcc 	andi	r2,r2,255
   41d18:	1080201c 	xori	r2,r2,128
   41d1c:	10bfe004 	addi	r2,r2,-128
   41d20:	01000c04 	movi	r4,48
   41d24:	1101a526 	beq	r2,r4,423bc <___vfprintf_internal_r+0x1ac0>
   41d28:	dac13117 	ldw	r11,1220(sp)
   41d2c:	db012817 	ldw	r12,1184(sp)
   41d30:	193fffc5 	stb	r4,-1(r3)
   41d34:	5affffc4 	addi	r11,r11,-1
   41d38:	dac13115 	stw	r11,1220(sp)
   41d3c:	62e5c83a 	sub	r18,r12,r11
   41d40:	003c7d06 	br	40f38 <__alt_data_end+0xfffd01f8>
   41d44:	b009883a 	mov	r4,r22
   41d48:	b80b883a 	mov	r5,r23
   41d4c:	d9811e04 	addi	r6,sp,1144
   41d50:	0047b440 	call	47b44 <__sprint_r>
   41d54:	103c001e 	bne	r2,zero,40d58 <__alt_data_end+0xfffd0018>
   41d58:	d8c12017 	ldw	r3,1152(sp)
   41d5c:	da000404 	addi	r8,sp,16
   41d60:	db013117 	ldw	r12,1220(sp)
   41d64:	dac13417 	ldw	r11,1232(sp)
   41d68:	d8812617 	ldw	r2,1176(sp)
   41d6c:	62e5883a 	add	r18,r12,r11
   41d70:	db013317 	ldw	r12,1228(sp)
   41d74:	13000216 	blt	r2,r12,41d80 <___vfprintf_internal_r+0x1484>
   41d78:	8900004c 	andi	r4,r17,1
   41d7c:	20000c26 	beq	r4,zero,41db0 <___vfprintf_internal_r+0x14b4>
   41d80:	dac13817 	ldw	r11,1248(sp)
   41d84:	d9011f17 	ldw	r4,1148(sp)
   41d88:	db013517 	ldw	r12,1236(sp)
   41d8c:	1ac7883a 	add	r3,r3,r11
   41d90:	21000044 	addi	r4,r4,1
   41d94:	43000015 	stw	r12,0(r8)
   41d98:	42c00115 	stw	r11,4(r8)
   41d9c:	d8c12015 	stw	r3,1152(sp)
   41da0:	d9011f15 	stw	r4,1148(sp)
   41da4:	014001c4 	movi	r5,7
   41da8:	2901cc16 	blt	r5,r4,424dc <___vfprintf_internal_r+0x1be0>
   41dac:	42000204 	addi	r8,r8,8
   41db0:	dac13317 	ldw	r11,1228(sp)
   41db4:	8489c83a 	sub	r4,r16,r18
   41db8:	5885c83a 	sub	r2,r11,r2
   41dbc:	1021883a 	mov	r16,r2
   41dc0:	2080010e 	bge	r4,r2,41dc8 <___vfprintf_internal_r+0x14cc>
   41dc4:	2021883a 	mov	r16,r4
   41dc8:	04000a0e 	bge	zero,r16,41df4 <___vfprintf_internal_r+0x14f8>
   41dcc:	d9011f17 	ldw	r4,1148(sp)
   41dd0:	1c07883a 	add	r3,r3,r16
   41dd4:	44800015 	stw	r18,0(r8)
   41dd8:	21000044 	addi	r4,r4,1
   41ddc:	44000115 	stw	r16,4(r8)
   41de0:	d8c12015 	stw	r3,1152(sp)
   41de4:	d9011f15 	stw	r4,1148(sp)
   41de8:	014001c4 	movi	r5,7
   41dec:	2901d616 	blt	r5,r4,42548 <___vfprintf_internal_r+0x1c4c>
   41df0:	42000204 	addi	r8,r8,8
   41df4:	8001df16 	blt	r16,zero,42574 <___vfprintf_internal_r+0x1c78>
   41df8:	1421c83a 	sub	r16,r2,r16
   41dfc:	043ce60e 	bge	zero,r16,41198 <__alt_data_end+0xfffd0458>
   41e00:	04800404 	movi	r18,16
   41e04:	d8811f17 	ldw	r2,1148(sp)
   41e08:	943efc0e 	bge	r18,r16,419fc <__alt_data_end+0xfffd0cbc>
   41e0c:	01400174 	movhi	r5,5
   41e10:	295e7884 	addi	r5,r5,31202
   41e14:	d9412c15 	stw	r5,1200(sp)
   41e18:	054001c4 	movi	r21,7
   41e1c:	00000306 	br	41e2c <___vfprintf_internal_r+0x1530>
   41e20:	42000204 	addi	r8,r8,8
   41e24:	843ffc04 	addi	r16,r16,-16
   41e28:	943ef70e 	bge	r18,r16,41a08 <__alt_data_end+0xfffd0cc8>
   41e2c:	18c00404 	addi	r3,r3,16
   41e30:	10800044 	addi	r2,r2,1
   41e34:	45000015 	stw	r20,0(r8)
   41e38:	44800115 	stw	r18,4(r8)
   41e3c:	d8c12015 	stw	r3,1152(sp)
   41e40:	d8811f15 	stw	r2,1148(sp)
   41e44:	a8bff60e 	bge	r21,r2,41e20 <__alt_data_end+0xfffd10e0>
   41e48:	b009883a 	mov	r4,r22
   41e4c:	b80b883a 	mov	r5,r23
   41e50:	d9811e04 	addi	r6,sp,1144
   41e54:	0047b440 	call	47b44 <__sprint_r>
   41e58:	103bbf1e 	bne	r2,zero,40d58 <__alt_data_end+0xfffd0018>
   41e5c:	d8c12017 	ldw	r3,1152(sp)
   41e60:	d8811f17 	ldw	r2,1148(sp)
   41e64:	da000404 	addi	r8,sp,16
   41e68:	003fee06 	br	41e24 <__alt_data_end+0xfffd10e4>
   41e6c:	8888703a 	and	r4,r17,r2
   41e70:	203eab1e 	bne	r4,zero,41920 <__alt_data_end+0xfffd0be0>
   41e74:	dc011f17 	ldw	r16,1148(sp)
   41e78:	db013117 	ldw	r12,1220(sp)
   41e7c:	40800115 	stw	r2,4(r8)
   41e80:	84000044 	addi	r16,r16,1
   41e84:	43000015 	stw	r12,0(r8)
   41e88:	d8c12015 	stw	r3,1152(sp)
   41e8c:	dc011f15 	stw	r16,1148(sp)
   41e90:	008001c4 	movi	r2,7
   41e94:	14000e16 	blt	r2,r16,41ed0 <___vfprintf_internal_r+0x15d4>
   41e98:	44800204 	addi	r18,r8,8
   41e9c:	003ecb06 	br	419cc <__alt_data_end+0xfffd0c8c>
   41ea0:	00800174 	movhi	r2,5
   41ea4:	109e7884 	addi	r2,r2,31202
   41ea8:	d8812c15 	stw	r2,1200(sp)
   41eac:	dac12c17 	ldw	r11,1200(sp)
   41eb0:	1d47883a 	add	r3,r3,r21
   41eb4:	84000044 	addi	r16,r16,1
   41eb8:	92c00015 	stw	r11,0(r18)
   41ebc:	95400115 	stw	r21,4(r18)
   41ec0:	d8c12015 	stw	r3,1152(sp)
   41ec4:	dc011f15 	stw	r16,1148(sp)
   41ec8:	008001c4 	movi	r2,7
   41ecc:	143ebe0e 	bge	r2,r16,419c8 <__alt_data_end+0xfffd0c88>
   41ed0:	b009883a 	mov	r4,r22
   41ed4:	b80b883a 	mov	r5,r23
   41ed8:	d9811e04 	addi	r6,sp,1144
   41edc:	0047b440 	call	47b44 <__sprint_r>
   41ee0:	103b9d1e 	bne	r2,zero,40d58 <__alt_data_end+0xfffd0018>
   41ee4:	d8c12017 	ldw	r3,1152(sp)
   41ee8:	dc011f17 	ldw	r16,1148(sp)
   41eec:	dc800404 	addi	r18,sp,16
   41ef0:	003eb606 	br	419cc <__alt_data_end+0xfffd0c8c>
   41ef4:	b009883a 	mov	r4,r22
   41ef8:	b80b883a 	mov	r5,r23
   41efc:	d9811e04 	addi	r6,sp,1144
   41f00:	0047b440 	call	47b44 <__sprint_r>
   41f04:	103b941e 	bne	r2,zero,40d58 <__alt_data_end+0xfffd0018>
   41f08:	d8c12017 	ldw	r3,1152(sp)
   41f0c:	dc011f17 	ldw	r16,1148(sp)
   41f10:	da000404 	addi	r8,sp,16
   41f14:	003e8d06 	br	4194c <__alt_data_end+0xfffd0c0c>
   41f18:	b009883a 	mov	r4,r22
   41f1c:	b80b883a 	mov	r5,r23
   41f20:	d9811e04 	addi	r6,sp,1144
   41f24:	0047b440 	call	47b44 <__sprint_r>
   41f28:	103b8b1e 	bne	r2,zero,40d58 <__alt_data_end+0xfffd0018>
   41f2c:	d8c12017 	ldw	r3,1152(sp)
   41f30:	dc011f17 	ldw	r16,1148(sp)
   41f34:	dc800404 	addi	r18,sp,16
   41f38:	003e8f06 	br	41978 <__alt_data_end+0xfffd0c38>
   41f3c:	db010e04 	addi	r12,sp,1080
   41f40:	0025883a 	mov	r18,zero
   41f44:	db013115 	stw	r12,1220(sp)
   41f48:	003bfb06 	br	40f38 <__alt_data_end+0xfffd01f8>
   41f4c:	b009883a 	mov	r4,r22
   41f50:	b80b883a 	mov	r5,r23
   41f54:	d9811e04 	addi	r6,sp,1144
   41f58:	0047b440 	call	47b44 <__sprint_r>
   41f5c:	103b7e1e 	bne	r2,zero,40d58 <__alt_data_end+0xfffd0018>
   41f60:	d8c12017 	ldw	r3,1152(sp)
   41f64:	da000404 	addi	r8,sp,16
   41f68:	003c5506 	br	410c0 <__alt_data_end+0xfffd0380>
   41f6c:	04e7c83a 	sub	r19,zero,r19
   41f70:	9804c03a 	cmpne	r2,r19,zero
   41f74:	0739c83a 	sub	fp,zero,fp
   41f78:	e0b9c83a 	sub	fp,fp,r2
   41f7c:	05400b44 	movi	r21,45
   41f80:	dd412785 	stb	r21,1182(sp)
   41f84:	da413215 	stw	r9,1224(sp)
   41f88:	00800044 	movi	r2,1
   41f8c:	9f06b03a 	or	r3,r19,fp
   41f90:	003bcf06 	br	40ed0 <__alt_data_end+0xfffd0190>
   41f94:	da013f15 	stw	r8,1276(sp)
   41f98:	da413e15 	stw	r9,1272(sp)
   41f9c:	00477a00 	call	477a0 <__fpclassifyd>
   41fa0:	da013f17 	ldw	r8,1276(sp)
   41fa4:	da413e17 	ldw	r9,1272(sp)
   41fa8:	1000ce26 	beq	r2,zero,422e4 <___vfprintf_internal_r+0x19e8>
   41fac:	057ff7c4 	movi	r21,-33
   41fb0:	00bfffc4 	movi	r2,-1
   41fb4:	856a703a 	and	r21,r16,r21
   41fb8:	4881f026 	beq	r9,r2,4277c <___vfprintf_internal_r+0x1e80>
   41fbc:	008011c4 	movi	r2,71
   41fc0:	a881e526 	beq	r21,r2,42758 <___vfprintf_internal_r+0x1e5c>
   41fc4:	db013917 	ldw	r12,1252(sp)
   41fc8:	8ac04014 	ori	r11,r17,256
   41fcc:	dac12d15 	stw	r11,1204(sp)
   41fd0:	6001e416 	blt	r12,zero,42764 <___vfprintf_internal_r+0x1e68>
   41fd4:	dc813917 	ldw	r18,1252(sp)
   41fd8:	d8012b05 	stb	zero,1196(sp)
   41fdc:	00801984 	movi	r2,102
   41fe0:	80811826 	beq	r16,r2,42444 <___vfprintf_internal_r+0x1b48>
   41fe4:	00801184 	movi	r2,70
   41fe8:	80811626 	beq	r16,r2,42444 <___vfprintf_internal_r+0x1b48>
   41fec:	00801144 	movi	r2,69
   41ff0:	a881e026 	beq	r21,r2,42774 <___vfprintf_internal_r+0x1e78>
   41ff4:	4839883a 	mov	fp,r9
   41ff8:	d8812604 	addi	r2,sp,1176
   41ffc:	d8800115 	stw	r2,4(sp)
   42000:	d9413717 	ldw	r5,1244(sp)
   42004:	d8812504 	addi	r2,sp,1172
   42008:	d8800215 	stw	r2,8(sp)
   4200c:	d8812104 	addi	r2,sp,1156
   42010:	df000015 	stw	fp,0(sp)
   42014:	d8800315 	stw	r2,12(sp)
   42018:	b009883a 	mov	r4,r22
   4201c:	900d883a 	mov	r6,r18
   42020:	01c00084 	movi	r7,2
   42024:	da013f15 	stw	r8,1276(sp)
   42028:	da413e15 	stw	r9,1272(sp)
   4202c:	0042c4c0 	call	42c4c <_dtoa_r>
   42030:	d8813115 	stw	r2,1220(sp)
   42034:	008019c4 	movi	r2,103
   42038:	da013f17 	ldw	r8,1276(sp)
   4203c:	da413e17 	ldw	r9,1272(sp)
   42040:	80800226 	beq	r16,r2,4204c <___vfprintf_internal_r+0x1750>
   42044:	008011c4 	movi	r2,71
   42048:	8081101e 	bne	r16,r2,4248c <___vfprintf_internal_r+0x1b90>
   4204c:	8880004c 	andi	r2,r17,1
   42050:	1001df26 	beq	r2,zero,427d0 <___vfprintf_internal_r+0x1ed4>
   42054:	db013117 	ldw	r12,1220(sp)
   42058:	6715883a 	add	r10,r12,fp
   4205c:	d9013717 	ldw	r4,1244(sp)
   42060:	900b883a 	mov	r5,r18
   42064:	000d883a 	mov	r6,zero
   42068:	000f883a 	mov	r7,zero
   4206c:	da013f15 	stw	r8,1276(sp)
   42070:	da413e15 	stw	r9,1272(sp)
   42074:	da813d15 	stw	r10,1268(sp)
   42078:	004b4cc0 	call	4b4cc <__eqdf2>
   4207c:	da013f17 	ldw	r8,1276(sp)
   42080:	da413e17 	ldw	r9,1272(sp)
   42084:	da813d17 	ldw	r10,1268(sp)
   42088:	10016526 	beq	r2,zero,42620 <___vfprintf_internal_r+0x1d24>
   4208c:	d8812117 	ldw	r2,1156(sp)
   42090:	1280062e 	bgeu	r2,r10,420ac <___vfprintf_internal_r+0x17b0>
   42094:	01000c04 	movi	r4,48
   42098:	10c00044 	addi	r3,r2,1
   4209c:	d8c12115 	stw	r3,1156(sp)
   420a0:	11000005 	stb	r4,0(r2)
   420a4:	d8812117 	ldw	r2,1156(sp)
   420a8:	12bffb36 	bltu	r2,r10,42098 <__alt_data_end+0xfffd1358>
   420ac:	db013117 	ldw	r12,1220(sp)
   420b0:	1305c83a 	sub	r2,r2,r12
   420b4:	d8813315 	stw	r2,1228(sp)
   420b8:	008011c4 	movi	r2,71
   420bc:	a8814a26 	beq	r21,r2,425e8 <___vfprintf_internal_r+0x1cec>
   420c0:	00801944 	movi	r2,101
   420c4:	14020a0e 	bge	r2,r16,428f0 <___vfprintf_internal_r+0x1ff4>
   420c8:	00801984 	movi	r2,102
   420cc:	8081b626 	beq	r16,r2,427a8 <___vfprintf_internal_r+0x1eac>
   420d0:	db012617 	ldw	r12,1176(sp)
   420d4:	db013415 	stw	r12,1232(sp)
   420d8:	db013417 	ldw	r12,1232(sp)
   420dc:	dac13317 	ldw	r11,1228(sp)
   420e0:	62c1a816 	blt	r12,r11,42784 <___vfprintf_internal_r+0x1e88>
   420e4:	8c40004c 	andi	r17,r17,1
   420e8:	8801ca1e 	bne	r17,zero,42814 <___vfprintf_internal_r+0x1f18>
   420ec:	6005883a 	mov	r2,r12
   420f0:	6001b516 	blt	r12,zero,427c8 <___vfprintf_internal_r+0x1ecc>
   420f4:	dc813417 	ldw	r18,1232(sp)
   420f8:	df012b07 	ldb	fp,1196(sp)
   420fc:	e001321e 	bne	fp,zero,425c8 <___vfprintf_internal_r+0x1ccc>
   42100:	dc412d17 	ldw	r17,1204(sp)
   42104:	dd412783 	ldbu	r21,1182(sp)
   42108:	d8812b15 	stw	r2,1196(sp)
   4210c:	dcc12d15 	stw	r19,1204(sp)
   42110:	d8013215 	stw	zero,1224(sp)
   42114:	003b8d06 	br	40f4c <__alt_data_end+0xfffd020c>
   42118:	88c0100c 	andi	r3,r17,64
   4211c:	18008226 	beq	r3,zero,42328 <___vfprintf_internal_r+0x1a2c>
   42120:	dac12d17 	ldw	r11,1204(sp)
   42124:	14c0000b 	ldhu	r19,0(r2)
   42128:	0039883a 	mov	fp,zero
   4212c:	5ac00104 	addi	r11,r11,4
   42130:	dac12d15 	stw	r11,1204(sp)
   42134:	003c8f06 	br	41374 <__alt_data_end+0xfffd0634>
   42138:	1c000007 	ldb	r16,0(r3)
   4213c:	1805883a 	mov	r2,r3
   42140:	003a5506 	br	40a98 <__alt_data_end+0xfffcfd58>
   42144:	00800084 	movi	r2,2
   42148:	003b5e06 	br	40ec4 <__alt_data_end+0xfffd0184>
   4214c:	8880040c 	andi	r2,r17,16
   42150:	1000091e 	bne	r2,zero,42178 <___vfprintf_internal_r+0x187c>
   42154:	8c40100c 	andi	r17,r17,64
   42158:	88000726 	beq	r17,zero,42178 <___vfprintf_internal_r+0x187c>
   4215c:	db012d17 	ldw	r12,1204(sp)
   42160:	dac12f17 	ldw	r11,1212(sp)
   42164:	60800017 	ldw	r2,0(r12)
   42168:	63000104 	addi	r12,r12,4
   4216c:	db012d15 	stw	r12,1204(sp)
   42170:	12c0000d 	sth	r11,0(r2)
   42174:	003a1e06 	br	409f0 <__alt_data_end+0xfffcfcb0>
   42178:	db012d17 	ldw	r12,1204(sp)
   4217c:	dac12f17 	ldw	r11,1212(sp)
   42180:	60800017 	ldw	r2,0(r12)
   42184:	63000104 	addi	r12,r12,4
   42188:	db012d15 	stw	r12,1204(sp)
   4218c:	12c00015 	stw	r11,0(r2)
   42190:	003a1706 	br	409f0 <__alt_data_end+0xfffcfcb0>
   42194:	01000174 	movhi	r4,5
   42198:	211e7884 	addi	r4,r4,31202
   4219c:	d9012c15 	stw	r4,1200(sp)
   421a0:	dac12c17 	ldw	r11,1200(sp)
   421a4:	1c87883a 	add	r3,r3,r18
   421a8:	10800044 	addi	r2,r2,1
   421ac:	42c00015 	stw	r11,0(r8)
   421b0:	44800115 	stw	r18,4(r8)
   421b4:	d8c12015 	stw	r3,1152(sp)
   421b8:	d8811f15 	stw	r2,1148(sp)
   421bc:	010001c4 	movi	r4,7
   421c0:	20bee016 	blt	r4,r2,41d44 <__alt_data_end+0xfffd1004>
   421c4:	42000204 	addi	r8,r8,8
   421c8:	003ee506 	br	41d60 <__alt_data_end+0xfffd1020>
   421cc:	01000174 	movhi	r4,5
   421d0:	211e7884 	addi	r4,r4,31202
   421d4:	d9012c15 	stw	r4,1200(sp)
   421d8:	003bd806 	br	4113c <__alt_data_end+0xfffd03fc>
   421dc:	b009883a 	mov	r4,r22
   421e0:	b80b883a 	mov	r5,r23
   421e4:	d9811e04 	addi	r6,sp,1144
   421e8:	0047b440 	call	47b44 <__sprint_r>
   421ec:	103ada1e 	bne	r2,zero,40d58 <__alt_data_end+0xfffd0018>
   421f0:	d8c12017 	ldw	r3,1152(sp)
   421f4:	da000404 	addi	r8,sp,16
   421f8:	003d6b06 	br	417a8 <__alt_data_end+0xfffd0a68>
   421fc:	d8811f17 	ldw	r2,1148(sp)
   42200:	03000174 	movhi	r12,5
   42204:	01000044 	movi	r4,1
   42208:	18c00044 	addi	r3,r3,1
   4220c:	10800044 	addi	r2,r2,1
   42210:	631e7804 	addi	r12,r12,31200
   42214:	41000115 	stw	r4,4(r8)
   42218:	43000015 	stw	r12,0(r8)
   4221c:	d8c12015 	stw	r3,1152(sp)
   42220:	d8811f15 	stw	r2,1148(sp)
   42224:	010001c4 	movi	r4,7
   42228:	20804916 	blt	r4,r2,42350 <___vfprintf_internal_r+0x1a54>
   4222c:	42000204 	addi	r8,r8,8
   42230:	8000041e 	bne	r16,zero,42244 <___vfprintf_internal_r+0x1948>
   42234:	dac13317 	ldw	r11,1228(sp)
   42238:	5800021e 	bne	r11,zero,42244 <___vfprintf_internal_r+0x1948>
   4223c:	8880004c 	andi	r2,r17,1
   42240:	103bd526 	beq	r2,zero,41198 <__alt_data_end+0xfffd0458>
   42244:	db013817 	ldw	r12,1248(sp)
   42248:	d8811f17 	ldw	r2,1148(sp)
   4224c:	dac13517 	ldw	r11,1236(sp)
   42250:	1b07883a 	add	r3,r3,r12
   42254:	10800044 	addi	r2,r2,1
   42258:	42c00015 	stw	r11,0(r8)
   4225c:	43000115 	stw	r12,4(r8)
   42260:	d8c12015 	stw	r3,1152(sp)
   42264:	d8811f15 	stw	r2,1148(sp)
   42268:	010001c4 	movi	r4,7
   4226c:	20813016 	blt	r4,r2,42730 <___vfprintf_internal_r+0x1e34>
   42270:	42000204 	addi	r8,r8,8
   42274:	0421c83a 	sub	r16,zero,r16
   42278:	0400630e 	bge	zero,r16,42408 <___vfprintf_internal_r+0x1b0c>
   4227c:	04800404 	movi	r18,16
   42280:	94009f0e 	bge	r18,r16,42500 <___vfprintf_internal_r+0x1c04>
   42284:	01000174 	movhi	r4,5
   42288:	211e7884 	addi	r4,r4,31202
   4228c:	d9012c15 	stw	r4,1200(sp)
   42290:	054001c4 	movi	r21,7
   42294:	00000306 	br	422a4 <___vfprintf_internal_r+0x19a8>
   42298:	42000204 	addi	r8,r8,8
   4229c:	843ffc04 	addi	r16,r16,-16
   422a0:	94009a0e 	bge	r18,r16,4250c <___vfprintf_internal_r+0x1c10>
   422a4:	18c00404 	addi	r3,r3,16
   422a8:	10800044 	addi	r2,r2,1
   422ac:	45000015 	stw	r20,0(r8)
   422b0:	44800115 	stw	r18,4(r8)
   422b4:	d8c12015 	stw	r3,1152(sp)
   422b8:	d8811f15 	stw	r2,1148(sp)
   422bc:	a8bff60e 	bge	r21,r2,42298 <__alt_data_end+0xfffd1558>
   422c0:	b009883a 	mov	r4,r22
   422c4:	b80b883a 	mov	r5,r23
   422c8:	d9811e04 	addi	r6,sp,1144
   422cc:	0047b440 	call	47b44 <__sprint_r>
   422d0:	103aa11e 	bne	r2,zero,40d58 <__alt_data_end+0xfffd0018>
   422d4:	d8c12017 	ldw	r3,1152(sp)
   422d8:	d8811f17 	ldw	r2,1148(sp)
   422dc:	da000404 	addi	r8,sp,16
   422e0:	003fee06 	br	4229c <__alt_data_end+0xfffd155c>
   422e4:	008011c4 	movi	r2,71
   422e8:	1400b316 	blt	r2,r16,425b8 <___vfprintf_internal_r+0x1cbc>
   422ec:	03000174 	movhi	r12,5
   422f0:	631e6a04 	addi	r12,r12,31144
   422f4:	db013115 	stw	r12,1220(sp)
   422f8:	00c000c4 	movi	r3,3
   422fc:	00bfdfc4 	movi	r2,-129
   42300:	d8c12b15 	stw	r3,1196(sp)
   42304:	88a2703a 	and	r17,r17,r2
   42308:	dd412783 	ldbu	r21,1182(sp)
   4230c:	dcc12d15 	stw	r19,1204(sp)
   42310:	1825883a 	mov	r18,r3
   42314:	d8013215 	stw	zero,1224(sp)
   42318:	d8013415 	stw	zero,1232(sp)
   4231c:	003b0b06 	br	40f4c <__alt_data_end+0xfffd020c>
   42320:	4825883a 	mov	r18,r9
   42324:	003cba06 	br	41610 <__alt_data_end+0xfffd08d0>
   42328:	db012d17 	ldw	r12,1204(sp)
   4232c:	14c00017 	ldw	r19,0(r2)
   42330:	0039883a 	mov	fp,zero
   42334:	63000104 	addi	r12,r12,4
   42338:	db012d15 	stw	r12,1204(sp)
   4233c:	003c0d06 	br	41374 <__alt_data_end+0xfffd0634>
   42340:	00800174 	movhi	r2,5
   42344:	109e6804 	addi	r2,r2,31136
   42348:	d8813115 	stw	r2,1220(sp)
   4234c:	003ac406 	br	40e60 <__alt_data_end+0xfffd0120>
   42350:	b009883a 	mov	r4,r22
   42354:	b80b883a 	mov	r5,r23
   42358:	d9811e04 	addi	r6,sp,1144
   4235c:	0047b440 	call	47b44 <__sprint_r>
   42360:	103a7d1e 	bne	r2,zero,40d58 <__alt_data_end+0xfffd0018>
   42364:	dc012617 	ldw	r16,1176(sp)
   42368:	d8c12017 	ldw	r3,1152(sp)
   4236c:	da000404 	addi	r8,sp,16
   42370:	003faf06 	br	42230 <__alt_data_end+0xfffd14f0>
   42374:	db012e17 	ldw	r12,1208(sp)
   42378:	1805883a 	mov	r2,r3
   4237c:	dac12d15 	stw	r11,1204(sp)
   42380:	0319c83a 	sub	r12,zero,r12
   42384:	db012e15 	stw	r12,1208(sp)
   42388:	003a7e06 	br	40d84 <__alt_data_end+0xfffd0044>
   4238c:	18800044 	addi	r2,r3,1
   42390:	8c400814 	ori	r17,r17,32
   42394:	1c000047 	ldb	r16,1(r3)
   42398:	0039bf06 	br	40a98 <__alt_data_end+0xfffcfd58>
   4239c:	b009883a 	mov	r4,r22
   423a0:	b80b883a 	mov	r5,r23
   423a4:	d9811e04 	addi	r6,sp,1144
   423a8:	0047b440 	call	47b44 <__sprint_r>
   423ac:	103a6a1e 	bne	r2,zero,40d58 <__alt_data_end+0xfffd0018>
   423b0:	d8c12017 	ldw	r3,1152(sp)
   423b4:	da000404 	addi	r8,sp,16
   423b8:	003d0c06 	br	417ec <__alt_data_end+0xfffd0aac>
   423bc:	db012817 	ldw	r12,1184(sp)
   423c0:	d8c13117 	ldw	r3,1220(sp)
   423c4:	60e5c83a 	sub	r18,r12,r3
   423c8:	003adb06 	br	40f38 <__alt_data_end+0xfffd01f8>
   423cc:	da013f15 	stw	r8,1276(sp)
   423d0:	00408640 	call	40864 <strlen>
   423d4:	1025883a 	mov	r18,r2
   423d8:	da013f17 	ldw	r8,1276(sp)
   423dc:	903c8e0e 	bge	r18,zero,41618 <__alt_data_end+0xfffd08d8>
   423e0:	0005883a 	mov	r2,zero
   423e4:	003c8c06 	br	41618 <__alt_data_end+0xfffd08d8>
   423e8:	b009883a 	mov	r4,r22
   423ec:	b80b883a 	mov	r5,r23
   423f0:	d9811e04 	addi	r6,sp,1144
   423f4:	0047b440 	call	47b44 <__sprint_r>
   423f8:	103a571e 	bne	r2,zero,40d58 <__alt_data_end+0xfffd0018>
   423fc:	d8c12017 	ldw	r3,1152(sp)
   42400:	d8811f17 	ldw	r2,1148(sp)
   42404:	da000404 	addi	r8,sp,16
   42408:	db013317 	ldw	r12,1228(sp)
   4240c:	dac13117 	ldw	r11,1220(sp)
   42410:	10800044 	addi	r2,r2,1
   42414:	60c7883a 	add	r3,r12,r3
   42418:	42c00015 	stw	r11,0(r8)
   4241c:	43000115 	stw	r12,4(r8)
   42420:	d8c12015 	stw	r3,1152(sp)
   42424:	d8811f15 	stw	r2,1148(sp)
   42428:	010001c4 	movi	r4,7
   4242c:	20bb590e 	bge	r4,r2,41194 <__alt_data_end+0xfffd0454>
   42430:	003d7e06 	br	41a2c <__alt_data_end+0xfffd0cec>
   42434:	01000174 	movhi	r4,5
   42438:	211e7c84 	addi	r4,r4,31218
   4243c:	d9013615 	stw	r4,1240(sp)
   42440:	003af606 	br	4101c <__alt_data_end+0xfffd02dc>
   42444:	d8812604 	addi	r2,sp,1176
   42448:	d8800115 	stw	r2,4(sp)
   4244c:	d9413717 	ldw	r5,1244(sp)
   42450:	d8812504 	addi	r2,sp,1172
   42454:	d8800215 	stw	r2,8(sp)
   42458:	d8812104 	addi	r2,sp,1156
   4245c:	da400015 	stw	r9,0(sp)
   42460:	d8800315 	stw	r2,12(sp)
   42464:	b009883a 	mov	r4,r22
   42468:	900d883a 	mov	r6,r18
   4246c:	01c000c4 	movi	r7,3
   42470:	da013f15 	stw	r8,1276(sp)
   42474:	da413e15 	stw	r9,1272(sp)
   42478:	0042c4c0 	call	42c4c <_dtoa_r>
   4247c:	da413e17 	ldw	r9,1272(sp)
   42480:	da013f17 	ldw	r8,1276(sp)
   42484:	d8813115 	stw	r2,1220(sp)
   42488:	4839883a 	mov	fp,r9
   4248c:	dac13117 	ldw	r11,1220(sp)
   42490:	00801184 	movi	r2,70
   42494:	5f15883a 	add	r10,r11,fp
   42498:	a8bef01e 	bne	r21,r2,4205c <__alt_data_end+0xfffd131c>
   4249c:	59000007 	ldb	r4,0(r11)
   424a0:	00800c04 	movi	r2,48
   424a4:	2080e026 	beq	r4,r2,42828 <___vfprintf_internal_r+0x1f2c>
   424a8:	d8c12617 	ldw	r3,1176(sp)
   424ac:	50d5883a 	add	r10,r10,r3
   424b0:	003eea06 	br	4205c <__alt_data_end+0xfffd131c>
   424b4:	0025883a 	mov	r18,zero
   424b8:	003db306 	br	41b88 <__alt_data_end+0xfffd0e48>
   424bc:	b009883a 	mov	r4,r22
   424c0:	b80b883a 	mov	r5,r23
   424c4:	d9811e04 	addi	r6,sp,1144
   424c8:	0047b440 	call	47b44 <__sprint_r>
   424cc:	103a221e 	bne	r2,zero,40d58 <__alt_data_end+0xfffd0018>
   424d0:	d8c12017 	ldw	r3,1152(sp)
   424d4:	da000404 	addi	r8,sp,16
   424d8:	003daa06 	br	41b84 <__alt_data_end+0xfffd0e44>
   424dc:	b009883a 	mov	r4,r22
   424e0:	b80b883a 	mov	r5,r23
   424e4:	d9811e04 	addi	r6,sp,1144
   424e8:	0047b440 	call	47b44 <__sprint_r>
   424ec:	103a1a1e 	bne	r2,zero,40d58 <__alt_data_end+0xfffd0018>
   424f0:	d8812617 	ldw	r2,1176(sp)
   424f4:	d8c12017 	ldw	r3,1152(sp)
   424f8:	da000404 	addi	r8,sp,16
   424fc:	003e2c06 	br	41db0 <__alt_data_end+0xfffd1070>
   42500:	03000174 	movhi	r12,5
   42504:	631e7884 	addi	r12,r12,31202
   42508:	db012c15 	stw	r12,1200(sp)
   4250c:	dac12c17 	ldw	r11,1200(sp)
   42510:	1c07883a 	add	r3,r3,r16
   42514:	10800044 	addi	r2,r2,1
   42518:	42c00015 	stw	r11,0(r8)
   4251c:	44000115 	stw	r16,4(r8)
   42520:	d8c12015 	stw	r3,1152(sp)
   42524:	d8811f15 	stw	r2,1148(sp)
   42528:	010001c4 	movi	r4,7
   4252c:	20bfae16 	blt	r4,r2,423e8 <__alt_data_end+0xfffd16a8>
   42530:	42000204 	addi	r8,r8,8
   42534:	003fb406 	br	42408 <__alt_data_end+0xfffd16c8>
   42538:	03000174 	movhi	r12,5
   4253c:	631e7c84 	addi	r12,r12,31218
   42540:	db013615 	stw	r12,1240(sp)
   42544:	003b3806 	br	41228 <__alt_data_end+0xfffd04e8>
   42548:	b009883a 	mov	r4,r22
   4254c:	b80b883a 	mov	r5,r23
   42550:	d9811e04 	addi	r6,sp,1144
   42554:	0047b440 	call	47b44 <__sprint_r>
   42558:	1039ff1e 	bne	r2,zero,40d58 <__alt_data_end+0xfffd0018>
   4255c:	d8812617 	ldw	r2,1176(sp)
   42560:	db013317 	ldw	r12,1228(sp)
   42564:	d8c12017 	ldw	r3,1152(sp)
   42568:	da000404 	addi	r8,sp,16
   4256c:	6085c83a 	sub	r2,r12,r2
   42570:	003e2006 	br	41df4 <__alt_data_end+0xfffd10b4>
   42574:	0021883a 	mov	r16,zero
   42578:	003e1f06 	br	41df8 <__alt_data_end+0xfffd10b8>
   4257c:	00800184 	movi	r2,6
   42580:	1240012e 	bgeu	r2,r9,42588 <___vfprintf_internal_r+0x1c8c>
   42584:	1013883a 	mov	r9,r2
   42588:	4825883a 	mov	r18,r9
   4258c:	4805883a 	mov	r2,r9
   42590:	48009e16 	blt	r9,zero,4280c <___vfprintf_internal_r+0x1f10>
   42594:	d8812b15 	stw	r2,1196(sp)
   42598:	00800174 	movhi	r2,5
   4259c:	109e7604 	addi	r2,r2,31192
   425a0:	d8813115 	stw	r2,1220(sp)
   425a4:	dcc12d15 	stw	r19,1204(sp)
   425a8:	d8013215 	stw	zero,1224(sp)
   425ac:	d8013415 	stw	zero,1232(sp)
   425b0:	0005883a 	mov	r2,zero
   425b4:	003a6c06 	br	40f68 <__alt_data_end+0xfffd0228>
   425b8:	00800174 	movhi	r2,5
   425bc:	109e6b04 	addi	r2,r2,31148
   425c0:	d8813115 	stw	r2,1220(sp)
   425c4:	003f4c06 	br	422f8 <__alt_data_end+0xfffd15b8>
   425c8:	00c00b44 	movi	r3,45
   425cc:	d8812b15 	stw	r2,1196(sp)
   425d0:	dc412d17 	ldw	r17,1204(sp)
   425d4:	d8c12785 	stb	r3,1182(sp)
   425d8:	dcc12d15 	stw	r19,1204(sp)
   425dc:	d8013215 	stw	zero,1224(sp)
   425e0:	00800b44 	movi	r2,45
   425e4:	003a5d06 	br	40f5c <__alt_data_end+0xfffd021c>
   425e8:	d8c12617 	ldw	r3,1176(sp)
   425ec:	00bfff44 	movi	r2,-3
   425f0:	18800d16 	blt	r3,r2,42628 <___vfprintf_internal_r+0x1d2c>
   425f4:	48c00c16 	blt	r9,r3,42628 <___vfprintf_internal_r+0x1d2c>
   425f8:	d8c13415 	stw	r3,1232(sp)
   425fc:	040019c4 	movi	r16,103
   42600:	003eb506 	br	420d8 <__alt_data_end+0xfffd1398>
   42604:	05400b44 	movi	r21,45
   42608:	dd412785 	stb	r21,1182(sp)
   4260c:	003a0f06 	br	40e4c <__alt_data_end+0xfffd010c>
   42610:	01000174 	movhi	r4,5
   42614:	211e7884 	addi	r4,r4,31202
   42618:	d9012c15 	stw	r4,1200(sp)
   4261c:	003cb106 	br	418e4 <__alt_data_end+0xfffd0ba4>
   42620:	5005883a 	mov	r2,r10
   42624:	003ea106 	br	420ac <__alt_data_end+0xfffd136c>
   42628:	843fff84 	addi	r16,r16,-2
   4262c:	1f3fffc4 	addi	fp,r3,-1
   42630:	df012615 	stw	fp,1176(sp)
   42634:	dc0122c5 	stb	r16,1163(sp)
   42638:	e0009516 	blt	fp,zero,42890 <___vfprintf_internal_r+0x1f94>
   4263c:	00800ac4 	movi	r2,43
   42640:	d8812305 	stb	r2,1164(sp)
   42644:	00800244 	movi	r2,9
   42648:	1700690e 	bge	r2,fp,427f0 <___vfprintf_internal_r+0x1ef4>
   4264c:	dd4122c4 	addi	r21,sp,1163
   42650:	dc012c15 	stw	r16,1200(sp)
   42654:	8825883a 	mov	r18,r17
   42658:	a821883a 	mov	r16,r21
   4265c:	4023883a 	mov	r17,r8
   42660:	e009883a 	mov	r4,fp
   42664:	01400284 	movi	r5,10
   42668:	00406c40 	call	406c4 <__modsi3>
   4266c:	10800c04 	addi	r2,r2,48
   42670:	843fffc4 	addi	r16,r16,-1
   42674:	e009883a 	mov	r4,fp
   42678:	01400284 	movi	r5,10
   4267c:	80800005 	stb	r2,0(r16)
   42680:	00406700 	call	40670 <__divsi3>
   42684:	1039883a 	mov	fp,r2
   42688:	00800244 	movi	r2,9
   4268c:	173ff416 	blt	r2,fp,42660 <__alt_data_end+0xfffd1920>
   42690:	8811883a 	mov	r8,r17
   42694:	e0800c04 	addi	r2,fp,48
   42698:	9023883a 	mov	r17,r18
   4269c:	8025883a 	mov	r18,r16
   426a0:	913fffc4 	addi	r4,r18,-1
   426a4:	90bfffc5 	stb	r2,-1(r18)
   426a8:	dc012c17 	ldw	r16,1200(sp)
   426ac:	25408e2e 	bgeu	r4,r21,428e8 <___vfprintf_internal_r+0x1fec>
   426b0:	d9412384 	addi	r5,sp,1166
   426b4:	2c8bc83a 	sub	r5,r5,r18
   426b8:	d8c12344 	addi	r3,sp,1165
   426bc:	a94b883a 	add	r5,r21,r5
   426c0:	00000106 	br	426c8 <___vfprintf_internal_r+0x1dcc>
   426c4:	20800003 	ldbu	r2,0(r4)
   426c8:	18800005 	stb	r2,0(r3)
   426cc:	18c00044 	addi	r3,r3,1
   426d0:	21000044 	addi	r4,r4,1
   426d4:	197ffb1e 	bne	r3,r5,426c4 <__alt_data_end+0xfffd1984>
   426d8:	d8812304 	addi	r2,sp,1164
   426dc:	1485c83a 	sub	r2,r2,r18
   426e0:	d8c12344 	addi	r3,sp,1165
   426e4:	1885883a 	add	r2,r3,r2
   426e8:	dac13317 	ldw	r11,1228(sp)
   426ec:	156bc83a 	sub	r21,r2,r21
   426f0:	dd413a15 	stw	r21,1256(sp)
   426f4:	00800044 	movi	r2,1
   426f8:	5d65883a 	add	r18,r11,r21
   426fc:	12c0770e 	bge	r2,r11,428dc <___vfprintf_internal_r+0x1fe0>
   42700:	94800044 	addi	r18,r18,1
   42704:	9005883a 	mov	r2,r18
   42708:	90007216 	blt	r18,zero,428d4 <___vfprintf_internal_r+0x1fd8>
   4270c:	d8013415 	stw	zero,1232(sp)
   42710:	003e7906 	br	420f8 <__alt_data_end+0xfffd13b8>
   42714:	da412b15 	stw	r9,1196(sp)
   42718:	dd412783 	ldbu	r21,1182(sp)
   4271c:	4825883a 	mov	r18,r9
   42720:	dcc12d15 	stw	r19,1204(sp)
   42724:	d8013215 	stw	zero,1224(sp)
   42728:	d8013415 	stw	zero,1232(sp)
   4272c:	003a0706 	br	40f4c <__alt_data_end+0xfffd020c>
   42730:	b009883a 	mov	r4,r22
   42734:	b80b883a 	mov	r5,r23
   42738:	d9811e04 	addi	r6,sp,1144
   4273c:	0047b440 	call	47b44 <__sprint_r>
   42740:	1039851e 	bne	r2,zero,40d58 <__alt_data_end+0xfffd0018>
   42744:	dc012617 	ldw	r16,1176(sp)
   42748:	d8c12017 	ldw	r3,1152(sp)
   4274c:	d8811f17 	ldw	r2,1148(sp)
   42750:	da000404 	addi	r8,sp,16
   42754:	003ec706 	br	42274 <__alt_data_end+0xfffd1534>
   42758:	483e1a1e 	bne	r9,zero,41fc4 <__alt_data_end+0xfffd1284>
   4275c:	9013883a 	mov	r9,r18
   42760:	003e1806 	br	41fc4 <__alt_data_end+0xfffd1284>
   42764:	00c00b44 	movi	r3,45
   42768:	64a0003c 	xorhi	r18,r12,32768
   4276c:	d8c12b05 	stb	r3,1196(sp)
   42770:	003e1a06 	br	41fdc <__alt_data_end+0xfffd129c>
   42774:	4f000044 	addi	fp,r9,1
   42778:	003e1f06 	br	41ff8 <__alt_data_end+0xfffd12b8>
   4277c:	02400184 	movi	r9,6
   42780:	003e1006 	br	41fc4 <__alt_data_end+0xfffd1284>
   42784:	d8c13417 	ldw	r3,1232(sp)
   42788:	00c04b0e 	bge	zero,r3,428b8 <___vfprintf_internal_r+0x1fbc>
   4278c:	04800044 	movi	r18,1
   42790:	dac13317 	ldw	r11,1228(sp)
   42794:	92e5883a 	add	r18,r18,r11
   42798:	9005883a 	mov	r2,r18
   4279c:	903e560e 	bge	r18,zero,420f8 <__alt_data_end+0xfffd13b8>
   427a0:	0005883a 	mov	r2,zero
   427a4:	003e5406 	br	420f8 <__alt_data_end+0xfffd13b8>
   427a8:	d8c12617 	ldw	r3,1176(sp)
   427ac:	d8c13415 	stw	r3,1232(sp)
   427b0:	00c03b0e 	bge	zero,r3,428a0 <___vfprintf_internal_r+0x1fa4>
   427b4:	4800081e 	bne	r9,zero,427d8 <___vfprintf_internal_r+0x1edc>
   427b8:	8c40004c 	andi	r17,r17,1
   427bc:	8800061e 	bne	r17,zero,427d8 <___vfprintf_internal_r+0x1edc>
   427c0:	1805883a 	mov	r2,r3
   427c4:	183e4b0e 	bge	r3,zero,420f4 <__alt_data_end+0xfffd13b4>
   427c8:	0005883a 	mov	r2,zero
   427cc:	003e4906 	br	420f4 <__alt_data_end+0xfffd13b4>
   427d0:	d8812117 	ldw	r2,1156(sp)
   427d4:	003e3506 	br	420ac <__alt_data_end+0xfffd136c>
   427d8:	dac13417 	ldw	r11,1232(sp)
   427dc:	4a400044 	addi	r9,r9,1
   427e0:	5a65883a 	add	r18,r11,r9
   427e4:	9005883a 	mov	r2,r18
   427e8:	903e430e 	bge	r18,zero,420f8 <__alt_data_end+0xfffd13b8>
   427ec:	003fec06 	br	427a0 <__alt_data_end+0xfffd1a60>
   427f0:	00800c04 	movi	r2,48
   427f4:	e0c00c04 	addi	r3,fp,48
   427f8:	d8812345 	stb	r2,1165(sp)
   427fc:	d8c12385 	stb	r3,1166(sp)
   42800:	d88123c4 	addi	r2,sp,1167
   42804:	dd4122c4 	addi	r21,sp,1163
   42808:	003fb706 	br	426e8 <__alt_data_end+0xfffd19a8>
   4280c:	0005883a 	mov	r2,zero
   42810:	003f6006 	br	42594 <__alt_data_end+0xfffd1854>
   42814:	db013417 	ldw	r12,1232(sp)
   42818:	64800044 	addi	r18,r12,1
   4281c:	9005883a 	mov	r2,r18
   42820:	903e350e 	bge	r18,zero,420f8 <__alt_data_end+0xfffd13b8>
   42824:	003fde06 	br	427a0 <__alt_data_end+0xfffd1a60>
   42828:	d9013717 	ldw	r4,1244(sp)
   4282c:	900b883a 	mov	r5,r18
   42830:	000d883a 	mov	r6,zero
   42834:	000f883a 	mov	r7,zero
   42838:	da013f15 	stw	r8,1276(sp)
   4283c:	da413e15 	stw	r9,1272(sp)
   42840:	da813d15 	stw	r10,1268(sp)
   42844:	004b4cc0 	call	4b4cc <__eqdf2>
   42848:	da013f17 	ldw	r8,1276(sp)
   4284c:	da413e17 	ldw	r9,1272(sp)
   42850:	da813d17 	ldw	r10,1268(sp)
   42854:	103f1426 	beq	r2,zero,424a8 <__alt_data_end+0xfffd1768>
   42858:	00800044 	movi	r2,1
   4285c:	1707c83a 	sub	r3,r2,fp
   42860:	d8c12615 	stw	r3,1176(sp)
   42864:	003f1106 	br	424ac <__alt_data_end+0xfffd176c>
   42868:	dac12d17 	ldw	r11,1204(sp)
   4286c:	5a400017 	ldw	r9,0(r11)
   42870:	5ac00104 	addi	r11,r11,4
   42874:	dac12d15 	stw	r11,1204(sp)
   42878:	483ec60e 	bge	r9,zero,42394 <__alt_data_end+0xfffd1654>
   4287c:	027fffc4 	movi	r9,-1
   42880:	1c000047 	ldb	r16,1(r3)
   42884:	00388406 	br	40a98 <__alt_data_end+0xfffcfd58>
   42888:	043fffc4 	movi	r16,-1
   4288c:	00391006 	br	40cd0 <__alt_data_end+0xfffcff90>
   42890:	00800b44 	movi	r2,45
   42894:	0739c83a 	sub	fp,zero,fp
   42898:	d8812305 	stb	r2,1164(sp)
   4289c:	003f6906 	br	42644 <__alt_data_end+0xfffd1904>
   428a0:	4800081e 	bne	r9,zero,428c4 <___vfprintf_internal_r+0x1fc8>
   428a4:	8c40004c 	andi	r17,r17,1
   428a8:	8800061e 	bne	r17,zero,428c4 <___vfprintf_internal_r+0x1fc8>
   428ac:	00800044 	movi	r2,1
   428b0:	1025883a 	mov	r18,r2
   428b4:	003e1006 	br	420f8 <__alt_data_end+0xfffd13b8>
   428b8:	04800084 	movi	r18,2
   428bc:	90e5c83a 	sub	r18,r18,r3
   428c0:	003fb306 	br	42790 <__alt_data_end+0xfffd1a50>
   428c4:	4c800084 	addi	r18,r9,2
   428c8:	9005883a 	mov	r2,r18
   428cc:	903e0a0e 	bge	r18,zero,420f8 <__alt_data_end+0xfffd13b8>
   428d0:	003fb306 	br	427a0 <__alt_data_end+0xfffd1a60>
   428d4:	0005883a 	mov	r2,zero
   428d8:	003f8c06 	br	4270c <__alt_data_end+0xfffd19cc>
   428dc:	88a2703a 	and	r17,r17,r2
   428e0:	883f8826 	beq	r17,zero,42704 <__alt_data_end+0xfffd19c4>
   428e4:	003f8606 	br	42700 <__alt_data_end+0xfffd19c0>
   428e8:	d8812344 	addi	r2,sp,1165
   428ec:	003f7e06 	br	426e8 <__alt_data_end+0xfffd19a8>
   428f0:	d8c12617 	ldw	r3,1176(sp)
   428f4:	003f4d06 	br	4262c <__alt_data_end+0xfffd18ec>

000428f8 <__vfprintf_internal>:
   428f8:	2007883a 	mov	r3,r4
   428fc:	010001b4 	movhi	r4,6
   42900:	21262104 	addi	r4,r4,-26492
   42904:	21000017 	ldw	r4,0(r4)
   42908:	2805883a 	mov	r2,r5
   4290c:	300f883a 	mov	r7,r6
   42910:	180b883a 	mov	r5,r3
   42914:	100d883a 	mov	r6,r2
   42918:	00408fc1 	jmpi	408fc <___vfprintf_internal_r>

0004291c <__swsetup_r>:
   4291c:	008001b4 	movhi	r2,6
   42920:	defffd04 	addi	sp,sp,-12
   42924:	10a62104 	addi	r2,r2,-26492
   42928:	dc400115 	stw	r17,4(sp)
   4292c:	2023883a 	mov	r17,r4
   42930:	11000017 	ldw	r4,0(r2)
   42934:	dc000015 	stw	r16,0(sp)
   42938:	dfc00215 	stw	ra,8(sp)
   4293c:	2821883a 	mov	r16,r5
   42940:	20000226 	beq	r4,zero,4294c <__swsetup_r+0x30>
   42944:	20c00e17 	ldw	r3,56(r4)
   42948:	18002e26 	beq	r3,zero,42a04 <__swsetup_r+0xe8>
   4294c:	8080030b 	ldhu	r2,12(r16)
   42950:	10c0020c 	andi	r3,r2,8
   42954:	100d883a 	mov	r6,r2
   42958:	18000f26 	beq	r3,zero,42998 <__swsetup_r+0x7c>
   4295c:	80c00417 	ldw	r3,16(r16)
   42960:	18001526 	beq	r3,zero,429b8 <__swsetup_r+0x9c>
   42964:	1100004c 	andi	r4,r2,1
   42968:	20001c1e 	bne	r4,zero,429dc <__swsetup_r+0xc0>
   4296c:	1080008c 	andi	r2,r2,2
   42970:	1000261e 	bne	r2,zero,42a0c <__swsetup_r+0xf0>
   42974:	80800517 	ldw	r2,20(r16)
   42978:	80800215 	stw	r2,8(r16)
   4297c:	18001c26 	beq	r3,zero,429f0 <__swsetup_r+0xd4>
   42980:	0005883a 	mov	r2,zero
   42984:	dfc00217 	ldw	ra,8(sp)
   42988:	dc400117 	ldw	r17,4(sp)
   4298c:	dc000017 	ldw	r16,0(sp)
   42990:	dec00304 	addi	sp,sp,12
   42994:	f800283a 	ret
   42998:	3080040c 	andi	r2,r6,16
   4299c:	10001726 	beq	r2,zero,429fc <__swsetup_r+0xe0>
   429a0:	3080010c 	andi	r2,r6,4
   429a4:	10001b1e 	bne	r2,zero,42a14 <__swsetup_r+0xf8>
   429a8:	80c00417 	ldw	r3,16(r16)
   429ac:	30800214 	ori	r2,r6,8
   429b0:	8080030d 	sth	r2,12(r16)
   429b4:	183feb1e 	bne	r3,zero,42964 <__alt_data_end+0xfffd1c24>
   429b8:	1140a00c 	andi	r5,r2,640
   429bc:	01008004 	movi	r4,512
   429c0:	293fe826 	beq	r5,r4,42964 <__alt_data_end+0xfffd1c24>
   429c4:	8809883a 	mov	r4,r17
   429c8:	800b883a 	mov	r5,r16
   429cc:	00454740 	call	45474 <__smakebuf_r>
   429d0:	8080030b 	ldhu	r2,12(r16)
   429d4:	80c00417 	ldw	r3,16(r16)
   429d8:	003fe206 	br	42964 <__alt_data_end+0xfffd1c24>
   429dc:	80800517 	ldw	r2,20(r16)
   429e0:	80000215 	stw	zero,8(r16)
   429e4:	0085c83a 	sub	r2,zero,r2
   429e8:	80800615 	stw	r2,24(r16)
   429ec:	183fe41e 	bne	r3,zero,42980 <__alt_data_end+0xfffd1c40>
   429f0:	8080030b 	ldhu	r2,12(r16)
   429f4:	1080200c 	andi	r2,r2,128
   429f8:	103fe226 	beq	r2,zero,42984 <__alt_data_end+0xfffd1c44>
   429fc:	00bfffc4 	movi	r2,-1
   42a00:	003fe006 	br	42984 <__alt_data_end+0xfffd1c44>
   42a04:	004491c0 	call	4491c <__sinit>
   42a08:	003fd006 	br	4294c <__alt_data_end+0xfffd1c0c>
   42a0c:	0005883a 	mov	r2,zero
   42a10:	003fd906 	br	42978 <__alt_data_end+0xfffd1c38>
   42a14:	81400c17 	ldw	r5,48(r16)
   42a18:	28000626 	beq	r5,zero,42a34 <__swsetup_r+0x118>
   42a1c:	80801004 	addi	r2,r16,64
   42a20:	28800326 	beq	r5,r2,42a30 <__swsetup_r+0x114>
   42a24:	8809883a 	mov	r4,r17
   42a28:	0044a900 	call	44a90 <_free_r>
   42a2c:	8180030b 	ldhu	r6,12(r16)
   42a30:	80000c15 	stw	zero,48(r16)
   42a34:	80c00417 	ldw	r3,16(r16)
   42a38:	00bff6c4 	movi	r2,-37
   42a3c:	118c703a 	and	r6,r2,r6
   42a40:	80000115 	stw	zero,4(r16)
   42a44:	80c00015 	stw	r3,0(r16)
   42a48:	003fd806 	br	429ac <__alt_data_end+0xfffd1c6c>

00042a4c <quorem>:
   42a4c:	defff704 	addi	sp,sp,-36
   42a50:	dc800215 	stw	r18,8(sp)
   42a54:	20800417 	ldw	r2,16(r4)
   42a58:	2c800417 	ldw	r18,16(r5)
   42a5c:	dfc00815 	stw	ra,32(sp)
   42a60:	ddc00715 	stw	r23,28(sp)
   42a64:	dd800615 	stw	r22,24(sp)
   42a68:	dd400515 	stw	r21,20(sp)
   42a6c:	dd000415 	stw	r20,16(sp)
   42a70:	dcc00315 	stw	r19,12(sp)
   42a74:	dc400115 	stw	r17,4(sp)
   42a78:	dc000015 	stw	r16,0(sp)
   42a7c:	14807116 	blt	r2,r18,42c44 <quorem+0x1f8>
   42a80:	94bfffc4 	addi	r18,r18,-1
   42a84:	94ad883a 	add	r22,r18,r18
   42a88:	b5ad883a 	add	r22,r22,r22
   42a8c:	2c400504 	addi	r17,r5,20
   42a90:	8da9883a 	add	r20,r17,r22
   42a94:	25400504 	addi	r21,r4,20
   42a98:	282f883a 	mov	r23,r5
   42a9c:	adad883a 	add	r22,r21,r22
   42aa0:	a1400017 	ldw	r5,0(r20)
   42aa4:	2021883a 	mov	r16,r4
   42aa8:	b1000017 	ldw	r4,0(r22)
   42aac:	29400044 	addi	r5,r5,1
   42ab0:	00407200 	call	40720 <__udivsi3>
   42ab4:	1027883a 	mov	r19,r2
   42ab8:	10002c26 	beq	r2,zero,42b6c <quorem+0x120>
   42abc:	a813883a 	mov	r9,r21
   42ac0:	8811883a 	mov	r8,r17
   42ac4:	0009883a 	mov	r4,zero
   42ac8:	000d883a 	mov	r6,zero
   42acc:	41c00017 	ldw	r7,0(r8)
   42ad0:	49400017 	ldw	r5,0(r9)
   42ad4:	42000104 	addi	r8,r8,4
   42ad8:	38bfffcc 	andi	r2,r7,65535
   42adc:	14c5383a 	mul	r2,r2,r19
   42ae0:	380ed43a 	srli	r7,r7,16
   42ae4:	28ffffcc 	andi	r3,r5,65535
   42ae8:	2085883a 	add	r2,r4,r2
   42aec:	1008d43a 	srli	r4,r2,16
   42af0:	3ccf383a 	mul	r7,r7,r19
   42af4:	198d883a 	add	r6,r3,r6
   42af8:	10ffffcc 	andi	r3,r2,65535
   42afc:	30c7c83a 	sub	r3,r6,r3
   42b00:	280ad43a 	srli	r5,r5,16
   42b04:	21c9883a 	add	r4,r4,r7
   42b08:	180dd43a 	srai	r6,r3,16
   42b0c:	20bfffcc 	andi	r2,r4,65535
   42b10:	288bc83a 	sub	r5,r5,r2
   42b14:	298b883a 	add	r5,r5,r6
   42b18:	280e943a 	slli	r7,r5,16
   42b1c:	18ffffcc 	andi	r3,r3,65535
   42b20:	2008d43a 	srli	r4,r4,16
   42b24:	38ceb03a 	or	r7,r7,r3
   42b28:	49c00015 	stw	r7,0(r9)
   42b2c:	280dd43a 	srai	r6,r5,16
   42b30:	4a400104 	addi	r9,r9,4
   42b34:	a23fe52e 	bgeu	r20,r8,42acc <__alt_data_end+0xfffd1d8c>
   42b38:	b0800017 	ldw	r2,0(r22)
   42b3c:	10000b1e 	bne	r2,zero,42b6c <quorem+0x120>
   42b40:	b0bfff04 	addi	r2,r22,-4
   42b44:	a880082e 	bgeu	r21,r2,42b68 <quorem+0x11c>
   42b48:	b0ffff17 	ldw	r3,-4(r22)
   42b4c:	18000326 	beq	r3,zero,42b5c <quorem+0x110>
   42b50:	00000506 	br	42b68 <quorem+0x11c>
   42b54:	10c00017 	ldw	r3,0(r2)
   42b58:	1800031e 	bne	r3,zero,42b68 <quorem+0x11c>
   42b5c:	10bfff04 	addi	r2,r2,-4
   42b60:	94bfffc4 	addi	r18,r18,-1
   42b64:	a8bffb36 	bltu	r21,r2,42b54 <__alt_data_end+0xfffd1e14>
   42b68:	84800415 	stw	r18,16(r16)
   42b6c:	8009883a 	mov	r4,r16
   42b70:	b80b883a 	mov	r5,r23
   42b74:	0046b340 	call	46b34 <__mcmp>
   42b78:	10002616 	blt	r2,zero,42c14 <quorem+0x1c8>
   42b7c:	9cc00044 	addi	r19,r19,1
   42b80:	a80d883a 	mov	r6,r21
   42b84:	000b883a 	mov	r5,zero
   42b88:	31000017 	ldw	r4,0(r6)
   42b8c:	88800017 	ldw	r2,0(r17)
   42b90:	31800104 	addi	r6,r6,4
   42b94:	20ffffcc 	andi	r3,r4,65535
   42b98:	194b883a 	add	r5,r3,r5
   42b9c:	10ffffcc 	andi	r3,r2,65535
   42ba0:	28c7c83a 	sub	r3,r5,r3
   42ba4:	1004d43a 	srli	r2,r2,16
   42ba8:	2008d43a 	srli	r4,r4,16
   42bac:	180bd43a 	srai	r5,r3,16
   42bb0:	18ffffcc 	andi	r3,r3,65535
   42bb4:	2089c83a 	sub	r4,r4,r2
   42bb8:	2149883a 	add	r4,r4,r5
   42bbc:	2004943a 	slli	r2,r4,16
   42bc0:	8c400104 	addi	r17,r17,4
   42bc4:	200bd43a 	srai	r5,r4,16
   42bc8:	10c6b03a 	or	r3,r2,r3
   42bcc:	30ffff15 	stw	r3,-4(r6)
   42bd0:	a47fed2e 	bgeu	r20,r17,42b88 <__alt_data_end+0xfffd1e48>
   42bd4:	9485883a 	add	r2,r18,r18
   42bd8:	1085883a 	add	r2,r2,r2
   42bdc:	a887883a 	add	r3,r21,r2
   42be0:	18800017 	ldw	r2,0(r3)
   42be4:	10000b1e 	bne	r2,zero,42c14 <quorem+0x1c8>
   42be8:	18bfff04 	addi	r2,r3,-4
   42bec:	a880082e 	bgeu	r21,r2,42c10 <quorem+0x1c4>
   42bf0:	18ffff17 	ldw	r3,-4(r3)
   42bf4:	18000326 	beq	r3,zero,42c04 <quorem+0x1b8>
   42bf8:	00000506 	br	42c10 <quorem+0x1c4>
   42bfc:	10c00017 	ldw	r3,0(r2)
   42c00:	1800031e 	bne	r3,zero,42c10 <quorem+0x1c4>
   42c04:	10bfff04 	addi	r2,r2,-4
   42c08:	94bfffc4 	addi	r18,r18,-1
   42c0c:	a8bffb36 	bltu	r21,r2,42bfc <__alt_data_end+0xfffd1ebc>
   42c10:	84800415 	stw	r18,16(r16)
   42c14:	9805883a 	mov	r2,r19
   42c18:	dfc00817 	ldw	ra,32(sp)
   42c1c:	ddc00717 	ldw	r23,28(sp)
   42c20:	dd800617 	ldw	r22,24(sp)
   42c24:	dd400517 	ldw	r21,20(sp)
   42c28:	dd000417 	ldw	r20,16(sp)
   42c2c:	dcc00317 	ldw	r19,12(sp)
   42c30:	dc800217 	ldw	r18,8(sp)
   42c34:	dc400117 	ldw	r17,4(sp)
   42c38:	dc000017 	ldw	r16,0(sp)
   42c3c:	dec00904 	addi	sp,sp,36
   42c40:	f800283a 	ret
   42c44:	0005883a 	mov	r2,zero
   42c48:	003ff306 	br	42c18 <__alt_data_end+0xfffd1ed8>

00042c4c <_dtoa_r>:
   42c4c:	20801017 	ldw	r2,64(r4)
   42c50:	deffde04 	addi	sp,sp,-136
   42c54:	dd401d15 	stw	r21,116(sp)
   42c58:	dcc01b15 	stw	r19,108(sp)
   42c5c:	dc801a15 	stw	r18,104(sp)
   42c60:	dc401915 	stw	r17,100(sp)
   42c64:	dc001815 	stw	r16,96(sp)
   42c68:	dfc02115 	stw	ra,132(sp)
   42c6c:	df002015 	stw	fp,128(sp)
   42c70:	ddc01f15 	stw	r23,124(sp)
   42c74:	dd801e15 	stw	r22,120(sp)
   42c78:	dd001c15 	stw	r20,112(sp)
   42c7c:	d9c00315 	stw	r7,12(sp)
   42c80:	2021883a 	mov	r16,r4
   42c84:	302b883a 	mov	r21,r6
   42c88:	2825883a 	mov	r18,r5
   42c8c:	dc402417 	ldw	r17,144(sp)
   42c90:	3027883a 	mov	r19,r6
   42c94:	10000826 	beq	r2,zero,42cb8 <_dtoa_r+0x6c>
   42c98:	21801117 	ldw	r6,68(r4)
   42c9c:	00c00044 	movi	r3,1
   42ca0:	100b883a 	mov	r5,r2
   42ca4:	1986983a 	sll	r3,r3,r6
   42ca8:	11800115 	stw	r6,4(r2)
   42cac:	10c00215 	stw	r3,8(r2)
   42cb0:	004631c0 	call	4631c <_Bfree>
   42cb4:	80001015 	stw	zero,64(r16)
   42cb8:	a8002d16 	blt	r21,zero,42d70 <_dtoa_r+0x124>
   42cbc:	88000015 	stw	zero,0(r17)
   42cc0:	a8dffc2c 	andhi	r3,r21,32752
   42cc4:	009ffc34 	movhi	r2,32752
   42cc8:	18801b26 	beq	r3,r2,42d38 <_dtoa_r+0xec>
   42ccc:	9009883a 	mov	r4,r18
   42cd0:	980b883a 	mov	r5,r19
   42cd4:	000d883a 	mov	r6,zero
   42cd8:	000f883a 	mov	r7,zero
   42cdc:	004b4cc0 	call	4b4cc <__eqdf2>
   42ce0:	10002a1e 	bne	r2,zero,42d8c <_dtoa_r+0x140>
   42ce4:	d8c02317 	ldw	r3,140(sp)
   42ce8:	d9002517 	ldw	r4,148(sp)
   42cec:	00800044 	movi	r2,1
   42cf0:	18800015 	stw	r2,0(r3)
   42cf4:	2001a226 	beq	r4,zero,43380 <_dtoa_r+0x734>
   42cf8:	00800174 	movhi	r2,5
   42cfc:	109e7844 	addi	r2,r2,31201
   42d00:	20800015 	stw	r2,0(r4)
   42d04:	10bfffc4 	addi	r2,r2,-1
   42d08:	dfc02117 	ldw	ra,132(sp)
   42d0c:	df002017 	ldw	fp,128(sp)
   42d10:	ddc01f17 	ldw	r23,124(sp)
   42d14:	dd801e17 	ldw	r22,120(sp)
   42d18:	dd401d17 	ldw	r21,116(sp)
   42d1c:	dd001c17 	ldw	r20,112(sp)
   42d20:	dcc01b17 	ldw	r19,108(sp)
   42d24:	dc801a17 	ldw	r18,104(sp)
   42d28:	dc401917 	ldw	r17,100(sp)
   42d2c:	dc001817 	ldw	r16,96(sp)
   42d30:	dec02204 	addi	sp,sp,136
   42d34:	f800283a 	ret
   42d38:	d8c02317 	ldw	r3,140(sp)
   42d3c:	0089c3c4 	movi	r2,9999
   42d40:	18800015 	stw	r2,0(r3)
   42d44:	90017c26 	beq	r18,zero,43338 <_dtoa_r+0x6ec>
   42d48:	00800174 	movhi	r2,5
   42d4c:	109e8404 	addi	r2,r2,31248
   42d50:	d9002517 	ldw	r4,148(sp)
   42d54:	203fec26 	beq	r4,zero,42d08 <__alt_data_end+0xfffd1fc8>
   42d58:	10c000c7 	ldb	r3,3(r2)
   42d5c:	18017d1e 	bne	r3,zero,43354 <_dtoa_r+0x708>
   42d60:	10c000c4 	addi	r3,r2,3
   42d64:	d9802517 	ldw	r6,148(sp)
   42d68:	30c00015 	stw	r3,0(r6)
   42d6c:	003fe606 	br	42d08 <__alt_data_end+0xfffd1fc8>
   42d70:	04e00034 	movhi	r19,32768
   42d74:	9cffffc4 	addi	r19,r19,-1
   42d78:	00800044 	movi	r2,1
   42d7c:	ace6703a 	and	r19,r21,r19
   42d80:	88800015 	stw	r2,0(r17)
   42d84:	982b883a 	mov	r21,r19
   42d88:	003fcd06 	br	42cc0 <__alt_data_end+0xfffd1f80>
   42d8c:	d8800204 	addi	r2,sp,8
   42d90:	a822d53a 	srli	r17,r21,20
   42d94:	d8800015 	stw	r2,0(sp)
   42d98:	8009883a 	mov	r4,r16
   42d9c:	900b883a 	mov	r5,r18
   42da0:	980d883a 	mov	r6,r19
   42da4:	d9c00104 	addi	r7,sp,4
   42da8:	0046ea80 	call	46ea8 <__d2b>
   42dac:	1039883a 	mov	fp,r2
   42db0:	88016a1e 	bne	r17,zero,4335c <_dtoa_r+0x710>
   42db4:	dd000217 	ldw	r20,8(sp)
   42db8:	dc400117 	ldw	r17,4(sp)
   42dbc:	00befbc4 	movi	r2,-1041
   42dc0:	a463883a 	add	r17,r20,r17
   42dc4:	8882ea16 	blt	r17,r2,43970 <_dtoa_r+0xd24>
   42dc8:	00bf0384 	movi	r2,-1010
   42dcc:	1445c83a 	sub	r2,r2,r17
   42dd0:	89010484 	addi	r4,r17,1042
   42dd4:	a8aa983a 	sll	r21,r21,r2
   42dd8:	9108d83a 	srl	r4,r18,r4
   42ddc:	a908b03a 	or	r4,r21,r4
   42de0:	004c85c0 	call	4c85c <__floatunsidf>
   42de4:	017f8434 	movhi	r5,65040
   42de8:	01800044 	movi	r6,1
   42dec:	1009883a 	mov	r4,r2
   42df0:	194b883a 	add	r5,r3,r5
   42df4:	8c7fffc4 	addi	r17,r17,-1
   42df8:	d9800f15 	stw	r6,60(sp)
   42dfc:	000d883a 	mov	r6,zero
   42e00:	01cffe34 	movhi	r7,16376
   42e04:	004be340 	call	4be34 <__subdf3>
   42e08:	0198dbf4 	movhi	r6,25455
   42e0c:	01cff4f4 	movhi	r7,16339
   42e10:	1009883a 	mov	r4,r2
   42e14:	180b883a 	mov	r5,r3
   42e18:	3190d844 	addi	r6,r6,17249
   42e1c:	39e1e9c4 	addi	r7,r7,-30809
   42e20:	004b7100 	call	4b710 <__muldf3>
   42e24:	01a2d874 	movhi	r6,35681
   42e28:	01cff1f4 	movhi	r7,16327
   42e2c:	180b883a 	mov	r5,r3
   42e30:	31b22cc4 	addi	r6,r6,-14157
   42e34:	39e28a04 	addi	r7,r7,-30168
   42e38:	1009883a 	mov	r4,r2
   42e3c:	004a3640 	call	4a364 <__adddf3>
   42e40:	8809883a 	mov	r4,r17
   42e44:	102d883a 	mov	r22,r2
   42e48:	182b883a 	mov	r21,r3
   42e4c:	004c78c0 	call	4c78c <__floatsidf>
   42e50:	019427f4 	movhi	r6,20639
   42e54:	01cff4f4 	movhi	r7,16339
   42e58:	1009883a 	mov	r4,r2
   42e5c:	180b883a 	mov	r5,r3
   42e60:	319e7ec4 	addi	r6,r6,31227
   42e64:	39d104c4 	addi	r7,r7,17427
   42e68:	004b7100 	call	4b710 <__muldf3>
   42e6c:	b009883a 	mov	r4,r22
   42e70:	a80b883a 	mov	r5,r21
   42e74:	100d883a 	mov	r6,r2
   42e78:	180f883a 	mov	r7,r3
   42e7c:	004a3640 	call	4a364 <__adddf3>
   42e80:	1009883a 	mov	r4,r2
   42e84:	180b883a 	mov	r5,r3
   42e88:	102d883a 	mov	r22,r2
   42e8c:	182b883a 	mov	r21,r3
   42e90:	004c7040 	call	4c704 <__fixdfsi>
   42e94:	b009883a 	mov	r4,r22
   42e98:	a80b883a 	mov	r5,r21
   42e9c:	000d883a 	mov	r6,zero
   42ea0:	000f883a 	mov	r7,zero
   42ea4:	d8800515 	stw	r2,20(sp)
   42ea8:	004b6300 	call	4b630 <__ledf2>
   42eac:	10023116 	blt	r2,zero,43774 <_dtoa_r+0xb28>
   42eb0:	d8c00517 	ldw	r3,20(sp)
   42eb4:	00800584 	movi	r2,22
   42eb8:	10c21f36 	bltu	r2,r3,43738 <_dtoa_r+0xaec>
   42ebc:	180490fa 	slli	r2,r3,3
   42ec0:	00c00174 	movhi	r3,5
   42ec4:	18dea004 	addi	r3,r3,31360
   42ec8:	1885883a 	add	r2,r3,r2
   42ecc:	11000017 	ldw	r4,0(r2)
   42ed0:	11400117 	ldw	r5,4(r2)
   42ed4:	900d883a 	mov	r6,r18
   42ed8:	980f883a 	mov	r7,r19
   42edc:	004b5500 	call	4b550 <__gedf2>
   42ee0:	0082a70e 	bge	zero,r2,43980 <_dtoa_r+0xd34>
   42ee4:	d9000517 	ldw	r4,20(sp)
   42ee8:	d8000c15 	stw	zero,48(sp)
   42eec:	213fffc4 	addi	r4,r4,-1
   42ef0:	d9000515 	stw	r4,20(sp)
   42ef4:	a463c83a 	sub	r17,r20,r17
   42ef8:	8dbfffc4 	addi	r22,r17,-1
   42efc:	b0021916 	blt	r22,zero,43764 <_dtoa_r+0xb18>
   42f00:	d8000815 	stw	zero,32(sp)
   42f04:	d8800517 	ldw	r2,20(sp)
   42f08:	10020e16 	blt	r2,zero,43744 <_dtoa_r+0xaf8>
   42f0c:	b0ad883a 	add	r22,r22,r2
   42f10:	d8800a15 	stw	r2,40(sp)
   42f14:	d8000915 	stw	zero,36(sp)
   42f18:	d8c00317 	ldw	r3,12(sp)
   42f1c:	00800244 	movi	r2,9
   42f20:	10c11a36 	bltu	r2,r3,4338c <_dtoa_r+0x740>
   42f24:	00800144 	movi	r2,5
   42f28:	10c4fc0e 	bge	r2,r3,4431c <_dtoa_r+0x16d0>
   42f2c:	18ffff04 	addi	r3,r3,-4
   42f30:	d8c00315 	stw	r3,12(sp)
   42f34:	0029883a 	mov	r20,zero
   42f38:	d9800317 	ldw	r6,12(sp)
   42f3c:	008000c4 	movi	r2,3
   42f40:	3083bd26 	beq	r6,r2,43e38 <_dtoa_r+0x11ec>
   42f44:	1183670e 	bge	r2,r6,43ce4 <_dtoa_r+0x1098>
   42f48:	d8c00317 	ldw	r3,12(sp)
   42f4c:	00800104 	movi	r2,4
   42f50:	1882e726 	beq	r3,r2,43af0 <_dtoa_r+0xea4>
   42f54:	00800144 	movi	r2,5
   42f58:	1884f21e 	bne	r3,r2,44324 <_dtoa_r+0x16d8>
   42f5c:	00800044 	movi	r2,1
   42f60:	d8800b15 	stw	r2,44(sp)
   42f64:	d8c02217 	ldw	r3,136(sp)
   42f68:	d9000517 	ldw	r4,20(sp)
   42f6c:	1907883a 	add	r3,r3,r4
   42f70:	19800044 	addi	r6,r3,1
   42f74:	d8c00d15 	stw	r3,52(sp)
   42f78:	d9800615 	stw	r6,24(sp)
   42f7c:	0183c30e 	bge	zero,r6,43e8c <_dtoa_r+0x1240>
   42f80:	d9800617 	ldw	r6,24(sp)
   42f84:	3023883a 	mov	r17,r6
   42f88:	80001115 	stw	zero,68(r16)
   42f8c:	008005c4 	movi	r2,23
   42f90:	1184f62e 	bgeu	r2,r6,4436c <_dtoa_r+0x1720>
   42f94:	00c00044 	movi	r3,1
   42f98:	00800104 	movi	r2,4
   42f9c:	1085883a 	add	r2,r2,r2
   42fa0:	11000504 	addi	r4,r2,20
   42fa4:	180b883a 	mov	r5,r3
   42fa8:	18c00044 	addi	r3,r3,1
   42fac:	313ffb2e 	bgeu	r6,r4,42f9c <__alt_data_end+0xfffd225c>
   42fb0:	81401115 	stw	r5,68(r16)
   42fb4:	8009883a 	mov	r4,r16
   42fb8:	00462740 	call	46274 <_Balloc>
   42fbc:	d8800715 	stw	r2,28(sp)
   42fc0:	80801015 	stw	r2,64(r16)
   42fc4:	00800384 	movi	r2,14
   42fc8:	1440fd36 	bltu	r2,r17,433c0 <_dtoa_r+0x774>
   42fcc:	a000fc26 	beq	r20,zero,433c0 <_dtoa_r+0x774>
   42fd0:	d8800517 	ldw	r2,20(sp)
   42fd4:	0083b90e 	bge	zero,r2,43ebc <_dtoa_r+0x1270>
   42fd8:	d8c00517 	ldw	r3,20(sp)
   42fdc:	108003cc 	andi	r2,r2,15
   42fe0:	100490fa 	slli	r2,r2,3
   42fe4:	182fd13a 	srai	r23,r3,4
   42fe8:	00c00174 	movhi	r3,5
   42fec:	18dea004 	addi	r3,r3,31360
   42ff0:	1885883a 	add	r2,r3,r2
   42ff4:	b8c0040c 	andi	r3,r23,16
   42ff8:	12c00017 	ldw	r11,0(r2)
   42ffc:	12800117 	ldw	r10,4(r2)
   43000:	18039726 	beq	r3,zero,43e60 <_dtoa_r+0x1214>
   43004:	00800174 	movhi	r2,5
   43008:	109e9604 	addi	r2,r2,31320
   4300c:	11800817 	ldw	r6,32(r2)
   43010:	11c00917 	ldw	r7,36(r2)
   43014:	9009883a 	mov	r4,r18
   43018:	980b883a 	mov	r5,r19
   4301c:	da801615 	stw	r10,88(sp)
   43020:	dac01515 	stw	r11,84(sp)
   43024:	004ac000 	call	4ac00 <__divdf3>
   43028:	da801617 	ldw	r10,88(sp)
   4302c:	dac01517 	ldw	r11,84(sp)
   43030:	bdc003cc 	andi	r23,r23,15
   43034:	044000c4 	movi	r17,3
   43038:	d8800e15 	stw	r2,56(sp)
   4303c:	182b883a 	mov	r21,r3
   43040:	b8001126 	beq	r23,zero,43088 <_dtoa_r+0x43c>
   43044:	05000174 	movhi	r20,5
   43048:	a51e9604 	addi	r20,r20,31320
   4304c:	5805883a 	mov	r2,r11
   43050:	5007883a 	mov	r3,r10
   43054:	b980004c 	andi	r6,r23,1
   43058:	1009883a 	mov	r4,r2
   4305c:	b82fd07a 	srai	r23,r23,1
   43060:	180b883a 	mov	r5,r3
   43064:	30000426 	beq	r6,zero,43078 <_dtoa_r+0x42c>
   43068:	a1800017 	ldw	r6,0(r20)
   4306c:	a1c00117 	ldw	r7,4(r20)
   43070:	8c400044 	addi	r17,r17,1
   43074:	004b7100 	call	4b710 <__muldf3>
   43078:	a5000204 	addi	r20,r20,8
   4307c:	b83ff51e 	bne	r23,zero,43054 <__alt_data_end+0xfffd2314>
   43080:	1017883a 	mov	r11,r2
   43084:	1815883a 	mov	r10,r3
   43088:	d9000e17 	ldw	r4,56(sp)
   4308c:	a80b883a 	mov	r5,r21
   43090:	580d883a 	mov	r6,r11
   43094:	500f883a 	mov	r7,r10
   43098:	004ac000 	call	4ac00 <__divdf3>
   4309c:	1029883a 	mov	r20,r2
   430a0:	182b883a 	mov	r21,r3
   430a4:	d9800c17 	ldw	r6,48(sp)
   430a8:	30000626 	beq	r6,zero,430c4 <_dtoa_r+0x478>
   430ac:	a009883a 	mov	r4,r20
   430b0:	a80b883a 	mov	r5,r21
   430b4:	000d883a 	mov	r6,zero
   430b8:	01cffc34 	movhi	r7,16368
   430bc:	004b6300 	call	4b630 <__ledf2>
   430c0:	10043216 	blt	r2,zero,4418c <_dtoa_r+0x1540>
   430c4:	8809883a 	mov	r4,r17
   430c8:	004c78c0 	call	4c78c <__floatsidf>
   430cc:	1009883a 	mov	r4,r2
   430d0:	180b883a 	mov	r5,r3
   430d4:	a00d883a 	mov	r6,r20
   430d8:	a80f883a 	mov	r7,r21
   430dc:	004b7100 	call	4b710 <__muldf3>
   430e0:	000d883a 	mov	r6,zero
   430e4:	1009883a 	mov	r4,r2
   430e8:	180b883a 	mov	r5,r3
   430ec:	01d00734 	movhi	r7,16412
   430f0:	004a3640 	call	4a364 <__adddf3>
   430f4:	1023883a 	mov	r17,r2
   430f8:	d9800617 	ldw	r6,24(sp)
   430fc:	00bf3034 	movhi	r2,64704
   43100:	1885883a 	add	r2,r3,r2
   43104:	d8800e15 	stw	r2,56(sp)
   43108:	30032e26 	beq	r6,zero,43dc4 <_dtoa_r+0x1178>
   4310c:	d8c00517 	ldw	r3,20(sp)
   43110:	da800617 	ldw	r10,24(sp)
   43114:	d8c01215 	stw	r3,72(sp)
   43118:	d9000b17 	ldw	r4,44(sp)
   4311c:	2003b026 	beq	r4,zero,43fe0 <_dtoa_r+0x1394>
   43120:	50bfffc4 	addi	r2,r10,-1
   43124:	100490fa 	slli	r2,r2,3
   43128:	00c00174 	movhi	r3,5
   4312c:	18dea004 	addi	r3,r3,31360
   43130:	1885883a 	add	r2,r3,r2
   43134:	11800017 	ldw	r6,0(r2)
   43138:	11c00117 	ldw	r7,4(r2)
   4313c:	d8800717 	ldw	r2,28(sp)
   43140:	0009883a 	mov	r4,zero
   43144:	014ff834 	movhi	r5,16352
   43148:	da801615 	stw	r10,88(sp)
   4314c:	15c00044 	addi	r23,r2,1
   43150:	004ac000 	call	4ac00 <__divdf3>
   43154:	d9c00e17 	ldw	r7,56(sp)
   43158:	880d883a 	mov	r6,r17
   4315c:	1009883a 	mov	r4,r2
   43160:	180b883a 	mov	r5,r3
   43164:	004be340 	call	4be34 <__subdf3>
   43168:	a80b883a 	mov	r5,r21
   4316c:	a009883a 	mov	r4,r20
   43170:	d8c01015 	stw	r3,64(sp)
   43174:	d8800e15 	stw	r2,56(sp)
   43178:	004c7040 	call	4c704 <__fixdfsi>
   4317c:	1009883a 	mov	r4,r2
   43180:	d8801715 	stw	r2,92(sp)
   43184:	004c78c0 	call	4c78c <__floatsidf>
   43188:	a009883a 	mov	r4,r20
   4318c:	a80b883a 	mov	r5,r21
   43190:	100d883a 	mov	r6,r2
   43194:	180f883a 	mov	r7,r3
   43198:	004be340 	call	4be34 <__subdf3>
   4319c:	da001717 	ldw	r8,92(sp)
   431a0:	1829883a 	mov	r20,r3
   431a4:	d8c00717 	ldw	r3,28(sp)
   431a8:	d9000e17 	ldw	r4,56(sp)
   431ac:	d9401017 	ldw	r5,64(sp)
   431b0:	42000c04 	addi	r8,r8,48
   431b4:	1023883a 	mov	r17,r2
   431b8:	1a000005 	stb	r8,0(r3)
   431bc:	880d883a 	mov	r6,r17
   431c0:	a00f883a 	mov	r7,r20
   431c4:	402b883a 	mov	r21,r8
   431c8:	004b5500 	call	4b550 <__gedf2>
   431cc:	00844516 	blt	zero,r2,442e4 <_dtoa_r+0x1698>
   431d0:	0009883a 	mov	r4,zero
   431d4:	014ffc34 	movhi	r5,16368
   431d8:	880d883a 	mov	r6,r17
   431dc:	a00f883a 	mov	r7,r20
   431e0:	004be340 	call	4be34 <__subdf3>
   431e4:	d9000e17 	ldw	r4,56(sp)
   431e8:	d9401017 	ldw	r5,64(sp)
   431ec:	100d883a 	mov	r6,r2
   431f0:	180f883a 	mov	r7,r3
   431f4:	004b5500 	call	4b550 <__gedf2>
   431f8:	da801617 	ldw	r10,88(sp)
   431fc:	00843616 	blt	zero,r2,442d8 <_dtoa_r+0x168c>
   43200:	00800044 	movi	r2,1
   43204:	12806e0e 	bge	r2,r10,433c0 <_dtoa_r+0x774>
   43208:	d9000717 	ldw	r4,28(sp)
   4320c:	dd801315 	stw	r22,76(sp)
   43210:	dc001115 	stw	r16,68(sp)
   43214:	2295883a 	add	r10,r4,r10
   43218:	dcc01415 	stw	r19,80(sp)
   4321c:	502d883a 	mov	r22,r10
   43220:	dcc01017 	ldw	r19,64(sp)
   43224:	b821883a 	mov	r16,r23
   43228:	dc801015 	stw	r18,64(sp)
   4322c:	dc800e17 	ldw	r18,56(sp)
   43230:	00000906 	br	43258 <_dtoa_r+0x60c>
   43234:	004be340 	call	4be34 <__subdf3>
   43238:	1009883a 	mov	r4,r2
   4323c:	180b883a 	mov	r5,r3
   43240:	900d883a 	mov	r6,r18
   43244:	980f883a 	mov	r7,r19
   43248:	004b6300 	call	4b630 <__ledf2>
   4324c:	10040e16 	blt	r2,zero,44288 <_dtoa_r+0x163c>
   43250:	b821883a 	mov	r16,r23
   43254:	bd841026 	beq	r23,r22,44298 <_dtoa_r+0x164c>
   43258:	9009883a 	mov	r4,r18
   4325c:	980b883a 	mov	r5,r19
   43260:	000d883a 	mov	r6,zero
   43264:	01d00934 	movhi	r7,16420
   43268:	004b7100 	call	4b710 <__muldf3>
   4326c:	000d883a 	mov	r6,zero
   43270:	01d00934 	movhi	r7,16420
   43274:	8809883a 	mov	r4,r17
   43278:	a00b883a 	mov	r5,r20
   4327c:	1025883a 	mov	r18,r2
   43280:	1827883a 	mov	r19,r3
   43284:	004b7100 	call	4b710 <__muldf3>
   43288:	180b883a 	mov	r5,r3
   4328c:	1009883a 	mov	r4,r2
   43290:	1823883a 	mov	r17,r3
   43294:	1029883a 	mov	r20,r2
   43298:	004c7040 	call	4c704 <__fixdfsi>
   4329c:	1009883a 	mov	r4,r2
   432a0:	102b883a 	mov	r21,r2
   432a4:	004c78c0 	call	4c78c <__floatsidf>
   432a8:	a009883a 	mov	r4,r20
   432ac:	880b883a 	mov	r5,r17
   432b0:	100d883a 	mov	r6,r2
   432b4:	180f883a 	mov	r7,r3
   432b8:	004be340 	call	4be34 <__subdf3>
   432bc:	ad400c04 	addi	r21,r21,48
   432c0:	1009883a 	mov	r4,r2
   432c4:	180b883a 	mov	r5,r3
   432c8:	900d883a 	mov	r6,r18
   432cc:	980f883a 	mov	r7,r19
   432d0:	85400005 	stb	r21,0(r16)
   432d4:	1023883a 	mov	r17,r2
   432d8:	1829883a 	mov	r20,r3
   432dc:	004b6300 	call	4b630 <__ledf2>
   432e0:	bdc00044 	addi	r23,r23,1
   432e4:	0009883a 	mov	r4,zero
   432e8:	014ffc34 	movhi	r5,16368
   432ec:	880d883a 	mov	r6,r17
   432f0:	a00f883a 	mov	r7,r20
   432f4:	103fcf0e 	bge	r2,zero,43234 <__alt_data_end+0xfffd24f4>
   432f8:	d9801217 	ldw	r6,72(sp)
   432fc:	dc001117 	ldw	r16,68(sp)
   43300:	d9800515 	stw	r6,20(sp)
   43304:	8009883a 	mov	r4,r16
   43308:	e00b883a 	mov	r5,fp
   4330c:	004631c0 	call	4631c <_Bfree>
   43310:	d8c00517 	ldw	r3,20(sp)
   43314:	d9002317 	ldw	r4,140(sp)
   43318:	d9802517 	ldw	r6,148(sp)
   4331c:	b8000005 	stb	zero,0(r23)
   43320:	18800044 	addi	r2,r3,1
   43324:	20800015 	stw	r2,0(r4)
   43328:	30027226 	beq	r6,zero,43cf4 <_dtoa_r+0x10a8>
   4332c:	35c00015 	stw	r23,0(r6)
   43330:	d8800717 	ldw	r2,28(sp)
   43334:	003e7406 	br	42d08 <__alt_data_end+0xfffd1fc8>
   43338:	00800434 	movhi	r2,16
   4333c:	10bfffc4 	addi	r2,r2,-1
   43340:	a8aa703a 	and	r21,r21,r2
   43344:	a83e801e 	bne	r21,zero,42d48 <__alt_data_end+0xfffd2008>
   43348:	00800174 	movhi	r2,5
   4334c:	109e8104 	addi	r2,r2,31236
   43350:	003e7f06 	br	42d50 <__alt_data_end+0xfffd2010>
   43354:	10c00204 	addi	r3,r2,8
   43358:	003e8206 	br	42d64 <__alt_data_end+0xfffd2024>
   4335c:	01400434 	movhi	r5,16
   43360:	297fffc4 	addi	r5,r5,-1
   43364:	994a703a 	and	r5,r19,r5
   43368:	9009883a 	mov	r4,r18
   4336c:	8c7f0044 	addi	r17,r17,-1023
   43370:	294ffc34 	orhi	r5,r5,16368
   43374:	dd000217 	ldw	r20,8(sp)
   43378:	d8000f15 	stw	zero,60(sp)
   4337c:	003e9f06 	br	42dfc <__alt_data_end+0xfffd20bc>
   43380:	00800174 	movhi	r2,5
   43384:	109e7804 	addi	r2,r2,31200
   43388:	003e5f06 	br	42d08 <__alt_data_end+0xfffd1fc8>
   4338c:	80001115 	stw	zero,68(r16)
   43390:	8009883a 	mov	r4,r16
   43394:	000b883a 	mov	r5,zero
   43398:	00462740 	call	46274 <_Balloc>
   4339c:	01bfffc4 	movi	r6,-1
   433a0:	d8800715 	stw	r2,28(sp)
   433a4:	80801015 	stw	r2,64(r16)
   433a8:	00800044 	movi	r2,1
   433ac:	d9800615 	stw	r6,24(sp)
   433b0:	d8800b15 	stw	r2,44(sp)
   433b4:	d8002215 	stw	zero,136(sp)
   433b8:	d9800d15 	stw	r6,52(sp)
   433bc:	d8000315 	stw	zero,12(sp)
   433c0:	d8800117 	ldw	r2,4(sp)
   433c4:	10008e16 	blt	r2,zero,43600 <_dtoa_r+0x9b4>
   433c8:	d9000517 	ldw	r4,20(sp)
   433cc:	00c00384 	movi	r3,14
   433d0:	19008b16 	blt	r3,r4,43600 <_dtoa_r+0x9b4>
   433d4:	200490fa 	slli	r2,r4,3
   433d8:	00c00174 	movhi	r3,5
   433dc:	d9802217 	ldw	r6,136(sp)
   433e0:	18dea004 	addi	r3,r3,31360
   433e4:	1885883a 	add	r2,r3,r2
   433e8:	14400017 	ldw	r17,0(r2)
   433ec:	15000117 	ldw	r20,4(r2)
   433f0:	3001c716 	blt	r6,zero,43b10 <_dtoa_r+0xec4>
   433f4:	880d883a 	mov	r6,r17
   433f8:	a00f883a 	mov	r7,r20
   433fc:	9009883a 	mov	r4,r18
   43400:	980b883a 	mov	r5,r19
   43404:	004ac000 	call	4ac00 <__divdf3>
   43408:	180b883a 	mov	r5,r3
   4340c:	1009883a 	mov	r4,r2
   43410:	004c7040 	call	4c704 <__fixdfsi>
   43414:	1009883a 	mov	r4,r2
   43418:	102d883a 	mov	r22,r2
   4341c:	004c78c0 	call	4c78c <__floatsidf>
   43420:	1009883a 	mov	r4,r2
   43424:	180b883a 	mov	r5,r3
   43428:	880d883a 	mov	r6,r17
   4342c:	a00f883a 	mov	r7,r20
   43430:	004b7100 	call	4b710 <__muldf3>
   43434:	9009883a 	mov	r4,r18
   43438:	980b883a 	mov	r5,r19
   4343c:	100d883a 	mov	r6,r2
   43440:	180f883a 	mov	r7,r3
   43444:	004be340 	call	4be34 <__subdf3>
   43448:	d9000717 	ldw	r4,28(sp)
   4344c:	d9800617 	ldw	r6,24(sp)
   43450:	180b883a 	mov	r5,r3
   43454:	b0c00c04 	addi	r3,r22,48
   43458:	20c00005 	stb	r3,0(r4)
   4345c:	25c00044 	addi	r23,r4,1
   43460:	01000044 	movi	r4,1
   43464:	1011883a 	mov	r8,r2
   43468:	2807883a 	mov	r3,r5
   4346c:	31003d26 	beq	r6,r4,43564 <_dtoa_r+0x918>
   43470:	000d883a 	mov	r6,zero
   43474:	01d00934 	movhi	r7,16420
   43478:	1009883a 	mov	r4,r2
   4347c:	004b7100 	call	4b710 <__muldf3>
   43480:	1009883a 	mov	r4,r2
   43484:	180b883a 	mov	r5,r3
   43488:	000d883a 	mov	r6,zero
   4348c:	000f883a 	mov	r7,zero
   43490:	1027883a 	mov	r19,r2
   43494:	182b883a 	mov	r21,r3
   43498:	004b4cc0 	call	4b4cc <__eqdf2>
   4349c:	103f9926 	beq	r2,zero,43304 <__alt_data_end+0xfffd25c4>
   434a0:	d8c00617 	ldw	r3,24(sp)
   434a4:	d9000717 	ldw	r4,28(sp)
   434a8:	b825883a 	mov	r18,r23
   434ac:	18bfffc4 	addi	r2,r3,-1
   434b0:	20ad883a 	add	r22,r4,r2
   434b4:	dc000315 	stw	r16,12(sp)
   434b8:	00000a06 	br	434e4 <_dtoa_r+0x898>
   434bc:	004b7100 	call	4b710 <__muldf3>
   434c0:	1009883a 	mov	r4,r2
   434c4:	180b883a 	mov	r5,r3
   434c8:	000d883a 	mov	r6,zero
   434cc:	000f883a 	mov	r7,zero
   434d0:	1027883a 	mov	r19,r2
   434d4:	182b883a 	mov	r21,r3
   434d8:	b825883a 	mov	r18,r23
   434dc:	004b4cc0 	call	4b4cc <__eqdf2>
   434e0:	10022626 	beq	r2,zero,43d7c <_dtoa_r+0x1130>
   434e4:	880d883a 	mov	r6,r17
   434e8:	a00f883a 	mov	r7,r20
   434ec:	9809883a 	mov	r4,r19
   434f0:	a80b883a 	mov	r5,r21
   434f4:	004ac000 	call	4ac00 <__divdf3>
   434f8:	180b883a 	mov	r5,r3
   434fc:	1009883a 	mov	r4,r2
   43500:	004c7040 	call	4c704 <__fixdfsi>
   43504:	1009883a 	mov	r4,r2
   43508:	1021883a 	mov	r16,r2
   4350c:	004c78c0 	call	4c78c <__floatsidf>
   43510:	1009883a 	mov	r4,r2
   43514:	180b883a 	mov	r5,r3
   43518:	880d883a 	mov	r6,r17
   4351c:	a00f883a 	mov	r7,r20
   43520:	004b7100 	call	4b710 <__muldf3>
   43524:	9809883a 	mov	r4,r19
   43528:	a80b883a 	mov	r5,r21
   4352c:	100d883a 	mov	r6,r2
   43530:	180f883a 	mov	r7,r3
   43534:	004be340 	call	4be34 <__subdf3>
   43538:	82000c04 	addi	r8,r16,48
   4353c:	92000005 	stb	r8,0(r18)
   43540:	1009883a 	mov	r4,r2
   43544:	180b883a 	mov	r5,r3
   43548:	000d883a 	mov	r6,zero
   4354c:	01d00934 	movhi	r7,16420
   43550:	1011883a 	mov	r8,r2
   43554:	bdc00044 	addi	r23,r23,1
   43558:	95bfd81e 	bne	r18,r22,434bc <__alt_data_end+0xfffd277c>
   4355c:	802d883a 	mov	r22,r16
   43560:	dc000317 	ldw	r16,12(sp)
   43564:	4009883a 	mov	r4,r8
   43568:	180b883a 	mov	r5,r3
   4356c:	400d883a 	mov	r6,r8
   43570:	180f883a 	mov	r7,r3
   43574:	004a3640 	call	4a364 <__adddf3>
   43578:	8809883a 	mov	r4,r17
   4357c:	a00b883a 	mov	r5,r20
   43580:	100d883a 	mov	r6,r2
   43584:	180f883a 	mov	r7,r3
   43588:	1027883a 	mov	r19,r2
   4358c:	1825883a 	mov	r18,r3
   43590:	004b6300 	call	4b630 <__ledf2>
   43594:	10000816 	blt	r2,zero,435b8 <_dtoa_r+0x96c>
   43598:	8809883a 	mov	r4,r17
   4359c:	a00b883a 	mov	r5,r20
   435a0:	980d883a 	mov	r6,r19
   435a4:	900f883a 	mov	r7,r18
   435a8:	004b4cc0 	call	4b4cc <__eqdf2>
   435ac:	103f551e 	bne	r2,zero,43304 <__alt_data_end+0xfffd25c4>
   435b0:	b580004c 	andi	r22,r22,1
   435b4:	b03f5326 	beq	r22,zero,43304 <__alt_data_end+0xfffd25c4>
   435b8:	bd7fffc3 	ldbu	r21,-1(r23)
   435bc:	b8bfffc4 	addi	r2,r23,-1
   435c0:	1007883a 	mov	r3,r2
   435c4:	01400e44 	movi	r5,57
   435c8:	d9800717 	ldw	r6,28(sp)
   435cc:	00000506 	br	435e4 <_dtoa_r+0x998>
   435d0:	18ffffc4 	addi	r3,r3,-1
   435d4:	30825e26 	beq	r6,r2,43f50 <_dtoa_r+0x1304>
   435d8:	1d400003 	ldbu	r21,0(r3)
   435dc:	102f883a 	mov	r23,r2
   435e0:	10bfffc4 	addi	r2,r2,-1
   435e4:	a9003fcc 	andi	r4,r21,255
   435e8:	2100201c 	xori	r4,r4,128
   435ec:	213fe004 	addi	r4,r4,-128
   435f0:	217ff726 	beq	r4,r5,435d0 <__alt_data_end+0xfffd2890>
   435f4:	aa000044 	addi	r8,r21,1
   435f8:	12000005 	stb	r8,0(r2)
   435fc:	003f4106 	br	43304 <__alt_data_end+0xfffd25c4>
   43600:	d8c00b17 	ldw	r3,44(sp)
   43604:	18006726 	beq	r3,zero,437a4 <_dtoa_r+0xb58>
   43608:	d9000317 	ldw	r4,12(sp)
   4360c:	00c00044 	movi	r3,1
   43610:	19016a0e 	bge	r3,r4,43bbc <_dtoa_r+0xf70>
   43614:	d8800617 	ldw	r2,24(sp)
   43618:	d8c00917 	ldw	r3,36(sp)
   4361c:	157fffc4 	addi	r21,r2,-1
   43620:	1d420716 	blt	r3,r21,43e40 <_dtoa_r+0x11f4>
   43624:	1d6bc83a 	sub	r21,r3,r21
   43628:	d8800617 	ldw	r2,24(sp)
   4362c:	1002c716 	blt	r2,zero,4414c <_dtoa_r+0x1500>
   43630:	dd000817 	ldw	r20,32(sp)
   43634:	d8800617 	ldw	r2,24(sp)
   43638:	d9800817 	ldw	r6,32(sp)
   4363c:	8009883a 	mov	r4,r16
   43640:	01400044 	movi	r5,1
   43644:	308d883a 	add	r6,r6,r2
   43648:	d9800815 	stw	r6,32(sp)
   4364c:	b0ad883a 	add	r22,r22,r2
   43650:	00466740 	call	46674 <__i2b>
   43654:	1023883a 	mov	r17,r2
   43658:	a0000826 	beq	r20,zero,4367c <_dtoa_r+0xa30>
   4365c:	0580070e 	bge	zero,r22,4367c <_dtoa_r+0xa30>
   43660:	b005883a 	mov	r2,r22
   43664:	a5812016 	blt	r20,r22,43ae8 <_dtoa_r+0xe9c>
   43668:	d8c00817 	ldw	r3,32(sp)
   4366c:	a0a9c83a 	sub	r20,r20,r2
   43670:	b0adc83a 	sub	r22,r22,r2
   43674:	1887c83a 	sub	r3,r3,r2
   43678:	d8c00815 	stw	r3,32(sp)
   4367c:	d9000917 	ldw	r4,36(sp)
   43680:	0100140e 	bge	zero,r4,436d4 <_dtoa_r+0xa88>
   43684:	d9800b17 	ldw	r6,44(sp)
   43688:	3001e526 	beq	r6,zero,43e20 <_dtoa_r+0x11d4>
   4368c:	05400e0e 	bge	zero,r21,436c8 <_dtoa_r+0xa7c>
   43690:	880b883a 	mov	r5,r17
   43694:	8009883a 	mov	r4,r16
   43698:	a80d883a 	mov	r6,r21
   4369c:	00468ac0 	call	468ac <__pow5mult>
   436a0:	e00d883a 	mov	r6,fp
   436a4:	8009883a 	mov	r4,r16
   436a8:	100b883a 	mov	r5,r2
   436ac:	1023883a 	mov	r17,r2
   436b0:	00466b00 	call	466b0 <__multiply>
   436b4:	102f883a 	mov	r23,r2
   436b8:	e00b883a 	mov	r5,fp
   436bc:	8009883a 	mov	r4,r16
   436c0:	004631c0 	call	4631c <_Bfree>
   436c4:	b839883a 	mov	fp,r23
   436c8:	d8800917 	ldw	r2,36(sp)
   436cc:	154dc83a 	sub	r6,r2,r21
   436d0:	3001281e 	bne	r6,zero,43b74 <_dtoa_r+0xf28>
   436d4:	05c00044 	movi	r23,1
   436d8:	8009883a 	mov	r4,r16
   436dc:	b80b883a 	mov	r5,r23
   436e0:	00466740 	call	46674 <__i2b>
   436e4:	d8c00a17 	ldw	r3,40(sp)
   436e8:	102b883a 	mov	r21,r2
   436ec:	00c0310e 	bge	zero,r3,437b4 <_dtoa_r+0xb68>
   436f0:	8009883a 	mov	r4,r16
   436f4:	100b883a 	mov	r5,r2
   436f8:	180d883a 	mov	r6,r3
   436fc:	00468ac0 	call	468ac <__pow5mult>
   43700:	d9000317 	ldw	r4,12(sp)
   43704:	102b883a 	mov	r21,r2
   43708:	b9011f0e 	bge	r23,r4,43b88 <_dtoa_r+0xf3c>
   4370c:	0027883a 	mov	r19,zero
   43710:	a8800417 	ldw	r2,16(r21)
   43714:	10800104 	addi	r2,r2,4
   43718:	1085883a 	add	r2,r2,r2
   4371c:	1085883a 	add	r2,r2,r2
   43720:	a885883a 	add	r2,r21,r2
   43724:	11000017 	ldw	r4,0(r2)
   43728:	004655c0 	call	4655c <__hi0bits>
   4372c:	00c00804 	movi	r3,32
   43730:	1885c83a 	sub	r2,r3,r2
   43734:	00002506 	br	437cc <_dtoa_r+0xb80>
   43738:	01800044 	movi	r6,1
   4373c:	d9800c15 	stw	r6,48(sp)
   43740:	003dec06 	br	42ef4 <__alt_data_end+0xfffd21b4>
   43744:	d8c00817 	ldw	r3,32(sp)
   43748:	d9000517 	ldw	r4,20(sp)
   4374c:	d8000a15 	stw	zero,40(sp)
   43750:	1907c83a 	sub	r3,r3,r4
   43754:	010dc83a 	sub	r6,zero,r4
   43758:	d8c00815 	stw	r3,32(sp)
   4375c:	d9800915 	stw	r6,36(sp)
   43760:	003ded06 	br	42f18 <__alt_data_end+0xfffd21d8>
   43764:	05adc83a 	sub	r22,zero,r22
   43768:	dd800815 	stw	r22,32(sp)
   4376c:	002d883a 	mov	r22,zero
   43770:	003de406 	br	42f04 <__alt_data_end+0xfffd21c4>
   43774:	d9000517 	ldw	r4,20(sp)
   43778:	004c78c0 	call	4c78c <__floatsidf>
   4377c:	1009883a 	mov	r4,r2
   43780:	180b883a 	mov	r5,r3
   43784:	b00d883a 	mov	r6,r22
   43788:	a80f883a 	mov	r7,r21
   4378c:	004b4cc0 	call	4b4cc <__eqdf2>
   43790:	103dc726 	beq	r2,zero,42eb0 <__alt_data_end+0xfffd2170>
   43794:	d8800517 	ldw	r2,20(sp)
   43798:	10bfffc4 	addi	r2,r2,-1
   4379c:	d8800515 	stw	r2,20(sp)
   437a0:	003dc306 	br	42eb0 <__alt_data_end+0xfffd2170>
   437a4:	dd400917 	ldw	r21,36(sp)
   437a8:	dd000817 	ldw	r20,32(sp)
   437ac:	0023883a 	mov	r17,zero
   437b0:	003fa906 	br	43658 <__alt_data_end+0xfffd2918>
   437b4:	d9800317 	ldw	r6,12(sp)
   437b8:	b981670e 	bge	r23,r6,43d58 <_dtoa_r+0x110c>
   437bc:	0027883a 	mov	r19,zero
   437c0:	d8c00a17 	ldw	r3,40(sp)
   437c4:	183fd21e 	bne	r3,zero,43710 <__alt_data_end+0xfffd29d0>
   437c8:	00800044 	movi	r2,1
   437cc:	1585883a 	add	r2,r2,r22
   437d0:	108007cc 	andi	r2,r2,31
   437d4:	10005f26 	beq	r2,zero,43954 <_dtoa_r+0xd08>
   437d8:	00c00804 	movi	r3,32
   437dc:	1887c83a 	sub	r3,r3,r2
   437e0:	01000104 	movi	r4,4
   437e4:	20c2dd0e 	bge	r4,r3,4435c <_dtoa_r+0x1710>
   437e8:	d9000817 	ldw	r4,32(sp)
   437ec:	00c00704 	movi	r3,28
   437f0:	1885c83a 	sub	r2,r3,r2
   437f4:	2089883a 	add	r4,r4,r2
   437f8:	d9000815 	stw	r4,32(sp)
   437fc:	a0a9883a 	add	r20,r20,r2
   43800:	b0ad883a 	add	r22,r22,r2
   43804:	d8800817 	ldw	r2,32(sp)
   43808:	0080050e 	bge	zero,r2,43820 <_dtoa_r+0xbd4>
   4380c:	e00b883a 	mov	r5,fp
   43810:	8009883a 	mov	r4,r16
   43814:	100d883a 	mov	r6,r2
   43818:	00469ec0 	call	469ec <__lshift>
   4381c:	1039883a 	mov	fp,r2
   43820:	0580050e 	bge	zero,r22,43838 <_dtoa_r+0xbec>
   43824:	a80b883a 	mov	r5,r21
   43828:	8009883a 	mov	r4,r16
   4382c:	b00d883a 	mov	r6,r22
   43830:	00469ec0 	call	469ec <__lshift>
   43834:	102b883a 	mov	r21,r2
   43838:	d8c00c17 	ldw	r3,48(sp)
   4383c:	1801161e 	bne	r3,zero,43c98 <_dtoa_r+0x104c>
   43840:	d8c00617 	ldw	r3,24(sp)
   43844:	00c12d0e 	bge	zero,r3,43cfc <_dtoa_r+0x10b0>
   43848:	d8c00b17 	ldw	r3,44(sp)
   4384c:	1800571e 	bne	r3,zero,439ac <_dtoa_r+0xd60>
   43850:	dc800717 	ldw	r18,28(sp)
   43854:	dcc00617 	ldw	r19,24(sp)
   43858:	9029883a 	mov	r20,r18
   4385c:	00000206 	br	43868 <_dtoa_r+0xc1c>
   43860:	00463440 	call	46344 <__multadd>
   43864:	1039883a 	mov	fp,r2
   43868:	e009883a 	mov	r4,fp
   4386c:	a80b883a 	mov	r5,r21
   43870:	0042a4c0 	call	42a4c <quorem>
   43874:	10800c04 	addi	r2,r2,48
   43878:	90800005 	stb	r2,0(r18)
   4387c:	94800044 	addi	r18,r18,1
   43880:	9507c83a 	sub	r3,r18,r20
   43884:	8009883a 	mov	r4,r16
   43888:	e00b883a 	mov	r5,fp
   4388c:	01800284 	movi	r6,10
   43890:	000f883a 	mov	r7,zero
   43894:	1cfff216 	blt	r3,r19,43860 <__alt_data_end+0xfffd2b20>
   43898:	1011883a 	mov	r8,r2
   4389c:	d8800617 	ldw	r2,24(sp)
   438a0:	00822e0e 	bge	zero,r2,4415c <_dtoa_r+0x1510>
   438a4:	d9000717 	ldw	r4,28(sp)
   438a8:	0025883a 	mov	r18,zero
   438ac:	20af883a 	add	r23,r4,r2
   438b0:	e00b883a 	mov	r5,fp
   438b4:	01800044 	movi	r6,1
   438b8:	8009883a 	mov	r4,r16
   438bc:	da001715 	stw	r8,92(sp)
   438c0:	00469ec0 	call	469ec <__lshift>
   438c4:	1009883a 	mov	r4,r2
   438c8:	a80b883a 	mov	r5,r21
   438cc:	1039883a 	mov	fp,r2
   438d0:	0046b340 	call	46b34 <__mcmp>
   438d4:	da001717 	ldw	r8,92(sp)
   438d8:	00816e0e 	bge	zero,r2,43e94 <_dtoa_r+0x1248>
   438dc:	b93fffc3 	ldbu	r4,-1(r23)
   438e0:	b8bfffc4 	addi	r2,r23,-1
   438e4:	1007883a 	mov	r3,r2
   438e8:	01800e44 	movi	r6,57
   438ec:	d9c00717 	ldw	r7,28(sp)
   438f0:	00000506 	br	43908 <_dtoa_r+0xcbc>
   438f4:	18ffffc4 	addi	r3,r3,-1
   438f8:	38811926 	beq	r7,r2,43d60 <_dtoa_r+0x1114>
   438fc:	19000003 	ldbu	r4,0(r3)
   43900:	102f883a 	mov	r23,r2
   43904:	10bfffc4 	addi	r2,r2,-1
   43908:	21403fcc 	andi	r5,r4,255
   4390c:	2940201c 	xori	r5,r5,128
   43910:	297fe004 	addi	r5,r5,-128
   43914:	29bff726 	beq	r5,r6,438f4 <__alt_data_end+0xfffd2bb4>
   43918:	21000044 	addi	r4,r4,1
   4391c:	11000005 	stb	r4,0(r2)
   43920:	8009883a 	mov	r4,r16
   43924:	a80b883a 	mov	r5,r21
   43928:	004631c0 	call	4631c <_Bfree>
   4392c:	883e7526 	beq	r17,zero,43304 <__alt_data_end+0xfffd25c4>
   43930:	90000426 	beq	r18,zero,43944 <_dtoa_r+0xcf8>
   43934:	94400326 	beq	r18,r17,43944 <_dtoa_r+0xcf8>
   43938:	8009883a 	mov	r4,r16
   4393c:	900b883a 	mov	r5,r18
   43940:	004631c0 	call	4631c <_Bfree>
   43944:	8009883a 	mov	r4,r16
   43948:	880b883a 	mov	r5,r17
   4394c:	004631c0 	call	4631c <_Bfree>
   43950:	003e6c06 	br	43304 <__alt_data_end+0xfffd25c4>
   43954:	00800704 	movi	r2,28
   43958:	d9800817 	ldw	r6,32(sp)
   4395c:	a0a9883a 	add	r20,r20,r2
   43960:	b0ad883a 	add	r22,r22,r2
   43964:	308d883a 	add	r6,r6,r2
   43968:	d9800815 	stw	r6,32(sp)
   4396c:	003fa506 	br	43804 <__alt_data_end+0xfffd2ac4>
   43970:	013efb84 	movi	r4,-1042
   43974:	246bc83a 	sub	r21,r4,r17
   43978:	9548983a 	sll	r4,r18,r21
   4397c:	003d1806 	br	42de0 <__alt_data_end+0xfffd20a0>
   43980:	d8000c15 	stw	zero,48(sp)
   43984:	003d5b06 	br	42ef4 <__alt_data_end+0xfffd21b4>
   43988:	880b883a 	mov	r5,r17
   4398c:	8009883a 	mov	r4,r16
   43990:	01800284 	movi	r6,10
   43994:	000f883a 	mov	r7,zero
   43998:	00463440 	call	46344 <__multadd>
   4399c:	1023883a 	mov	r17,r2
   439a0:	d8800d17 	ldw	r2,52(sp)
   439a4:	0082550e 	bge	zero,r2,442fc <_dtoa_r+0x16b0>
   439a8:	d8800615 	stw	r2,24(sp)
   439ac:	0500050e 	bge	zero,r20,439c4 <_dtoa_r+0xd78>
   439b0:	880b883a 	mov	r5,r17
   439b4:	8009883a 	mov	r4,r16
   439b8:	a00d883a 	mov	r6,r20
   439bc:	00469ec0 	call	469ec <__lshift>
   439c0:	1023883a 	mov	r17,r2
   439c4:	98016a1e 	bne	r19,zero,43f70 <_dtoa_r+0x1324>
   439c8:	8829883a 	mov	r20,r17
   439cc:	d9000617 	ldw	r4,24(sp)
   439d0:	dcc00717 	ldw	r19,28(sp)
   439d4:	9480004c 	andi	r18,r18,1
   439d8:	20bfffc4 	addi	r2,r4,-1
   439dc:	9885883a 	add	r2,r19,r2
   439e0:	d8800415 	stw	r2,16(sp)
   439e4:	dc800615 	stw	r18,24(sp)
   439e8:	e009883a 	mov	r4,fp
   439ec:	a80b883a 	mov	r5,r21
   439f0:	0042a4c0 	call	42a4c <quorem>
   439f4:	e009883a 	mov	r4,fp
   439f8:	880b883a 	mov	r5,r17
   439fc:	102f883a 	mov	r23,r2
   43a00:	0046b340 	call	46b34 <__mcmp>
   43a04:	8009883a 	mov	r4,r16
   43a08:	a80b883a 	mov	r5,r21
   43a0c:	a00d883a 	mov	r6,r20
   43a10:	102d883a 	mov	r22,r2
   43a14:	0046b940 	call	46b94 <__mdiff>
   43a18:	1007883a 	mov	r3,r2
   43a1c:	10800317 	ldw	r2,12(r2)
   43a20:	bc800c04 	addi	r18,r23,48
   43a24:	1000971e 	bne	r2,zero,43c84 <_dtoa_r+0x1038>
   43a28:	180b883a 	mov	r5,r3
   43a2c:	e009883a 	mov	r4,fp
   43a30:	d8c01515 	stw	r3,84(sp)
   43a34:	0046b340 	call	46b34 <__mcmp>
   43a38:	d8c01517 	ldw	r3,84(sp)
   43a3c:	8009883a 	mov	r4,r16
   43a40:	d8801515 	stw	r2,84(sp)
   43a44:	180b883a 	mov	r5,r3
   43a48:	004631c0 	call	4631c <_Bfree>
   43a4c:	d8801517 	ldw	r2,84(sp)
   43a50:	1000041e 	bne	r2,zero,43a64 <_dtoa_r+0xe18>
   43a54:	d9800317 	ldw	r6,12(sp)
   43a58:	3000021e 	bne	r6,zero,43a64 <_dtoa_r+0xe18>
   43a5c:	d8c00617 	ldw	r3,24(sp)
   43a60:	18007626 	beq	r3,zero,43c3c <_dtoa_r+0xff0>
   43a64:	b0005b16 	blt	r22,zero,43bd4 <_dtoa_r+0xf88>
   43a68:	b000041e 	bne	r22,zero,43a7c <_dtoa_r+0xe30>
   43a6c:	d9000317 	ldw	r4,12(sp)
   43a70:	2000021e 	bne	r4,zero,43a7c <_dtoa_r+0xe30>
   43a74:	d8c00617 	ldw	r3,24(sp)
   43a78:	18005626 	beq	r3,zero,43bd4 <_dtoa_r+0xf88>
   43a7c:	00814d16 	blt	zero,r2,43fb4 <_dtoa_r+0x1368>
   43a80:	d8c00417 	ldw	r3,16(sp)
   43a84:	9d800044 	addi	r22,r19,1
   43a88:	9c800005 	stb	r18,0(r19)
   43a8c:	b02f883a 	mov	r23,r22
   43a90:	98c14c26 	beq	r19,r3,43fc4 <_dtoa_r+0x1378>
   43a94:	e00b883a 	mov	r5,fp
   43a98:	8009883a 	mov	r4,r16
   43a9c:	01800284 	movi	r6,10
   43aa0:	000f883a 	mov	r7,zero
   43aa4:	00463440 	call	46344 <__multadd>
   43aa8:	1039883a 	mov	fp,r2
   43aac:	8d006d26 	beq	r17,r20,43c64 <_dtoa_r+0x1018>
   43ab0:	880b883a 	mov	r5,r17
   43ab4:	01800284 	movi	r6,10
   43ab8:	000f883a 	mov	r7,zero
   43abc:	8009883a 	mov	r4,r16
   43ac0:	00463440 	call	46344 <__multadd>
   43ac4:	a00b883a 	mov	r5,r20
   43ac8:	8009883a 	mov	r4,r16
   43acc:	01800284 	movi	r6,10
   43ad0:	000f883a 	mov	r7,zero
   43ad4:	1023883a 	mov	r17,r2
   43ad8:	00463440 	call	46344 <__multadd>
   43adc:	1029883a 	mov	r20,r2
   43ae0:	b027883a 	mov	r19,r22
   43ae4:	003fc006 	br	439e8 <__alt_data_end+0xfffd2ca8>
   43ae8:	a005883a 	mov	r2,r20
   43aec:	003ede06 	br	43668 <__alt_data_end+0xfffd2928>
   43af0:	01000044 	movi	r4,1
   43af4:	d9000b15 	stw	r4,44(sp)
   43af8:	d9802217 	ldw	r6,136(sp)
   43afc:	0180dc0e 	bge	zero,r6,43e70 <_dtoa_r+0x1224>
   43b00:	3023883a 	mov	r17,r6
   43b04:	d9800d15 	stw	r6,52(sp)
   43b08:	d9800615 	stw	r6,24(sp)
   43b0c:	003d1e06 	br	42f88 <__alt_data_end+0xfffd2248>
   43b10:	d8800617 	ldw	r2,24(sp)
   43b14:	00be3716 	blt	zero,r2,433f4 <__alt_data_end+0xfffd26b4>
   43b18:	1000be1e 	bne	r2,zero,43e14 <_dtoa_r+0x11c8>
   43b1c:	8809883a 	mov	r4,r17
   43b20:	a00b883a 	mov	r5,r20
   43b24:	000d883a 	mov	r6,zero
   43b28:	01d00534 	movhi	r7,16404
   43b2c:	004b7100 	call	4b710 <__muldf3>
   43b30:	1009883a 	mov	r4,r2
   43b34:	180b883a 	mov	r5,r3
   43b38:	900d883a 	mov	r6,r18
   43b3c:	980f883a 	mov	r7,r19
   43b40:	004b5500 	call	4b550 <__gedf2>
   43b44:	002b883a 	mov	r21,zero
   43b48:	0023883a 	mov	r17,zero
   43b4c:	10007a16 	blt	r2,zero,43d38 <_dtoa_r+0x10ec>
   43b50:	d9002217 	ldw	r4,136(sp)
   43b54:	ddc00717 	ldw	r23,28(sp)
   43b58:	0108303a 	nor	r4,zero,r4
   43b5c:	d9000515 	stw	r4,20(sp)
   43b60:	8009883a 	mov	r4,r16
   43b64:	a80b883a 	mov	r5,r21
   43b68:	004631c0 	call	4631c <_Bfree>
   43b6c:	883f751e 	bne	r17,zero,43944 <__alt_data_end+0xfffd2c04>
   43b70:	003de406 	br	43304 <__alt_data_end+0xfffd25c4>
   43b74:	e00b883a 	mov	r5,fp
   43b78:	8009883a 	mov	r4,r16
   43b7c:	00468ac0 	call	468ac <__pow5mult>
   43b80:	1039883a 	mov	fp,r2
   43b84:	003ed306 	br	436d4 <__alt_data_end+0xfffd2994>
   43b88:	903ee01e 	bne	r18,zero,4370c <__alt_data_end+0xfffd29cc>
   43b8c:	00800434 	movhi	r2,16
   43b90:	10bfffc4 	addi	r2,r2,-1
   43b94:	9884703a 	and	r2,r19,r2
   43b98:	103f081e 	bne	r2,zero,437bc <__alt_data_end+0xfffd2a7c>
   43b9c:	9cdffc2c 	andhi	r19,r19,32752
   43ba0:	983f0626 	beq	r19,zero,437bc <__alt_data_end+0xfffd2a7c>
   43ba4:	d8800817 	ldw	r2,32(sp)
   43ba8:	b5800044 	addi	r22,r22,1
   43bac:	04c00044 	movi	r19,1
   43bb0:	10800044 	addi	r2,r2,1
   43bb4:	d8800815 	stw	r2,32(sp)
   43bb8:	003f0106 	br	437c0 <__alt_data_end+0xfffd2a80>
   43bbc:	d9800f17 	ldw	r6,60(sp)
   43bc0:	30016826 	beq	r6,zero,44164 <_dtoa_r+0x1518>
   43bc4:	10810cc4 	addi	r2,r2,1075
   43bc8:	dd400917 	ldw	r21,36(sp)
   43bcc:	dd000817 	ldw	r20,32(sp)
   43bd0:	003e9906 	br	43638 <__alt_data_end+0xfffd28f8>
   43bd4:	9011883a 	mov	r8,r18
   43bd8:	4007883a 	mov	r3,r8
   43bdc:	e02d883a 	mov	r22,fp
   43be0:	0080100e 	bge	zero,r2,43c24 <_dtoa_r+0xfd8>
   43be4:	01800044 	movi	r6,1
   43be8:	8009883a 	mov	r4,r16
   43bec:	e00b883a 	mov	r5,fp
   43bf0:	da001515 	stw	r8,84(sp)
   43bf4:	da001715 	stw	r8,92(sp)
   43bf8:	00469ec0 	call	469ec <__lshift>
   43bfc:	1009883a 	mov	r4,r2
   43c00:	a80b883a 	mov	r5,r21
   43c04:	102d883a 	mov	r22,r2
   43c08:	0046b340 	call	46b34 <__mcmp>
   43c0c:	d8c01517 	ldw	r3,84(sp)
   43c10:	da001717 	ldw	r8,92(sp)
   43c14:	0081a50e 	bge	zero,r2,442ac <_dtoa_r+0x1660>
   43c18:	00800e44 	movi	r2,57
   43c1c:	40817b26 	beq	r8,r2,4420c <_dtoa_r+0x15c0>
   43c20:	40c00044 	addi	r3,r8,1
   43c24:	8825883a 	mov	r18,r17
   43c28:	9dc00044 	addi	r23,r19,1
   43c2c:	98c00005 	stb	r3,0(r19)
   43c30:	a023883a 	mov	r17,r20
   43c34:	b039883a 	mov	fp,r22
   43c38:	003f3906 	br	43920 <__alt_data_end+0xfffd2be0>
   43c3c:	00800e44 	movi	r2,57
   43c40:	9011883a 	mov	r8,r18
   43c44:	90817226 	beq	r18,r2,44210 <_dtoa_r+0x15c4>
   43c48:	0580010e 	bge	zero,r22,43c50 <_dtoa_r+0x1004>
   43c4c:	ba000c44 	addi	r8,r23,49
   43c50:	8825883a 	mov	r18,r17
   43c54:	9dc00044 	addi	r23,r19,1
   43c58:	9a000005 	stb	r8,0(r19)
   43c5c:	a023883a 	mov	r17,r20
   43c60:	003f2f06 	br	43920 <__alt_data_end+0xfffd2be0>
   43c64:	880b883a 	mov	r5,r17
   43c68:	8009883a 	mov	r4,r16
   43c6c:	01800284 	movi	r6,10
   43c70:	000f883a 	mov	r7,zero
   43c74:	00463440 	call	46344 <__multadd>
   43c78:	1023883a 	mov	r17,r2
   43c7c:	1029883a 	mov	r20,r2
   43c80:	003f9706 	br	43ae0 <__alt_data_end+0xfffd2da0>
   43c84:	8009883a 	mov	r4,r16
   43c88:	180b883a 	mov	r5,r3
   43c8c:	004631c0 	call	4631c <_Bfree>
   43c90:	00800044 	movi	r2,1
   43c94:	003f7306 	br	43a64 <__alt_data_end+0xfffd2d24>
   43c98:	e009883a 	mov	r4,fp
   43c9c:	a80b883a 	mov	r5,r21
   43ca0:	0046b340 	call	46b34 <__mcmp>
   43ca4:	103ee60e 	bge	r2,zero,43840 <__alt_data_end+0xfffd2b00>
   43ca8:	8009883a 	mov	r4,r16
   43cac:	e00b883a 	mov	r5,fp
   43cb0:	01800284 	movi	r6,10
   43cb4:	000f883a 	mov	r7,zero
   43cb8:	00463440 	call	46344 <__multadd>
   43cbc:	d9000517 	ldw	r4,20(sp)
   43cc0:	d9800b17 	ldw	r6,44(sp)
   43cc4:	1039883a 	mov	fp,r2
   43cc8:	213fffc4 	addi	r4,r4,-1
   43ccc:	d9000515 	stw	r4,20(sp)
   43cd0:	303f2d1e 	bne	r6,zero,43988 <__alt_data_end+0xfffd2c48>
   43cd4:	d9000d17 	ldw	r4,52(sp)
   43cd8:	0101780e 	bge	zero,r4,442bc <_dtoa_r+0x1670>
   43cdc:	d9000615 	stw	r4,24(sp)
   43ce0:	003edb06 	br	43850 <__alt_data_end+0xfffd2b10>
   43ce4:	00800084 	movi	r2,2
   43ce8:	30818e1e 	bne	r6,r2,44324 <_dtoa_r+0x16d8>
   43cec:	d8000b15 	stw	zero,44(sp)
   43cf0:	003f8106 	br	43af8 <__alt_data_end+0xfffd2db8>
   43cf4:	d8800717 	ldw	r2,28(sp)
   43cf8:	003c0306 	br	42d08 <__alt_data_end+0xfffd1fc8>
   43cfc:	d9000317 	ldw	r4,12(sp)
   43d00:	00800084 	movi	r2,2
   43d04:	113ed00e 	bge	r2,r4,43848 <__alt_data_end+0xfffd2b08>
   43d08:	d8c00617 	ldw	r3,24(sp)
   43d0c:	183f901e 	bne	r3,zero,43b50 <__alt_data_end+0xfffd2e10>
   43d10:	a80b883a 	mov	r5,r21
   43d14:	8009883a 	mov	r4,r16
   43d18:	01800144 	movi	r6,5
   43d1c:	000f883a 	mov	r7,zero
   43d20:	00463440 	call	46344 <__multadd>
   43d24:	e009883a 	mov	r4,fp
   43d28:	100b883a 	mov	r5,r2
   43d2c:	102b883a 	mov	r21,r2
   43d30:	0046b340 	call	46b34 <__mcmp>
   43d34:	00bf860e 	bge	zero,r2,43b50 <__alt_data_end+0xfffd2e10>
   43d38:	d9800717 	ldw	r6,28(sp)
   43d3c:	00800c44 	movi	r2,49
   43d40:	30800005 	stb	r2,0(r6)
   43d44:	d8800517 	ldw	r2,20(sp)
   43d48:	35c00044 	addi	r23,r6,1
   43d4c:	10800044 	addi	r2,r2,1
   43d50:	d8800515 	stw	r2,20(sp)
   43d54:	003f8206 	br	43b60 <__alt_data_end+0xfffd2e20>
   43d58:	903e981e 	bne	r18,zero,437bc <__alt_data_end+0xfffd2a7c>
   43d5c:	003f8b06 	br	43b8c <__alt_data_end+0xfffd2e4c>
   43d60:	d9800517 	ldw	r6,20(sp)
   43d64:	d8c00717 	ldw	r3,28(sp)
   43d68:	00800c44 	movi	r2,49
   43d6c:	31800044 	addi	r6,r6,1
   43d70:	d9800515 	stw	r6,20(sp)
   43d74:	18800005 	stb	r2,0(r3)
   43d78:	003ee906 	br	43920 <__alt_data_end+0xfffd2be0>
   43d7c:	dc000317 	ldw	r16,12(sp)
   43d80:	003d6006 	br	43304 <__alt_data_end+0xfffd25c4>
   43d84:	8809883a 	mov	r4,r17
   43d88:	004c78c0 	call	4c78c <__floatsidf>
   43d8c:	a009883a 	mov	r4,r20
   43d90:	a80b883a 	mov	r5,r21
   43d94:	100d883a 	mov	r6,r2
   43d98:	180f883a 	mov	r7,r3
   43d9c:	004b7100 	call	4b710 <__muldf3>
   43da0:	1009883a 	mov	r4,r2
   43da4:	180b883a 	mov	r5,r3
   43da8:	000d883a 	mov	r6,zero
   43dac:	01d00734 	movhi	r7,16412
   43db0:	004a3640 	call	4a364 <__adddf3>
   43db4:	1023883a 	mov	r17,r2
   43db8:	00bf3034 	movhi	r2,64704
   43dbc:	1885883a 	add	r2,r3,r2
   43dc0:	d8800e15 	stw	r2,56(sp)
   43dc4:	a009883a 	mov	r4,r20
   43dc8:	a80b883a 	mov	r5,r21
   43dcc:	000d883a 	mov	r6,zero
   43dd0:	01d00534 	movhi	r7,16404
   43dd4:	004be340 	call	4be34 <__subdf3>
   43dd8:	d9c00e17 	ldw	r7,56(sp)
   43ddc:	1009883a 	mov	r4,r2
   43de0:	180b883a 	mov	r5,r3
   43de4:	880d883a 	mov	r6,r17
   43de8:	102b883a 	mov	r21,r2
   43dec:	1829883a 	mov	r20,r3
   43df0:	004b5500 	call	4b550 <__gedf2>
   43df4:	00807716 	blt	zero,r2,43fd4 <_dtoa_r+0x1388>
   43df8:	d8800e17 	ldw	r2,56(sp)
   43dfc:	a809883a 	mov	r4,r21
   43e00:	a00b883a 	mov	r5,r20
   43e04:	11e0003c 	xorhi	r7,r2,32768
   43e08:	880d883a 	mov	r6,r17
   43e0c:	004b6300 	call	4b630 <__ledf2>
   43e10:	103d6b0e 	bge	r2,zero,433c0 <__alt_data_end+0xfffd2680>
   43e14:	002b883a 	mov	r21,zero
   43e18:	0023883a 	mov	r17,zero
   43e1c:	003f4c06 	br	43b50 <__alt_data_end+0xfffd2e10>
   43e20:	d9800917 	ldw	r6,36(sp)
   43e24:	e00b883a 	mov	r5,fp
   43e28:	8009883a 	mov	r4,r16
   43e2c:	00468ac0 	call	468ac <__pow5mult>
   43e30:	1039883a 	mov	fp,r2
   43e34:	003e2706 	br	436d4 <__alt_data_end+0xfffd2994>
   43e38:	d8000b15 	stw	zero,44(sp)
   43e3c:	003c4906 	br	42f64 <__alt_data_end+0xfffd2224>
   43e40:	d9000917 	ldw	r4,36(sp)
   43e44:	d9800a17 	ldw	r6,40(sp)
   43e48:	dd400915 	stw	r21,36(sp)
   43e4c:	a905c83a 	sub	r2,r21,r4
   43e50:	308d883a 	add	r6,r6,r2
   43e54:	d9800a15 	stw	r6,40(sp)
   43e58:	002b883a 	mov	r21,zero
   43e5c:	003df206 	br	43628 <__alt_data_end+0xfffd28e8>
   43e60:	dc800e15 	stw	r18,56(sp)
   43e64:	982b883a 	mov	r21,r19
   43e68:	04400084 	movi	r17,2
   43e6c:	003c7406 	br	43040 <__alt_data_end+0xfffd2300>
   43e70:	04400044 	movi	r17,1
   43e74:	dc400d15 	stw	r17,52(sp)
   43e78:	dc400615 	stw	r17,24(sp)
   43e7c:	dc402215 	stw	r17,136(sp)
   43e80:	80001115 	stw	zero,68(r16)
   43e84:	000b883a 	mov	r5,zero
   43e88:	003c4a06 	br	42fb4 <__alt_data_end+0xfffd2274>
   43e8c:	3023883a 	mov	r17,r6
   43e90:	003ffb06 	br	43e80 <__alt_data_end+0xfffd3140>
   43e94:	1000021e 	bne	r2,zero,43ea0 <_dtoa_r+0x1254>
   43e98:	4200004c 	andi	r8,r8,1
   43e9c:	403e8f1e 	bne	r8,zero,438dc <__alt_data_end+0xfffd2b9c>
   43ea0:	01000c04 	movi	r4,48
   43ea4:	00000106 	br	43eac <_dtoa_r+0x1260>
   43ea8:	102f883a 	mov	r23,r2
   43eac:	b8bfffc4 	addi	r2,r23,-1
   43eb0:	10c00007 	ldb	r3,0(r2)
   43eb4:	193ffc26 	beq	r3,r4,43ea8 <__alt_data_end+0xfffd3168>
   43eb8:	003e9906 	br	43920 <__alt_data_end+0xfffd2be0>
   43ebc:	d9000517 	ldw	r4,20(sp)
   43ec0:	012fc83a 	sub	r23,zero,r4
   43ec4:	b800ad26 	beq	r23,zero,4417c <_dtoa_r+0x1530>
   43ec8:	b88003cc 	andi	r2,r23,15
   43ecc:	100490fa 	slli	r2,r2,3
   43ed0:	00c00174 	movhi	r3,5
   43ed4:	18dea004 	addi	r3,r3,31360
   43ed8:	1885883a 	add	r2,r3,r2
   43edc:	11800017 	ldw	r6,0(r2)
   43ee0:	11c00117 	ldw	r7,4(r2)
   43ee4:	b82fd13a 	srai	r23,r23,4
   43ee8:	9009883a 	mov	r4,r18
   43eec:	980b883a 	mov	r5,r19
   43ef0:	004b7100 	call	4b710 <__muldf3>
   43ef4:	1029883a 	mov	r20,r2
   43ef8:	182b883a 	mov	r21,r3
   43efc:	b800f426 	beq	r23,zero,442d0 <_dtoa_r+0x1684>
   43f00:	02000174 	movhi	r8,5
   43f04:	421e9604 	addi	r8,r8,31320
   43f08:	8029883a 	mov	r20,r16
   43f0c:	04400084 	movi	r17,2
   43f10:	4021883a 	mov	r16,r8
   43f14:	b980004c 	andi	r6,r23,1
   43f18:	1009883a 	mov	r4,r2
   43f1c:	b82fd07a 	srai	r23,r23,1
   43f20:	180b883a 	mov	r5,r3
   43f24:	30000426 	beq	r6,zero,43f38 <_dtoa_r+0x12ec>
   43f28:	81800017 	ldw	r6,0(r16)
   43f2c:	81c00117 	ldw	r7,4(r16)
   43f30:	8c400044 	addi	r17,r17,1
   43f34:	004b7100 	call	4b710 <__muldf3>
   43f38:	84000204 	addi	r16,r16,8
   43f3c:	b83ff51e 	bne	r23,zero,43f14 <__alt_data_end+0xfffd31d4>
   43f40:	a021883a 	mov	r16,r20
   43f44:	182b883a 	mov	r21,r3
   43f48:	1029883a 	mov	r20,r2
   43f4c:	003c5506 	br	430a4 <__alt_data_end+0xfffd2364>
   43f50:	d9800517 	ldw	r6,20(sp)
   43f54:	d9000717 	ldw	r4,28(sp)
   43f58:	00c00c04 	movi	r3,48
   43f5c:	31800044 	addi	r6,r6,1
   43f60:	d9800515 	stw	r6,20(sp)
   43f64:	20c00005 	stb	r3,0(r4)
   43f68:	02000c44 	movi	r8,49
   43f6c:	003da206 	br	435f8 <__alt_data_end+0xfffd28b8>
   43f70:	89400117 	ldw	r5,4(r17)
   43f74:	8009883a 	mov	r4,r16
   43f78:	00462740 	call	46274 <_Balloc>
   43f7c:	89800417 	ldw	r6,16(r17)
   43f80:	11000304 	addi	r4,r2,12
   43f84:	89400304 	addi	r5,r17,12
   43f88:	31800084 	addi	r6,r6,2
   43f8c:	318d883a 	add	r6,r6,r6
   43f90:	318d883a 	add	r6,r6,r6
   43f94:	1027883a 	mov	r19,r2
   43f98:	0045ebc0 	call	45ebc <memcpy>
   43f9c:	8009883a 	mov	r4,r16
   43fa0:	980b883a 	mov	r5,r19
   43fa4:	01800044 	movi	r6,1
   43fa8:	00469ec0 	call	469ec <__lshift>
   43fac:	1029883a 	mov	r20,r2
   43fb0:	003e8606 	br	439cc <__alt_data_end+0xfffd2c8c>
   43fb4:	00800e44 	movi	r2,57
   43fb8:	90809526 	beq	r18,r2,44210 <_dtoa_r+0x15c4>
   43fbc:	92000044 	addi	r8,r18,1
   43fc0:	003f2306 	br	43c50 <__alt_data_end+0xfffd2f10>
   43fc4:	9011883a 	mov	r8,r18
   43fc8:	8825883a 	mov	r18,r17
   43fcc:	a023883a 	mov	r17,r20
   43fd0:	003e3706 	br	438b0 <__alt_data_end+0xfffd2b70>
   43fd4:	002b883a 	mov	r21,zero
   43fd8:	0023883a 	mov	r17,zero
   43fdc:	003f5606 	br	43d38 <__alt_data_end+0xfffd2ff8>
   43fe0:	51bfffc4 	addi	r6,r10,-1
   43fe4:	300490fa 	slli	r2,r6,3
   43fe8:	00c00174 	movhi	r3,5
   43fec:	18dea004 	addi	r3,r3,31360
   43ff0:	1885883a 	add	r2,r3,r2
   43ff4:	d9c00e17 	ldw	r7,56(sp)
   43ff8:	11000017 	ldw	r4,0(r2)
   43ffc:	11400117 	ldw	r5,4(r2)
   44000:	d8800717 	ldw	r2,28(sp)
   44004:	d9801015 	stw	r6,64(sp)
   44008:	880d883a 	mov	r6,r17
   4400c:	da801615 	stw	r10,88(sp)
   44010:	15c00044 	addi	r23,r2,1
   44014:	004b7100 	call	4b710 <__muldf3>
   44018:	a80b883a 	mov	r5,r21
   4401c:	a009883a 	mov	r4,r20
   44020:	d8c01115 	stw	r3,68(sp)
   44024:	d8800e15 	stw	r2,56(sp)
   44028:	004c7040 	call	4c704 <__fixdfsi>
   4402c:	1009883a 	mov	r4,r2
   44030:	1023883a 	mov	r17,r2
   44034:	004c78c0 	call	4c78c <__floatsidf>
   44038:	a009883a 	mov	r4,r20
   4403c:	a80b883a 	mov	r5,r21
   44040:	100d883a 	mov	r6,r2
   44044:	180f883a 	mov	r7,r3
   44048:	004be340 	call	4be34 <__subdf3>
   4404c:	1813883a 	mov	r9,r3
   44050:	d8c00717 	ldw	r3,28(sp)
   44054:	8c400c04 	addi	r17,r17,48
   44058:	1011883a 	mov	r8,r2
   4405c:	1c400005 	stb	r17,0(r3)
   44060:	da801617 	ldw	r10,88(sp)
   44064:	00800044 	movi	r2,1
   44068:	50802326 	beq	r10,r2,440f8 <_dtoa_r+0x14ac>
   4406c:	d8800717 	ldw	r2,28(sp)
   44070:	b82b883a 	mov	r21,r23
   44074:	dc001315 	stw	r16,76(sp)
   44078:	12a9883a 	add	r20,r2,r10
   4407c:	4807883a 	mov	r3,r9
   44080:	4005883a 	mov	r2,r8
   44084:	dc801415 	stw	r18,80(sp)
   44088:	000d883a 	mov	r6,zero
   4408c:	01d00934 	movhi	r7,16420
   44090:	1009883a 	mov	r4,r2
   44094:	180b883a 	mov	r5,r3
   44098:	004b7100 	call	4b710 <__muldf3>
   4409c:	180b883a 	mov	r5,r3
   440a0:	1009883a 	mov	r4,r2
   440a4:	1821883a 	mov	r16,r3
   440a8:	1025883a 	mov	r18,r2
   440ac:	004c7040 	call	4c704 <__fixdfsi>
   440b0:	1009883a 	mov	r4,r2
   440b4:	1023883a 	mov	r17,r2
   440b8:	004c78c0 	call	4c78c <__floatsidf>
   440bc:	9009883a 	mov	r4,r18
   440c0:	800b883a 	mov	r5,r16
   440c4:	100d883a 	mov	r6,r2
   440c8:	180f883a 	mov	r7,r3
   440cc:	8c400c04 	addi	r17,r17,48
   440d0:	004be340 	call	4be34 <__subdf3>
   440d4:	ad400044 	addi	r21,r21,1
   440d8:	ac7fffc5 	stb	r17,-1(r21)
   440dc:	ad3fea1e 	bne	r21,r20,44088 <__alt_data_end+0xfffd3348>
   440e0:	1813883a 	mov	r9,r3
   440e4:	d8c01017 	ldw	r3,64(sp)
   440e8:	dc001317 	ldw	r16,76(sp)
   440ec:	dc801417 	ldw	r18,80(sp)
   440f0:	1011883a 	mov	r8,r2
   440f4:	b8ef883a 	add	r23,r23,r3
   440f8:	d9000e17 	ldw	r4,56(sp)
   440fc:	d9401117 	ldw	r5,68(sp)
   44100:	000d883a 	mov	r6,zero
   44104:	01cff834 	movhi	r7,16352
   44108:	da001715 	stw	r8,92(sp)
   4410c:	da401515 	stw	r9,84(sp)
   44110:	004a3640 	call	4a364 <__adddf3>
   44114:	da001717 	ldw	r8,92(sp)
   44118:	da401517 	ldw	r9,84(sp)
   4411c:	1009883a 	mov	r4,r2
   44120:	400d883a 	mov	r6,r8
   44124:	480f883a 	mov	r7,r9
   44128:	180b883a 	mov	r5,r3
   4412c:	004b6300 	call	4b630 <__ledf2>
   44130:	da001717 	ldw	r8,92(sp)
   44134:	da401517 	ldw	r9,84(sp)
   44138:	10003b0e 	bge	r2,zero,44228 <_dtoa_r+0x15dc>
   4413c:	d9001217 	ldw	r4,72(sp)
   44140:	bd7fffc3 	ldbu	r21,-1(r23)
   44144:	d9000515 	stw	r4,20(sp)
   44148:	003d1c06 	br	435bc <__alt_data_end+0xfffd287c>
   4414c:	d8c00817 	ldw	r3,32(sp)
   44150:	18a9c83a 	sub	r20,r3,r2
   44154:	0005883a 	mov	r2,zero
   44158:	003d3706 	br	43638 <__alt_data_end+0xfffd28f8>
   4415c:	00800044 	movi	r2,1
   44160:	003dd006 	br	438a4 <__alt_data_end+0xfffd2b64>
   44164:	d8c00217 	ldw	r3,8(sp)
   44168:	00800d84 	movi	r2,54
   4416c:	dd400917 	ldw	r21,36(sp)
   44170:	10c5c83a 	sub	r2,r2,r3
   44174:	dd000817 	ldw	r20,32(sp)
   44178:	003d2f06 	br	43638 <__alt_data_end+0xfffd28f8>
   4417c:	9029883a 	mov	r20,r18
   44180:	982b883a 	mov	r21,r19
   44184:	04400084 	movi	r17,2
   44188:	003bc606 	br	430a4 <__alt_data_end+0xfffd2364>
   4418c:	d8800617 	ldw	r2,24(sp)
   44190:	103efc26 	beq	r2,zero,43d84 <__alt_data_end+0xfffd3044>
   44194:	d8c00d17 	ldw	r3,52(sp)
   44198:	00fc890e 	bge	zero,r3,433c0 <__alt_data_end+0xfffd2680>
   4419c:	a80b883a 	mov	r5,r21
   441a0:	a009883a 	mov	r4,r20
   441a4:	000d883a 	mov	r6,zero
   441a8:	01d00934 	movhi	r7,16420
   441ac:	004b7100 	call	4b710 <__muldf3>
   441b0:	89000044 	addi	r4,r17,1
   441b4:	1029883a 	mov	r20,r2
   441b8:	182b883a 	mov	r21,r3
   441bc:	004c78c0 	call	4c78c <__floatsidf>
   441c0:	a009883a 	mov	r4,r20
   441c4:	a80b883a 	mov	r5,r21
   441c8:	100d883a 	mov	r6,r2
   441cc:	180f883a 	mov	r7,r3
   441d0:	004b7100 	call	4b710 <__muldf3>
   441d4:	1009883a 	mov	r4,r2
   441d8:	180b883a 	mov	r5,r3
   441dc:	000d883a 	mov	r6,zero
   441e0:	01d00734 	movhi	r7,16412
   441e4:	004a3640 	call	4a364 <__adddf3>
   441e8:	d9000517 	ldw	r4,20(sp)
   441ec:	1023883a 	mov	r17,r2
   441f0:	00bf3034 	movhi	r2,64704
   441f4:	213fffc4 	addi	r4,r4,-1
   441f8:	1885883a 	add	r2,r3,r2
   441fc:	d9001215 	stw	r4,72(sp)
   44200:	d8800e15 	stw	r2,56(sp)
   44204:	da800d17 	ldw	r10,52(sp)
   44208:	003bc306 	br	43118 <__alt_data_end+0xfffd23d8>
   4420c:	b039883a 	mov	fp,r22
   44210:	01000e44 	movi	r4,57
   44214:	8825883a 	mov	r18,r17
   44218:	9dc00044 	addi	r23,r19,1
   4421c:	99000005 	stb	r4,0(r19)
   44220:	a023883a 	mov	r17,r20
   44224:	003dae06 	br	438e0 <__alt_data_end+0xfffd2ba0>
   44228:	d9800e17 	ldw	r6,56(sp)
   4422c:	d9c01117 	ldw	r7,68(sp)
   44230:	0009883a 	mov	r4,zero
   44234:	014ff834 	movhi	r5,16352
   44238:	da001715 	stw	r8,92(sp)
   4423c:	da401515 	stw	r9,84(sp)
   44240:	004be340 	call	4be34 <__subdf3>
   44244:	da001717 	ldw	r8,92(sp)
   44248:	da401517 	ldw	r9,84(sp)
   4424c:	1009883a 	mov	r4,r2
   44250:	180b883a 	mov	r5,r3
   44254:	400d883a 	mov	r6,r8
   44258:	480f883a 	mov	r7,r9
   4425c:	004b5500 	call	4b550 <__gedf2>
   44260:	00bc570e 	bge	zero,r2,433c0 <__alt_data_end+0xfffd2680>
   44264:	01000c04 	movi	r4,48
   44268:	00000106 	br	44270 <_dtoa_r+0x1624>
   4426c:	102f883a 	mov	r23,r2
   44270:	b8bfffc4 	addi	r2,r23,-1
   44274:	10c00007 	ldb	r3,0(r2)
   44278:	193ffc26 	beq	r3,r4,4426c <__alt_data_end+0xfffd352c>
   4427c:	d9801217 	ldw	r6,72(sp)
   44280:	d9800515 	stw	r6,20(sp)
   44284:	003c1f06 	br	43304 <__alt_data_end+0xfffd25c4>
   44288:	d8801217 	ldw	r2,72(sp)
   4428c:	dc001117 	ldw	r16,68(sp)
   44290:	d8800515 	stw	r2,20(sp)
   44294:	003cc906 	br	435bc <__alt_data_end+0xfffd287c>
   44298:	dd801317 	ldw	r22,76(sp)
   4429c:	dc001117 	ldw	r16,68(sp)
   442a0:	dcc01417 	ldw	r19,80(sp)
   442a4:	dc801017 	ldw	r18,64(sp)
   442a8:	003c4506 	br	433c0 <__alt_data_end+0xfffd2680>
   442ac:	103e5d1e 	bne	r2,zero,43c24 <__alt_data_end+0xfffd2ee4>
   442b0:	4080004c 	andi	r2,r8,1
   442b4:	103e5b26 	beq	r2,zero,43c24 <__alt_data_end+0xfffd2ee4>
   442b8:	003e5706 	br	43c18 <__alt_data_end+0xfffd2ed8>
   442bc:	d8c00317 	ldw	r3,12(sp)
   442c0:	00800084 	movi	r2,2
   442c4:	10c00a16 	blt	r2,r3,442f0 <_dtoa_r+0x16a4>
   442c8:	d9000d17 	ldw	r4,52(sp)
   442cc:	003e8306 	br	43cdc <__alt_data_end+0xfffd2f9c>
   442d0:	04400084 	movi	r17,2
   442d4:	003b7306 	br	430a4 <__alt_data_end+0xfffd2364>
   442d8:	d9801217 	ldw	r6,72(sp)
   442dc:	d9800515 	stw	r6,20(sp)
   442e0:	003cb606 	br	435bc <__alt_data_end+0xfffd287c>
   442e4:	d9001217 	ldw	r4,72(sp)
   442e8:	d9000515 	stw	r4,20(sp)
   442ec:	003c0506 	br	43304 <__alt_data_end+0xfffd25c4>
   442f0:	d9800d17 	ldw	r6,52(sp)
   442f4:	d9800615 	stw	r6,24(sp)
   442f8:	003e8306 	br	43d08 <__alt_data_end+0xfffd2fc8>
   442fc:	d9800317 	ldw	r6,12(sp)
   44300:	00800084 	movi	r2,2
   44304:	11800216 	blt	r2,r6,44310 <_dtoa_r+0x16c4>
   44308:	d8800d17 	ldw	r2,52(sp)
   4430c:	003da606 	br	439a8 <__alt_data_end+0xfffd2c68>
   44310:	d8800d17 	ldw	r2,52(sp)
   44314:	d8800615 	stw	r2,24(sp)
   44318:	003e7b06 	br	43d08 <__alt_data_end+0xfffd2fc8>
   4431c:	05000044 	movi	r20,1
   44320:	003b0506 	br	42f38 <__alt_data_end+0xfffd21f8>
   44324:	8009883a 	mov	r4,r16
   44328:	80001115 	stw	zero,68(r16)
   4432c:	000b883a 	mov	r5,zero
   44330:	00462740 	call	46274 <_Balloc>
   44334:	d8800715 	stw	r2,28(sp)
   44338:	d8c00717 	ldw	r3,28(sp)
   4433c:	00bfffc4 	movi	r2,-1
   44340:	01000044 	movi	r4,1
   44344:	d8800615 	stw	r2,24(sp)
   44348:	80c01015 	stw	r3,64(r16)
   4434c:	d9000b15 	stw	r4,44(sp)
   44350:	d8002215 	stw	zero,136(sp)
   44354:	d8800d15 	stw	r2,52(sp)
   44358:	003c1906 	br	433c0 <__alt_data_end+0xfffd2680>
   4435c:	193d2926 	beq	r3,r4,43804 <__alt_data_end+0xfffd2ac4>
   44360:	00c00f04 	movi	r3,60
   44364:	1885c83a 	sub	r2,r3,r2
   44368:	003d7b06 	br	43958 <__alt_data_end+0xfffd2c18>
   4436c:	000b883a 	mov	r5,zero
   44370:	003b1006 	br	42fb4 <__alt_data_end+0xfffd2274>

00044374 <_fflush_r>:
   44374:	defffb04 	addi	sp,sp,-20
   44378:	dcc00315 	stw	r19,12(sp)
   4437c:	dc000015 	stw	r16,0(sp)
   44380:	dfc00415 	stw	ra,16(sp)
   44384:	dc800215 	stw	r18,8(sp)
   44388:	dc400115 	stw	r17,4(sp)
   4438c:	2027883a 	mov	r19,r4
   44390:	2821883a 	mov	r16,r5
   44394:	20000226 	beq	r4,zero,443a0 <_fflush_r+0x2c>
   44398:	20800e17 	ldw	r2,56(r4)
   4439c:	10005326 	beq	r2,zero,444ec <_fflush_r+0x178>
   443a0:	8080030b 	ldhu	r2,12(r16)
   443a4:	10ffffcc 	andi	r3,r2,65535
   443a8:	18e0001c 	xori	r3,r3,32768
   443ac:	18e00004 	addi	r3,r3,-32768
   443b0:	18002c26 	beq	r3,zero,44464 <_fflush_r+0xf0>
   443b4:	10c0020c 	andi	r3,r2,8
   443b8:	1800321e 	bne	r3,zero,44484 <_fflush_r+0x110>
   443bc:	80c00117 	ldw	r3,4(r16)
   443c0:	10820014 	ori	r2,r2,2048
   443c4:	8080030d 	sth	r2,12(r16)
   443c8:	00c0570e 	bge	zero,r3,44528 <_fflush_r+0x1b4>
   443cc:	82000a17 	ldw	r8,40(r16)
   443d0:	40002426 	beq	r8,zero,44464 <_fflush_r+0xf0>
   443d4:	9c400017 	ldw	r17,0(r19)
   443d8:	10c4000c 	andi	r3,r2,4096
   443dc:	98000015 	stw	zero,0(r19)
   443e0:	18004626 	beq	r3,zero,444fc <_fflush_r+0x188>
   443e4:	81801417 	ldw	r6,80(r16)
   443e8:	10c0010c 	andi	r3,r2,4
   443ec:	18000626 	beq	r3,zero,44408 <_fflush_r+0x94>
   443f0:	80c00117 	ldw	r3,4(r16)
   443f4:	80800c17 	ldw	r2,48(r16)
   443f8:	30cdc83a 	sub	r6,r6,r3
   443fc:	10000226 	beq	r2,zero,44408 <_fflush_r+0x94>
   44400:	80800f17 	ldw	r2,60(r16)
   44404:	308dc83a 	sub	r6,r6,r2
   44408:	81400717 	ldw	r5,28(r16)
   4440c:	9809883a 	mov	r4,r19
   44410:	000f883a 	mov	r7,zero
   44414:	403ee83a 	callr	r8
   44418:	00ffffc4 	movi	r3,-1
   4441c:	10c04526 	beq	r2,r3,44534 <_fflush_r+0x1c0>
   44420:	80c0030b 	ldhu	r3,12(r16)
   44424:	81000417 	ldw	r4,16(r16)
   44428:	80000115 	stw	zero,4(r16)
   4442c:	197dffcc 	andi	r5,r3,63487
   44430:	8140030d 	sth	r5,12(r16)
   44434:	81000015 	stw	r4,0(r16)
   44438:	18c4000c 	andi	r3,r3,4096
   4443c:	18000126 	beq	r3,zero,44444 <_fflush_r+0xd0>
   44440:	80801415 	stw	r2,80(r16)
   44444:	81400c17 	ldw	r5,48(r16)
   44448:	9c400015 	stw	r17,0(r19)
   4444c:	28000526 	beq	r5,zero,44464 <_fflush_r+0xf0>
   44450:	80801004 	addi	r2,r16,64
   44454:	28800226 	beq	r5,r2,44460 <_fflush_r+0xec>
   44458:	9809883a 	mov	r4,r19
   4445c:	0044a900 	call	44a90 <_free_r>
   44460:	80000c15 	stw	zero,48(r16)
   44464:	0005883a 	mov	r2,zero
   44468:	dfc00417 	ldw	ra,16(sp)
   4446c:	dcc00317 	ldw	r19,12(sp)
   44470:	dc800217 	ldw	r18,8(sp)
   44474:	dc400117 	ldw	r17,4(sp)
   44478:	dc000017 	ldw	r16,0(sp)
   4447c:	dec00504 	addi	sp,sp,20
   44480:	f800283a 	ret
   44484:	84800417 	ldw	r18,16(r16)
   44488:	903ff626 	beq	r18,zero,44464 <__alt_data_end+0xfffd3724>
   4448c:	84400017 	ldw	r17,0(r16)
   44490:	108000cc 	andi	r2,r2,3
   44494:	84800015 	stw	r18,0(r16)
   44498:	8ca3c83a 	sub	r17,r17,r18
   4449c:	10001526 	beq	r2,zero,444f4 <_fflush_r+0x180>
   444a0:	0005883a 	mov	r2,zero
   444a4:	80800215 	stw	r2,8(r16)
   444a8:	04400316 	blt	zero,r17,444b8 <_fflush_r+0x144>
   444ac:	003fed06 	br	44464 <__alt_data_end+0xfffd3724>
   444b0:	90a5883a 	add	r18,r18,r2
   444b4:	047feb0e 	bge	zero,r17,44464 <__alt_data_end+0xfffd3724>
   444b8:	80800917 	ldw	r2,36(r16)
   444bc:	81400717 	ldw	r5,28(r16)
   444c0:	880f883a 	mov	r7,r17
   444c4:	900d883a 	mov	r6,r18
   444c8:	9809883a 	mov	r4,r19
   444cc:	103ee83a 	callr	r2
   444d0:	88a3c83a 	sub	r17,r17,r2
   444d4:	00bff616 	blt	zero,r2,444b0 <__alt_data_end+0xfffd3770>
   444d8:	80c0030b 	ldhu	r3,12(r16)
   444dc:	00bfffc4 	movi	r2,-1
   444e0:	18c01014 	ori	r3,r3,64
   444e4:	80c0030d 	sth	r3,12(r16)
   444e8:	003fdf06 	br	44468 <__alt_data_end+0xfffd3728>
   444ec:	004491c0 	call	4491c <__sinit>
   444f0:	003fab06 	br	443a0 <__alt_data_end+0xfffd3660>
   444f4:	80800517 	ldw	r2,20(r16)
   444f8:	003fea06 	br	444a4 <__alt_data_end+0xfffd3764>
   444fc:	81400717 	ldw	r5,28(r16)
   44500:	000d883a 	mov	r6,zero
   44504:	9809883a 	mov	r4,r19
   44508:	01c00044 	movi	r7,1
   4450c:	403ee83a 	callr	r8
   44510:	100d883a 	mov	r6,r2
   44514:	00bfffc4 	movi	r2,-1
   44518:	30801326 	beq	r6,r2,44568 <_fflush_r+0x1f4>
   4451c:	8080030b 	ldhu	r2,12(r16)
   44520:	82000a17 	ldw	r8,40(r16)
   44524:	003fb006 	br	443e8 <__alt_data_end+0xfffd36a8>
   44528:	80c00f17 	ldw	r3,60(r16)
   4452c:	00ffa716 	blt	zero,r3,443cc <__alt_data_end+0xfffd368c>
   44530:	003fcc06 	br	44464 <__alt_data_end+0xfffd3724>
   44534:	98c00017 	ldw	r3,0(r19)
   44538:	183fb926 	beq	r3,zero,44420 <__alt_data_end+0xfffd36e0>
   4453c:	01000744 	movi	r4,29
   44540:	19000226 	beq	r3,r4,4454c <_fflush_r+0x1d8>
   44544:	01000584 	movi	r4,22
   44548:	1900101e 	bne	r3,r4,4458c <_fflush_r+0x218>
   4454c:	8080030b 	ldhu	r2,12(r16)
   44550:	80c00417 	ldw	r3,16(r16)
   44554:	80000115 	stw	zero,4(r16)
   44558:	10bdffcc 	andi	r2,r2,63487
   4455c:	8080030d 	sth	r2,12(r16)
   44560:	80c00015 	stw	r3,0(r16)
   44564:	003fb706 	br	44444 <__alt_data_end+0xfffd3704>
   44568:	98800017 	ldw	r2,0(r19)
   4456c:	103feb26 	beq	r2,zero,4451c <__alt_data_end+0xfffd37dc>
   44570:	00c00744 	movi	r3,29
   44574:	10c00226 	beq	r2,r3,44580 <_fflush_r+0x20c>
   44578:	00c00584 	movi	r3,22
   4457c:	10ffd61e 	bne	r2,r3,444d8 <__alt_data_end+0xfffd3798>
   44580:	9c400015 	stw	r17,0(r19)
   44584:	0005883a 	mov	r2,zero
   44588:	003fb706 	br	44468 <__alt_data_end+0xfffd3728>
   4458c:	80c0030b 	ldhu	r3,12(r16)
   44590:	18c01014 	ori	r3,r3,64
   44594:	80c0030d 	sth	r3,12(r16)
   44598:	003fb306 	br	44468 <__alt_data_end+0xfffd3728>

0004459c <fflush>:
   4459c:	20000526 	beq	r4,zero,445b4 <fflush+0x18>
   445a0:	008001b4 	movhi	r2,6
   445a4:	10a62104 	addi	r2,r2,-26492
   445a8:	200b883a 	mov	r5,r4
   445ac:	11000017 	ldw	r4,0(r2)
   445b0:	00443741 	jmpi	44374 <_fflush_r>
   445b4:	008001b4 	movhi	r2,6
   445b8:	10a62004 	addi	r2,r2,-26496
   445bc:	11000017 	ldw	r4,0(r2)
   445c0:	01400134 	movhi	r5,4
   445c4:	2950dd04 	addi	r5,r5,17268
   445c8:	00452dc1 	jmpi	452dc <_fwalk_reent>

000445cc <__fp_lock>:
   445cc:	0005883a 	mov	r2,zero
   445d0:	f800283a 	ret

000445d4 <__fp_unlock>:
   445d4:	0005883a 	mov	r2,zero
   445d8:	f800283a 	ret

000445dc <_cleanup_r>:
   445dc:	01400174 	movhi	r5,5
   445e0:	29645404 	addi	r5,r5,-28336
   445e4:	00452241 	jmpi	45224 <_fwalk>

000445e8 <__sinit.part.1>:
   445e8:	defff604 	addi	sp,sp,-40
   445ec:	00c00134 	movhi	r3,4
   445f0:	dfc00915 	stw	ra,36(sp)
   445f4:	df000815 	stw	fp,32(sp)
   445f8:	ddc00715 	stw	r23,28(sp)
   445fc:	dd800615 	stw	r22,24(sp)
   44600:	dd400515 	stw	r21,20(sp)
   44604:	dd000415 	stw	r20,16(sp)
   44608:	dcc00315 	stw	r19,12(sp)
   4460c:	dc800215 	stw	r18,8(sp)
   44610:	dc400115 	stw	r17,4(sp)
   44614:	dc000015 	stw	r16,0(sp)
   44618:	18d17704 	addi	r3,r3,17884
   4461c:	24000117 	ldw	r16,4(r4)
   44620:	20c00f15 	stw	r3,60(r4)
   44624:	07000044 	movi	fp,1
   44628:	00c000c4 	movi	r3,3
   4462c:	2080bb04 	addi	r2,r4,748
   44630:	20c0b915 	stw	r3,740(r4)
   44634:	27000e15 	stw	fp,56(r4)
   44638:	2080ba15 	stw	r2,744(r4)
   4463c:	2000b815 	stw	zero,736(r4)
   44640:	05c00204 	movi	r23,8
   44644:	00800104 	movi	r2,4
   44648:	2025883a 	mov	r18,r4
   4464c:	b80d883a 	mov	r6,r23
   44650:	81001704 	addi	r4,r16,92
   44654:	000b883a 	mov	r5,zero
   44658:	80000015 	stw	zero,0(r16)
   4465c:	80000115 	stw	zero,4(r16)
   44660:	80000215 	stw	zero,8(r16)
   44664:	8080030d 	sth	r2,12(r16)
   44668:	80001915 	stw	zero,100(r16)
   4466c:	8000038d 	sth	zero,14(r16)
   44670:	80000415 	stw	zero,16(r16)
   44674:	80000515 	stw	zero,20(r16)
   44678:	80000615 	stw	zero,24(r16)
   4467c:	00461500 	call	46150 <memset>
   44680:	05800134 	movhi	r22,4
   44684:	94400217 	ldw	r17,8(r18)
   44688:	05400134 	movhi	r21,4
   4468c:	05000134 	movhi	r20,4
   44690:	04c00134 	movhi	r19,4
   44694:	b59e1a04 	addi	r22,r22,30824
   44698:	ad5e3104 	addi	r21,r21,30916
   4469c:	a51e5004 	addi	r20,r20,31040
   446a0:	9cde6704 	addi	r19,r19,31132
   446a4:	85800815 	stw	r22,32(r16)
   446a8:	85400915 	stw	r21,36(r16)
   446ac:	85000a15 	stw	r20,40(r16)
   446b0:	84c00b15 	stw	r19,44(r16)
   446b4:	84000715 	stw	r16,28(r16)
   446b8:	00800284 	movi	r2,10
   446bc:	89001704 	addi	r4,r17,92
   446c0:	b80d883a 	mov	r6,r23
   446c4:	000b883a 	mov	r5,zero
   446c8:	88000015 	stw	zero,0(r17)
   446cc:	88000115 	stw	zero,4(r17)
   446d0:	88000215 	stw	zero,8(r17)
   446d4:	8880030d 	sth	r2,12(r17)
   446d8:	88001915 	stw	zero,100(r17)
   446dc:	8f00038d 	sth	fp,14(r17)
   446e0:	88000415 	stw	zero,16(r17)
   446e4:	88000515 	stw	zero,20(r17)
   446e8:	88000615 	stw	zero,24(r17)
   446ec:	00461500 	call	46150 <memset>
   446f0:	94000317 	ldw	r16,12(r18)
   446f4:	00800484 	movi	r2,18
   446f8:	8c400715 	stw	r17,28(r17)
   446fc:	8d800815 	stw	r22,32(r17)
   44700:	8d400915 	stw	r21,36(r17)
   44704:	8d000a15 	stw	r20,40(r17)
   44708:	8cc00b15 	stw	r19,44(r17)
   4470c:	8080030d 	sth	r2,12(r16)
   44710:	00800084 	movi	r2,2
   44714:	80000015 	stw	zero,0(r16)
   44718:	80000115 	stw	zero,4(r16)
   4471c:	80000215 	stw	zero,8(r16)
   44720:	80001915 	stw	zero,100(r16)
   44724:	8080038d 	sth	r2,14(r16)
   44728:	80000415 	stw	zero,16(r16)
   4472c:	80000515 	stw	zero,20(r16)
   44730:	80000615 	stw	zero,24(r16)
   44734:	81001704 	addi	r4,r16,92
   44738:	000b883a 	mov	r5,zero
   4473c:	b80d883a 	mov	r6,r23
   44740:	00461500 	call	46150 <memset>
   44744:	84000715 	stw	r16,28(r16)
   44748:	85800815 	stw	r22,32(r16)
   4474c:	85400915 	stw	r21,36(r16)
   44750:	85000a15 	stw	r20,40(r16)
   44754:	84c00b15 	stw	r19,44(r16)
   44758:	dfc00917 	ldw	ra,36(sp)
   4475c:	df000817 	ldw	fp,32(sp)
   44760:	ddc00717 	ldw	r23,28(sp)
   44764:	dd800617 	ldw	r22,24(sp)
   44768:	dd400517 	ldw	r21,20(sp)
   4476c:	dd000417 	ldw	r20,16(sp)
   44770:	dcc00317 	ldw	r19,12(sp)
   44774:	dc800217 	ldw	r18,8(sp)
   44778:	dc400117 	ldw	r17,4(sp)
   4477c:	dc000017 	ldw	r16,0(sp)
   44780:	dec00a04 	addi	sp,sp,40
   44784:	f800283a 	ret

00044788 <__sfmoreglue>:
   44788:	defffc04 	addi	sp,sp,-16
   4478c:	dc400115 	stw	r17,4(sp)
   44790:	2c401a24 	muli	r17,r5,104
   44794:	dc800215 	stw	r18,8(sp)
   44798:	2825883a 	mov	r18,r5
   4479c:	89400304 	addi	r5,r17,12
   447a0:	dc000015 	stw	r16,0(sp)
   447a4:	dfc00315 	stw	ra,12(sp)
   447a8:	004562c0 	call	4562c <_malloc_r>
   447ac:	1021883a 	mov	r16,r2
   447b0:	10000726 	beq	r2,zero,447d0 <__sfmoreglue+0x48>
   447b4:	11000304 	addi	r4,r2,12
   447b8:	10000015 	stw	zero,0(r2)
   447bc:	14800115 	stw	r18,4(r2)
   447c0:	11000215 	stw	r4,8(r2)
   447c4:	000b883a 	mov	r5,zero
   447c8:	880d883a 	mov	r6,r17
   447cc:	00461500 	call	46150 <memset>
   447d0:	8005883a 	mov	r2,r16
   447d4:	dfc00317 	ldw	ra,12(sp)
   447d8:	dc800217 	ldw	r18,8(sp)
   447dc:	dc400117 	ldw	r17,4(sp)
   447e0:	dc000017 	ldw	r16,0(sp)
   447e4:	dec00404 	addi	sp,sp,16
   447e8:	f800283a 	ret

000447ec <__sfp>:
   447ec:	008001b4 	movhi	r2,6
   447f0:	defffb04 	addi	sp,sp,-20
   447f4:	10a62004 	addi	r2,r2,-26496
   447f8:	dc800215 	stw	r18,8(sp)
   447fc:	14800017 	ldw	r18,0(r2)
   44800:	dcc00315 	stw	r19,12(sp)
   44804:	dfc00415 	stw	ra,16(sp)
   44808:	90800e17 	ldw	r2,56(r18)
   4480c:	dc400115 	stw	r17,4(sp)
   44810:	dc000015 	stw	r16,0(sp)
   44814:	2027883a 	mov	r19,r4
   44818:	1000021e 	bne	r2,zero,44824 <__sfp+0x38>
   4481c:	9009883a 	mov	r4,r18
   44820:	00445e80 	call	445e8 <__sinit.part.1>
   44824:	9480b804 	addi	r18,r18,736
   44828:	047fffc4 	movi	r17,-1
   4482c:	91400117 	ldw	r5,4(r18)
   44830:	94000217 	ldw	r16,8(r18)
   44834:	297fffc4 	addi	r5,r5,-1
   44838:	28000a16 	blt	r5,zero,44864 <__sfp+0x78>
   4483c:	8080030f 	ldh	r2,12(r16)
   44840:	10000c26 	beq	r2,zero,44874 <__sfp+0x88>
   44844:	80c01d04 	addi	r3,r16,116
   44848:	00000206 	br	44854 <__sfp+0x68>
   4484c:	18bfe60f 	ldh	r2,-104(r3)
   44850:	10000826 	beq	r2,zero,44874 <__sfp+0x88>
   44854:	297fffc4 	addi	r5,r5,-1
   44858:	1c3ffd04 	addi	r16,r3,-12
   4485c:	18c01a04 	addi	r3,r3,104
   44860:	2c7ffa1e 	bne	r5,r17,4484c <__alt_data_end+0xfffd3b0c>
   44864:	90800017 	ldw	r2,0(r18)
   44868:	10001d26 	beq	r2,zero,448e0 <__sfp+0xf4>
   4486c:	1025883a 	mov	r18,r2
   44870:	003fee06 	br	4482c <__alt_data_end+0xfffd3aec>
   44874:	00bfffc4 	movi	r2,-1
   44878:	8080038d 	sth	r2,14(r16)
   4487c:	00800044 	movi	r2,1
   44880:	8080030d 	sth	r2,12(r16)
   44884:	80001915 	stw	zero,100(r16)
   44888:	80000015 	stw	zero,0(r16)
   4488c:	80000215 	stw	zero,8(r16)
   44890:	80000115 	stw	zero,4(r16)
   44894:	80000415 	stw	zero,16(r16)
   44898:	80000515 	stw	zero,20(r16)
   4489c:	80000615 	stw	zero,24(r16)
   448a0:	81001704 	addi	r4,r16,92
   448a4:	000b883a 	mov	r5,zero
   448a8:	01800204 	movi	r6,8
   448ac:	00461500 	call	46150 <memset>
   448b0:	8005883a 	mov	r2,r16
   448b4:	80000c15 	stw	zero,48(r16)
   448b8:	80000d15 	stw	zero,52(r16)
   448bc:	80001115 	stw	zero,68(r16)
   448c0:	80001215 	stw	zero,72(r16)
   448c4:	dfc00417 	ldw	ra,16(sp)
   448c8:	dcc00317 	ldw	r19,12(sp)
   448cc:	dc800217 	ldw	r18,8(sp)
   448d0:	dc400117 	ldw	r17,4(sp)
   448d4:	dc000017 	ldw	r16,0(sp)
   448d8:	dec00504 	addi	sp,sp,20
   448dc:	f800283a 	ret
   448e0:	9809883a 	mov	r4,r19
   448e4:	01400104 	movi	r5,4
   448e8:	00447880 	call	44788 <__sfmoreglue>
   448ec:	90800015 	stw	r2,0(r18)
   448f0:	103fde1e 	bne	r2,zero,4486c <__alt_data_end+0xfffd3b2c>
   448f4:	00800304 	movi	r2,12
   448f8:	98800015 	stw	r2,0(r19)
   448fc:	0005883a 	mov	r2,zero
   44900:	003ff006 	br	448c4 <__alt_data_end+0xfffd3b84>

00044904 <_cleanup>:
   44904:	008001b4 	movhi	r2,6
   44908:	10a62004 	addi	r2,r2,-26496
   4490c:	11000017 	ldw	r4,0(r2)
   44910:	01400174 	movhi	r5,5
   44914:	29645404 	addi	r5,r5,-28336
   44918:	00452241 	jmpi	45224 <_fwalk>

0004491c <__sinit>:
   4491c:	20800e17 	ldw	r2,56(r4)
   44920:	10000126 	beq	r2,zero,44928 <__sinit+0xc>
   44924:	f800283a 	ret
   44928:	00445e81 	jmpi	445e8 <__sinit.part.1>

0004492c <__sfp_lock_acquire>:
   4492c:	f800283a 	ret

00044930 <__sfp_lock_release>:
   44930:	f800283a 	ret

00044934 <__sinit_lock_acquire>:
   44934:	f800283a 	ret

00044938 <__sinit_lock_release>:
   44938:	f800283a 	ret

0004493c <__fp_lock_all>:
   4493c:	008001b4 	movhi	r2,6
   44940:	10a62104 	addi	r2,r2,-26492
   44944:	11000017 	ldw	r4,0(r2)
   44948:	01400134 	movhi	r5,4
   4494c:	29517304 	addi	r5,r5,17868
   44950:	00452241 	jmpi	45224 <_fwalk>

00044954 <__fp_unlock_all>:
   44954:	008001b4 	movhi	r2,6
   44958:	10a62104 	addi	r2,r2,-26492
   4495c:	11000017 	ldw	r4,0(r2)
   44960:	01400134 	movhi	r5,4
   44964:	29517504 	addi	r5,r5,17876
   44968:	00452241 	jmpi	45224 <_fwalk>

0004496c <_malloc_trim_r>:
   4496c:	defffb04 	addi	sp,sp,-20
   44970:	dcc00315 	stw	r19,12(sp)
   44974:	04c001b4 	movhi	r19,6
   44978:	dc800215 	stw	r18,8(sp)
   4497c:	dc400115 	stw	r17,4(sp)
   44980:	dc000015 	stw	r16,0(sp)
   44984:	dfc00415 	stw	ra,16(sp)
   44988:	2821883a 	mov	r16,r5
   4498c:	9ce09904 	addi	r19,r19,-32156
   44990:	2025883a 	mov	r18,r4
   44994:	004d8200 	call	4d820 <__malloc_lock>
   44998:	98800217 	ldw	r2,8(r19)
   4499c:	14400117 	ldw	r17,4(r2)
   449a0:	00bfff04 	movi	r2,-4
   449a4:	88a2703a 	and	r17,r17,r2
   449a8:	8c21c83a 	sub	r16,r17,r16
   449ac:	8403fbc4 	addi	r16,r16,4079
   449b0:	8020d33a 	srli	r16,r16,12
   449b4:	0083ffc4 	movi	r2,4095
   449b8:	843fffc4 	addi	r16,r16,-1
   449bc:	8020933a 	slli	r16,r16,12
   449c0:	1400060e 	bge	r2,r16,449dc <_malloc_trim_r+0x70>
   449c4:	9009883a 	mov	r4,r18
   449c8:	000b883a 	mov	r5,zero
   449cc:	00478140 	call	47814 <_sbrk_r>
   449d0:	98c00217 	ldw	r3,8(r19)
   449d4:	1c47883a 	add	r3,r3,r17
   449d8:	10c00a26 	beq	r2,r3,44a04 <_malloc_trim_r+0x98>
   449dc:	9009883a 	mov	r4,r18
   449e0:	004d9400 	call	4d940 <__malloc_unlock>
   449e4:	0005883a 	mov	r2,zero
   449e8:	dfc00417 	ldw	ra,16(sp)
   449ec:	dcc00317 	ldw	r19,12(sp)
   449f0:	dc800217 	ldw	r18,8(sp)
   449f4:	dc400117 	ldw	r17,4(sp)
   449f8:	dc000017 	ldw	r16,0(sp)
   449fc:	dec00504 	addi	sp,sp,20
   44a00:	f800283a 	ret
   44a04:	9009883a 	mov	r4,r18
   44a08:	040bc83a 	sub	r5,zero,r16
   44a0c:	00478140 	call	47814 <_sbrk_r>
   44a10:	00ffffc4 	movi	r3,-1
   44a14:	10c00d26 	beq	r2,r3,44a4c <_malloc_trim_r+0xe0>
   44a18:	00c001b4 	movhi	r3,6
   44a1c:	18ed5804 	addi	r3,r3,-19104
   44a20:	18800017 	ldw	r2,0(r3)
   44a24:	99000217 	ldw	r4,8(r19)
   44a28:	8c23c83a 	sub	r17,r17,r16
   44a2c:	8c400054 	ori	r17,r17,1
   44a30:	1421c83a 	sub	r16,r2,r16
   44a34:	24400115 	stw	r17,4(r4)
   44a38:	9009883a 	mov	r4,r18
   44a3c:	1c000015 	stw	r16,0(r3)
   44a40:	004d9400 	call	4d940 <__malloc_unlock>
   44a44:	00800044 	movi	r2,1
   44a48:	003fe706 	br	449e8 <__alt_data_end+0xfffd3ca8>
   44a4c:	9009883a 	mov	r4,r18
   44a50:	000b883a 	mov	r5,zero
   44a54:	00478140 	call	47814 <_sbrk_r>
   44a58:	99000217 	ldw	r4,8(r19)
   44a5c:	014003c4 	movi	r5,15
   44a60:	1107c83a 	sub	r3,r2,r4
   44a64:	28ffdd0e 	bge	r5,r3,449dc <__alt_data_end+0xfffd3c9c>
   44a68:	014001b4 	movhi	r5,6
   44a6c:	29662304 	addi	r5,r5,-26484
   44a70:	29400017 	ldw	r5,0(r5)
   44a74:	18c00054 	ori	r3,r3,1
   44a78:	20c00115 	stw	r3,4(r4)
   44a7c:	00c001b4 	movhi	r3,6
   44a80:	1145c83a 	sub	r2,r2,r5
   44a84:	18ed5804 	addi	r3,r3,-19104
   44a88:	18800015 	stw	r2,0(r3)
   44a8c:	003fd306 	br	449dc <__alt_data_end+0xfffd3c9c>

00044a90 <_free_r>:
   44a90:	28004c26 	beq	r5,zero,44bc4 <_free_r+0x134>
   44a94:	defffd04 	addi	sp,sp,-12
   44a98:	dc400115 	stw	r17,4(sp)
   44a9c:	dc000015 	stw	r16,0(sp)
   44aa0:	2023883a 	mov	r17,r4
   44aa4:	2821883a 	mov	r16,r5
   44aa8:	dfc00215 	stw	ra,8(sp)
   44aac:	004d8200 	call	4d820 <__malloc_lock>
   44ab0:	813fff17 	ldw	r4,-4(r16)
   44ab4:	00bfff84 	movi	r2,-2
   44ab8:	024001b4 	movhi	r9,6
   44abc:	81bffe04 	addi	r6,r16,-8
   44ac0:	2084703a 	and	r2,r4,r2
   44ac4:	4a609904 	addi	r9,r9,-32156
   44ac8:	308b883a 	add	r5,r6,r2
   44acc:	2a000117 	ldw	r8,4(r5)
   44ad0:	49c00217 	ldw	r7,8(r9)
   44ad4:	00ffff04 	movi	r3,-4
   44ad8:	40c6703a 	and	r3,r8,r3
   44adc:	39405326 	beq	r7,r5,44c2c <_free_r+0x19c>
   44ae0:	28c00115 	stw	r3,4(r5)
   44ae4:	2100004c 	andi	r4,r4,1
   44ae8:	2000091e 	bne	r4,zero,44b10 <_free_r+0x80>
   44aec:	81fffe17 	ldw	r7,-8(r16)
   44af0:	4a000204 	addi	r8,r9,8
   44af4:	31cdc83a 	sub	r6,r6,r7
   44af8:	31000217 	ldw	r4,8(r6)
   44afc:	11c5883a 	add	r2,r2,r7
   44b00:	22006126 	beq	r4,r8,44c88 <_free_r+0x1f8>
   44b04:	31c00317 	ldw	r7,12(r6)
   44b08:	21c00315 	stw	r7,12(r4)
   44b0c:	39000215 	stw	r4,8(r7)
   44b10:	28c9883a 	add	r4,r5,r3
   44b14:	21c00117 	ldw	r7,4(r4)
   44b18:	39c0004c 	andi	r7,r7,1
   44b1c:	38000d1e 	bne	r7,zero,44b54 <_free_r+0xc4>
   44b20:	29000217 	ldw	r4,8(r5)
   44b24:	10c5883a 	add	r2,r2,r3
   44b28:	00c001b4 	movhi	r3,6
   44b2c:	18e09b04 	addi	r3,r3,-32148
   44b30:	20c07526 	beq	r4,r3,44d08 <_free_r+0x278>
   44b34:	29c00317 	ldw	r7,12(r5)
   44b38:	11400054 	ori	r5,r2,1
   44b3c:	3087883a 	add	r3,r6,r2
   44b40:	21c00315 	stw	r7,12(r4)
   44b44:	39000215 	stw	r4,8(r7)
   44b48:	31400115 	stw	r5,4(r6)
   44b4c:	18800015 	stw	r2,0(r3)
   44b50:	00000406 	br	44b64 <_free_r+0xd4>
   44b54:	10c00054 	ori	r3,r2,1
   44b58:	30c00115 	stw	r3,4(r6)
   44b5c:	3087883a 	add	r3,r6,r2
   44b60:	18800015 	stw	r2,0(r3)
   44b64:	00c07fc4 	movi	r3,511
   44b68:	18801736 	bltu	r3,r2,44bc8 <_free_r+0x138>
   44b6c:	1004d0fa 	srli	r2,r2,3
   44b70:	01400044 	movi	r5,1
   44b74:	49000117 	ldw	r4,4(r9)
   44b78:	1087883a 	add	r3,r2,r2
   44b7c:	18c7883a 	add	r3,r3,r3
   44b80:	1005d0ba 	srai	r2,r2,2
   44b84:	18c7883a 	add	r3,r3,r3
   44b88:	1a47883a 	add	r3,r3,r9
   44b8c:	19c00217 	ldw	r7,8(r3)
   44b90:	2884983a 	sll	r2,r5,r2
   44b94:	30c00315 	stw	r3,12(r6)
   44b98:	31c00215 	stw	r7,8(r6)
   44b9c:	1104b03a 	or	r2,r2,r4
   44ba0:	19800215 	stw	r6,8(r3)
   44ba4:	48800115 	stw	r2,4(r9)
   44ba8:	39800315 	stw	r6,12(r7)
   44bac:	8809883a 	mov	r4,r17
   44bb0:	dfc00217 	ldw	ra,8(sp)
   44bb4:	dc400117 	ldw	r17,4(sp)
   44bb8:	dc000017 	ldw	r16,0(sp)
   44bbc:	dec00304 	addi	sp,sp,12
   44bc0:	004d9401 	jmpi	4d940 <__malloc_unlock>
   44bc4:	f800283a 	ret
   44bc8:	1006d27a 	srli	r3,r2,9
   44bcc:	01000104 	movi	r4,4
   44bd0:	20c04036 	bltu	r4,r3,44cd4 <_free_r+0x244>
   44bd4:	1006d1ba 	srli	r3,r2,6
   44bd8:	19400e04 	addi	r5,r3,56
   44bdc:	2947883a 	add	r3,r5,r5
   44be0:	18c7883a 	add	r3,r3,r3
   44be4:	18c7883a 	add	r3,r3,r3
   44be8:	1a49883a 	add	r4,r3,r9
   44bec:	20c00217 	ldw	r3,8(r4)
   44bf0:	01c001b4 	movhi	r7,6
   44bf4:	39e09904 	addi	r7,r7,-32156
   44bf8:	19003b26 	beq	r3,r4,44ce8 <_free_r+0x258>
   44bfc:	01ffff04 	movi	r7,-4
   44c00:	19400117 	ldw	r5,4(r3)
   44c04:	29ca703a 	and	r5,r5,r7
   44c08:	1140022e 	bgeu	r2,r5,44c14 <_free_r+0x184>
   44c0c:	18c00217 	ldw	r3,8(r3)
   44c10:	20fffb1e 	bne	r4,r3,44c00 <__alt_data_end+0xfffd3ec0>
   44c14:	18800317 	ldw	r2,12(r3)
   44c18:	30800315 	stw	r2,12(r6)
   44c1c:	30c00215 	stw	r3,8(r6)
   44c20:	11800215 	stw	r6,8(r2)
   44c24:	19800315 	stw	r6,12(r3)
   44c28:	003fe006 	br	44bac <__alt_data_end+0xfffd3e6c>
   44c2c:	2100004c 	andi	r4,r4,1
   44c30:	1885883a 	add	r2,r3,r2
   44c34:	2000071e 	bne	r4,zero,44c54 <_free_r+0x1c4>
   44c38:	817ffe17 	ldw	r5,-8(r16)
   44c3c:	314dc83a 	sub	r6,r6,r5
   44c40:	30c00317 	ldw	r3,12(r6)
   44c44:	31000217 	ldw	r4,8(r6)
   44c48:	1145883a 	add	r2,r2,r5
   44c4c:	20c00315 	stw	r3,12(r4)
   44c50:	19000215 	stw	r4,8(r3)
   44c54:	10c00054 	ori	r3,r2,1
   44c58:	30c00115 	stw	r3,4(r6)
   44c5c:	00c001b4 	movhi	r3,6
   44c60:	18e62404 	addi	r3,r3,-26480
   44c64:	18c00017 	ldw	r3,0(r3)
   44c68:	49800215 	stw	r6,8(r9)
   44c6c:	10ffcf36 	bltu	r2,r3,44bac <__alt_data_end+0xfffd3e6c>
   44c70:	008001b4 	movhi	r2,6
   44c74:	10ad3704 	addi	r2,r2,-19236
   44c78:	11400017 	ldw	r5,0(r2)
   44c7c:	8809883a 	mov	r4,r17
   44c80:	004496c0 	call	4496c <_malloc_trim_r>
   44c84:	003fc906 	br	44bac <__alt_data_end+0xfffd3e6c>
   44c88:	28c9883a 	add	r4,r5,r3
   44c8c:	21000117 	ldw	r4,4(r4)
   44c90:	2100004c 	andi	r4,r4,1
   44c94:	20000a1e 	bne	r4,zero,44cc0 <_free_r+0x230>
   44c98:	29000317 	ldw	r4,12(r5)
   44c9c:	29400217 	ldw	r5,8(r5)
   44ca0:	10c5883a 	add	r2,r2,r3
   44ca4:	10c00054 	ori	r3,r2,1
   44ca8:	29000315 	stw	r4,12(r5)
   44cac:	21400215 	stw	r5,8(r4)
   44cb0:	30c00115 	stw	r3,4(r6)
   44cb4:	308d883a 	add	r6,r6,r2
   44cb8:	30800015 	stw	r2,0(r6)
   44cbc:	003fbb06 	br	44bac <__alt_data_end+0xfffd3e6c>
   44cc0:	10c00054 	ori	r3,r2,1
   44cc4:	30c00115 	stw	r3,4(r6)
   44cc8:	308d883a 	add	r6,r6,r2
   44ccc:	30800015 	stw	r2,0(r6)
   44cd0:	003fb606 	br	44bac <__alt_data_end+0xfffd3e6c>
   44cd4:	01000504 	movi	r4,20
   44cd8:	20c01436 	bltu	r4,r3,44d2c <_free_r+0x29c>
   44cdc:	194016c4 	addi	r5,r3,91
   44ce0:	2947883a 	add	r3,r5,r5
   44ce4:	003fbe06 	br	44be0 <__alt_data_end+0xfffd3ea0>
   44ce8:	280bd0ba 	srai	r5,r5,2
   44cec:	00800044 	movi	r2,1
   44cf0:	39000117 	ldw	r4,4(r7)
   44cf4:	114a983a 	sll	r5,r2,r5
   44cf8:	1805883a 	mov	r2,r3
   44cfc:	2908b03a 	or	r4,r5,r4
   44d00:	39000115 	stw	r4,4(r7)
   44d04:	003fc406 	br	44c18 <__alt_data_end+0xfffd3ed8>
   44d08:	49800515 	stw	r6,20(r9)
   44d0c:	49800415 	stw	r6,16(r9)
   44d10:	10c00054 	ori	r3,r2,1
   44d14:	31000315 	stw	r4,12(r6)
   44d18:	31000215 	stw	r4,8(r6)
   44d1c:	30c00115 	stw	r3,4(r6)
   44d20:	308d883a 	add	r6,r6,r2
   44d24:	30800015 	stw	r2,0(r6)
   44d28:	003fa006 	br	44bac <__alt_data_end+0xfffd3e6c>
   44d2c:	01001504 	movi	r4,84
   44d30:	20c00436 	bltu	r4,r3,44d44 <_free_r+0x2b4>
   44d34:	1006d33a 	srli	r3,r2,12
   44d38:	19401b84 	addi	r5,r3,110
   44d3c:	2947883a 	add	r3,r5,r5
   44d40:	003fa706 	br	44be0 <__alt_data_end+0xfffd3ea0>
   44d44:	01005504 	movi	r4,340
   44d48:	20c00436 	bltu	r4,r3,44d5c <_free_r+0x2cc>
   44d4c:	1006d3fa 	srli	r3,r2,15
   44d50:	19401dc4 	addi	r5,r3,119
   44d54:	2947883a 	add	r3,r5,r5
   44d58:	003fa106 	br	44be0 <__alt_data_end+0xfffd3ea0>
   44d5c:	01015504 	movi	r4,1364
   44d60:	20c00436 	bltu	r4,r3,44d74 <_free_r+0x2e4>
   44d64:	1006d4ba 	srli	r3,r2,18
   44d68:	19401f04 	addi	r5,r3,124
   44d6c:	2947883a 	add	r3,r5,r5
   44d70:	003f9b06 	br	44be0 <__alt_data_end+0xfffd3ea0>
   44d74:	00c03f04 	movi	r3,252
   44d78:	01401f84 	movi	r5,126
   44d7c:	003f9806 	br	44be0 <__alt_data_end+0xfffd3ea0>

00044d80 <__sfvwrite_r>:
   44d80:	30800217 	ldw	r2,8(r6)
   44d84:	10004526 	beq	r2,zero,44e9c <__sfvwrite_r+0x11c>
   44d88:	28c0030b 	ldhu	r3,12(r5)
   44d8c:	defff404 	addi	sp,sp,-48
   44d90:	dd400715 	stw	r21,28(sp)
   44d94:	dcc00515 	stw	r19,20(sp)
   44d98:	dc000215 	stw	r16,8(sp)
   44d9c:	dfc00b15 	stw	ra,44(sp)
   44da0:	df000a15 	stw	fp,40(sp)
   44da4:	ddc00915 	stw	r23,36(sp)
   44da8:	dd800815 	stw	r22,32(sp)
   44dac:	dd000615 	stw	r20,24(sp)
   44db0:	dc800415 	stw	r18,16(sp)
   44db4:	dc400315 	stw	r17,12(sp)
   44db8:	1880020c 	andi	r2,r3,8
   44dbc:	2821883a 	mov	r16,r5
   44dc0:	202b883a 	mov	r21,r4
   44dc4:	3027883a 	mov	r19,r6
   44dc8:	10002526 	beq	r2,zero,44e60 <__sfvwrite_r+0xe0>
   44dcc:	28800417 	ldw	r2,16(r5)
   44dd0:	10002326 	beq	r2,zero,44e60 <__sfvwrite_r+0xe0>
   44dd4:	1880008c 	andi	r2,r3,2
   44dd8:	9c400017 	ldw	r17,0(r19)
   44ddc:	10003126 	beq	r2,zero,44ea4 <__sfvwrite_r+0x124>
   44de0:	0029883a 	mov	r20,zero
   44de4:	0025883a 	mov	r18,zero
   44de8:	05810004 	movi	r22,1024
   44dec:	a00d883a 	mov	r6,r20
   44df0:	a809883a 	mov	r4,r21
   44df4:	90002526 	beq	r18,zero,44e8c <__sfvwrite_r+0x10c>
   44df8:	900f883a 	mov	r7,r18
   44dfc:	81400717 	ldw	r5,28(r16)
   44e00:	b480012e 	bgeu	r22,r18,44e08 <__sfvwrite_r+0x88>
   44e04:	01c10004 	movi	r7,1024
   44e08:	80800917 	ldw	r2,36(r16)
   44e0c:	103ee83a 	callr	r2
   44e10:	0080510e 	bge	zero,r2,44f58 <__sfvwrite_r+0x1d8>
   44e14:	98c00217 	ldw	r3,8(r19)
   44e18:	a0a9883a 	add	r20,r20,r2
   44e1c:	90a5c83a 	sub	r18,r18,r2
   44e20:	1885c83a 	sub	r2,r3,r2
   44e24:	98800215 	stw	r2,8(r19)
   44e28:	103ff01e 	bne	r2,zero,44dec <__alt_data_end+0xfffd40ac>
   44e2c:	0005883a 	mov	r2,zero
   44e30:	dfc00b17 	ldw	ra,44(sp)
   44e34:	df000a17 	ldw	fp,40(sp)
   44e38:	ddc00917 	ldw	r23,36(sp)
   44e3c:	dd800817 	ldw	r22,32(sp)
   44e40:	dd400717 	ldw	r21,28(sp)
   44e44:	dd000617 	ldw	r20,24(sp)
   44e48:	dcc00517 	ldw	r19,20(sp)
   44e4c:	dc800417 	ldw	r18,16(sp)
   44e50:	dc400317 	ldw	r17,12(sp)
   44e54:	dc000217 	ldw	r16,8(sp)
   44e58:	dec00c04 	addi	sp,sp,48
   44e5c:	f800283a 	ret
   44e60:	a809883a 	mov	r4,r21
   44e64:	800b883a 	mov	r5,r16
   44e68:	004291c0 	call	4291c <__swsetup_r>
   44e6c:	80c0030b 	ldhu	r3,12(r16)
   44e70:	103fd826 	beq	r2,zero,44dd4 <__alt_data_end+0xfffd4094>
   44e74:	18c01014 	ori	r3,r3,64
   44e78:	80c0030d 	sth	r3,12(r16)
   44e7c:	00c00244 	movi	r3,9
   44e80:	00bfffc4 	movi	r2,-1
   44e84:	a8c00015 	stw	r3,0(r21)
   44e88:	003fe906 	br	44e30 <__alt_data_end+0xfffd40f0>
   44e8c:	8d000017 	ldw	r20,0(r17)
   44e90:	8c800117 	ldw	r18,4(r17)
   44e94:	8c400204 	addi	r17,r17,8
   44e98:	003fd406 	br	44dec <__alt_data_end+0xfffd40ac>
   44e9c:	0005883a 	mov	r2,zero
   44ea0:	f800283a 	ret
   44ea4:	1880004c 	andi	r2,r3,1
   44ea8:	1000301e 	bne	r2,zero,44f6c <__sfvwrite_r+0x1ec>
   44eac:	002f883a 	mov	r23,zero
   44eb0:	0025883a 	mov	r18,zero
   44eb4:	90001c26 	beq	r18,zero,44f28 <__sfvwrite_r+0x1a8>
   44eb8:	1880800c 	andi	r2,r3,512
   44ebc:	85000217 	ldw	r20,8(r16)
   44ec0:	10006c26 	beq	r2,zero,45074 <__sfvwrite_r+0x2f4>
   44ec4:	a02d883a 	mov	r22,r20
   44ec8:	95008536 	bltu	r18,r20,450e0 <__sfvwrite_r+0x360>
   44ecc:	1881200c 	andi	r2,r3,1152
   44ed0:	10009d1e 	bne	r2,zero,45148 <__sfvwrite_r+0x3c8>
   44ed4:	81000017 	ldw	r4,0(r16)
   44ed8:	a039883a 	mov	fp,r20
   44edc:	9029883a 	mov	r20,r18
   44ee0:	b80b883a 	mov	r5,r23
   44ee4:	b00d883a 	mov	r6,r22
   44ee8:	0045ff40 	call	45ff4 <memmove>
   44eec:	80c00217 	ldw	r3,8(r16)
   44ef0:	81000017 	ldw	r4,0(r16)
   44ef4:	9005883a 	mov	r2,r18
   44ef8:	1f39c83a 	sub	fp,r3,fp
   44efc:	258f883a 	add	r7,r4,r22
   44f00:	87000215 	stw	fp,8(r16)
   44f04:	81c00015 	stw	r7,0(r16)
   44f08:	98c00217 	ldw	r3,8(r19)
   44f0c:	b8af883a 	add	r23,r23,r2
   44f10:	90a5c83a 	sub	r18,r18,r2
   44f14:	1d05c83a 	sub	r2,r3,r20
   44f18:	98800215 	stw	r2,8(r19)
   44f1c:	103fc326 	beq	r2,zero,44e2c <__alt_data_end+0xfffd40ec>
   44f20:	80c0030b 	ldhu	r3,12(r16)
   44f24:	903fe41e 	bne	r18,zero,44eb8 <__alt_data_end+0xfffd4178>
   44f28:	8dc00017 	ldw	r23,0(r17)
   44f2c:	8c800117 	ldw	r18,4(r17)
   44f30:	8c400204 	addi	r17,r17,8
   44f34:	003fdf06 	br	44eb4 <__alt_data_end+0xfffd4174>
   44f38:	00472000 	call	47200 <_realloc_r>
   44f3c:	102d883a 	mov	r22,r2
   44f40:	1000a01e 	bne	r2,zero,451c4 <__sfvwrite_r+0x444>
   44f44:	81400417 	ldw	r5,16(r16)
   44f48:	a809883a 	mov	r4,r21
   44f4c:	0044a900 	call	44a90 <_free_r>
   44f50:	00800304 	movi	r2,12
   44f54:	a8800015 	stw	r2,0(r21)
   44f58:	80c0030b 	ldhu	r3,12(r16)
   44f5c:	00bfffc4 	movi	r2,-1
   44f60:	18c01014 	ori	r3,r3,64
   44f64:	80c0030d 	sth	r3,12(r16)
   44f68:	003fb106 	br	44e30 <__alt_data_end+0xfffd40f0>
   44f6c:	0029883a 	mov	r20,zero
   44f70:	0011883a 	mov	r8,zero
   44f74:	0039883a 	mov	fp,zero
   44f78:	0025883a 	mov	r18,zero
   44f7c:	90001f26 	beq	r18,zero,44ffc <__sfvwrite_r+0x27c>
   44f80:	40006826 	beq	r8,zero,45124 <__sfvwrite_r+0x3a4>
   44f84:	a02f883a 	mov	r23,r20
   44f88:	9500012e 	bgeu	r18,r20,44f90 <__sfvwrite_r+0x210>
   44f8c:	902f883a 	mov	r23,r18
   44f90:	81000017 	ldw	r4,0(r16)
   44f94:	80800417 	ldw	r2,16(r16)
   44f98:	b82d883a 	mov	r22,r23
   44f9c:	81800217 	ldw	r6,8(r16)
   44fa0:	81c00517 	ldw	r7,20(r16)
   44fa4:	1100022e 	bgeu	r2,r4,44fb0 <__sfvwrite_r+0x230>
   44fa8:	31c7883a 	add	r3,r6,r7
   44fac:	1dc01816 	blt	r3,r23,45010 <__sfvwrite_r+0x290>
   44fb0:	b9c03f16 	blt	r23,r7,450b0 <__sfvwrite_r+0x330>
   44fb4:	80800917 	ldw	r2,36(r16)
   44fb8:	81400717 	ldw	r5,28(r16)
   44fbc:	a809883a 	mov	r4,r21
   44fc0:	da000115 	stw	r8,4(sp)
   44fc4:	e00d883a 	mov	r6,fp
   44fc8:	103ee83a 	callr	r2
   44fcc:	102d883a 	mov	r22,r2
   44fd0:	da000117 	ldw	r8,4(sp)
   44fd4:	00bfe00e 	bge	zero,r2,44f58 <__alt_data_end+0xfffd4218>
   44fd8:	a5a9c83a 	sub	r20,r20,r22
   44fdc:	a0001f26 	beq	r20,zero,4505c <__sfvwrite_r+0x2dc>
   44fe0:	98800217 	ldw	r2,8(r19)
   44fe4:	e5b9883a 	add	fp,fp,r22
   44fe8:	95a5c83a 	sub	r18,r18,r22
   44fec:	15adc83a 	sub	r22,r2,r22
   44ff0:	9d800215 	stw	r22,8(r19)
   44ff4:	b03f8d26 	beq	r22,zero,44e2c <__alt_data_end+0xfffd40ec>
   44ff8:	903fe11e 	bne	r18,zero,44f80 <__alt_data_end+0xfffd4240>
   44ffc:	8f000017 	ldw	fp,0(r17)
   45000:	8c800117 	ldw	r18,4(r17)
   45004:	0011883a 	mov	r8,zero
   45008:	8c400204 	addi	r17,r17,8
   4500c:	003fdb06 	br	44f7c <__alt_data_end+0xfffd423c>
   45010:	180d883a 	mov	r6,r3
   45014:	e00b883a 	mov	r5,fp
   45018:	da000115 	stw	r8,4(sp)
   4501c:	d8c00015 	stw	r3,0(sp)
   45020:	0045ff40 	call	45ff4 <memmove>
   45024:	d8c00017 	ldw	r3,0(sp)
   45028:	80800017 	ldw	r2,0(r16)
   4502c:	a809883a 	mov	r4,r21
   45030:	800b883a 	mov	r5,r16
   45034:	10c5883a 	add	r2,r2,r3
   45038:	80800015 	stw	r2,0(r16)
   4503c:	d8c00015 	stw	r3,0(sp)
   45040:	00443740 	call	44374 <_fflush_r>
   45044:	d8c00017 	ldw	r3,0(sp)
   45048:	da000117 	ldw	r8,4(sp)
   4504c:	103fc21e 	bne	r2,zero,44f58 <__alt_data_end+0xfffd4218>
   45050:	182d883a 	mov	r22,r3
   45054:	a5a9c83a 	sub	r20,r20,r22
   45058:	a03fe11e 	bne	r20,zero,44fe0 <__alt_data_end+0xfffd42a0>
   4505c:	a809883a 	mov	r4,r21
   45060:	800b883a 	mov	r5,r16
   45064:	00443740 	call	44374 <_fflush_r>
   45068:	103fbb1e 	bne	r2,zero,44f58 <__alt_data_end+0xfffd4218>
   4506c:	0011883a 	mov	r8,zero
   45070:	003fdb06 	br	44fe0 <__alt_data_end+0xfffd42a0>
   45074:	81000017 	ldw	r4,0(r16)
   45078:	80800417 	ldw	r2,16(r16)
   4507c:	1100012e 	bgeu	r2,r4,45084 <__sfvwrite_r+0x304>
   45080:	a4805a36 	bltu	r20,r18,451ec <__sfvwrite_r+0x46c>
   45084:	81c00517 	ldw	r7,20(r16)
   45088:	91c01a36 	bltu	r18,r7,450f4 <__sfvwrite_r+0x374>
   4508c:	80800917 	ldw	r2,36(r16)
   45090:	81400717 	ldw	r5,28(r16)
   45094:	a809883a 	mov	r4,r21
   45098:	b80d883a 	mov	r6,r23
   4509c:	103ee83a 	callr	r2
   450a0:	1029883a 	mov	r20,r2
   450a4:	00bfac0e 	bge	zero,r2,44f58 <__alt_data_end+0xfffd4218>
   450a8:	a005883a 	mov	r2,r20
   450ac:	003f9606 	br	44f08 <__alt_data_end+0xfffd41c8>
   450b0:	b80d883a 	mov	r6,r23
   450b4:	e00b883a 	mov	r5,fp
   450b8:	da000115 	stw	r8,4(sp)
   450bc:	0045ff40 	call	45ff4 <memmove>
   450c0:	80800217 	ldw	r2,8(r16)
   450c4:	80c00017 	ldw	r3,0(r16)
   450c8:	da000117 	ldw	r8,4(sp)
   450cc:	15c5c83a 	sub	r2,r2,r23
   450d0:	1def883a 	add	r23,r3,r23
   450d4:	80800215 	stw	r2,8(r16)
   450d8:	85c00015 	stw	r23,0(r16)
   450dc:	003fbe06 	br	44fd8 <__alt_data_end+0xfffd4298>
   450e0:	81000017 	ldw	r4,0(r16)
   450e4:	9039883a 	mov	fp,r18
   450e8:	9029883a 	mov	r20,r18
   450ec:	902d883a 	mov	r22,r18
   450f0:	003f7b06 	br	44ee0 <__alt_data_end+0xfffd41a0>
   450f4:	b80b883a 	mov	r5,r23
   450f8:	900d883a 	mov	r6,r18
   450fc:	0045ff40 	call	45ff4 <memmove>
   45100:	80c00217 	ldw	r3,8(r16)
   45104:	80800017 	ldw	r2,0(r16)
   45108:	9029883a 	mov	r20,r18
   4510c:	1c87c83a 	sub	r3,r3,r18
   45110:	1485883a 	add	r2,r2,r18
   45114:	80800015 	stw	r2,0(r16)
   45118:	80c00215 	stw	r3,8(r16)
   4511c:	9005883a 	mov	r2,r18
   45120:	003f7906 	br	44f08 <__alt_data_end+0xfffd41c8>
   45124:	e009883a 	mov	r4,fp
   45128:	01400284 	movi	r5,10
   4512c:	900d883a 	mov	r6,r18
   45130:	0045dd40 	call	45dd4 <memchr>
   45134:	10003826 	beq	r2,zero,45218 <__sfvwrite_r+0x498>
   45138:	10800044 	addi	r2,r2,1
   4513c:	1729c83a 	sub	r20,r2,fp
   45140:	02000044 	movi	r8,1
   45144:	003f8f06 	br	44f84 <__alt_data_end+0xfffd4244>
   45148:	80800517 	ldw	r2,20(r16)
   4514c:	81400417 	ldw	r5,16(r16)
   45150:	87000017 	ldw	fp,0(r16)
   45154:	10a9883a 	add	r20,r2,r2
   45158:	a085883a 	add	r2,r20,r2
   4515c:	1028d7fa 	srli	r20,r2,31
   45160:	e179c83a 	sub	fp,fp,r5
   45164:	e1000044 	addi	r4,fp,1
   45168:	a085883a 	add	r2,r20,r2
   4516c:	1029d07a 	srai	r20,r2,1
   45170:	2485883a 	add	r2,r4,r18
   45174:	a00d883a 	mov	r6,r20
   45178:	a080022e 	bgeu	r20,r2,45184 <__sfvwrite_r+0x404>
   4517c:	1029883a 	mov	r20,r2
   45180:	100d883a 	mov	r6,r2
   45184:	18c1000c 	andi	r3,r3,1024
   45188:	a809883a 	mov	r4,r21
   4518c:	183f6a26 	beq	r3,zero,44f38 <__alt_data_end+0xfffd41f8>
   45190:	300b883a 	mov	r5,r6
   45194:	004562c0 	call	4562c <_malloc_r>
   45198:	102d883a 	mov	r22,r2
   4519c:	103f6c26 	beq	r2,zero,44f50 <__alt_data_end+0xfffd4210>
   451a0:	81400417 	ldw	r5,16(r16)
   451a4:	1009883a 	mov	r4,r2
   451a8:	e00d883a 	mov	r6,fp
   451ac:	0045ebc0 	call	45ebc <memcpy>
   451b0:	8080030b 	ldhu	r2,12(r16)
   451b4:	00fedfc4 	movi	r3,-1153
   451b8:	10c4703a 	and	r2,r2,r3
   451bc:	10802014 	ori	r2,r2,128
   451c0:	8080030d 	sth	r2,12(r16)
   451c4:	b709883a 	add	r4,r22,fp
   451c8:	a707c83a 	sub	r3,r20,fp
   451cc:	85800415 	stw	r22,16(r16)
   451d0:	85000515 	stw	r20,20(r16)
   451d4:	81000015 	stw	r4,0(r16)
   451d8:	9039883a 	mov	fp,r18
   451dc:	80c00215 	stw	r3,8(r16)
   451e0:	9029883a 	mov	r20,r18
   451e4:	902d883a 	mov	r22,r18
   451e8:	003f3d06 	br	44ee0 <__alt_data_end+0xfffd41a0>
   451ec:	b80b883a 	mov	r5,r23
   451f0:	a00d883a 	mov	r6,r20
   451f4:	0045ff40 	call	45ff4 <memmove>
   451f8:	80800017 	ldw	r2,0(r16)
   451fc:	a809883a 	mov	r4,r21
   45200:	800b883a 	mov	r5,r16
   45204:	1505883a 	add	r2,r2,r20
   45208:	80800015 	stw	r2,0(r16)
   4520c:	00443740 	call	44374 <_fflush_r>
   45210:	103fa526 	beq	r2,zero,450a8 <__alt_data_end+0xfffd4368>
   45214:	003f5006 	br	44f58 <__alt_data_end+0xfffd4218>
   45218:	95000044 	addi	r20,r18,1
   4521c:	02000044 	movi	r8,1
   45220:	003f5806 	br	44f84 <__alt_data_end+0xfffd4244>

00045224 <_fwalk>:
   45224:	defff804 	addi	sp,sp,-32
   45228:	dd400515 	stw	r21,20(sp)
   4522c:	2540b804 	addi	r21,r4,736
   45230:	dd800615 	stw	r22,24(sp)
   45234:	dd000415 	stw	r20,16(sp)
   45238:	dfc00715 	stw	ra,28(sp)
   4523c:	dcc00315 	stw	r19,12(sp)
   45240:	dc800215 	stw	r18,8(sp)
   45244:	dc400115 	stw	r17,4(sp)
   45248:	dc000015 	stw	r16,0(sp)
   4524c:	2829883a 	mov	r20,r5
   45250:	002d883a 	mov	r22,zero
   45254:	004492c0 	call	4492c <__sfp_lock_acquire>
   45258:	a8001426 	beq	r21,zero,452ac <_fwalk+0x88>
   4525c:	04ffffc4 	movi	r19,-1
   45260:	ac400117 	ldw	r17,4(r21)
   45264:	ac800217 	ldw	r18,8(r21)
   45268:	8c7fffc4 	addi	r17,r17,-1
   4526c:	88000d16 	blt	r17,zero,452a4 <_fwalk+0x80>
   45270:	94000304 	addi	r16,r18,12
   45274:	94800384 	addi	r18,r18,14
   45278:	80c0000f 	ldh	r3,0(r16)
   4527c:	8c7fffc4 	addi	r17,r17,-1
   45280:	813ffd04 	addi	r4,r16,-12
   45284:	18000426 	beq	r3,zero,45298 <_fwalk+0x74>
   45288:	90c0000f 	ldh	r3,0(r18)
   4528c:	1cc00226 	beq	r3,r19,45298 <_fwalk+0x74>
   45290:	a03ee83a 	callr	r20
   45294:	b0acb03a 	or	r22,r22,r2
   45298:	84001a04 	addi	r16,r16,104
   4529c:	94801a04 	addi	r18,r18,104
   452a0:	8cfff51e 	bne	r17,r19,45278 <__alt_data_end+0xfffd4538>
   452a4:	ad400017 	ldw	r21,0(r21)
   452a8:	a83fed1e 	bne	r21,zero,45260 <__alt_data_end+0xfffd4520>
   452ac:	00449300 	call	44930 <__sfp_lock_release>
   452b0:	b005883a 	mov	r2,r22
   452b4:	dfc00717 	ldw	ra,28(sp)
   452b8:	dd800617 	ldw	r22,24(sp)
   452bc:	dd400517 	ldw	r21,20(sp)
   452c0:	dd000417 	ldw	r20,16(sp)
   452c4:	dcc00317 	ldw	r19,12(sp)
   452c8:	dc800217 	ldw	r18,8(sp)
   452cc:	dc400117 	ldw	r17,4(sp)
   452d0:	dc000017 	ldw	r16,0(sp)
   452d4:	dec00804 	addi	sp,sp,32
   452d8:	f800283a 	ret

000452dc <_fwalk_reent>:
   452dc:	defff804 	addi	sp,sp,-32
   452e0:	dd400515 	stw	r21,20(sp)
   452e4:	2540b804 	addi	r21,r4,736
   452e8:	dd800615 	stw	r22,24(sp)
   452ec:	dd000415 	stw	r20,16(sp)
   452f0:	dcc00315 	stw	r19,12(sp)
   452f4:	dfc00715 	stw	ra,28(sp)
   452f8:	dc800215 	stw	r18,8(sp)
   452fc:	dc400115 	stw	r17,4(sp)
   45300:	dc000015 	stw	r16,0(sp)
   45304:	2027883a 	mov	r19,r4
   45308:	2829883a 	mov	r20,r5
   4530c:	002d883a 	mov	r22,zero
   45310:	004492c0 	call	4492c <__sfp_lock_acquire>
   45314:	a8001326 	beq	r21,zero,45364 <_fwalk_reent+0x88>
   45318:	04bfffc4 	movi	r18,-1
   4531c:	ac400117 	ldw	r17,4(r21)
   45320:	ac000217 	ldw	r16,8(r21)
   45324:	8c7fffc4 	addi	r17,r17,-1
   45328:	88000c16 	blt	r17,zero,4535c <_fwalk_reent+0x80>
   4532c:	84000304 	addi	r16,r16,12
   45330:	80c0000f 	ldh	r3,0(r16)
   45334:	8c7fffc4 	addi	r17,r17,-1
   45338:	817ffd04 	addi	r5,r16,-12
   4533c:	18000526 	beq	r3,zero,45354 <_fwalk_reent+0x78>
   45340:	80c0008f 	ldh	r3,2(r16)
   45344:	9809883a 	mov	r4,r19
   45348:	1c800226 	beq	r3,r18,45354 <_fwalk_reent+0x78>
   4534c:	a03ee83a 	callr	r20
   45350:	b0acb03a 	or	r22,r22,r2
   45354:	84001a04 	addi	r16,r16,104
   45358:	8cbff51e 	bne	r17,r18,45330 <__alt_data_end+0xfffd45f0>
   4535c:	ad400017 	ldw	r21,0(r21)
   45360:	a83fee1e 	bne	r21,zero,4531c <__alt_data_end+0xfffd45dc>
   45364:	00449300 	call	44930 <__sfp_lock_release>
   45368:	b005883a 	mov	r2,r22
   4536c:	dfc00717 	ldw	ra,28(sp)
   45370:	dd800617 	ldw	r22,24(sp)
   45374:	dd400517 	ldw	r21,20(sp)
   45378:	dd000417 	ldw	r20,16(sp)
   4537c:	dcc00317 	ldw	r19,12(sp)
   45380:	dc800217 	ldw	r18,8(sp)
   45384:	dc400117 	ldw	r17,4(sp)
   45388:	dc000017 	ldw	r16,0(sp)
   4538c:	dec00804 	addi	sp,sp,32
   45390:	f800283a 	ret

00045394 <_setlocale_r>:
   45394:	30001b26 	beq	r6,zero,45404 <_setlocale_r+0x70>
   45398:	01400174 	movhi	r5,5
   4539c:	defffe04 	addi	sp,sp,-8
   453a0:	295e8604 	addi	r5,r5,31256
   453a4:	3009883a 	mov	r4,r6
   453a8:	dc000015 	stw	r16,0(sp)
   453ac:	dfc00115 	stw	ra,4(sp)
   453b0:	3021883a 	mov	r16,r6
   453b4:	00479a40 	call	479a4 <strcmp>
   453b8:	1000061e 	bne	r2,zero,453d4 <_setlocale_r+0x40>
   453bc:	00800174 	movhi	r2,5
   453c0:	109e8504 	addi	r2,r2,31252
   453c4:	dfc00117 	ldw	ra,4(sp)
   453c8:	dc000017 	ldw	r16,0(sp)
   453cc:	dec00204 	addi	sp,sp,8
   453d0:	f800283a 	ret
   453d4:	01400174 	movhi	r5,5
   453d8:	295e8504 	addi	r5,r5,31252
   453dc:	8009883a 	mov	r4,r16
   453e0:	00479a40 	call	479a4 <strcmp>
   453e4:	103ff526 	beq	r2,zero,453bc <__alt_data_end+0xfffd467c>
   453e8:	01400174 	movhi	r5,5
   453ec:	295e7004 	addi	r5,r5,31168
   453f0:	8009883a 	mov	r4,r16
   453f4:	00479a40 	call	479a4 <strcmp>
   453f8:	103ff026 	beq	r2,zero,453bc <__alt_data_end+0xfffd467c>
   453fc:	0005883a 	mov	r2,zero
   45400:	003ff006 	br	453c4 <__alt_data_end+0xfffd4684>
   45404:	00800174 	movhi	r2,5
   45408:	109e8504 	addi	r2,r2,31252
   4540c:	f800283a 	ret

00045410 <__locale_charset>:
   45410:	008001b4 	movhi	r2,6
   45414:	10a08304 	addi	r2,r2,-32244
   45418:	f800283a 	ret

0004541c <__locale_mb_cur_max>:
   4541c:	008001b4 	movhi	r2,6
   45420:	10a62204 	addi	r2,r2,-26488
   45424:	10800017 	ldw	r2,0(r2)
   45428:	f800283a 	ret

0004542c <__locale_msgcharset>:
   4542c:	008001b4 	movhi	r2,6
   45430:	10a07b04 	addi	r2,r2,-32276
   45434:	f800283a 	ret

00045438 <__locale_cjk_lang>:
   45438:	0005883a 	mov	r2,zero
   4543c:	f800283a 	ret

00045440 <_localeconv_r>:
   45440:	008001b4 	movhi	r2,6
   45444:	10a08b04 	addi	r2,r2,-32212
   45448:	f800283a 	ret

0004544c <setlocale>:
   4544c:	00c001b4 	movhi	r3,6
   45450:	18e62104 	addi	r3,r3,-26492
   45454:	2005883a 	mov	r2,r4
   45458:	19000017 	ldw	r4,0(r3)
   4545c:	280d883a 	mov	r6,r5
   45460:	100b883a 	mov	r5,r2
   45464:	00453941 	jmpi	45394 <_setlocale_r>

00045468 <localeconv>:
   45468:	008001b4 	movhi	r2,6
   4546c:	10a08b04 	addi	r2,r2,-32212
   45470:	f800283a 	ret

00045474 <__smakebuf_r>:
   45474:	2880030b 	ldhu	r2,12(r5)
   45478:	10c0008c 	andi	r3,r2,2
   4547c:	1800401e 	bne	r3,zero,45580 <__smakebuf_r+0x10c>
   45480:	deffec04 	addi	sp,sp,-80
   45484:	dc000f15 	stw	r16,60(sp)
   45488:	2821883a 	mov	r16,r5
   4548c:	2940038f 	ldh	r5,14(r5)
   45490:	dc401015 	stw	r17,64(sp)
   45494:	dfc01315 	stw	ra,76(sp)
   45498:	dcc01215 	stw	r19,72(sp)
   4549c:	dc801115 	stw	r18,68(sp)
   454a0:	2023883a 	mov	r17,r4
   454a4:	28001b16 	blt	r5,zero,45514 <__smakebuf_r+0xa0>
   454a8:	d80d883a 	mov	r6,sp
   454ac:	00493400 	call	49340 <_fstat_r>
   454b0:	10001716 	blt	r2,zero,45510 <__smakebuf_r+0x9c>
   454b4:	d8800117 	ldw	r2,4(sp)
   454b8:	00e00014 	movui	r3,32768
   454bc:	10bc000c 	andi	r2,r2,61440
   454c0:	10c03726 	beq	r2,r3,455a0 <__smakebuf_r+0x12c>
   454c4:	80c0030b 	ldhu	r3,12(r16)
   454c8:	18c20014 	ori	r3,r3,2048
   454cc:	80c0030d 	sth	r3,12(r16)
   454d0:	00c80004 	movi	r3,8192
   454d4:	10c03c1e 	bne	r2,r3,455c8 <__smakebuf_r+0x154>
   454d8:	8140038f 	ldh	r5,14(r16)
   454dc:	8809883a 	mov	r4,r17
   454e0:	00493980 	call	49398 <_isatty_r>
   454e4:	10004e26 	beq	r2,zero,45620 <__smakebuf_r+0x1ac>
   454e8:	8080030b 	ldhu	r2,12(r16)
   454ec:	04c00044 	movi	r19,1
   454f0:	80c010c4 	addi	r3,r16,67
   454f4:	14c4b03a 	or	r2,r2,r19
   454f8:	8080030d 	sth	r2,12(r16)
   454fc:	80c00015 	stw	r3,0(r16)
   45500:	80c00415 	stw	r3,16(r16)
   45504:	84c00515 	stw	r19,20(r16)
   45508:	04810004 	movi	r18,1024
   4550c:	00000706 	br	4552c <__smakebuf_r+0xb8>
   45510:	8080030b 	ldhu	r2,12(r16)
   45514:	10c0200c 	andi	r3,r2,128
   45518:	18001f1e 	bne	r3,zero,45598 <__smakebuf_r+0x124>
   4551c:	04810004 	movi	r18,1024
   45520:	10820014 	ori	r2,r2,2048
   45524:	8080030d 	sth	r2,12(r16)
   45528:	0027883a 	mov	r19,zero
   4552c:	8809883a 	mov	r4,r17
   45530:	900b883a 	mov	r5,r18
   45534:	004562c0 	call	4562c <_malloc_r>
   45538:	10002e26 	beq	r2,zero,455f4 <__smakebuf_r+0x180>
   4553c:	80c0030b 	ldhu	r3,12(r16)
   45540:	01000134 	movhi	r4,4
   45544:	21117704 	addi	r4,r4,17884
   45548:	89000f15 	stw	r4,60(r17)
   4554c:	18c02014 	ori	r3,r3,128
   45550:	80c0030d 	sth	r3,12(r16)
   45554:	80800015 	stw	r2,0(r16)
   45558:	80800415 	stw	r2,16(r16)
   4555c:	84800515 	stw	r18,20(r16)
   45560:	98001c1e 	bne	r19,zero,455d4 <__smakebuf_r+0x160>
   45564:	dfc01317 	ldw	ra,76(sp)
   45568:	dcc01217 	ldw	r19,72(sp)
   4556c:	dc801117 	ldw	r18,68(sp)
   45570:	dc401017 	ldw	r17,64(sp)
   45574:	dc000f17 	ldw	r16,60(sp)
   45578:	dec01404 	addi	sp,sp,80
   4557c:	f800283a 	ret
   45580:	288010c4 	addi	r2,r5,67
   45584:	28800015 	stw	r2,0(r5)
   45588:	28800415 	stw	r2,16(r5)
   4558c:	00800044 	movi	r2,1
   45590:	28800515 	stw	r2,20(r5)
   45594:	f800283a 	ret
   45598:	04801004 	movi	r18,64
   4559c:	003fe006 	br	45520 <__alt_data_end+0xfffd47e0>
   455a0:	81000a17 	ldw	r4,40(r16)
   455a4:	00c00134 	movhi	r3,4
   455a8:	18de5004 	addi	r3,r3,31040
   455ac:	20ffc51e 	bne	r4,r3,454c4 <__alt_data_end+0xfffd4784>
   455b0:	80c0030b 	ldhu	r3,12(r16)
   455b4:	01010004 	movi	r4,1024
   455b8:	81001315 	stw	r4,76(r16)
   455bc:	1906b03a 	or	r3,r3,r4
   455c0:	80c0030d 	sth	r3,12(r16)
   455c4:	003fc206 	br	454d0 <__alt_data_end+0xfffd4790>
   455c8:	0027883a 	mov	r19,zero
   455cc:	04810004 	movi	r18,1024
   455d0:	003fd606 	br	4552c <__alt_data_end+0xfffd47ec>
   455d4:	8140038f 	ldh	r5,14(r16)
   455d8:	8809883a 	mov	r4,r17
   455dc:	00493980 	call	49398 <_isatty_r>
   455e0:	103fe026 	beq	r2,zero,45564 <__alt_data_end+0xfffd4824>
   455e4:	8080030b 	ldhu	r2,12(r16)
   455e8:	10800054 	ori	r2,r2,1
   455ec:	8080030d 	sth	r2,12(r16)
   455f0:	003fdc06 	br	45564 <__alt_data_end+0xfffd4824>
   455f4:	8080030b 	ldhu	r2,12(r16)
   455f8:	10c0800c 	andi	r3,r2,512
   455fc:	183fd91e 	bne	r3,zero,45564 <__alt_data_end+0xfffd4824>
   45600:	10800094 	ori	r2,r2,2
   45604:	80c010c4 	addi	r3,r16,67
   45608:	8080030d 	sth	r2,12(r16)
   4560c:	00800044 	movi	r2,1
   45610:	80c00015 	stw	r3,0(r16)
   45614:	80c00415 	stw	r3,16(r16)
   45618:	80800515 	stw	r2,20(r16)
   4561c:	003fd106 	br	45564 <__alt_data_end+0xfffd4824>
   45620:	04c00044 	movi	r19,1
   45624:	04810004 	movi	r18,1024
   45628:	003fc006 	br	4552c <__alt_data_end+0xfffd47ec>

0004562c <_malloc_r>:
   4562c:	defff504 	addi	sp,sp,-44
   45630:	dc800315 	stw	r18,12(sp)
   45634:	dfc00a15 	stw	ra,40(sp)
   45638:	df000915 	stw	fp,36(sp)
   4563c:	ddc00815 	stw	r23,32(sp)
   45640:	dd800715 	stw	r22,28(sp)
   45644:	dd400615 	stw	r21,24(sp)
   45648:	dd000515 	stw	r20,20(sp)
   4564c:	dcc00415 	stw	r19,16(sp)
   45650:	dc400215 	stw	r17,8(sp)
   45654:	dc000115 	stw	r16,4(sp)
   45658:	288002c4 	addi	r2,r5,11
   4565c:	00c00584 	movi	r3,22
   45660:	2025883a 	mov	r18,r4
   45664:	18802a2e 	bgeu	r3,r2,45710 <_malloc_r+0xe4>
   45668:	047ffe04 	movi	r17,-8
   4566c:	1462703a 	and	r17,r2,r17
   45670:	88009e16 	blt	r17,zero,458ec <_malloc_r+0x2c0>
   45674:	89409d36 	bltu	r17,r5,458ec <_malloc_r+0x2c0>
   45678:	004d8200 	call	4d820 <__malloc_lock>
   4567c:	00807dc4 	movi	r2,503
   45680:	14402736 	bltu	r2,r17,45720 <_malloc_r+0xf4>
   45684:	8806d0fa 	srli	r3,r17,3
   45688:	04c001b4 	movhi	r19,6
   4568c:	9ce09904 	addi	r19,r19,-32156
   45690:	18c5883a 	add	r2,r3,r3
   45694:	1085883a 	add	r2,r2,r2
   45698:	1085883a 	add	r2,r2,r2
   4569c:	9885883a 	add	r2,r19,r2
   456a0:	14000317 	ldw	r16,12(r2)
   456a4:	80814a26 	beq	r16,r2,45bd0 <_malloc_r+0x5a4>
   456a8:	80c00117 	ldw	r3,4(r16)
   456ac:	81000317 	ldw	r4,12(r16)
   456b0:	00bfff04 	movi	r2,-4
   456b4:	1884703a 	and	r2,r3,r2
   456b8:	81400217 	ldw	r5,8(r16)
   456bc:	8085883a 	add	r2,r16,r2
   456c0:	10c00117 	ldw	r3,4(r2)
   456c4:	29000315 	stw	r4,12(r5)
   456c8:	21400215 	stw	r5,8(r4)
   456cc:	18c00054 	ori	r3,r3,1
   456d0:	10c00115 	stw	r3,4(r2)
   456d4:	9009883a 	mov	r4,r18
   456d8:	004d9400 	call	4d940 <__malloc_unlock>
   456dc:	80800204 	addi	r2,r16,8
   456e0:	dfc00a17 	ldw	ra,40(sp)
   456e4:	df000917 	ldw	fp,36(sp)
   456e8:	ddc00817 	ldw	r23,32(sp)
   456ec:	dd800717 	ldw	r22,28(sp)
   456f0:	dd400617 	ldw	r21,24(sp)
   456f4:	dd000517 	ldw	r20,20(sp)
   456f8:	dcc00417 	ldw	r19,16(sp)
   456fc:	dc800317 	ldw	r18,12(sp)
   45700:	dc400217 	ldw	r17,8(sp)
   45704:	dc000117 	ldw	r16,4(sp)
   45708:	dec00b04 	addi	sp,sp,44
   4570c:	f800283a 	ret
   45710:	04400404 	movi	r17,16
   45714:	89407536 	bltu	r17,r5,458ec <_malloc_r+0x2c0>
   45718:	004d8200 	call	4d820 <__malloc_lock>
   4571c:	003fd906 	br	45684 <__alt_data_end+0xfffd4944>
   45720:	8806d27a 	srli	r3,r17,9
   45724:	18007526 	beq	r3,zero,458fc <_malloc_r+0x2d0>
   45728:	00800104 	movi	r2,4
   4572c:	10c0ef36 	bltu	r2,r3,45aec <_malloc_r+0x4c0>
   45730:	8806d1ba 	srli	r3,r17,6
   45734:	19c00e04 	addi	r7,r3,56
   45738:	39cb883a 	add	r5,r7,r7
   4573c:	04c001b4 	movhi	r19,6
   45740:	294b883a 	add	r5,r5,r5
   45744:	9ce09904 	addi	r19,r19,-32156
   45748:	294b883a 	add	r5,r5,r5
   4574c:	994b883a 	add	r5,r19,r5
   45750:	2c000317 	ldw	r16,12(r5)
   45754:	2c000e26 	beq	r5,r16,45790 <_malloc_r+0x164>
   45758:	80800117 	ldw	r2,4(r16)
   4575c:	01bfff04 	movi	r6,-4
   45760:	010003c4 	movi	r4,15
   45764:	1184703a 	and	r2,r2,r6
   45768:	1447c83a 	sub	r3,r2,r17
   4576c:	20c00716 	blt	r4,r3,4578c <_malloc_r+0x160>
   45770:	1800650e 	bge	r3,zero,45908 <_malloc_r+0x2dc>
   45774:	84000317 	ldw	r16,12(r16)
   45778:	2c000526 	beq	r5,r16,45790 <_malloc_r+0x164>
   4577c:	80800117 	ldw	r2,4(r16)
   45780:	1184703a 	and	r2,r2,r6
   45784:	1447c83a 	sub	r3,r2,r17
   45788:	20fff90e 	bge	r4,r3,45770 <__alt_data_end+0xfffd4a30>
   4578c:	39ffffc4 	addi	r7,r7,-1
   45790:	38c00044 	addi	r3,r7,1
   45794:	018001b4 	movhi	r6,6
   45798:	9c000417 	ldw	r16,16(r19)
   4579c:	31a09904 	addi	r6,r6,-32156
   457a0:	32400204 	addi	r9,r6,8
   457a4:	82410326 	beq	r16,r9,45bb4 <_malloc_r+0x588>
   457a8:	81000117 	ldw	r4,4(r16)
   457ac:	00bfff04 	movi	r2,-4
   457b0:	208e703a 	and	r7,r4,r2
   457b4:	3c45c83a 	sub	r2,r7,r17
   457b8:	010003c4 	movi	r4,15
   457bc:	2080ee16 	blt	r4,r2,45b78 <_malloc_r+0x54c>
   457c0:	32400515 	stw	r9,20(r6)
   457c4:	32400415 	stw	r9,16(r6)
   457c8:	1000510e 	bge	r2,zero,45910 <_malloc_r+0x2e4>
   457cc:	00807fc4 	movi	r2,511
   457d0:	11c0ce36 	bltu	r2,r7,45b0c <_malloc_r+0x4e0>
   457d4:	3808d0fa 	srli	r4,r7,3
   457d8:	01c00044 	movi	r7,1
   457dc:	30800117 	ldw	r2,4(r6)
   457e0:	210b883a 	add	r5,r4,r4
   457e4:	294b883a 	add	r5,r5,r5
   457e8:	2009d0ba 	srai	r4,r4,2
   457ec:	294b883a 	add	r5,r5,r5
   457f0:	298b883a 	add	r5,r5,r6
   457f4:	2a000217 	ldw	r8,8(r5)
   457f8:	3908983a 	sll	r4,r7,r4
   457fc:	81400315 	stw	r5,12(r16)
   45800:	82000215 	stw	r8,8(r16)
   45804:	2088b03a 	or	r4,r4,r2
   45808:	2c000215 	stw	r16,8(r5)
   4580c:	31000115 	stw	r4,4(r6)
   45810:	44000315 	stw	r16,12(r8)
   45814:	1805d0ba 	srai	r2,r3,2
   45818:	01400044 	movi	r5,1
   4581c:	288a983a 	sll	r5,r5,r2
   45820:	21404336 	bltu	r4,r5,45930 <_malloc_r+0x304>
   45824:	2144703a 	and	r2,r4,r5
   45828:	10000a1e 	bne	r2,zero,45854 <_malloc_r+0x228>
   4582c:	00bfff04 	movi	r2,-4
   45830:	294b883a 	add	r5,r5,r5
   45834:	1886703a 	and	r3,r3,r2
   45838:	2144703a 	and	r2,r4,r5
   4583c:	18c00104 	addi	r3,r3,4
   45840:	1000041e 	bne	r2,zero,45854 <_malloc_r+0x228>
   45844:	294b883a 	add	r5,r5,r5
   45848:	2144703a 	and	r2,r4,r5
   4584c:	18c00104 	addi	r3,r3,4
   45850:	103ffc26 	beq	r2,zero,45844 <__alt_data_end+0xfffd4b04>
   45854:	023fff04 	movi	r8,-4
   45858:	01c003c4 	movi	r7,15
   4585c:	18c5883a 	add	r2,r3,r3
   45860:	1085883a 	add	r2,r2,r2
   45864:	1085883a 	add	r2,r2,r2
   45868:	9895883a 	add	r10,r19,r2
   4586c:	52c00304 	addi	r11,r10,12
   45870:	1819883a 	mov	r12,r3
   45874:	5c000017 	ldw	r16,0(r11)
   45878:	59bffd04 	addi	r6,r11,-12
   4587c:	8180041e 	bne	r16,r6,45890 <_malloc_r+0x264>
   45880:	0000ce06 	br	45bbc <_malloc_r+0x590>
   45884:	2000d70e 	bge	r4,zero,45be4 <_malloc_r+0x5b8>
   45888:	84000317 	ldw	r16,12(r16)
   4588c:	8180cb26 	beq	r16,r6,45bbc <_malloc_r+0x590>
   45890:	80800117 	ldw	r2,4(r16)
   45894:	1204703a 	and	r2,r2,r8
   45898:	1449c83a 	sub	r4,r2,r17
   4589c:	393ff90e 	bge	r7,r4,45884 <__alt_data_end+0xfffd4b44>
   458a0:	80800317 	ldw	r2,12(r16)
   458a4:	80c00217 	ldw	r3,8(r16)
   458a8:	89400054 	ori	r5,r17,1
   458ac:	81400115 	stw	r5,4(r16)
   458b0:	18800315 	stw	r2,12(r3)
   458b4:	10c00215 	stw	r3,8(r2)
   458b8:	8463883a 	add	r17,r16,r17
   458bc:	9c400515 	stw	r17,20(r19)
   458c0:	9c400415 	stw	r17,16(r19)
   458c4:	20800054 	ori	r2,r4,1
   458c8:	88800115 	stw	r2,4(r17)
   458cc:	8a400315 	stw	r9,12(r17)
   458d0:	8a400215 	stw	r9,8(r17)
   458d4:	8923883a 	add	r17,r17,r4
   458d8:	89000015 	stw	r4,0(r17)
   458dc:	9009883a 	mov	r4,r18
   458e0:	004d9400 	call	4d940 <__malloc_unlock>
   458e4:	80800204 	addi	r2,r16,8
   458e8:	003f7d06 	br	456e0 <__alt_data_end+0xfffd49a0>
   458ec:	00800304 	movi	r2,12
   458f0:	90800015 	stw	r2,0(r18)
   458f4:	0005883a 	mov	r2,zero
   458f8:	003f7906 	br	456e0 <__alt_data_end+0xfffd49a0>
   458fc:	01401f84 	movi	r5,126
   45900:	01c00fc4 	movi	r7,63
   45904:	003f8d06 	br	4573c <__alt_data_end+0xfffd49fc>
   45908:	81000317 	ldw	r4,12(r16)
   4590c:	003f6a06 	br	456b8 <__alt_data_end+0xfffd4978>
   45910:	81c5883a 	add	r2,r16,r7
   45914:	10c00117 	ldw	r3,4(r2)
   45918:	9009883a 	mov	r4,r18
   4591c:	18c00054 	ori	r3,r3,1
   45920:	10c00115 	stw	r3,4(r2)
   45924:	004d9400 	call	4d940 <__malloc_unlock>
   45928:	80800204 	addi	r2,r16,8
   4592c:	003f6c06 	br	456e0 <__alt_data_end+0xfffd49a0>
   45930:	9c000217 	ldw	r16,8(r19)
   45934:	00bfff04 	movi	r2,-4
   45938:	85800117 	ldw	r22,4(r16)
   4593c:	b0ac703a 	and	r22,r22,r2
   45940:	b4400336 	bltu	r22,r17,45950 <_malloc_r+0x324>
   45944:	b445c83a 	sub	r2,r22,r17
   45948:	00c003c4 	movi	r3,15
   4594c:	18805d16 	blt	r3,r2,45ac4 <_malloc_r+0x498>
   45950:	05c001b4 	movhi	r23,6
   45954:	008001b4 	movhi	r2,6
   45958:	bde62304 	addi	r23,r23,-26484
   4595c:	10ad3704 	addi	r2,r2,-19236
   45960:	15400017 	ldw	r21,0(r2)
   45964:	b9000017 	ldw	r4,0(r23)
   45968:	00ffffc4 	movi	r3,-1
   4596c:	858d883a 	add	r6,r16,r22
   45970:	8d6b883a 	add	r21,r17,r21
   45974:	20c0e426 	beq	r4,r3,45d08 <_malloc_r+0x6dc>
   45978:	ad4403c4 	addi	r21,r21,4111
   4597c:	00fc0004 	movi	r3,-4096
   45980:	a8ea703a 	and	r21,r21,r3
   45984:	9009883a 	mov	r4,r18
   45988:	a80b883a 	mov	r5,r21
   4598c:	d9800015 	stw	r6,0(sp)
   45990:	00478140 	call	47814 <_sbrk_r>
   45994:	00ffffc4 	movi	r3,-1
   45998:	1029883a 	mov	r20,r2
   4599c:	d9800017 	ldw	r6,0(sp)
   459a0:	10c0a426 	beq	r2,r3,45c34 <_malloc_r+0x608>
   459a4:	1180a236 	bltu	r2,r6,45c30 <_malloc_r+0x604>
   459a8:	070001b4 	movhi	fp,6
   459ac:	e72d5804 	addi	fp,fp,-19104
   459b0:	e0c00017 	ldw	r3,0(fp)
   459b4:	a8c7883a 	add	r3,r21,r3
   459b8:	e0c00015 	stw	r3,0(fp)
   459bc:	3500da26 	beq	r6,r20,45d28 <_malloc_r+0x6fc>
   459c0:	b9000017 	ldw	r4,0(r23)
   459c4:	00bfffc4 	movi	r2,-1
   459c8:	2080e426 	beq	r4,r2,45d5c <_malloc_r+0x730>
   459cc:	a185c83a 	sub	r2,r20,r6
   459d0:	1885883a 	add	r2,r3,r2
   459d4:	e0800015 	stw	r2,0(fp)
   459d8:	a0c001cc 	andi	r3,r20,7
   459dc:	1800b526 	beq	r3,zero,45cb4 <_malloc_r+0x688>
   459e0:	a0e9c83a 	sub	r20,r20,r3
   459e4:	00840204 	movi	r2,4104
   459e8:	a5000204 	addi	r20,r20,8
   459ec:	10c7c83a 	sub	r3,r2,r3
   459f0:	a545883a 	add	r2,r20,r21
   459f4:	1083ffcc 	andi	r2,r2,4095
   459f8:	18abc83a 	sub	r21,r3,r2
   459fc:	9009883a 	mov	r4,r18
   45a00:	a80b883a 	mov	r5,r21
   45a04:	00478140 	call	47814 <_sbrk_r>
   45a08:	00ffffc4 	movi	r3,-1
   45a0c:	10c0d026 	beq	r2,r3,45d50 <_malloc_r+0x724>
   45a10:	1507c83a 	sub	r3,r2,r20
   45a14:	a8c7883a 	add	r3,r21,r3
   45a18:	18c00054 	ori	r3,r3,1
   45a1c:	e0800017 	ldw	r2,0(fp)
   45a20:	9d000215 	stw	r20,8(r19)
   45a24:	a0c00115 	stw	r3,4(r20)
   45a28:	a887883a 	add	r3,r21,r2
   45a2c:	e0c00015 	stw	r3,0(fp)
   45a30:	84c00e26 	beq	r16,r19,45a6c <_malloc_r+0x440>
   45a34:	018003c4 	movi	r6,15
   45a38:	3580a02e 	bgeu	r6,r22,45cbc <_malloc_r+0x690>
   45a3c:	81400117 	ldw	r5,4(r16)
   45a40:	013ffe04 	movi	r4,-8
   45a44:	b0bffd04 	addi	r2,r22,-12
   45a48:	1104703a 	and	r2,r2,r4
   45a4c:	2900004c 	andi	r4,r5,1
   45a50:	1108b03a 	or	r4,r2,r4
   45a54:	81000115 	stw	r4,4(r16)
   45a58:	01400144 	movi	r5,5
   45a5c:	8089883a 	add	r4,r16,r2
   45a60:	21400115 	stw	r5,4(r4)
   45a64:	21400215 	stw	r5,8(r4)
   45a68:	3080c036 	bltu	r6,r2,45d6c <_malloc_r+0x740>
   45a6c:	008001b4 	movhi	r2,6
   45a70:	10ad3604 	addi	r2,r2,-19240
   45a74:	11000017 	ldw	r4,0(r2)
   45a78:	20c0012e 	bgeu	r4,r3,45a80 <_malloc_r+0x454>
   45a7c:	10c00015 	stw	r3,0(r2)
   45a80:	008001b4 	movhi	r2,6
   45a84:	10ad3504 	addi	r2,r2,-19244
   45a88:	11000017 	ldw	r4,0(r2)
   45a8c:	9c000217 	ldw	r16,8(r19)
   45a90:	20c0012e 	bgeu	r4,r3,45a98 <_malloc_r+0x46c>
   45a94:	10c00015 	stw	r3,0(r2)
   45a98:	80c00117 	ldw	r3,4(r16)
   45a9c:	00bfff04 	movi	r2,-4
   45aa0:	1886703a 	and	r3,r3,r2
   45aa4:	1c45c83a 	sub	r2,r3,r17
   45aa8:	1c400236 	bltu	r3,r17,45ab4 <_malloc_r+0x488>
   45aac:	00c003c4 	movi	r3,15
   45ab0:	18800416 	blt	r3,r2,45ac4 <_malloc_r+0x498>
   45ab4:	9009883a 	mov	r4,r18
   45ab8:	004d9400 	call	4d940 <__malloc_unlock>
   45abc:	0005883a 	mov	r2,zero
   45ac0:	003f0706 	br	456e0 <__alt_data_end+0xfffd49a0>
   45ac4:	88c00054 	ori	r3,r17,1
   45ac8:	80c00115 	stw	r3,4(r16)
   45acc:	8463883a 	add	r17,r16,r17
   45ad0:	10800054 	ori	r2,r2,1
   45ad4:	9c400215 	stw	r17,8(r19)
   45ad8:	88800115 	stw	r2,4(r17)
   45adc:	9009883a 	mov	r4,r18
   45ae0:	004d9400 	call	4d940 <__malloc_unlock>
   45ae4:	80800204 	addi	r2,r16,8
   45ae8:	003efd06 	br	456e0 <__alt_data_end+0xfffd49a0>
   45aec:	00800504 	movi	r2,20
   45af0:	10c0482e 	bgeu	r2,r3,45c14 <_malloc_r+0x5e8>
   45af4:	00801504 	movi	r2,84
   45af8:	10c06836 	bltu	r2,r3,45c9c <_malloc_r+0x670>
   45afc:	8806d33a 	srli	r3,r17,12
   45b00:	19c01b84 	addi	r7,r3,110
   45b04:	39cb883a 	add	r5,r7,r7
   45b08:	003f0c06 	br	4573c <__alt_data_end+0xfffd49fc>
   45b0c:	3804d27a 	srli	r2,r7,9
   45b10:	01000104 	movi	r4,4
   45b14:	2080422e 	bgeu	r4,r2,45c20 <_malloc_r+0x5f4>
   45b18:	01000504 	movi	r4,20
   45b1c:	20807c36 	bltu	r4,r2,45d10 <_malloc_r+0x6e4>
   45b20:	110016c4 	addi	r4,r2,91
   45b24:	210b883a 	add	r5,r4,r4
   45b28:	294b883a 	add	r5,r5,r5
   45b2c:	294b883a 	add	r5,r5,r5
   45b30:	994b883a 	add	r5,r19,r5
   45b34:	28800217 	ldw	r2,8(r5)
   45b38:	020001b4 	movhi	r8,6
   45b3c:	42209904 	addi	r8,r8,-32156
   45b40:	11406326 	beq	r2,r5,45cd0 <_malloc_r+0x6a4>
   45b44:	01bfff04 	movi	r6,-4
   45b48:	11000117 	ldw	r4,4(r2)
   45b4c:	2188703a 	and	r4,r4,r6
   45b50:	3900022e 	bgeu	r7,r4,45b5c <_malloc_r+0x530>
   45b54:	10800217 	ldw	r2,8(r2)
   45b58:	28bffb1e 	bne	r5,r2,45b48 <__alt_data_end+0xfffd4e08>
   45b5c:	11800317 	ldw	r6,12(r2)
   45b60:	99000117 	ldw	r4,4(r19)
   45b64:	81800315 	stw	r6,12(r16)
   45b68:	80800215 	stw	r2,8(r16)
   45b6c:	34000215 	stw	r16,8(r6)
   45b70:	14000315 	stw	r16,12(r2)
   45b74:	003f2706 	br	45814 <__alt_data_end+0xfffd4ad4>
   45b78:	88c00054 	ori	r3,r17,1
   45b7c:	80c00115 	stw	r3,4(r16)
   45b80:	8463883a 	add	r17,r16,r17
   45b84:	34400515 	stw	r17,20(r6)
   45b88:	34400415 	stw	r17,16(r6)
   45b8c:	10c00054 	ori	r3,r2,1
   45b90:	8a400315 	stw	r9,12(r17)
   45b94:	8a400215 	stw	r9,8(r17)
   45b98:	88c00115 	stw	r3,4(r17)
   45b9c:	88a3883a 	add	r17,r17,r2
   45ba0:	88800015 	stw	r2,0(r17)
   45ba4:	9009883a 	mov	r4,r18
   45ba8:	004d9400 	call	4d940 <__malloc_unlock>
   45bac:	80800204 	addi	r2,r16,8
   45bb0:	003ecb06 	br	456e0 <__alt_data_end+0xfffd49a0>
   45bb4:	31000117 	ldw	r4,4(r6)
   45bb8:	003f1606 	br	45814 <__alt_data_end+0xfffd4ad4>
   45bbc:	63000044 	addi	r12,r12,1
   45bc0:	608000cc 	andi	r2,r12,3
   45bc4:	5ac00204 	addi	r11,r11,8
   45bc8:	103f2a1e 	bne	r2,zero,45874 <__alt_data_end+0xfffd4b34>
   45bcc:	00002106 	br	45c54 <_malloc_r+0x628>
   45bd0:	80800204 	addi	r2,r16,8
   45bd4:	84000517 	ldw	r16,20(r16)
   45bd8:	143eb31e 	bne	r2,r16,456a8 <__alt_data_end+0xfffd4968>
   45bdc:	18c00084 	addi	r3,r3,2
   45be0:	003eec06 	br	45794 <__alt_data_end+0xfffd4a54>
   45be4:	8085883a 	add	r2,r16,r2
   45be8:	10c00117 	ldw	r3,4(r2)
   45bec:	81000317 	ldw	r4,12(r16)
   45bf0:	81400217 	ldw	r5,8(r16)
   45bf4:	18c00054 	ori	r3,r3,1
   45bf8:	10c00115 	stw	r3,4(r2)
   45bfc:	29000315 	stw	r4,12(r5)
   45c00:	21400215 	stw	r5,8(r4)
   45c04:	9009883a 	mov	r4,r18
   45c08:	004d9400 	call	4d940 <__malloc_unlock>
   45c0c:	80800204 	addi	r2,r16,8
   45c10:	003eb306 	br	456e0 <__alt_data_end+0xfffd49a0>
   45c14:	19c016c4 	addi	r7,r3,91
   45c18:	39cb883a 	add	r5,r7,r7
   45c1c:	003ec706 	br	4573c <__alt_data_end+0xfffd49fc>
   45c20:	3804d1ba 	srli	r2,r7,6
   45c24:	11000e04 	addi	r4,r2,56
   45c28:	210b883a 	add	r5,r4,r4
   45c2c:	003fbe06 	br	45b28 <__alt_data_end+0xfffd4de8>
   45c30:	84ff5d26 	beq	r16,r19,459a8 <__alt_data_end+0xfffd4c68>
   45c34:	9c000217 	ldw	r16,8(r19)
   45c38:	00bfff04 	movi	r2,-4
   45c3c:	80c00117 	ldw	r3,4(r16)
   45c40:	1886703a 	and	r3,r3,r2
   45c44:	003f9706 	br	45aa4 <__alt_data_end+0xfffd4d64>
   45c48:	52800017 	ldw	r10,0(r10)
   45c4c:	18ffffc4 	addi	r3,r3,-1
   45c50:	50805c1e 	bne	r10,r2,45dc4 <_malloc_r+0x798>
   45c54:	190000cc 	andi	r4,r3,3
   45c58:	50bffe04 	addi	r2,r10,-8
   45c5c:	203ffa1e 	bne	r4,zero,45c48 <__alt_data_end+0xfffd4f08>
   45c60:	98800117 	ldw	r2,4(r19)
   45c64:	0146303a 	nor	r3,zero,r5
   45c68:	1884703a 	and	r2,r3,r2
   45c6c:	98800115 	stw	r2,4(r19)
   45c70:	294b883a 	add	r5,r5,r5
   45c74:	117f2e36 	bltu	r2,r5,45930 <__alt_data_end+0xfffd4bf0>
   45c78:	283f2d26 	beq	r5,zero,45930 <__alt_data_end+0xfffd4bf0>
   45c7c:	1146703a 	and	r3,r2,r5
   45c80:	1800521e 	bne	r3,zero,45dcc <_malloc_r+0x7a0>
   45c84:	6007883a 	mov	r3,r12
   45c88:	294b883a 	add	r5,r5,r5
   45c8c:	1148703a 	and	r4,r2,r5
   45c90:	18c00104 	addi	r3,r3,4
   45c94:	203ffc26 	beq	r4,zero,45c88 <__alt_data_end+0xfffd4f48>
   45c98:	003ef006 	br	4585c <__alt_data_end+0xfffd4b1c>
   45c9c:	00805504 	movi	r2,340
   45ca0:	10c01336 	bltu	r2,r3,45cf0 <_malloc_r+0x6c4>
   45ca4:	8806d3fa 	srli	r3,r17,15
   45ca8:	19c01dc4 	addi	r7,r3,119
   45cac:	39cb883a 	add	r5,r7,r7
   45cb0:	003ea206 	br	4573c <__alt_data_end+0xfffd49fc>
   45cb4:	00c40004 	movi	r3,4096
   45cb8:	003f4d06 	br	459f0 <__alt_data_end+0xfffd4cb0>
   45cbc:	00800044 	movi	r2,1
   45cc0:	a0800115 	stw	r2,4(r20)
   45cc4:	a021883a 	mov	r16,r20
   45cc8:	0007883a 	mov	r3,zero
   45ccc:	003f7506 	br	45aa4 <__alt_data_end+0xfffd4d64>
   45cd0:	200bd0ba 	srai	r5,r4,2
   45cd4:	01800044 	movi	r6,1
   45cd8:	41000117 	ldw	r4,4(r8)
   45cdc:	314a983a 	sll	r5,r6,r5
   45ce0:	100d883a 	mov	r6,r2
   45ce4:	2908b03a 	or	r4,r5,r4
   45ce8:	41000115 	stw	r4,4(r8)
   45cec:	003f9d06 	br	45b64 <__alt_data_end+0xfffd4e24>
   45cf0:	00815504 	movi	r2,1364
   45cf4:	10c01336 	bltu	r2,r3,45d44 <_malloc_r+0x718>
   45cf8:	8806d4ba 	srli	r3,r17,18
   45cfc:	19c01f04 	addi	r7,r3,124
   45d00:	39cb883a 	add	r5,r7,r7
   45d04:	003e8d06 	br	4573c <__alt_data_end+0xfffd49fc>
   45d08:	ad400404 	addi	r21,r21,16
   45d0c:	003f1d06 	br	45984 <__alt_data_end+0xfffd4c44>
   45d10:	01001504 	movi	r4,84
   45d14:	20801c36 	bltu	r4,r2,45d88 <_malloc_r+0x75c>
   45d18:	3804d33a 	srli	r2,r7,12
   45d1c:	11001b84 	addi	r4,r2,110
   45d20:	210b883a 	add	r5,r4,r4
   45d24:	003f8006 	br	45b28 <__alt_data_end+0xfffd4de8>
   45d28:	3083ffcc 	andi	r2,r6,4095
   45d2c:	103f241e 	bne	r2,zero,459c0 <__alt_data_end+0xfffd4c80>
   45d30:	99000217 	ldw	r4,8(r19)
   45d34:	ad85883a 	add	r2,r21,r22
   45d38:	10800054 	ori	r2,r2,1
   45d3c:	20800115 	stw	r2,4(r4)
   45d40:	003f4a06 	br	45a6c <__alt_data_end+0xfffd4d2c>
   45d44:	01403f04 	movi	r5,252
   45d48:	01c01f84 	movi	r7,126
   45d4c:	003e7b06 	br	4573c <__alt_data_end+0xfffd49fc>
   45d50:	00c00044 	movi	r3,1
   45d54:	002b883a 	mov	r21,zero
   45d58:	003f3006 	br	45a1c <__alt_data_end+0xfffd4cdc>
   45d5c:	008001b4 	movhi	r2,6
   45d60:	10a62304 	addi	r2,r2,-26484
   45d64:	15000015 	stw	r20,0(r2)
   45d68:	003f1b06 	br	459d8 <__alt_data_end+0xfffd4c98>
   45d6c:	9009883a 	mov	r4,r18
   45d70:	81400204 	addi	r5,r16,8
   45d74:	0044a900 	call	44a90 <_free_r>
   45d78:	008001b4 	movhi	r2,6
   45d7c:	10ad5804 	addi	r2,r2,-19104
   45d80:	10c00017 	ldw	r3,0(r2)
   45d84:	003f3906 	br	45a6c <__alt_data_end+0xfffd4d2c>
   45d88:	01005504 	movi	r4,340
   45d8c:	20800436 	bltu	r4,r2,45da0 <_malloc_r+0x774>
   45d90:	3804d3fa 	srli	r2,r7,15
   45d94:	11001dc4 	addi	r4,r2,119
   45d98:	210b883a 	add	r5,r4,r4
   45d9c:	003f6206 	br	45b28 <__alt_data_end+0xfffd4de8>
   45da0:	01015504 	movi	r4,1364
   45da4:	20800436 	bltu	r4,r2,45db8 <_malloc_r+0x78c>
   45da8:	3804d4ba 	srli	r2,r7,18
   45dac:	11001f04 	addi	r4,r2,124
   45db0:	210b883a 	add	r5,r4,r4
   45db4:	003f5c06 	br	45b28 <__alt_data_end+0xfffd4de8>
   45db8:	01403f04 	movi	r5,252
   45dbc:	01001f84 	movi	r4,126
   45dc0:	003f5906 	br	45b28 <__alt_data_end+0xfffd4de8>
   45dc4:	98800117 	ldw	r2,4(r19)
   45dc8:	003fa906 	br	45c70 <__alt_data_end+0xfffd4f30>
   45dcc:	6007883a 	mov	r3,r12
   45dd0:	003ea206 	br	4585c <__alt_data_end+0xfffd4b1c>

00045dd4 <memchr>:
   45dd4:	208000cc 	andi	r2,r4,3
   45dd8:	280f883a 	mov	r7,r5
   45ddc:	10003526 	beq	r2,zero,45eb4 <memchr+0xe0>
   45de0:	30bfffc4 	addi	r2,r6,-1
   45de4:	30001b26 	beq	r6,zero,45e54 <memchr+0x80>
   45de8:	21800003 	ldbu	r6,0(r4)
   45dec:	28c03fcc 	andi	r3,r5,255
   45df0:	30c01a26 	beq	r6,r3,45e5c <memchr+0x88>
   45df4:	180d883a 	mov	r6,r3
   45df8:	00000406 	br	45e0c <memchr+0x38>
   45dfc:	10001526 	beq	r2,zero,45e54 <memchr+0x80>
   45e00:	20c00003 	ldbu	r3,0(r4)
   45e04:	10bfffc4 	addi	r2,r2,-1
   45e08:	19801426 	beq	r3,r6,45e5c <memchr+0x88>
   45e0c:	21000044 	addi	r4,r4,1
   45e10:	20c000cc 	andi	r3,r4,3
   45e14:	183ff91e 	bne	r3,zero,45dfc <__alt_data_end+0xfffd50bc>
   45e18:	024000c4 	movi	r9,3
   45e1c:	48801136 	bltu	r9,r2,45e64 <memchr+0x90>
   45e20:	10000c26 	beq	r2,zero,45e54 <memchr+0x80>
   45e24:	20c00003 	ldbu	r3,0(r4)
   45e28:	29403fcc 	andi	r5,r5,255
   45e2c:	19400b26 	beq	r3,r5,45e5c <memchr+0x88>
   45e30:	20c00044 	addi	r3,r4,1
   45e34:	2085883a 	add	r2,r4,r2
   45e38:	39803fcc 	andi	r6,r7,255
   45e3c:	00000306 	br	45e4c <memchr+0x78>
   45e40:	18c00044 	addi	r3,r3,1
   45e44:	197fffc3 	ldbu	r5,-1(r3)
   45e48:	29800426 	beq	r5,r6,45e5c <memchr+0x88>
   45e4c:	1809883a 	mov	r4,r3
   45e50:	18bffb1e 	bne	r3,r2,45e40 <__alt_data_end+0xfffd5100>
   45e54:	0005883a 	mov	r2,zero
   45e58:	f800283a 	ret
   45e5c:	2005883a 	mov	r2,r4
   45e60:	f800283a 	ret
   45e64:	28c03fcc 	andi	r3,r5,255
   45e68:	1810923a 	slli	r8,r3,8
   45e6c:	02ffbff4 	movhi	r11,65279
   45e70:	02a02074 	movhi	r10,32897
   45e74:	40c6b03a 	or	r3,r8,r3
   45e78:	1810943a 	slli	r8,r3,16
   45e7c:	5affbfc4 	addi	r11,r11,-257
   45e80:	52a02004 	addi	r10,r10,-32640
   45e84:	40d0b03a 	or	r8,r8,r3
   45e88:	20c00017 	ldw	r3,0(r4)
   45e8c:	40c6f03a 	xor	r3,r8,r3
   45e90:	1acd883a 	add	r6,r3,r11
   45e94:	00c6303a 	nor	r3,zero,r3
   45e98:	30c6703a 	and	r3,r6,r3
   45e9c:	1a86703a 	and	r3,r3,r10
   45ea0:	183fdf1e 	bne	r3,zero,45e20 <__alt_data_end+0xfffd50e0>
   45ea4:	10bfff04 	addi	r2,r2,-4
   45ea8:	21000104 	addi	r4,r4,4
   45eac:	48bff636 	bltu	r9,r2,45e88 <__alt_data_end+0xfffd5148>
   45eb0:	003fdb06 	br	45e20 <__alt_data_end+0xfffd50e0>
   45eb4:	3005883a 	mov	r2,r6
   45eb8:	003fd706 	br	45e18 <__alt_data_end+0xfffd50d8>

00045ebc <memcpy>:
   45ebc:	deffff04 	addi	sp,sp,-4
   45ec0:	dc000015 	stw	r16,0(sp)
   45ec4:	00c003c4 	movi	r3,15
   45ec8:	2005883a 	mov	r2,r4
   45ecc:	1980432e 	bgeu	r3,r6,45fdc <memcpy+0x120>
   45ed0:	2146b03a 	or	r3,r4,r5
   45ed4:	18c000cc 	andi	r3,r3,3
   45ed8:	1800421e 	bne	r3,zero,45fe4 <memcpy+0x128>
   45edc:	343ffc04 	addi	r16,r6,-16
   45ee0:	8020d13a 	srli	r16,r16,4
   45ee4:	28c00104 	addi	r3,r5,4
   45ee8:	23400104 	addi	r13,r4,4
   45eec:	801e913a 	slli	r15,r16,4
   45ef0:	2b000204 	addi	r12,r5,8
   45ef4:	22c00204 	addi	r11,r4,8
   45ef8:	7bc00504 	addi	r15,r15,20
   45efc:	2a800304 	addi	r10,r5,12
   45f00:	22400304 	addi	r9,r4,12
   45f04:	2bdf883a 	add	r15,r5,r15
   45f08:	2811883a 	mov	r8,r5
   45f0c:	200f883a 	mov	r7,r4
   45f10:	41000017 	ldw	r4,0(r8)
   45f14:	39c00404 	addi	r7,r7,16
   45f18:	18c00404 	addi	r3,r3,16
   45f1c:	393ffc15 	stw	r4,-16(r7)
   45f20:	1bbffc17 	ldw	r14,-16(r3)
   45f24:	6b400404 	addi	r13,r13,16
   45f28:	5ac00404 	addi	r11,r11,16
   45f2c:	6bbffc15 	stw	r14,-16(r13)
   45f30:	63800017 	ldw	r14,0(r12)
   45f34:	4a400404 	addi	r9,r9,16
   45f38:	42000404 	addi	r8,r8,16
   45f3c:	5bbffc15 	stw	r14,-16(r11)
   45f40:	53800017 	ldw	r14,0(r10)
   45f44:	63000404 	addi	r12,r12,16
   45f48:	52800404 	addi	r10,r10,16
   45f4c:	4bbffc15 	stw	r14,-16(r9)
   45f50:	1bffef1e 	bne	r3,r15,45f10 <__alt_data_end+0xfffd51d0>
   45f54:	81c00044 	addi	r7,r16,1
   45f58:	380e913a 	slli	r7,r7,4
   45f5c:	310003cc 	andi	r4,r6,15
   45f60:	02c000c4 	movi	r11,3
   45f64:	11c7883a 	add	r3,r2,r7
   45f68:	29cb883a 	add	r5,r5,r7
   45f6c:	59001f2e 	bgeu	r11,r4,45fec <memcpy+0x130>
   45f70:	1813883a 	mov	r9,r3
   45f74:	2811883a 	mov	r8,r5
   45f78:	200f883a 	mov	r7,r4
   45f7c:	42800017 	ldw	r10,0(r8)
   45f80:	4a400104 	addi	r9,r9,4
   45f84:	39ffff04 	addi	r7,r7,-4
   45f88:	4abfff15 	stw	r10,-4(r9)
   45f8c:	42000104 	addi	r8,r8,4
   45f90:	59fffa36 	bltu	r11,r7,45f7c <__alt_data_end+0xfffd523c>
   45f94:	213fff04 	addi	r4,r4,-4
   45f98:	2008d0ba 	srli	r4,r4,2
   45f9c:	318000cc 	andi	r6,r6,3
   45fa0:	21000044 	addi	r4,r4,1
   45fa4:	2109883a 	add	r4,r4,r4
   45fa8:	2109883a 	add	r4,r4,r4
   45fac:	1907883a 	add	r3,r3,r4
   45fb0:	290b883a 	add	r5,r5,r4
   45fb4:	30000626 	beq	r6,zero,45fd0 <memcpy+0x114>
   45fb8:	198d883a 	add	r6,r3,r6
   45fbc:	29c00003 	ldbu	r7,0(r5)
   45fc0:	18c00044 	addi	r3,r3,1
   45fc4:	29400044 	addi	r5,r5,1
   45fc8:	19ffffc5 	stb	r7,-1(r3)
   45fcc:	19bffb1e 	bne	r3,r6,45fbc <__alt_data_end+0xfffd527c>
   45fd0:	dc000017 	ldw	r16,0(sp)
   45fd4:	dec00104 	addi	sp,sp,4
   45fd8:	f800283a 	ret
   45fdc:	2007883a 	mov	r3,r4
   45fe0:	003ff406 	br	45fb4 <__alt_data_end+0xfffd5274>
   45fe4:	2007883a 	mov	r3,r4
   45fe8:	003ff306 	br	45fb8 <__alt_data_end+0xfffd5278>
   45fec:	200d883a 	mov	r6,r4
   45ff0:	003ff006 	br	45fb4 <__alt_data_end+0xfffd5274>

00045ff4 <memmove>:
   45ff4:	2005883a 	mov	r2,r4
   45ff8:	29000b2e 	bgeu	r5,r4,46028 <memmove+0x34>
   45ffc:	298f883a 	add	r7,r5,r6
   46000:	21c0092e 	bgeu	r4,r7,46028 <memmove+0x34>
   46004:	2187883a 	add	r3,r4,r6
   46008:	198bc83a 	sub	r5,r3,r6
   4600c:	30004b26 	beq	r6,zero,4613c <memmove+0x148>
   46010:	39ffffc4 	addi	r7,r7,-1
   46014:	39000003 	ldbu	r4,0(r7)
   46018:	18ffffc4 	addi	r3,r3,-1
   4601c:	19000005 	stb	r4,0(r3)
   46020:	197ffb1e 	bne	r3,r5,46010 <__alt_data_end+0xfffd52d0>
   46024:	f800283a 	ret
   46028:	00c003c4 	movi	r3,15
   4602c:	1980412e 	bgeu	r3,r6,46134 <memmove+0x140>
   46030:	1146b03a 	or	r3,r2,r5
   46034:	18c000cc 	andi	r3,r3,3
   46038:	1800411e 	bne	r3,zero,46140 <memmove+0x14c>
   4603c:	33fffc04 	addi	r15,r6,-16
   46040:	781ed13a 	srli	r15,r15,4
   46044:	28c00104 	addi	r3,r5,4
   46048:	13400104 	addi	r13,r2,4
   4604c:	781c913a 	slli	r14,r15,4
   46050:	2b000204 	addi	r12,r5,8
   46054:	12c00204 	addi	r11,r2,8
   46058:	73800504 	addi	r14,r14,20
   4605c:	2a800304 	addi	r10,r5,12
   46060:	12400304 	addi	r9,r2,12
   46064:	2b9d883a 	add	r14,r5,r14
   46068:	2811883a 	mov	r8,r5
   4606c:	100f883a 	mov	r7,r2
   46070:	41000017 	ldw	r4,0(r8)
   46074:	39c00404 	addi	r7,r7,16
   46078:	18c00404 	addi	r3,r3,16
   4607c:	393ffc15 	stw	r4,-16(r7)
   46080:	193ffc17 	ldw	r4,-16(r3)
   46084:	6b400404 	addi	r13,r13,16
   46088:	5ac00404 	addi	r11,r11,16
   4608c:	693ffc15 	stw	r4,-16(r13)
   46090:	61000017 	ldw	r4,0(r12)
   46094:	4a400404 	addi	r9,r9,16
   46098:	42000404 	addi	r8,r8,16
   4609c:	593ffc15 	stw	r4,-16(r11)
   460a0:	51000017 	ldw	r4,0(r10)
   460a4:	63000404 	addi	r12,r12,16
   460a8:	52800404 	addi	r10,r10,16
   460ac:	493ffc15 	stw	r4,-16(r9)
   460b0:	1bbfef1e 	bne	r3,r14,46070 <__alt_data_end+0xfffd5330>
   460b4:	79000044 	addi	r4,r15,1
   460b8:	2008913a 	slli	r4,r4,4
   460bc:	328003cc 	andi	r10,r6,15
   460c0:	02c000c4 	movi	r11,3
   460c4:	1107883a 	add	r3,r2,r4
   460c8:	290b883a 	add	r5,r5,r4
   460cc:	5a801e2e 	bgeu	r11,r10,46148 <memmove+0x154>
   460d0:	1813883a 	mov	r9,r3
   460d4:	2811883a 	mov	r8,r5
   460d8:	500f883a 	mov	r7,r10
   460dc:	41000017 	ldw	r4,0(r8)
   460e0:	4a400104 	addi	r9,r9,4
   460e4:	39ffff04 	addi	r7,r7,-4
   460e8:	493fff15 	stw	r4,-4(r9)
   460ec:	42000104 	addi	r8,r8,4
   460f0:	59fffa36 	bltu	r11,r7,460dc <__alt_data_end+0xfffd539c>
   460f4:	513fff04 	addi	r4,r10,-4
   460f8:	2008d0ba 	srli	r4,r4,2
   460fc:	318000cc 	andi	r6,r6,3
   46100:	21000044 	addi	r4,r4,1
   46104:	2109883a 	add	r4,r4,r4
   46108:	2109883a 	add	r4,r4,r4
   4610c:	1907883a 	add	r3,r3,r4
   46110:	290b883a 	add	r5,r5,r4
   46114:	30000926 	beq	r6,zero,4613c <memmove+0x148>
   46118:	198d883a 	add	r6,r3,r6
   4611c:	29c00003 	ldbu	r7,0(r5)
   46120:	18c00044 	addi	r3,r3,1
   46124:	29400044 	addi	r5,r5,1
   46128:	19ffffc5 	stb	r7,-1(r3)
   4612c:	19bffb1e 	bne	r3,r6,4611c <__alt_data_end+0xfffd53dc>
   46130:	f800283a 	ret
   46134:	1007883a 	mov	r3,r2
   46138:	003ff606 	br	46114 <__alt_data_end+0xfffd53d4>
   4613c:	f800283a 	ret
   46140:	1007883a 	mov	r3,r2
   46144:	003ff406 	br	46118 <__alt_data_end+0xfffd53d8>
   46148:	500d883a 	mov	r6,r10
   4614c:	003ff106 	br	46114 <__alt_data_end+0xfffd53d4>

00046150 <memset>:
   46150:	20c000cc 	andi	r3,r4,3
   46154:	2005883a 	mov	r2,r4
   46158:	18004326 	beq	r3,zero,46268 <memset+0x118>
   4615c:	31ffffc4 	addi	r7,r6,-1
   46160:	30004026 	beq	r6,zero,46264 <memset+0x114>
   46164:	2813883a 	mov	r9,r5
   46168:	200d883a 	mov	r6,r4
   4616c:	2007883a 	mov	r3,r4
   46170:	00000406 	br	46184 <memset+0x34>
   46174:	3a3fffc4 	addi	r8,r7,-1
   46178:	31800044 	addi	r6,r6,1
   4617c:	38003926 	beq	r7,zero,46264 <memset+0x114>
   46180:	400f883a 	mov	r7,r8
   46184:	18c00044 	addi	r3,r3,1
   46188:	32400005 	stb	r9,0(r6)
   4618c:	1a0000cc 	andi	r8,r3,3
   46190:	403ff81e 	bne	r8,zero,46174 <__alt_data_end+0xfffd5434>
   46194:	010000c4 	movi	r4,3
   46198:	21c02d2e 	bgeu	r4,r7,46250 <memset+0x100>
   4619c:	29803fcc 	andi	r6,r5,255
   461a0:	3008923a 	slli	r4,r6,8
   461a4:	218cb03a 	or	r6,r4,r6
   461a8:	3008943a 	slli	r4,r6,16
   461ac:	218cb03a 	or	r6,r4,r6
   461b0:	010003c4 	movi	r4,15
   461b4:	21c0182e 	bgeu	r4,r7,46218 <memset+0xc8>
   461b8:	3b3ffc04 	addi	r12,r7,-16
   461bc:	6018d13a 	srli	r12,r12,4
   461c0:	1a000104 	addi	r8,r3,4
   461c4:	1ac00204 	addi	r11,r3,8
   461c8:	6008913a 	slli	r4,r12,4
   461cc:	1a800304 	addi	r10,r3,12
   461d0:	1813883a 	mov	r9,r3
   461d4:	21000504 	addi	r4,r4,20
   461d8:	1909883a 	add	r4,r3,r4
   461dc:	49800015 	stw	r6,0(r9)
   461e0:	41800015 	stw	r6,0(r8)
   461e4:	59800015 	stw	r6,0(r11)
   461e8:	51800015 	stw	r6,0(r10)
   461ec:	42000404 	addi	r8,r8,16
   461f0:	4a400404 	addi	r9,r9,16
   461f4:	5ac00404 	addi	r11,r11,16
   461f8:	52800404 	addi	r10,r10,16
   461fc:	413ff71e 	bne	r8,r4,461dc <__alt_data_end+0xfffd549c>
   46200:	63000044 	addi	r12,r12,1
   46204:	6018913a 	slli	r12,r12,4
   46208:	39c003cc 	andi	r7,r7,15
   4620c:	010000c4 	movi	r4,3
   46210:	1b07883a 	add	r3,r3,r12
   46214:	21c00e2e 	bgeu	r4,r7,46250 <memset+0x100>
   46218:	1813883a 	mov	r9,r3
   4621c:	3811883a 	mov	r8,r7
   46220:	010000c4 	movi	r4,3
   46224:	49800015 	stw	r6,0(r9)
   46228:	423fff04 	addi	r8,r8,-4
   4622c:	4a400104 	addi	r9,r9,4
   46230:	223ffc36 	bltu	r4,r8,46224 <__alt_data_end+0xfffd54e4>
   46234:	393fff04 	addi	r4,r7,-4
   46238:	2008d0ba 	srli	r4,r4,2
   4623c:	39c000cc 	andi	r7,r7,3
   46240:	21000044 	addi	r4,r4,1
   46244:	2109883a 	add	r4,r4,r4
   46248:	2109883a 	add	r4,r4,r4
   4624c:	1907883a 	add	r3,r3,r4
   46250:	38000426 	beq	r7,zero,46264 <memset+0x114>
   46254:	19cf883a 	add	r7,r3,r7
   46258:	19400005 	stb	r5,0(r3)
   4625c:	18c00044 	addi	r3,r3,1
   46260:	19fffd1e 	bne	r3,r7,46258 <__alt_data_end+0xfffd5518>
   46264:	f800283a 	ret
   46268:	2007883a 	mov	r3,r4
   4626c:	300f883a 	mov	r7,r6
   46270:	003fc806 	br	46194 <__alt_data_end+0xfffd5454>

00046274 <_Balloc>:
   46274:	20801317 	ldw	r2,76(r4)
   46278:	defffc04 	addi	sp,sp,-16
   4627c:	dc400115 	stw	r17,4(sp)
   46280:	dc000015 	stw	r16,0(sp)
   46284:	dfc00315 	stw	ra,12(sp)
   46288:	dc800215 	stw	r18,8(sp)
   4628c:	2023883a 	mov	r17,r4
   46290:	2821883a 	mov	r16,r5
   46294:	10000f26 	beq	r2,zero,462d4 <_Balloc+0x60>
   46298:	8407883a 	add	r3,r16,r16
   4629c:	18c7883a 	add	r3,r3,r3
   462a0:	10c7883a 	add	r3,r2,r3
   462a4:	18800017 	ldw	r2,0(r3)
   462a8:	10001126 	beq	r2,zero,462f0 <_Balloc+0x7c>
   462ac:	11000017 	ldw	r4,0(r2)
   462b0:	19000015 	stw	r4,0(r3)
   462b4:	10000415 	stw	zero,16(r2)
   462b8:	10000315 	stw	zero,12(r2)
   462bc:	dfc00317 	ldw	ra,12(sp)
   462c0:	dc800217 	ldw	r18,8(sp)
   462c4:	dc400117 	ldw	r17,4(sp)
   462c8:	dc000017 	ldw	r16,0(sp)
   462cc:	dec00404 	addi	sp,sp,16
   462d0:	f800283a 	ret
   462d4:	01400104 	movi	r5,4
   462d8:	01800844 	movi	r6,33
   462dc:	0048f8c0 	call	48f8c <_calloc_r>
   462e0:	88801315 	stw	r2,76(r17)
   462e4:	103fec1e 	bne	r2,zero,46298 <__alt_data_end+0xfffd5558>
   462e8:	0005883a 	mov	r2,zero
   462ec:	003ff306 	br	462bc <__alt_data_end+0xfffd557c>
   462f0:	01400044 	movi	r5,1
   462f4:	2c24983a 	sll	r18,r5,r16
   462f8:	8809883a 	mov	r4,r17
   462fc:	91800144 	addi	r6,r18,5
   46300:	318d883a 	add	r6,r6,r6
   46304:	318d883a 	add	r6,r6,r6
   46308:	0048f8c0 	call	48f8c <_calloc_r>
   4630c:	103ff626 	beq	r2,zero,462e8 <__alt_data_end+0xfffd55a8>
   46310:	14000115 	stw	r16,4(r2)
   46314:	14800215 	stw	r18,8(r2)
   46318:	003fe606 	br	462b4 <__alt_data_end+0xfffd5574>

0004631c <_Bfree>:
   4631c:	28000826 	beq	r5,zero,46340 <_Bfree+0x24>
   46320:	28c00117 	ldw	r3,4(r5)
   46324:	20801317 	ldw	r2,76(r4)
   46328:	18c7883a 	add	r3,r3,r3
   4632c:	18c7883a 	add	r3,r3,r3
   46330:	10c5883a 	add	r2,r2,r3
   46334:	10c00017 	ldw	r3,0(r2)
   46338:	28c00015 	stw	r3,0(r5)
   4633c:	11400015 	stw	r5,0(r2)
   46340:	f800283a 	ret

00046344 <__multadd>:
   46344:	defffa04 	addi	sp,sp,-24
   46348:	dc000115 	stw	r16,4(sp)
   4634c:	2c000417 	ldw	r16,16(r5)
   46350:	dc800315 	stw	r18,12(sp)
   46354:	dc400215 	stw	r17,8(sp)
   46358:	dfc00515 	stw	ra,20(sp)
   4635c:	dcc00415 	stw	r19,16(sp)
   46360:	2823883a 	mov	r17,r5
   46364:	2025883a 	mov	r18,r4
   46368:	2a400504 	addi	r9,r5,20
   4636c:	0015883a 	mov	r10,zero
   46370:	4a000017 	ldw	r8,0(r9)
   46374:	4a400104 	addi	r9,r9,4
   46378:	52800044 	addi	r10,r10,1
   4637c:	40ffffcc 	andi	r3,r8,65535
   46380:	1987383a 	mul	r3,r3,r6
   46384:	4010d43a 	srli	r8,r8,16
   46388:	19cf883a 	add	r7,r3,r7
   4638c:	4191383a 	mul	r8,r8,r6
   46390:	3816d43a 	srli	r11,r7,16
   46394:	38ffffcc 	andi	r3,r7,65535
   46398:	5a0f883a 	add	r7,r11,r8
   4639c:	3810943a 	slli	r8,r7,16
   463a0:	380ed43a 	srli	r7,r7,16
   463a4:	40c7883a 	add	r3,r8,r3
   463a8:	48ffff15 	stw	r3,-4(r9)
   463ac:	543ff016 	blt	r10,r16,46370 <__alt_data_end+0xfffd5630>
   463b0:	38000926 	beq	r7,zero,463d8 <__multadd+0x94>
   463b4:	88800217 	ldw	r2,8(r17)
   463b8:	80800f0e 	bge	r16,r2,463f8 <__multadd+0xb4>
   463bc:	80800144 	addi	r2,r16,5
   463c0:	1085883a 	add	r2,r2,r2
   463c4:	1085883a 	add	r2,r2,r2
   463c8:	8885883a 	add	r2,r17,r2
   463cc:	11c00015 	stw	r7,0(r2)
   463d0:	84000044 	addi	r16,r16,1
   463d4:	8c000415 	stw	r16,16(r17)
   463d8:	8805883a 	mov	r2,r17
   463dc:	dfc00517 	ldw	ra,20(sp)
   463e0:	dcc00417 	ldw	r19,16(sp)
   463e4:	dc800317 	ldw	r18,12(sp)
   463e8:	dc400217 	ldw	r17,8(sp)
   463ec:	dc000117 	ldw	r16,4(sp)
   463f0:	dec00604 	addi	sp,sp,24
   463f4:	f800283a 	ret
   463f8:	89400117 	ldw	r5,4(r17)
   463fc:	9009883a 	mov	r4,r18
   46400:	d9c00015 	stw	r7,0(sp)
   46404:	29400044 	addi	r5,r5,1
   46408:	00462740 	call	46274 <_Balloc>
   4640c:	89800417 	ldw	r6,16(r17)
   46410:	89400304 	addi	r5,r17,12
   46414:	11000304 	addi	r4,r2,12
   46418:	31800084 	addi	r6,r6,2
   4641c:	318d883a 	add	r6,r6,r6
   46420:	318d883a 	add	r6,r6,r6
   46424:	1027883a 	mov	r19,r2
   46428:	0045ebc0 	call	45ebc <memcpy>
   4642c:	89000117 	ldw	r4,4(r17)
   46430:	90c01317 	ldw	r3,76(r18)
   46434:	d9c00017 	ldw	r7,0(sp)
   46438:	2109883a 	add	r4,r4,r4
   4643c:	2109883a 	add	r4,r4,r4
   46440:	1907883a 	add	r3,r3,r4
   46444:	18800017 	ldw	r2,0(r3)
   46448:	88800015 	stw	r2,0(r17)
   4644c:	1c400015 	stw	r17,0(r3)
   46450:	9823883a 	mov	r17,r19
   46454:	003fd906 	br	463bc <__alt_data_end+0xfffd567c>

00046458 <__s2b>:
   46458:	defff904 	addi	sp,sp,-28
   4645c:	dc400115 	stw	r17,4(sp)
   46460:	dc000015 	stw	r16,0(sp)
   46464:	2023883a 	mov	r17,r4
   46468:	2821883a 	mov	r16,r5
   4646c:	39000204 	addi	r4,r7,8
   46470:	01400244 	movi	r5,9
   46474:	dcc00315 	stw	r19,12(sp)
   46478:	dc800215 	stw	r18,8(sp)
   4647c:	dfc00615 	stw	ra,24(sp)
   46480:	dd400515 	stw	r21,20(sp)
   46484:	dd000415 	stw	r20,16(sp)
   46488:	3825883a 	mov	r18,r7
   4648c:	3027883a 	mov	r19,r6
   46490:	00406700 	call	40670 <__divsi3>
   46494:	00c00044 	movi	r3,1
   46498:	000b883a 	mov	r5,zero
   4649c:	1880030e 	bge	r3,r2,464ac <__s2b+0x54>
   464a0:	18c7883a 	add	r3,r3,r3
   464a4:	29400044 	addi	r5,r5,1
   464a8:	18bffd16 	blt	r3,r2,464a0 <__alt_data_end+0xfffd5760>
   464ac:	8809883a 	mov	r4,r17
   464b0:	00462740 	call	46274 <_Balloc>
   464b4:	d8c00717 	ldw	r3,28(sp)
   464b8:	10c00515 	stw	r3,20(r2)
   464bc:	00c00044 	movi	r3,1
   464c0:	10c00415 	stw	r3,16(r2)
   464c4:	00c00244 	movi	r3,9
   464c8:	1cc0210e 	bge	r3,r19,46550 <__s2b+0xf8>
   464cc:	80eb883a 	add	r21,r16,r3
   464d0:	a829883a 	mov	r20,r21
   464d4:	84e1883a 	add	r16,r16,r19
   464d8:	a1c00007 	ldb	r7,0(r20)
   464dc:	8809883a 	mov	r4,r17
   464e0:	a5000044 	addi	r20,r20,1
   464e4:	100b883a 	mov	r5,r2
   464e8:	01800284 	movi	r6,10
   464ec:	39fff404 	addi	r7,r7,-48
   464f0:	00463440 	call	46344 <__multadd>
   464f4:	a43ff81e 	bne	r20,r16,464d8 <__alt_data_end+0xfffd5798>
   464f8:	ace1883a 	add	r16,r21,r19
   464fc:	843ffe04 	addi	r16,r16,-8
   46500:	9c800a0e 	bge	r19,r18,4652c <__s2b+0xd4>
   46504:	94e5c83a 	sub	r18,r18,r19
   46508:	84a5883a 	add	r18,r16,r18
   4650c:	81c00007 	ldb	r7,0(r16)
   46510:	8809883a 	mov	r4,r17
   46514:	84000044 	addi	r16,r16,1
   46518:	100b883a 	mov	r5,r2
   4651c:	01800284 	movi	r6,10
   46520:	39fff404 	addi	r7,r7,-48
   46524:	00463440 	call	46344 <__multadd>
   46528:	84bff81e 	bne	r16,r18,4650c <__alt_data_end+0xfffd57cc>
   4652c:	dfc00617 	ldw	ra,24(sp)
   46530:	dd400517 	ldw	r21,20(sp)
   46534:	dd000417 	ldw	r20,16(sp)
   46538:	dcc00317 	ldw	r19,12(sp)
   4653c:	dc800217 	ldw	r18,8(sp)
   46540:	dc400117 	ldw	r17,4(sp)
   46544:	dc000017 	ldw	r16,0(sp)
   46548:	dec00704 	addi	sp,sp,28
   4654c:	f800283a 	ret
   46550:	84000284 	addi	r16,r16,10
   46554:	1827883a 	mov	r19,r3
   46558:	003fe906 	br	46500 <__alt_data_end+0xfffd57c0>

0004655c <__hi0bits>:
   4655c:	20bfffec 	andhi	r2,r4,65535
   46560:	1000141e 	bne	r2,zero,465b4 <__hi0bits+0x58>
   46564:	2008943a 	slli	r4,r4,16
   46568:	00800404 	movi	r2,16
   4656c:	20ffc02c 	andhi	r3,r4,65280
   46570:	1800021e 	bne	r3,zero,4657c <__hi0bits+0x20>
   46574:	2008923a 	slli	r4,r4,8
   46578:	10800204 	addi	r2,r2,8
   4657c:	20fc002c 	andhi	r3,r4,61440
   46580:	1800021e 	bne	r3,zero,4658c <__hi0bits+0x30>
   46584:	2008913a 	slli	r4,r4,4
   46588:	10800104 	addi	r2,r2,4
   4658c:	20f0002c 	andhi	r3,r4,49152
   46590:	1800031e 	bne	r3,zero,465a0 <__hi0bits+0x44>
   46594:	2109883a 	add	r4,r4,r4
   46598:	10800084 	addi	r2,r2,2
   4659c:	2109883a 	add	r4,r4,r4
   465a0:	20000316 	blt	r4,zero,465b0 <__hi0bits+0x54>
   465a4:	2110002c 	andhi	r4,r4,16384
   465a8:	2000041e 	bne	r4,zero,465bc <__hi0bits+0x60>
   465ac:	00800804 	movi	r2,32
   465b0:	f800283a 	ret
   465b4:	0005883a 	mov	r2,zero
   465b8:	003fec06 	br	4656c <__alt_data_end+0xfffd582c>
   465bc:	10800044 	addi	r2,r2,1
   465c0:	f800283a 	ret

000465c4 <__lo0bits>:
   465c4:	20c00017 	ldw	r3,0(r4)
   465c8:	188001cc 	andi	r2,r3,7
   465cc:	10000826 	beq	r2,zero,465f0 <__lo0bits+0x2c>
   465d0:	1880004c 	andi	r2,r3,1
   465d4:	1000211e 	bne	r2,zero,4665c <__lo0bits+0x98>
   465d8:	1880008c 	andi	r2,r3,2
   465dc:	1000211e 	bne	r2,zero,46664 <__lo0bits+0xa0>
   465e0:	1806d0ba 	srli	r3,r3,2
   465e4:	00800084 	movi	r2,2
   465e8:	20c00015 	stw	r3,0(r4)
   465ec:	f800283a 	ret
   465f0:	18bfffcc 	andi	r2,r3,65535
   465f4:	10001326 	beq	r2,zero,46644 <__lo0bits+0x80>
   465f8:	0005883a 	mov	r2,zero
   465fc:	19403fcc 	andi	r5,r3,255
   46600:	2800021e 	bne	r5,zero,4660c <__lo0bits+0x48>
   46604:	1806d23a 	srli	r3,r3,8
   46608:	10800204 	addi	r2,r2,8
   4660c:	194003cc 	andi	r5,r3,15
   46610:	2800021e 	bne	r5,zero,4661c <__lo0bits+0x58>
   46614:	1806d13a 	srli	r3,r3,4
   46618:	10800104 	addi	r2,r2,4
   4661c:	194000cc 	andi	r5,r3,3
   46620:	2800021e 	bne	r5,zero,4662c <__lo0bits+0x68>
   46624:	1806d0ba 	srli	r3,r3,2
   46628:	10800084 	addi	r2,r2,2
   4662c:	1940004c 	andi	r5,r3,1
   46630:	2800081e 	bne	r5,zero,46654 <__lo0bits+0x90>
   46634:	1806d07a 	srli	r3,r3,1
   46638:	1800051e 	bne	r3,zero,46650 <__lo0bits+0x8c>
   4663c:	00800804 	movi	r2,32
   46640:	f800283a 	ret
   46644:	1806d43a 	srli	r3,r3,16
   46648:	00800404 	movi	r2,16
   4664c:	003feb06 	br	465fc <__alt_data_end+0xfffd58bc>
   46650:	10800044 	addi	r2,r2,1
   46654:	20c00015 	stw	r3,0(r4)
   46658:	f800283a 	ret
   4665c:	0005883a 	mov	r2,zero
   46660:	f800283a 	ret
   46664:	1806d07a 	srli	r3,r3,1
   46668:	00800044 	movi	r2,1
   4666c:	20c00015 	stw	r3,0(r4)
   46670:	f800283a 	ret

00046674 <__i2b>:
   46674:	defffd04 	addi	sp,sp,-12
   46678:	dc000015 	stw	r16,0(sp)
   4667c:	04000044 	movi	r16,1
   46680:	dc400115 	stw	r17,4(sp)
   46684:	2823883a 	mov	r17,r5
   46688:	800b883a 	mov	r5,r16
   4668c:	dfc00215 	stw	ra,8(sp)
   46690:	00462740 	call	46274 <_Balloc>
   46694:	14400515 	stw	r17,20(r2)
   46698:	14000415 	stw	r16,16(r2)
   4669c:	dfc00217 	ldw	ra,8(sp)
   466a0:	dc400117 	ldw	r17,4(sp)
   466a4:	dc000017 	ldw	r16,0(sp)
   466a8:	dec00304 	addi	sp,sp,12
   466ac:	f800283a 	ret

000466b0 <__multiply>:
   466b0:	defffa04 	addi	sp,sp,-24
   466b4:	dcc00315 	stw	r19,12(sp)
   466b8:	dc800215 	stw	r18,8(sp)
   466bc:	2cc00417 	ldw	r19,16(r5)
   466c0:	34800417 	ldw	r18,16(r6)
   466c4:	dd000415 	stw	r20,16(sp)
   466c8:	dc400115 	stw	r17,4(sp)
   466cc:	dfc00515 	stw	ra,20(sp)
   466d0:	dc000015 	stw	r16,0(sp)
   466d4:	2829883a 	mov	r20,r5
   466d8:	3023883a 	mov	r17,r6
   466dc:	9c807016 	blt	r19,r18,468a0 <__multiply+0x1f0>
   466e0:	9005883a 	mov	r2,r18
   466e4:	9825883a 	mov	r18,r19
   466e8:	1027883a 	mov	r19,r2
   466ec:	a0800217 	ldw	r2,8(r20)
   466f0:	94e1883a 	add	r16,r18,r19
   466f4:	a1400117 	ldw	r5,4(r20)
   466f8:	1400010e 	bge	r2,r16,46700 <__multiply+0x50>
   466fc:	29400044 	addi	r5,r5,1
   46700:	00462740 	call	46274 <_Balloc>
   46704:	8417883a 	add	r11,r16,r16
   46708:	13000504 	addi	r12,r2,20
   4670c:	5ad7883a 	add	r11,r11,r11
   46710:	62d7883a 	add	r11,r12,r11
   46714:	6007883a 	mov	r3,r12
   46718:	62c0032e 	bgeu	r12,r11,46728 <__multiply+0x78>
   4671c:	18000015 	stw	zero,0(r3)
   46720:	18c00104 	addi	r3,r3,4
   46724:	1afffd36 	bltu	r3,r11,4671c <__alt_data_end+0xfffd59dc>
   46728:	9ce7883a 	add	r19,r19,r19
   4672c:	94a5883a 	add	r18,r18,r18
   46730:	89800504 	addi	r6,r17,20
   46734:	9ce7883a 	add	r19,r19,r19
   46738:	a3800504 	addi	r14,r20,20
   4673c:	94a5883a 	add	r18,r18,r18
   46740:	34db883a 	add	r13,r6,r19
   46744:	7495883a 	add	r10,r14,r18
   46748:	3340422e 	bgeu	r6,r13,46854 <__multiply+0x1a4>
   4674c:	34400017 	ldw	r17,0(r6)
   46750:	8cbfffcc 	andi	r18,r17,65535
   46754:	90001b26 	beq	r18,zero,467c4 <__multiply+0x114>
   46758:	6013883a 	mov	r9,r12
   4675c:	7023883a 	mov	r17,r14
   46760:	0011883a 	mov	r8,zero
   46764:	88c00017 	ldw	r3,0(r17)
   46768:	4bc00017 	ldw	r15,0(r9)
   4676c:	8c400104 	addi	r17,r17,4
   46770:	19ffffcc 	andi	r7,r3,65535
   46774:	3c8f383a 	mul	r7,r7,r18
   46778:	1808d43a 	srli	r4,r3,16
   4677c:	797fffcc 	andi	r5,r15,65535
   46780:	29cb883a 	add	r5,r5,r7
   46784:	2a0b883a 	add	r5,r5,r8
   46788:	2489383a 	mul	r4,r4,r18
   4678c:	7806d43a 	srli	r3,r15,16
   46790:	2810d43a 	srli	r8,r5,16
   46794:	297fffcc 	andi	r5,r5,65535
   46798:	1907883a 	add	r3,r3,r4
   4679c:	1a07883a 	add	r3,r3,r8
   467a0:	1808943a 	slli	r4,r3,16
   467a4:	480f883a 	mov	r7,r9
   467a8:	1810d43a 	srli	r8,r3,16
   467ac:	214ab03a 	or	r5,r4,r5
   467b0:	49400015 	stw	r5,0(r9)
   467b4:	4a400104 	addi	r9,r9,4
   467b8:	8abfea36 	bltu	r17,r10,46764 <__alt_data_end+0xfffd5a24>
   467bc:	3a000115 	stw	r8,4(r7)
   467c0:	34400017 	ldw	r17,0(r6)
   467c4:	8822d43a 	srli	r17,r17,16
   467c8:	88001f26 	beq	r17,zero,46848 <__multiply+0x198>
   467cc:	60c00017 	ldw	r3,0(r12)
   467d0:	7013883a 	mov	r9,r14
   467d4:	601f883a 	mov	r15,r12
   467d8:	1811883a 	mov	r8,r3
   467dc:	6027883a 	mov	r19,r12
   467e0:	000f883a 	mov	r7,zero
   467e4:	00000106 	br	467ec <__multiply+0x13c>
   467e8:	9027883a 	mov	r19,r18
   467ec:	4940000b 	ldhu	r5,0(r9)
   467f0:	4010d43a 	srli	r8,r8,16
   467f4:	193fffcc 	andi	r4,r3,65535
   467f8:	2c4b383a 	mul	r5,r5,r17
   467fc:	7bc00104 	addi	r15,r15,4
   46800:	4a400104 	addi	r9,r9,4
   46804:	2a0b883a 	add	r5,r5,r8
   46808:	29cb883a 	add	r5,r5,r7
   4680c:	2806943a 	slli	r3,r5,16
   46810:	9c800104 	addi	r18,r19,4
   46814:	280ad43a 	srli	r5,r5,16
   46818:	1908b03a 	or	r4,r3,r4
   4681c:	793fff15 	stw	r4,-4(r15)
   46820:	48ffff17 	ldw	r3,-4(r9)
   46824:	92000017 	ldw	r8,0(r18)
   46828:	1806d43a 	srli	r3,r3,16
   4682c:	413fffcc 	andi	r4,r8,65535
   46830:	1c47383a 	mul	r3,r3,r17
   46834:	1907883a 	add	r3,r3,r4
   46838:	1947883a 	add	r3,r3,r5
   4683c:	180ed43a 	srli	r7,r3,16
   46840:	4abfe936 	bltu	r9,r10,467e8 <__alt_data_end+0xfffd5aa8>
   46844:	98c00115 	stw	r3,4(r19)
   46848:	31800104 	addi	r6,r6,4
   4684c:	63000104 	addi	r12,r12,4
   46850:	337fbe36 	bltu	r6,r13,4674c <__alt_data_end+0xfffd5a0c>
   46854:	0400090e 	bge	zero,r16,4687c <__multiply+0x1cc>
   46858:	58ffff17 	ldw	r3,-4(r11)
   4685c:	5affff04 	addi	r11,r11,-4
   46860:	18000326 	beq	r3,zero,46870 <__multiply+0x1c0>
   46864:	00000506 	br	4687c <__multiply+0x1cc>
   46868:	58c00017 	ldw	r3,0(r11)
   4686c:	1800031e 	bne	r3,zero,4687c <__multiply+0x1cc>
   46870:	843fffc4 	addi	r16,r16,-1
   46874:	5affff04 	addi	r11,r11,-4
   46878:	803ffb1e 	bne	r16,zero,46868 <__alt_data_end+0xfffd5b28>
   4687c:	14000415 	stw	r16,16(r2)
   46880:	dfc00517 	ldw	ra,20(sp)
   46884:	dd000417 	ldw	r20,16(sp)
   46888:	dcc00317 	ldw	r19,12(sp)
   4688c:	dc800217 	ldw	r18,8(sp)
   46890:	dc400117 	ldw	r17,4(sp)
   46894:	dc000017 	ldw	r16,0(sp)
   46898:	dec00604 	addi	sp,sp,24
   4689c:	f800283a 	ret
   468a0:	3029883a 	mov	r20,r6
   468a4:	2823883a 	mov	r17,r5
   468a8:	003f9006 	br	466ec <__alt_data_end+0xfffd59ac>

000468ac <__pow5mult>:
   468ac:	defffa04 	addi	sp,sp,-24
   468b0:	dcc00315 	stw	r19,12(sp)
   468b4:	dc800215 	stw	r18,8(sp)
   468b8:	dc000015 	stw	r16,0(sp)
   468bc:	dfc00515 	stw	ra,20(sp)
   468c0:	dd000415 	stw	r20,16(sp)
   468c4:	dc400115 	stw	r17,4(sp)
   468c8:	308000cc 	andi	r2,r6,3
   468cc:	3021883a 	mov	r16,r6
   468d0:	2027883a 	mov	r19,r4
   468d4:	2825883a 	mov	r18,r5
   468d8:	10002e1e 	bne	r2,zero,46994 <__pow5mult+0xe8>
   468dc:	8021d0ba 	srai	r16,r16,2
   468e0:	80001a26 	beq	r16,zero,4694c <__pow5mult+0xa0>
   468e4:	9c401217 	ldw	r17,72(r19)
   468e8:	8800061e 	bne	r17,zero,46904 <__pow5mult+0x58>
   468ec:	00003406 	br	469c0 <__pow5mult+0x114>
   468f0:	8021d07a 	srai	r16,r16,1
   468f4:	80001526 	beq	r16,zero,4694c <__pow5mult+0xa0>
   468f8:	88800017 	ldw	r2,0(r17)
   468fc:	10001c26 	beq	r2,zero,46970 <__pow5mult+0xc4>
   46900:	1023883a 	mov	r17,r2
   46904:	80c0004c 	andi	r3,r16,1
   46908:	183ff926 	beq	r3,zero,468f0 <__alt_data_end+0xfffd5bb0>
   4690c:	900b883a 	mov	r5,r18
   46910:	880d883a 	mov	r6,r17
   46914:	9809883a 	mov	r4,r19
   46918:	00466b00 	call	466b0 <__multiply>
   4691c:	90001b26 	beq	r18,zero,4698c <__pow5mult+0xe0>
   46920:	91c00117 	ldw	r7,4(r18)
   46924:	98c01317 	ldw	r3,76(r19)
   46928:	8021d07a 	srai	r16,r16,1
   4692c:	39cf883a 	add	r7,r7,r7
   46930:	39cf883a 	add	r7,r7,r7
   46934:	19c7883a 	add	r3,r3,r7
   46938:	19000017 	ldw	r4,0(r3)
   4693c:	91000015 	stw	r4,0(r18)
   46940:	1c800015 	stw	r18,0(r3)
   46944:	1025883a 	mov	r18,r2
   46948:	803feb1e 	bne	r16,zero,468f8 <__alt_data_end+0xfffd5bb8>
   4694c:	9005883a 	mov	r2,r18
   46950:	dfc00517 	ldw	ra,20(sp)
   46954:	dd000417 	ldw	r20,16(sp)
   46958:	dcc00317 	ldw	r19,12(sp)
   4695c:	dc800217 	ldw	r18,8(sp)
   46960:	dc400117 	ldw	r17,4(sp)
   46964:	dc000017 	ldw	r16,0(sp)
   46968:	dec00604 	addi	sp,sp,24
   4696c:	f800283a 	ret
   46970:	9809883a 	mov	r4,r19
   46974:	880b883a 	mov	r5,r17
   46978:	880d883a 	mov	r6,r17
   4697c:	00466b00 	call	466b0 <__multiply>
   46980:	88800015 	stw	r2,0(r17)
   46984:	10000015 	stw	zero,0(r2)
   46988:	003fdd06 	br	46900 <__alt_data_end+0xfffd5bc0>
   4698c:	1025883a 	mov	r18,r2
   46990:	003fd706 	br	468f0 <__alt_data_end+0xfffd5bb0>
   46994:	10bfffc4 	addi	r2,r2,-1
   46998:	1085883a 	add	r2,r2,r2
   4699c:	00c00174 	movhi	r3,5
   469a0:	18de8904 	addi	r3,r3,31268
   469a4:	1085883a 	add	r2,r2,r2
   469a8:	1885883a 	add	r2,r3,r2
   469ac:	11800017 	ldw	r6,0(r2)
   469b0:	000f883a 	mov	r7,zero
   469b4:	00463440 	call	46344 <__multadd>
   469b8:	1025883a 	mov	r18,r2
   469bc:	003fc706 	br	468dc <__alt_data_end+0xfffd5b9c>
   469c0:	05000044 	movi	r20,1
   469c4:	9809883a 	mov	r4,r19
   469c8:	a00b883a 	mov	r5,r20
   469cc:	00462740 	call	46274 <_Balloc>
   469d0:	1023883a 	mov	r17,r2
   469d4:	00809c44 	movi	r2,625
   469d8:	88800515 	stw	r2,20(r17)
   469dc:	8d000415 	stw	r20,16(r17)
   469e0:	9c401215 	stw	r17,72(r19)
   469e4:	88000015 	stw	zero,0(r17)
   469e8:	003fc606 	br	46904 <__alt_data_end+0xfffd5bc4>

000469ec <__lshift>:
   469ec:	defff904 	addi	sp,sp,-28
   469f0:	dd000415 	stw	r20,16(sp)
   469f4:	dcc00315 	stw	r19,12(sp)
   469f8:	3029d17a 	srai	r20,r6,5
   469fc:	2cc00417 	ldw	r19,16(r5)
   46a00:	28800217 	ldw	r2,8(r5)
   46a04:	dd400515 	stw	r21,20(sp)
   46a08:	a4e7883a 	add	r19,r20,r19
   46a0c:	dc800215 	stw	r18,8(sp)
   46a10:	dc400115 	stw	r17,4(sp)
   46a14:	dc000015 	stw	r16,0(sp)
   46a18:	dfc00615 	stw	ra,24(sp)
   46a1c:	9c000044 	addi	r16,r19,1
   46a20:	2823883a 	mov	r17,r5
   46a24:	302b883a 	mov	r21,r6
   46a28:	2025883a 	mov	r18,r4
   46a2c:	29400117 	ldw	r5,4(r5)
   46a30:	1400030e 	bge	r2,r16,46a40 <__lshift+0x54>
   46a34:	1085883a 	add	r2,r2,r2
   46a38:	29400044 	addi	r5,r5,1
   46a3c:	143ffd16 	blt	r2,r16,46a34 <__alt_data_end+0xfffd5cf4>
   46a40:	9009883a 	mov	r4,r18
   46a44:	00462740 	call	46274 <_Balloc>
   46a48:	11c00504 	addi	r7,r2,20
   46a4c:	0500090e 	bge	zero,r20,46a74 <__lshift+0x88>
   46a50:	3811883a 	mov	r8,r7
   46a54:	0007883a 	mov	r3,zero
   46a58:	40000015 	stw	zero,0(r8)
   46a5c:	18c00044 	addi	r3,r3,1
   46a60:	42000104 	addi	r8,r8,4
   46a64:	1d3ffc1e 	bne	r3,r20,46a58 <__alt_data_end+0xfffd5d18>
   46a68:	18c7883a 	add	r3,r3,r3
   46a6c:	18c7883a 	add	r3,r3,r3
   46a70:	38cf883a 	add	r7,r7,r3
   46a74:	89000417 	ldw	r4,16(r17)
   46a78:	88c00504 	addi	r3,r17,20
   46a7c:	a98007cc 	andi	r6,r21,31
   46a80:	2109883a 	add	r4,r4,r4
   46a84:	2109883a 	add	r4,r4,r4
   46a88:	1909883a 	add	r4,r3,r4
   46a8c:	30002326 	beq	r6,zero,46b1c <__lshift+0x130>
   46a90:	01400804 	movi	r5,32
   46a94:	298bc83a 	sub	r5,r5,r6
   46a98:	0013883a 	mov	r9,zero
   46a9c:	1a000017 	ldw	r8,0(r3)
   46aa0:	3815883a 	mov	r10,r7
   46aa4:	39c00104 	addi	r7,r7,4
   46aa8:	4190983a 	sll	r8,r8,r6
   46aac:	18c00104 	addi	r3,r3,4
   46ab0:	4a10b03a 	or	r8,r9,r8
   46ab4:	3a3fff15 	stw	r8,-4(r7)
   46ab8:	1a3fff17 	ldw	r8,-4(r3)
   46abc:	4152d83a 	srl	r9,r8,r5
   46ac0:	193ff636 	bltu	r3,r4,46a9c <__alt_data_end+0xfffd5d5c>
   46ac4:	52400115 	stw	r9,4(r10)
   46ac8:	48000126 	beq	r9,zero,46ad0 <__lshift+0xe4>
   46acc:	9c000084 	addi	r16,r19,2
   46ad0:	89000117 	ldw	r4,4(r17)
   46ad4:	90c01317 	ldw	r3,76(r18)
   46ad8:	843fffc4 	addi	r16,r16,-1
   46adc:	2109883a 	add	r4,r4,r4
   46ae0:	2109883a 	add	r4,r4,r4
   46ae4:	1907883a 	add	r3,r3,r4
   46ae8:	19000017 	ldw	r4,0(r3)
   46aec:	14000415 	stw	r16,16(r2)
   46af0:	89000015 	stw	r4,0(r17)
   46af4:	1c400015 	stw	r17,0(r3)
   46af8:	dfc00617 	ldw	ra,24(sp)
   46afc:	dd400517 	ldw	r21,20(sp)
   46b00:	dd000417 	ldw	r20,16(sp)
   46b04:	dcc00317 	ldw	r19,12(sp)
   46b08:	dc800217 	ldw	r18,8(sp)
   46b0c:	dc400117 	ldw	r17,4(sp)
   46b10:	dc000017 	ldw	r16,0(sp)
   46b14:	dec00704 	addi	sp,sp,28
   46b18:	f800283a 	ret
   46b1c:	19400017 	ldw	r5,0(r3)
   46b20:	39c00104 	addi	r7,r7,4
   46b24:	18c00104 	addi	r3,r3,4
   46b28:	397fff15 	stw	r5,-4(r7)
   46b2c:	193ffb36 	bltu	r3,r4,46b1c <__alt_data_end+0xfffd5ddc>
   46b30:	003fe706 	br	46ad0 <__alt_data_end+0xfffd5d90>

00046b34 <__mcmp>:
   46b34:	20800417 	ldw	r2,16(r4)
   46b38:	28c00417 	ldw	r3,16(r5)
   46b3c:	10c5c83a 	sub	r2,r2,r3
   46b40:	1000111e 	bne	r2,zero,46b88 <__mcmp+0x54>
   46b44:	18c7883a 	add	r3,r3,r3
   46b48:	18c7883a 	add	r3,r3,r3
   46b4c:	21000504 	addi	r4,r4,20
   46b50:	29400504 	addi	r5,r5,20
   46b54:	20c5883a 	add	r2,r4,r3
   46b58:	28cb883a 	add	r5,r5,r3
   46b5c:	00000106 	br	46b64 <__mcmp+0x30>
   46b60:	20800a2e 	bgeu	r4,r2,46b8c <__mcmp+0x58>
   46b64:	10bfff04 	addi	r2,r2,-4
   46b68:	297fff04 	addi	r5,r5,-4
   46b6c:	11800017 	ldw	r6,0(r2)
   46b70:	28c00017 	ldw	r3,0(r5)
   46b74:	30fffa26 	beq	r6,r3,46b60 <__alt_data_end+0xfffd5e20>
   46b78:	30c00236 	bltu	r6,r3,46b84 <__mcmp+0x50>
   46b7c:	00800044 	movi	r2,1
   46b80:	f800283a 	ret
   46b84:	00bfffc4 	movi	r2,-1
   46b88:	f800283a 	ret
   46b8c:	0005883a 	mov	r2,zero
   46b90:	f800283a 	ret

00046b94 <__mdiff>:
   46b94:	defffb04 	addi	sp,sp,-20
   46b98:	dc000015 	stw	r16,0(sp)
   46b9c:	2821883a 	mov	r16,r5
   46ba0:	dcc00315 	stw	r19,12(sp)
   46ba4:	300b883a 	mov	r5,r6
   46ba8:	2027883a 	mov	r19,r4
   46bac:	8009883a 	mov	r4,r16
   46bb0:	dc800215 	stw	r18,8(sp)
   46bb4:	dfc00415 	stw	ra,16(sp)
   46bb8:	dc400115 	stw	r17,4(sp)
   46bbc:	3025883a 	mov	r18,r6
   46bc0:	0046b340 	call	46b34 <__mcmp>
   46bc4:	10005226 	beq	r2,zero,46d10 <__mdiff+0x17c>
   46bc8:	10004c16 	blt	r2,zero,46cfc <__mdiff+0x168>
   46bcc:	0023883a 	mov	r17,zero
   46bd0:	81400117 	ldw	r5,4(r16)
   46bd4:	9809883a 	mov	r4,r19
   46bd8:	00462740 	call	46274 <_Balloc>
   46bdc:	83400417 	ldw	r13,16(r16)
   46be0:	93800417 	ldw	r14,16(r18)
   46be4:	81000504 	addi	r4,r16,20
   46be8:	6b59883a 	add	r12,r13,r13
   46bec:	739d883a 	add	r14,r14,r14
   46bf0:	6319883a 	add	r12,r12,r12
   46bf4:	91800504 	addi	r6,r18,20
   46bf8:	739d883a 	add	r14,r14,r14
   46bfc:	14400315 	stw	r17,12(r2)
   46c00:	2319883a 	add	r12,r4,r12
   46c04:	339d883a 	add	r14,r6,r14
   46c08:	12400504 	addi	r9,r2,20
   46c0c:	0007883a 	mov	r3,zero
   46c10:	22000017 	ldw	r8,0(r4)
   46c14:	32800017 	ldw	r10,0(r6)
   46c18:	4ac00104 	addi	r11,r9,4
   46c1c:	41ffffcc 	andi	r7,r8,65535
   46c20:	38c7883a 	add	r3,r7,r3
   46c24:	51ffffcc 	andi	r7,r10,65535
   46c28:	19cfc83a 	sub	r7,r3,r7
   46c2c:	4010d43a 	srli	r8,r8,16
   46c30:	5014d43a 	srli	r10,r10,16
   46c34:	3807d43a 	srai	r3,r7,16
   46c38:	39ffffcc 	andi	r7,r7,65535
   46c3c:	4291c83a 	sub	r8,r8,r10
   46c40:	40c7883a 	add	r3,r8,r3
   46c44:	1810943a 	slli	r8,r3,16
   46c48:	31800104 	addi	r6,r6,4
   46c4c:	21000104 	addi	r4,r4,4
   46c50:	41ceb03a 	or	r7,r8,r7
   46c54:	49c00015 	stw	r7,0(r9)
   46c58:	1807d43a 	srai	r3,r3,16
   46c5c:	580b883a 	mov	r5,r11
   46c60:	5813883a 	mov	r9,r11
   46c64:	33bfea36 	bltu	r6,r14,46c10 <__alt_data_end+0xfffd5ed0>
   46c68:	2011883a 	mov	r8,r4
   46c6c:	2300152e 	bgeu	r4,r12,46cc4 <__mdiff+0x130>
   46c70:	21400017 	ldw	r5,0(r4)
   46c74:	4a400104 	addi	r9,r9,4
   46c78:	21000104 	addi	r4,r4,4
   46c7c:	29ffffcc 	andi	r7,r5,65535
   46c80:	38c7883a 	add	r3,r7,r3
   46c84:	280ad43a 	srli	r5,r5,16
   46c88:	180dd43a 	srai	r6,r3,16
   46c8c:	19ffffcc 	andi	r7,r3,65535
   46c90:	3147883a 	add	r3,r6,r5
   46c94:	180a943a 	slli	r5,r3,16
   46c98:	1807d43a 	srai	r3,r3,16
   46c9c:	29ceb03a 	or	r7,r5,r7
   46ca0:	49ffff15 	stw	r7,-4(r9)
   46ca4:	233ff236 	bltu	r4,r12,46c70 <__alt_data_end+0xfffd5f30>
   46ca8:	0206303a 	nor	r3,zero,r8
   46cac:	1b07883a 	add	r3,r3,r12
   46cb0:	1806d0ba 	srli	r3,r3,2
   46cb4:	18c00044 	addi	r3,r3,1
   46cb8:	18c7883a 	add	r3,r3,r3
   46cbc:	18c7883a 	add	r3,r3,r3
   46cc0:	58cb883a 	add	r5,r11,r3
   46cc4:	28ffff04 	addi	r3,r5,-4
   46cc8:	3800041e 	bne	r7,zero,46cdc <__mdiff+0x148>
   46ccc:	18ffff04 	addi	r3,r3,-4
   46cd0:	19000017 	ldw	r4,0(r3)
   46cd4:	6b7fffc4 	addi	r13,r13,-1
   46cd8:	203ffc26 	beq	r4,zero,46ccc <__alt_data_end+0xfffd5f8c>
   46cdc:	13400415 	stw	r13,16(r2)
   46ce0:	dfc00417 	ldw	ra,16(sp)
   46ce4:	dcc00317 	ldw	r19,12(sp)
   46ce8:	dc800217 	ldw	r18,8(sp)
   46cec:	dc400117 	ldw	r17,4(sp)
   46cf0:	dc000017 	ldw	r16,0(sp)
   46cf4:	dec00504 	addi	sp,sp,20
   46cf8:	f800283a 	ret
   46cfc:	8005883a 	mov	r2,r16
   46d00:	04400044 	movi	r17,1
   46d04:	9021883a 	mov	r16,r18
   46d08:	1025883a 	mov	r18,r2
   46d0c:	003fb006 	br	46bd0 <__alt_data_end+0xfffd5e90>
   46d10:	9809883a 	mov	r4,r19
   46d14:	000b883a 	mov	r5,zero
   46d18:	00462740 	call	46274 <_Balloc>
   46d1c:	00c00044 	movi	r3,1
   46d20:	10c00415 	stw	r3,16(r2)
   46d24:	10000515 	stw	zero,20(r2)
   46d28:	003fed06 	br	46ce0 <__alt_data_end+0xfffd5fa0>

00046d2c <__ulp>:
   46d2c:	295ffc2c 	andhi	r5,r5,32752
   46d30:	00bf3034 	movhi	r2,64704
   46d34:	2887883a 	add	r3,r5,r2
   46d38:	00c0020e 	bge	zero,r3,46d44 <__ulp+0x18>
   46d3c:	0005883a 	mov	r2,zero
   46d40:	f800283a 	ret
   46d44:	00c7c83a 	sub	r3,zero,r3
   46d48:	180bd53a 	srai	r5,r3,20
   46d4c:	008004c4 	movi	r2,19
   46d50:	11400a0e 	bge	r2,r5,46d7c <__ulp+0x50>
   46d54:	00800c84 	movi	r2,50
   46d58:	0007883a 	mov	r3,zero
   46d5c:	11400516 	blt	r2,r5,46d74 <__ulp+0x48>
   46d60:	00800cc4 	movi	r2,51
   46d64:	114bc83a 	sub	r5,r2,r5
   46d68:	00800044 	movi	r2,1
   46d6c:	1144983a 	sll	r2,r2,r5
   46d70:	f800283a 	ret
   46d74:	00800044 	movi	r2,1
   46d78:	f800283a 	ret
   46d7c:	00800234 	movhi	r2,8
   46d80:	1147d83a 	sra	r3,r2,r5
   46d84:	0005883a 	mov	r2,zero
   46d88:	f800283a 	ret

00046d8c <__b2d>:
   46d8c:	defffa04 	addi	sp,sp,-24
   46d90:	dc000015 	stw	r16,0(sp)
   46d94:	24000417 	ldw	r16,16(r4)
   46d98:	dc400115 	stw	r17,4(sp)
   46d9c:	24400504 	addi	r17,r4,20
   46da0:	8421883a 	add	r16,r16,r16
   46da4:	8421883a 	add	r16,r16,r16
   46da8:	8c21883a 	add	r16,r17,r16
   46dac:	dc800215 	stw	r18,8(sp)
   46db0:	84bfff17 	ldw	r18,-4(r16)
   46db4:	dd000415 	stw	r20,16(sp)
   46db8:	dcc00315 	stw	r19,12(sp)
   46dbc:	9009883a 	mov	r4,r18
   46dc0:	2829883a 	mov	r20,r5
   46dc4:	dfc00515 	stw	ra,20(sp)
   46dc8:	004655c0 	call	4655c <__hi0bits>
   46dcc:	00c00804 	movi	r3,32
   46dd0:	1887c83a 	sub	r3,r3,r2
   46dd4:	a0c00015 	stw	r3,0(r20)
   46dd8:	00c00284 	movi	r3,10
   46ddc:	84ffff04 	addi	r19,r16,-4
   46de0:	18801216 	blt	r3,r2,46e2c <__b2d+0xa0>
   46de4:	014002c4 	movi	r5,11
   46de8:	2889c83a 	sub	r4,r5,r2
   46dec:	9106d83a 	srl	r3,r18,r4
   46df0:	18cffc34 	orhi	r3,r3,16368
   46df4:	8cc0282e 	bgeu	r17,r19,46e98 <__b2d+0x10c>
   46df8:	817ffe17 	ldw	r5,-8(r16)
   46dfc:	290ad83a 	srl	r5,r5,r4
   46e00:	10800544 	addi	r2,r2,21
   46e04:	9084983a 	sll	r2,r18,r2
   46e08:	2884b03a 	or	r2,r5,r2
   46e0c:	dfc00517 	ldw	ra,20(sp)
   46e10:	dd000417 	ldw	r20,16(sp)
   46e14:	dcc00317 	ldw	r19,12(sp)
   46e18:	dc800217 	ldw	r18,8(sp)
   46e1c:	dc400117 	ldw	r17,4(sp)
   46e20:	dc000017 	ldw	r16,0(sp)
   46e24:	dec00604 	addi	sp,sp,24
   46e28:	f800283a 	ret
   46e2c:	113ffd44 	addi	r4,r2,-11
   46e30:	8cc00f2e 	bgeu	r17,r19,46e70 <__b2d+0xe4>
   46e34:	81bffe04 	addi	r6,r16,-8
   46e38:	817ffe17 	ldw	r5,-8(r16)
   46e3c:	20001326 	beq	r4,zero,46e8c <__b2d+0x100>
   46e40:	00c00ac4 	movi	r3,43
   46e44:	1885c83a 	sub	r2,r3,r2
   46e48:	2886d83a 	srl	r3,r5,r2
   46e4c:	9124983a 	sll	r18,r18,r4
   46e50:	90e4b03a 	or	r18,r18,r3
   46e54:	90cffc34 	orhi	r3,r18,16368
   46e58:	8980112e 	bgeu	r17,r6,46ea0 <__b2d+0x114>
   46e5c:	81bffd17 	ldw	r6,-12(r16)
   46e60:	308cd83a 	srl	r6,r6,r2
   46e64:	2904983a 	sll	r2,r5,r4
   46e68:	1184b03a 	or	r2,r2,r6
   46e6c:	003fe706 	br	46e0c <__alt_data_end+0xfffd60cc>
   46e70:	20000526 	beq	r4,zero,46e88 <__b2d+0xfc>
   46e74:	9124983a 	sll	r18,r18,r4
   46e78:	000d883a 	mov	r6,zero
   46e7c:	000b883a 	mov	r5,zero
   46e80:	90cffc34 	orhi	r3,r18,16368
   46e84:	003ff706 	br	46e64 <__alt_data_end+0xfffd6124>
   46e88:	000b883a 	mov	r5,zero
   46e8c:	90cffc34 	orhi	r3,r18,16368
   46e90:	2805883a 	mov	r2,r5
   46e94:	003fdd06 	br	46e0c <__alt_data_end+0xfffd60cc>
   46e98:	000b883a 	mov	r5,zero
   46e9c:	003fd806 	br	46e00 <__alt_data_end+0xfffd60c0>
   46ea0:	000d883a 	mov	r6,zero
   46ea4:	003fef06 	br	46e64 <__alt_data_end+0xfffd6124>

00046ea8 <__d2b>:
   46ea8:	defff704 	addi	sp,sp,-36
   46eac:	dc000215 	stw	r16,8(sp)
   46eb0:	3021883a 	mov	r16,r6
   46eb4:	dc400315 	stw	r17,12(sp)
   46eb8:	8022907a 	slli	r17,r16,1
   46ebc:	dd400715 	stw	r21,28(sp)
   46ec0:	282b883a 	mov	r21,r5
   46ec4:	01400044 	movi	r5,1
   46ec8:	dd000615 	stw	r20,24(sp)
   46ecc:	dcc00515 	stw	r19,20(sp)
   46ed0:	dc800415 	stw	r18,16(sp)
   46ed4:	dfc00815 	stw	ra,32(sp)
   46ed8:	3829883a 	mov	r20,r7
   46edc:	dc800917 	ldw	r18,36(sp)
   46ee0:	8822d57a 	srli	r17,r17,21
   46ee4:	00462740 	call	46274 <_Balloc>
   46ee8:	1027883a 	mov	r19,r2
   46eec:	00800434 	movhi	r2,16
   46ef0:	10bfffc4 	addi	r2,r2,-1
   46ef4:	808c703a 	and	r6,r16,r2
   46ef8:	88000126 	beq	r17,zero,46f00 <__d2b+0x58>
   46efc:	31800434 	orhi	r6,r6,16
   46f00:	d9800015 	stw	r6,0(sp)
   46f04:	a8001f26 	beq	r21,zero,46f84 <__d2b+0xdc>
   46f08:	d9000104 	addi	r4,sp,4
   46f0c:	dd400115 	stw	r21,4(sp)
   46f10:	00465c40 	call	465c4 <__lo0bits>
   46f14:	d8c00017 	ldw	r3,0(sp)
   46f18:	1000291e 	bne	r2,zero,46fc0 <__d2b+0x118>
   46f1c:	d9000117 	ldw	r4,4(sp)
   46f20:	99000515 	stw	r4,20(r19)
   46f24:	1820c03a 	cmpne	r16,r3,zero
   46f28:	84000044 	addi	r16,r16,1
   46f2c:	98c00615 	stw	r3,24(r19)
   46f30:	9c000415 	stw	r16,16(r19)
   46f34:	88001b1e 	bne	r17,zero,46fa4 <__d2b+0xfc>
   46f38:	800690ba 	slli	r3,r16,2
   46f3c:	10bef384 	addi	r2,r2,-1074
   46f40:	a0800015 	stw	r2,0(r20)
   46f44:	98c5883a 	add	r2,r19,r3
   46f48:	11000417 	ldw	r4,16(r2)
   46f4c:	8020917a 	slli	r16,r16,5
   46f50:	004655c0 	call	4655c <__hi0bits>
   46f54:	8085c83a 	sub	r2,r16,r2
   46f58:	90800015 	stw	r2,0(r18)
   46f5c:	9805883a 	mov	r2,r19
   46f60:	dfc00817 	ldw	ra,32(sp)
   46f64:	dd400717 	ldw	r21,28(sp)
   46f68:	dd000617 	ldw	r20,24(sp)
   46f6c:	dcc00517 	ldw	r19,20(sp)
   46f70:	dc800417 	ldw	r18,16(sp)
   46f74:	dc400317 	ldw	r17,12(sp)
   46f78:	dc000217 	ldw	r16,8(sp)
   46f7c:	dec00904 	addi	sp,sp,36
   46f80:	f800283a 	ret
   46f84:	d809883a 	mov	r4,sp
   46f88:	00465c40 	call	465c4 <__lo0bits>
   46f8c:	d8c00017 	ldw	r3,0(sp)
   46f90:	04000044 	movi	r16,1
   46f94:	9c000415 	stw	r16,16(r19)
   46f98:	98c00515 	stw	r3,20(r19)
   46f9c:	10800804 	addi	r2,r2,32
   46fa0:	883fe526 	beq	r17,zero,46f38 <__alt_data_end+0xfffd61f8>
   46fa4:	8c7ef344 	addi	r17,r17,-1075
   46fa8:	88a3883a 	add	r17,r17,r2
   46fac:	00c00d44 	movi	r3,53
   46fb0:	a4400015 	stw	r17,0(r20)
   46fb4:	1885c83a 	sub	r2,r3,r2
   46fb8:	90800015 	stw	r2,0(r18)
   46fbc:	003fe706 	br	46f5c <__alt_data_end+0xfffd621c>
   46fc0:	01000804 	movi	r4,32
   46fc4:	2089c83a 	sub	r4,r4,r2
   46fc8:	1908983a 	sll	r4,r3,r4
   46fcc:	d9400117 	ldw	r5,4(sp)
   46fd0:	1886d83a 	srl	r3,r3,r2
   46fd4:	2148b03a 	or	r4,r4,r5
   46fd8:	99000515 	stw	r4,20(r19)
   46fdc:	d8c00015 	stw	r3,0(sp)
   46fe0:	003fd006 	br	46f24 <__alt_data_end+0xfffd61e4>

00046fe4 <__ratio>:
   46fe4:	defff904 	addi	sp,sp,-28
   46fe8:	dc400315 	stw	r17,12(sp)
   46fec:	2823883a 	mov	r17,r5
   46ff0:	d9400104 	addi	r5,sp,4
   46ff4:	dfc00615 	stw	ra,24(sp)
   46ff8:	dcc00515 	stw	r19,20(sp)
   46ffc:	dc800415 	stw	r18,16(sp)
   47000:	2027883a 	mov	r19,r4
   47004:	dc000215 	stw	r16,8(sp)
   47008:	0046d8c0 	call	46d8c <__b2d>
   4700c:	8809883a 	mov	r4,r17
   47010:	d80b883a 	mov	r5,sp
   47014:	1025883a 	mov	r18,r2
   47018:	1821883a 	mov	r16,r3
   4701c:	0046d8c0 	call	46d8c <__b2d>
   47020:	8a400417 	ldw	r9,16(r17)
   47024:	9a000417 	ldw	r8,16(r19)
   47028:	100d883a 	mov	r6,r2
   4702c:	d8800017 	ldw	r2,0(sp)
   47030:	4251c83a 	sub	r8,r8,r9
   47034:	4012917a 	slli	r9,r8,5
   47038:	da000117 	ldw	r8,4(sp)
   4703c:	4091c83a 	sub	r8,r8,r2
   47040:	4251883a 	add	r8,r8,r9
   47044:	02000d0e 	bge	zero,r8,4707c <__ratio+0x98>
   47048:	4010953a 	slli	r8,r8,20
   4704c:	4421883a 	add	r16,r8,r16
   47050:	9009883a 	mov	r4,r18
   47054:	800b883a 	mov	r5,r16
   47058:	180f883a 	mov	r7,r3
   4705c:	004ac000 	call	4ac00 <__divdf3>
   47060:	dfc00617 	ldw	ra,24(sp)
   47064:	dcc00517 	ldw	r19,20(sp)
   47068:	dc800417 	ldw	r18,16(sp)
   4706c:	dc400317 	ldw	r17,12(sp)
   47070:	dc000217 	ldw	r16,8(sp)
   47074:	dec00704 	addi	sp,sp,28
   47078:	f800283a 	ret
   4707c:	4010953a 	slli	r8,r8,20
   47080:	1a07c83a 	sub	r3,r3,r8
   47084:	003ff206 	br	47050 <__alt_data_end+0xfffd6310>

00047088 <_mprec_log10>:
   47088:	defffe04 	addi	sp,sp,-8
   4708c:	dc000015 	stw	r16,0(sp)
   47090:	dfc00115 	stw	ra,4(sp)
   47094:	008005c4 	movi	r2,23
   47098:	2021883a 	mov	r16,r4
   4709c:	11000d0e 	bge	r2,r4,470d4 <_mprec_log10+0x4c>
   470a0:	0005883a 	mov	r2,zero
   470a4:	00cffc34 	movhi	r3,16368
   470a8:	843fffc4 	addi	r16,r16,-1
   470ac:	1009883a 	mov	r4,r2
   470b0:	180b883a 	mov	r5,r3
   470b4:	000d883a 	mov	r6,zero
   470b8:	01d00934 	movhi	r7,16420
   470bc:	004b7100 	call	4b710 <__muldf3>
   470c0:	803ff91e 	bne	r16,zero,470a8 <__alt_data_end+0xfffd6368>
   470c4:	dfc00117 	ldw	ra,4(sp)
   470c8:	dc000017 	ldw	r16,0(sp)
   470cc:	dec00204 	addi	sp,sp,8
   470d0:	f800283a 	ret
   470d4:	202090fa 	slli	r16,r4,3
   470d8:	00800174 	movhi	r2,5
   470dc:	109ea004 	addi	r2,r2,31360
   470e0:	1421883a 	add	r16,r2,r16
   470e4:	80800017 	ldw	r2,0(r16)
   470e8:	80c00117 	ldw	r3,4(r16)
   470ec:	dfc00117 	ldw	ra,4(sp)
   470f0:	dc000017 	ldw	r16,0(sp)
   470f4:	dec00204 	addi	sp,sp,8
   470f8:	f800283a 	ret

000470fc <__copybits>:
   470fc:	297fffc4 	addi	r5,r5,-1
   47100:	280fd17a 	srai	r7,r5,5
   47104:	30c00417 	ldw	r3,16(r6)
   47108:	30800504 	addi	r2,r6,20
   4710c:	39c00044 	addi	r7,r7,1
   47110:	18c7883a 	add	r3,r3,r3
   47114:	39cf883a 	add	r7,r7,r7
   47118:	18c7883a 	add	r3,r3,r3
   4711c:	39cf883a 	add	r7,r7,r7
   47120:	10c7883a 	add	r3,r2,r3
   47124:	21cf883a 	add	r7,r4,r7
   47128:	10c00d2e 	bgeu	r2,r3,47160 <__copybits+0x64>
   4712c:	200b883a 	mov	r5,r4
   47130:	12000017 	ldw	r8,0(r2)
   47134:	29400104 	addi	r5,r5,4
   47138:	10800104 	addi	r2,r2,4
   4713c:	2a3fff15 	stw	r8,-4(r5)
   47140:	10fffb36 	bltu	r2,r3,47130 <__alt_data_end+0xfffd63f0>
   47144:	1985c83a 	sub	r2,r3,r6
   47148:	10bffac4 	addi	r2,r2,-21
   4714c:	1004d0ba 	srli	r2,r2,2
   47150:	10800044 	addi	r2,r2,1
   47154:	1085883a 	add	r2,r2,r2
   47158:	1085883a 	add	r2,r2,r2
   4715c:	2089883a 	add	r4,r4,r2
   47160:	21c0032e 	bgeu	r4,r7,47170 <__copybits+0x74>
   47164:	20000015 	stw	zero,0(r4)
   47168:	21000104 	addi	r4,r4,4
   4716c:	21fffd36 	bltu	r4,r7,47164 <__alt_data_end+0xfffd6424>
   47170:	f800283a 	ret

00047174 <__any_on>:
   47174:	20c00417 	ldw	r3,16(r4)
   47178:	2805d17a 	srai	r2,r5,5
   4717c:	21000504 	addi	r4,r4,20
   47180:	18800d0e 	bge	r3,r2,471b8 <__any_on+0x44>
   47184:	18c7883a 	add	r3,r3,r3
   47188:	18c7883a 	add	r3,r3,r3
   4718c:	20c7883a 	add	r3,r4,r3
   47190:	20c0192e 	bgeu	r4,r3,471f8 <__any_on+0x84>
   47194:	18bfff17 	ldw	r2,-4(r3)
   47198:	18ffff04 	addi	r3,r3,-4
   4719c:	1000041e 	bne	r2,zero,471b0 <__any_on+0x3c>
   471a0:	20c0142e 	bgeu	r4,r3,471f4 <__any_on+0x80>
   471a4:	18ffff04 	addi	r3,r3,-4
   471a8:	19400017 	ldw	r5,0(r3)
   471ac:	283ffc26 	beq	r5,zero,471a0 <__alt_data_end+0xfffd6460>
   471b0:	00800044 	movi	r2,1
   471b4:	f800283a 	ret
   471b8:	10c00a0e 	bge	r2,r3,471e4 <__any_on+0x70>
   471bc:	1085883a 	add	r2,r2,r2
   471c0:	1085883a 	add	r2,r2,r2
   471c4:	294007cc 	andi	r5,r5,31
   471c8:	2087883a 	add	r3,r4,r2
   471cc:	283ff026 	beq	r5,zero,47190 <__alt_data_end+0xfffd6450>
   471d0:	19800017 	ldw	r6,0(r3)
   471d4:	3144d83a 	srl	r2,r6,r5
   471d8:	114a983a 	sll	r5,r2,r5
   471dc:	29bff41e 	bne	r5,r6,471b0 <__alt_data_end+0xfffd6470>
   471e0:	003feb06 	br	47190 <__alt_data_end+0xfffd6450>
   471e4:	1085883a 	add	r2,r2,r2
   471e8:	1085883a 	add	r2,r2,r2
   471ec:	2087883a 	add	r3,r4,r2
   471f0:	003fe706 	br	47190 <__alt_data_end+0xfffd6450>
   471f4:	f800283a 	ret
   471f8:	0005883a 	mov	r2,zero
   471fc:	f800283a 	ret

00047200 <_realloc_r>:
   47200:	defff604 	addi	sp,sp,-40
   47204:	dcc00315 	stw	r19,12(sp)
   47208:	dc400115 	stw	r17,4(sp)
   4720c:	dfc00915 	stw	ra,36(sp)
   47210:	df000815 	stw	fp,32(sp)
   47214:	ddc00715 	stw	r23,28(sp)
   47218:	dd800615 	stw	r22,24(sp)
   4721c:	dd400515 	stw	r21,20(sp)
   47220:	dd000415 	stw	r20,16(sp)
   47224:	dc800215 	stw	r18,8(sp)
   47228:	dc000015 	stw	r16,0(sp)
   4722c:	2827883a 	mov	r19,r5
   47230:	3023883a 	mov	r17,r6
   47234:	2800bf26 	beq	r5,zero,47534 <_realloc_r+0x334>
   47238:	2025883a 	mov	r18,r4
   4723c:	004d8200 	call	4d820 <__malloc_lock>
   47240:	98ffff17 	ldw	r3,-4(r19)
   47244:	01bfff04 	movi	r6,-4
   47248:	890002c4 	addi	r4,r17,11
   4724c:	01c00584 	movi	r7,22
   47250:	9d7ffe04 	addi	r21,r19,-8
   47254:	19a0703a 	and	r16,r3,r6
   47258:	39003f2e 	bgeu	r7,r4,47358 <_realloc_r+0x158>
   4725c:	053ffe04 	movi	r20,-8
   47260:	2528703a 	and	r20,r4,r20
   47264:	a00f883a 	mov	r7,r20
   47268:	a0008216 	blt	r20,zero,47474 <_realloc_r+0x274>
   4726c:	a4408136 	bltu	r20,r17,47474 <_realloc_r+0x274>
   47270:	81c03c0e 	bge	r16,r7,47364 <_realloc_r+0x164>
   47274:	070001b4 	movhi	fp,6
   47278:	e7209904 	addi	fp,fp,-32156
   4727c:	e1000217 	ldw	r4,8(fp)
   47280:	ac05883a 	add	r2,r21,r16
   47284:	2080bf26 	beq	r4,r2,47584 <_realloc_r+0x384>
   47288:	11000117 	ldw	r4,4(r2)
   4728c:	023fff84 	movi	r8,-2
   47290:	2210703a 	and	r8,r4,r8
   47294:	1211883a 	add	r8,r2,r8
   47298:	41400117 	ldw	r5,4(r8)
   4729c:	2940004c 	andi	r5,r5,1
   472a0:	28004a1e 	bne	r5,zero,473cc <_realloc_r+0x1cc>
   472a4:	017fff04 	movi	r5,-4
   472a8:	2148703a 	and	r4,r4,r5
   472ac:	2409883a 	add	r4,r4,r16
   472b0:	21c0ad0e 	bge	r4,r7,47568 <_realloc_r+0x368>
   472b4:	18c0004c 	andi	r3,r3,1
   472b8:	18007f1e 	bne	r3,zero,474b8 <_realloc_r+0x2b8>
   472bc:	9dfffe17 	ldw	r23,-8(r19)
   472c0:	adefc83a 	sub	r23,r21,r23
   472c4:	bd800117 	ldw	r22,4(r23)
   472c8:	b14a703a 	and	r5,r22,r5
   472cc:	216d883a 	add	r22,r4,r5
   472d0:	b1c04516 	blt	r22,r7,473e8 <_realloc_r+0x1e8>
   472d4:	10c00317 	ldw	r3,12(r2)
   472d8:	10800217 	ldw	r2,8(r2)
   472dc:	81bfff04 	addi	r6,r16,-4
   472e0:	bc400204 	addi	r17,r23,8
   472e4:	10c00315 	stw	r3,12(r2)
   472e8:	18800215 	stw	r2,8(r3)
   472ec:	b9400217 	ldw	r5,8(r23)
   472f0:	b8c00317 	ldw	r3,12(r23)
   472f4:	00800904 	movi	r2,36
   472f8:	28c00315 	stw	r3,12(r5)
   472fc:	19400215 	stw	r5,8(r3)
   47300:	1180ef36 	bltu	r2,r6,476c0 <_realloc_r+0x4c0>
   47304:	008004c4 	movi	r2,19
   47308:	1180da2e 	bgeu	r2,r6,47674 <_realloc_r+0x474>
   4730c:	98800017 	ldw	r2,0(r19)
   47310:	b8800215 	stw	r2,8(r23)
   47314:	98800117 	ldw	r2,4(r19)
   47318:	b8800315 	stw	r2,12(r23)
   4731c:	008006c4 	movi	r2,27
   47320:	1180fc2e 	bgeu	r2,r6,47714 <_realloc_r+0x514>
   47324:	98800217 	ldw	r2,8(r19)
   47328:	b8800415 	stw	r2,16(r23)
   4732c:	98800317 	ldw	r2,12(r19)
   47330:	b8800515 	stw	r2,20(r23)
   47334:	00800904 	movi	r2,36
   47338:	3080421e 	bne	r6,r2,47444 <_realloc_r+0x244>
   4733c:	98800417 	ldw	r2,16(r19)
   47340:	9cc00604 	addi	r19,r19,24
   47344:	b8c00804 	addi	r3,r23,32
   47348:	b8800615 	stw	r2,24(r23)
   4734c:	98bfff17 	ldw	r2,-4(r19)
   47350:	b8800715 	stw	r2,28(r23)
   47354:	00003d06 	br	4744c <_realloc_r+0x24c>
   47358:	01c00404 	movi	r7,16
   4735c:	3829883a 	mov	r20,r7
   47360:	003fc206 	br	4726c <__alt_data_end+0xfffd652c>
   47364:	9823883a 	mov	r17,r19
   47368:	850fc83a 	sub	r7,r16,r20
   4736c:	008003c4 	movi	r2,15
   47370:	18c0004c 	andi	r3,r3,1
   47374:	11c04336 	bltu	r2,r7,47484 <_realloc_r+0x284>
   47378:	1c06b03a 	or	r3,r3,r16
   4737c:	a8c00115 	stw	r3,4(r21)
   47380:	ac21883a 	add	r16,r21,r16
   47384:	80c00117 	ldw	r3,4(r16)
   47388:	18c00054 	ori	r3,r3,1
   4738c:	80c00115 	stw	r3,4(r16)
   47390:	9009883a 	mov	r4,r18
   47394:	004d9400 	call	4d940 <__malloc_unlock>
   47398:	8805883a 	mov	r2,r17
   4739c:	dfc00917 	ldw	ra,36(sp)
   473a0:	df000817 	ldw	fp,32(sp)
   473a4:	ddc00717 	ldw	r23,28(sp)
   473a8:	dd800617 	ldw	r22,24(sp)
   473ac:	dd400517 	ldw	r21,20(sp)
   473b0:	dd000417 	ldw	r20,16(sp)
   473b4:	dcc00317 	ldw	r19,12(sp)
   473b8:	dc800217 	ldw	r18,8(sp)
   473bc:	dc400117 	ldw	r17,4(sp)
   473c0:	dc000017 	ldw	r16,0(sp)
   473c4:	dec00a04 	addi	sp,sp,40
   473c8:	f800283a 	ret
   473cc:	18c0004c 	andi	r3,r3,1
   473d0:	1800391e 	bne	r3,zero,474b8 <_realloc_r+0x2b8>
   473d4:	9dfffe17 	ldw	r23,-8(r19)
   473d8:	00bfff04 	movi	r2,-4
   473dc:	adefc83a 	sub	r23,r21,r23
   473e0:	b9400117 	ldw	r5,4(r23)
   473e4:	288a703a 	and	r5,r5,r2
   473e8:	2c2d883a 	add	r22,r5,r16
   473ec:	b1c03216 	blt	r22,r7,474b8 <_realloc_r+0x2b8>
   473f0:	b8800317 	ldw	r2,12(r23)
   473f4:	b8c00217 	ldw	r3,8(r23)
   473f8:	81bfff04 	addi	r6,r16,-4
   473fc:	01000904 	movi	r4,36
   47400:	18800315 	stw	r2,12(r3)
   47404:	10c00215 	stw	r3,8(r2)
   47408:	bc400204 	addi	r17,r23,8
   4740c:	2180ac36 	bltu	r4,r6,476c0 <_realloc_r+0x4c0>
   47410:	008004c4 	movi	r2,19
   47414:	1180972e 	bgeu	r2,r6,47674 <_realloc_r+0x474>
   47418:	98800017 	ldw	r2,0(r19)
   4741c:	b8800215 	stw	r2,8(r23)
   47420:	98800117 	ldw	r2,4(r19)
   47424:	b8800315 	stw	r2,12(r23)
   47428:	008006c4 	movi	r2,27
   4742c:	1180b92e 	bgeu	r2,r6,47714 <_realloc_r+0x514>
   47430:	98800217 	ldw	r2,8(r19)
   47434:	b8800415 	stw	r2,16(r23)
   47438:	98800317 	ldw	r2,12(r19)
   4743c:	b8800515 	stw	r2,20(r23)
   47440:	313fbe26 	beq	r6,r4,4733c <__alt_data_end+0xfffd65fc>
   47444:	b8c00604 	addi	r3,r23,24
   47448:	9cc00404 	addi	r19,r19,16
   4744c:	98800017 	ldw	r2,0(r19)
   47450:	b021883a 	mov	r16,r22
   47454:	b82b883a 	mov	r21,r23
   47458:	18800015 	stw	r2,0(r3)
   4745c:	98800117 	ldw	r2,4(r19)
   47460:	18800115 	stw	r2,4(r3)
   47464:	98800217 	ldw	r2,8(r19)
   47468:	18800215 	stw	r2,8(r3)
   4746c:	b8c00117 	ldw	r3,4(r23)
   47470:	003fbd06 	br	47368 <__alt_data_end+0xfffd6628>
   47474:	00800304 	movi	r2,12
   47478:	90800015 	stw	r2,0(r18)
   4747c:	0005883a 	mov	r2,zero
   47480:	003fc606 	br	4739c <__alt_data_end+0xfffd665c>
   47484:	1d06b03a 	or	r3,r3,r20
   47488:	ad0b883a 	add	r5,r21,r20
   4748c:	a8c00115 	stw	r3,4(r21)
   47490:	38800054 	ori	r2,r7,1
   47494:	28800115 	stw	r2,4(r5)
   47498:	29cf883a 	add	r7,r5,r7
   4749c:	38800117 	ldw	r2,4(r7)
   474a0:	9009883a 	mov	r4,r18
   474a4:	29400204 	addi	r5,r5,8
   474a8:	10800054 	ori	r2,r2,1
   474ac:	38800115 	stw	r2,4(r7)
   474b0:	0044a900 	call	44a90 <_free_r>
   474b4:	003fb606 	br	47390 <__alt_data_end+0xfffd6650>
   474b8:	880b883a 	mov	r5,r17
   474bc:	9009883a 	mov	r4,r18
   474c0:	004562c0 	call	4562c <_malloc_r>
   474c4:	1023883a 	mov	r17,r2
   474c8:	1000aa26 	beq	r2,zero,47774 <_realloc_r+0x574>
   474cc:	98ffff17 	ldw	r3,-4(r19)
   474d0:	113ffe04 	addi	r4,r2,-8
   474d4:	00bfff84 	movi	r2,-2
   474d8:	1884703a 	and	r2,r3,r2
   474dc:	a885883a 	add	r2,r21,r2
   474e0:	20808626 	beq	r4,r2,476fc <_realloc_r+0x4fc>
   474e4:	81bfff04 	addi	r6,r16,-4
   474e8:	00800904 	movi	r2,36
   474ec:	11807036 	bltu	r2,r6,476b0 <_realloc_r+0x4b0>
   474f0:	00c004c4 	movi	r3,19
   474f4:	19805636 	bltu	r3,r6,47650 <_realloc_r+0x450>
   474f8:	8805883a 	mov	r2,r17
   474fc:	9807883a 	mov	r3,r19
   47500:	19000017 	ldw	r4,0(r3)
   47504:	11000015 	stw	r4,0(r2)
   47508:	19000117 	ldw	r4,4(r3)
   4750c:	11000115 	stw	r4,4(r2)
   47510:	18c00217 	ldw	r3,8(r3)
   47514:	10c00215 	stw	r3,8(r2)
   47518:	980b883a 	mov	r5,r19
   4751c:	9009883a 	mov	r4,r18
   47520:	0044a900 	call	44a90 <_free_r>
   47524:	9009883a 	mov	r4,r18
   47528:	004d9400 	call	4d940 <__malloc_unlock>
   4752c:	8805883a 	mov	r2,r17
   47530:	003f9a06 	br	4739c <__alt_data_end+0xfffd665c>
   47534:	300b883a 	mov	r5,r6
   47538:	dfc00917 	ldw	ra,36(sp)
   4753c:	df000817 	ldw	fp,32(sp)
   47540:	ddc00717 	ldw	r23,28(sp)
   47544:	dd800617 	ldw	r22,24(sp)
   47548:	dd400517 	ldw	r21,20(sp)
   4754c:	dd000417 	ldw	r20,16(sp)
   47550:	dcc00317 	ldw	r19,12(sp)
   47554:	dc800217 	ldw	r18,8(sp)
   47558:	dc400117 	ldw	r17,4(sp)
   4755c:	dc000017 	ldw	r16,0(sp)
   47560:	dec00a04 	addi	sp,sp,40
   47564:	004562c1 	jmpi	4562c <_malloc_r>
   47568:	11400317 	ldw	r5,12(r2)
   4756c:	10800217 	ldw	r2,8(r2)
   47570:	9823883a 	mov	r17,r19
   47574:	2021883a 	mov	r16,r4
   47578:	11400315 	stw	r5,12(r2)
   4757c:	28800215 	stw	r2,8(r5)
   47580:	003f7906 	br	47368 <__alt_data_end+0xfffd6628>
   47584:	21000117 	ldw	r4,4(r4)
   47588:	00bfff04 	movi	r2,-4
   4758c:	a1800404 	addi	r6,r20,16
   47590:	2088703a 	and	r4,r4,r2
   47594:	2409883a 	add	r4,r4,r16
   47598:	2180380e 	bge	r4,r6,4767c <_realloc_r+0x47c>
   4759c:	18c0004c 	andi	r3,r3,1
   475a0:	183fc51e 	bne	r3,zero,474b8 <__alt_data_end+0xfffd6778>
   475a4:	9dfffe17 	ldw	r23,-8(r19)
   475a8:	adefc83a 	sub	r23,r21,r23
   475ac:	b9400117 	ldw	r5,4(r23)
   475b0:	288a703a 	and	r5,r5,r2
   475b4:	216d883a 	add	r22,r4,r5
   475b8:	b1bf8b16 	blt	r22,r6,473e8 <__alt_data_end+0xfffd66a8>
   475bc:	b8800317 	ldw	r2,12(r23)
   475c0:	b8c00217 	ldw	r3,8(r23)
   475c4:	81bfff04 	addi	r6,r16,-4
   475c8:	01000904 	movi	r4,36
   475cc:	18800315 	stw	r2,12(r3)
   475d0:	10c00215 	stw	r3,8(r2)
   475d4:	bc400204 	addi	r17,r23,8
   475d8:	21805a36 	bltu	r4,r6,47744 <_realloc_r+0x544>
   475dc:	008004c4 	movi	r2,19
   475e0:	1180562e 	bgeu	r2,r6,4773c <_realloc_r+0x53c>
   475e4:	98800017 	ldw	r2,0(r19)
   475e8:	b8800215 	stw	r2,8(r23)
   475ec:	98800117 	ldw	r2,4(r19)
   475f0:	b8800315 	stw	r2,12(r23)
   475f4:	008006c4 	movi	r2,27
   475f8:	11805636 	bltu	r2,r6,47754 <_realloc_r+0x554>
   475fc:	b8800404 	addi	r2,r23,16
   47600:	9cc00204 	addi	r19,r19,8
   47604:	98c00017 	ldw	r3,0(r19)
   47608:	10c00015 	stw	r3,0(r2)
   4760c:	98c00117 	ldw	r3,4(r19)
   47610:	10c00115 	stw	r3,4(r2)
   47614:	98c00217 	ldw	r3,8(r19)
   47618:	10c00215 	stw	r3,8(r2)
   4761c:	bd07883a 	add	r3,r23,r20
   47620:	b505c83a 	sub	r2,r22,r20
   47624:	e0c00215 	stw	r3,8(fp)
   47628:	10800054 	ori	r2,r2,1
   4762c:	18800115 	stw	r2,4(r3)
   47630:	b8800117 	ldw	r2,4(r23)
   47634:	9009883a 	mov	r4,r18
   47638:	1080004c 	andi	r2,r2,1
   4763c:	a0a8b03a 	or	r20,r20,r2
   47640:	bd000115 	stw	r20,4(r23)
   47644:	004d9400 	call	4d940 <__malloc_unlock>
   47648:	8805883a 	mov	r2,r17
   4764c:	003f5306 	br	4739c <__alt_data_end+0xfffd665c>
   47650:	98c00017 	ldw	r3,0(r19)
   47654:	88c00015 	stw	r3,0(r17)
   47658:	98c00117 	ldw	r3,4(r19)
   4765c:	88c00115 	stw	r3,4(r17)
   47660:	00c006c4 	movi	r3,27
   47664:	19801d36 	bltu	r3,r6,476dc <_realloc_r+0x4dc>
   47668:	88800204 	addi	r2,r17,8
   4766c:	98c00204 	addi	r3,r19,8
   47670:	003fa306 	br	47500 <__alt_data_end+0xfffd67c0>
   47674:	8807883a 	mov	r3,r17
   47678:	003f7406 	br	4744c <__alt_data_end+0xfffd670c>
   4767c:	ad2b883a 	add	r21,r21,r20
   47680:	2505c83a 	sub	r2,r4,r20
   47684:	e5400215 	stw	r21,8(fp)
   47688:	10800054 	ori	r2,r2,1
   4768c:	a8800115 	stw	r2,4(r21)
   47690:	98bfff17 	ldw	r2,-4(r19)
   47694:	9009883a 	mov	r4,r18
   47698:	1080004c 	andi	r2,r2,1
   4769c:	a0a8b03a 	or	r20,r20,r2
   476a0:	9d3fff15 	stw	r20,-4(r19)
   476a4:	004d9400 	call	4d940 <__malloc_unlock>
   476a8:	9805883a 	mov	r2,r19
   476ac:	003f3b06 	br	4739c <__alt_data_end+0xfffd665c>
   476b0:	8809883a 	mov	r4,r17
   476b4:	980b883a 	mov	r5,r19
   476b8:	0045ff40 	call	45ff4 <memmove>
   476bc:	003f9606 	br	47518 <__alt_data_end+0xfffd67d8>
   476c0:	8809883a 	mov	r4,r17
   476c4:	980b883a 	mov	r5,r19
   476c8:	0045ff40 	call	45ff4 <memmove>
   476cc:	b8c00117 	ldw	r3,4(r23)
   476d0:	b021883a 	mov	r16,r22
   476d4:	b82b883a 	mov	r21,r23
   476d8:	003f2306 	br	47368 <__alt_data_end+0xfffd6628>
   476dc:	98c00217 	ldw	r3,8(r19)
   476e0:	88c00215 	stw	r3,8(r17)
   476e4:	98c00317 	ldw	r3,12(r19)
   476e8:	88c00315 	stw	r3,12(r17)
   476ec:	30800c26 	beq	r6,r2,47720 <_realloc_r+0x520>
   476f0:	88800404 	addi	r2,r17,16
   476f4:	98c00404 	addi	r3,r19,16
   476f8:	003f8106 	br	47500 <__alt_data_end+0xfffd67c0>
   476fc:	893fff17 	ldw	r4,-4(r17)
   47700:	00bfff04 	movi	r2,-4
   47704:	9823883a 	mov	r17,r19
   47708:	2084703a 	and	r2,r4,r2
   4770c:	80a1883a 	add	r16,r16,r2
   47710:	003f1506 	br	47368 <__alt_data_end+0xfffd6628>
   47714:	b8c00404 	addi	r3,r23,16
   47718:	9cc00204 	addi	r19,r19,8
   4771c:	003f4b06 	br	4744c <__alt_data_end+0xfffd670c>
   47720:	99000417 	ldw	r4,16(r19)
   47724:	88800604 	addi	r2,r17,24
   47728:	98c00604 	addi	r3,r19,24
   4772c:	89000415 	stw	r4,16(r17)
   47730:	99000517 	ldw	r4,20(r19)
   47734:	89000515 	stw	r4,20(r17)
   47738:	003f7106 	br	47500 <__alt_data_end+0xfffd67c0>
   4773c:	8805883a 	mov	r2,r17
   47740:	003fb006 	br	47604 <__alt_data_end+0xfffd68c4>
   47744:	8809883a 	mov	r4,r17
   47748:	980b883a 	mov	r5,r19
   4774c:	0045ff40 	call	45ff4 <memmove>
   47750:	003fb206 	br	4761c <__alt_data_end+0xfffd68dc>
   47754:	98800217 	ldw	r2,8(r19)
   47758:	b8800415 	stw	r2,16(r23)
   4775c:	98800317 	ldw	r2,12(r19)
   47760:	b8800515 	stw	r2,20(r23)
   47764:	31000726 	beq	r6,r4,47784 <_realloc_r+0x584>
   47768:	b8800604 	addi	r2,r23,24
   4776c:	9cc00404 	addi	r19,r19,16
   47770:	003fa406 	br	47604 <__alt_data_end+0xfffd68c4>
   47774:	9009883a 	mov	r4,r18
   47778:	004d9400 	call	4d940 <__malloc_unlock>
   4777c:	0005883a 	mov	r2,zero
   47780:	003f0606 	br	4739c <__alt_data_end+0xfffd665c>
   47784:	98c00417 	ldw	r3,16(r19)
   47788:	9cc00604 	addi	r19,r19,24
   4778c:	b8800804 	addi	r2,r23,32
   47790:	b8c00615 	stw	r3,24(r23)
   47794:	98ffff17 	ldw	r3,-4(r19)
   47798:	b8c00715 	stw	r3,28(r23)
   4779c:	003f9906 	br	47604 <__alt_data_end+0xfffd68c4>

000477a0 <__fpclassifyd>:
   477a0:	00a00034 	movhi	r2,32768
   477a4:	10bfffc4 	addi	r2,r2,-1
   477a8:	2884703a 	and	r2,r5,r2
   477ac:	10000726 	beq	r2,zero,477cc <__fpclassifyd+0x2c>
   477b0:	00fffc34 	movhi	r3,65520
   477b4:	019ff834 	movhi	r6,32736
   477b8:	28c7883a 	add	r3,r5,r3
   477bc:	31bfffc4 	addi	r6,r6,-1
   477c0:	30c00536 	bltu	r6,r3,477d8 <__fpclassifyd+0x38>
   477c4:	00800104 	movi	r2,4
   477c8:	f800283a 	ret
   477cc:	2000021e 	bne	r4,zero,477d8 <__fpclassifyd+0x38>
   477d0:	00800084 	movi	r2,2
   477d4:	f800283a 	ret
   477d8:	00dffc34 	movhi	r3,32752
   477dc:	019ff834 	movhi	r6,32736
   477e0:	28cb883a 	add	r5,r5,r3
   477e4:	31bfffc4 	addi	r6,r6,-1
   477e8:	317ff62e 	bgeu	r6,r5,477c4 <__alt_data_end+0xfffd6a84>
   477ec:	01400434 	movhi	r5,16
   477f0:	297fffc4 	addi	r5,r5,-1
   477f4:	28800236 	bltu	r5,r2,47800 <__fpclassifyd+0x60>
   477f8:	008000c4 	movi	r2,3
   477fc:	f800283a 	ret
   47800:	10c00226 	beq	r2,r3,4780c <__fpclassifyd+0x6c>
   47804:	0005883a 	mov	r2,zero
   47808:	f800283a 	ret
   4780c:	2005003a 	cmpeq	r2,r4,zero
   47810:	f800283a 	ret

00047814 <_sbrk_r>:
   47814:	defffd04 	addi	sp,sp,-12
   47818:	dc000015 	stw	r16,0(sp)
   4781c:	040001b4 	movhi	r16,6
   47820:	dc400115 	stw	r17,4(sp)
   47824:	842d3804 	addi	r16,r16,-19232
   47828:	2023883a 	mov	r17,r4
   4782c:	2809883a 	mov	r4,r5
   47830:	dfc00215 	stw	ra,8(sp)
   47834:	80000015 	stw	zero,0(r16)
   47838:	004d12c0 	call	4d12c <sbrk>
   4783c:	00ffffc4 	movi	r3,-1
   47840:	10c00526 	beq	r2,r3,47858 <_sbrk_r+0x44>
   47844:	dfc00217 	ldw	ra,8(sp)
   47848:	dc400117 	ldw	r17,4(sp)
   4784c:	dc000017 	ldw	r16,0(sp)
   47850:	dec00304 	addi	sp,sp,12
   47854:	f800283a 	ret
   47858:	80c00017 	ldw	r3,0(r16)
   4785c:	183ff926 	beq	r3,zero,47844 <__alt_data_end+0xfffd6b04>
   47860:	88c00015 	stw	r3,0(r17)
   47864:	003ff706 	br	47844 <__alt_data_end+0xfffd6b04>

00047868 <__sread>:
   47868:	defffe04 	addi	sp,sp,-8
   4786c:	dc000015 	stw	r16,0(sp)
   47870:	2821883a 	mov	r16,r5
   47874:	2940038f 	ldh	r5,14(r5)
   47878:	dfc00115 	stw	ra,4(sp)
   4787c:	00494480 	call	49448 <_read_r>
   47880:	10000716 	blt	r2,zero,478a0 <__sread+0x38>
   47884:	80c01417 	ldw	r3,80(r16)
   47888:	1887883a 	add	r3,r3,r2
   4788c:	80c01415 	stw	r3,80(r16)
   47890:	dfc00117 	ldw	ra,4(sp)
   47894:	dc000017 	ldw	r16,0(sp)
   47898:	dec00204 	addi	sp,sp,8
   4789c:	f800283a 	ret
   478a0:	80c0030b 	ldhu	r3,12(r16)
   478a4:	18fbffcc 	andi	r3,r3,61439
   478a8:	80c0030d 	sth	r3,12(r16)
   478ac:	dfc00117 	ldw	ra,4(sp)
   478b0:	dc000017 	ldw	r16,0(sp)
   478b4:	dec00204 	addi	sp,sp,8
   478b8:	f800283a 	ret

000478bc <__seofread>:
   478bc:	0005883a 	mov	r2,zero
   478c0:	f800283a 	ret

000478c4 <__swrite>:
   478c4:	2880030b 	ldhu	r2,12(r5)
   478c8:	defffb04 	addi	sp,sp,-20
   478cc:	dcc00315 	stw	r19,12(sp)
   478d0:	dc800215 	stw	r18,8(sp)
   478d4:	dc400115 	stw	r17,4(sp)
   478d8:	dc000015 	stw	r16,0(sp)
   478dc:	dfc00415 	stw	ra,16(sp)
   478e0:	10c0400c 	andi	r3,r2,256
   478e4:	2821883a 	mov	r16,r5
   478e8:	2027883a 	mov	r19,r4
   478ec:	3025883a 	mov	r18,r6
   478f0:	3823883a 	mov	r17,r7
   478f4:	18000526 	beq	r3,zero,4790c <__swrite+0x48>
   478f8:	2940038f 	ldh	r5,14(r5)
   478fc:	000d883a 	mov	r6,zero
   47900:	01c00084 	movi	r7,2
   47904:	00493ec0 	call	493ec <_lseek_r>
   47908:	8080030b 	ldhu	r2,12(r16)
   4790c:	8140038f 	ldh	r5,14(r16)
   47910:	10bbffcc 	andi	r2,r2,61439
   47914:	9809883a 	mov	r4,r19
   47918:	900d883a 	mov	r6,r18
   4791c:	880f883a 	mov	r7,r17
   47920:	8080030d 	sth	r2,12(r16)
   47924:	dfc00417 	ldw	ra,16(sp)
   47928:	dcc00317 	ldw	r19,12(sp)
   4792c:	dc800217 	ldw	r18,8(sp)
   47930:	dc400117 	ldw	r17,4(sp)
   47934:	dc000017 	ldw	r16,0(sp)
   47938:	dec00504 	addi	sp,sp,20
   4793c:	0048edc1 	jmpi	48edc <_write_r>

00047940 <__sseek>:
   47940:	defffe04 	addi	sp,sp,-8
   47944:	dc000015 	stw	r16,0(sp)
   47948:	2821883a 	mov	r16,r5
   4794c:	2940038f 	ldh	r5,14(r5)
   47950:	dfc00115 	stw	ra,4(sp)
   47954:	00493ec0 	call	493ec <_lseek_r>
   47958:	00ffffc4 	movi	r3,-1
   4795c:	10c00826 	beq	r2,r3,47980 <__sseek+0x40>
   47960:	80c0030b 	ldhu	r3,12(r16)
   47964:	80801415 	stw	r2,80(r16)
   47968:	18c40014 	ori	r3,r3,4096
   4796c:	80c0030d 	sth	r3,12(r16)
   47970:	dfc00117 	ldw	ra,4(sp)
   47974:	dc000017 	ldw	r16,0(sp)
   47978:	dec00204 	addi	sp,sp,8
   4797c:	f800283a 	ret
   47980:	80c0030b 	ldhu	r3,12(r16)
   47984:	18fbffcc 	andi	r3,r3,61439
   47988:	80c0030d 	sth	r3,12(r16)
   4798c:	dfc00117 	ldw	ra,4(sp)
   47990:	dc000017 	ldw	r16,0(sp)
   47994:	dec00204 	addi	sp,sp,8
   47998:	f800283a 	ret

0004799c <__sclose>:
   4799c:	2940038f 	ldh	r5,14(r5)
   479a0:	0048f381 	jmpi	48f38 <_close_r>

000479a4 <strcmp>:
   479a4:	2144b03a 	or	r2,r4,r5
   479a8:	108000cc 	andi	r2,r2,3
   479ac:	1000171e 	bne	r2,zero,47a0c <strcmp+0x68>
   479b0:	20800017 	ldw	r2,0(r4)
   479b4:	28c00017 	ldw	r3,0(r5)
   479b8:	10c0141e 	bne	r2,r3,47a0c <strcmp+0x68>
   479bc:	027fbff4 	movhi	r9,65279
   479c0:	4a7fbfc4 	addi	r9,r9,-257
   479c4:	0086303a 	nor	r3,zero,r2
   479c8:	02202074 	movhi	r8,32897
   479cc:	1245883a 	add	r2,r2,r9
   479d0:	42202004 	addi	r8,r8,-32640
   479d4:	10c4703a 	and	r2,r2,r3
   479d8:	1204703a 	and	r2,r2,r8
   479dc:	10000226 	beq	r2,zero,479e8 <strcmp+0x44>
   479e0:	00001706 	br	47a40 <strcmp+0x9c>
   479e4:	1000161e 	bne	r2,zero,47a40 <strcmp+0x9c>
   479e8:	21000104 	addi	r4,r4,4
   479ec:	20c00017 	ldw	r3,0(r4)
   479f0:	29400104 	addi	r5,r5,4
   479f4:	29800017 	ldw	r6,0(r5)
   479f8:	1a4f883a 	add	r7,r3,r9
   479fc:	00c4303a 	nor	r2,zero,r3
   47a00:	3884703a 	and	r2,r7,r2
   47a04:	1204703a 	and	r2,r2,r8
   47a08:	19bff626 	beq	r3,r6,479e4 <__alt_data_end+0xfffd6ca4>
   47a0c:	20800007 	ldb	r2,0(r4)
   47a10:	1000051e 	bne	r2,zero,47a28 <strcmp+0x84>
   47a14:	00000606 	br	47a30 <strcmp+0x8c>
   47a18:	21000044 	addi	r4,r4,1
   47a1c:	20800007 	ldb	r2,0(r4)
   47a20:	29400044 	addi	r5,r5,1
   47a24:	10000226 	beq	r2,zero,47a30 <strcmp+0x8c>
   47a28:	28c00007 	ldb	r3,0(r5)
   47a2c:	10fffa26 	beq	r2,r3,47a18 <__alt_data_end+0xfffd6cd8>
   47a30:	20800003 	ldbu	r2,0(r4)
   47a34:	28c00003 	ldbu	r3,0(r5)
   47a38:	10c5c83a 	sub	r2,r2,r3
   47a3c:	f800283a 	ret
   47a40:	0005883a 	mov	r2,zero
   47a44:	f800283a 	ret

00047a48 <__sprint_r.part.0>:
   47a48:	28801917 	ldw	r2,100(r5)
   47a4c:	defff604 	addi	sp,sp,-40
   47a50:	dd400515 	stw	r21,20(sp)
   47a54:	dcc00315 	stw	r19,12(sp)
   47a58:	dfc00915 	stw	ra,36(sp)
   47a5c:	df000815 	stw	fp,32(sp)
   47a60:	ddc00715 	stw	r23,28(sp)
   47a64:	dd800615 	stw	r22,24(sp)
   47a68:	dd000415 	stw	r20,16(sp)
   47a6c:	dc800215 	stw	r18,8(sp)
   47a70:	dc400115 	stw	r17,4(sp)
   47a74:	dc000015 	stw	r16,0(sp)
   47a78:	1088000c 	andi	r2,r2,8192
   47a7c:	2827883a 	mov	r19,r5
   47a80:	302b883a 	mov	r21,r6
   47a84:	10002d26 	beq	r2,zero,47b3c <__sprint_r.part.0+0xf4>
   47a88:	30800217 	ldw	r2,8(r6)
   47a8c:	35800017 	ldw	r22,0(r6)
   47a90:	10002826 	beq	r2,zero,47b34 <__sprint_r.part.0+0xec>
   47a94:	2029883a 	mov	r20,r4
   47a98:	b5c00104 	addi	r23,r22,4
   47a9c:	04bfffc4 	movi	r18,-1
   47aa0:	bc400017 	ldw	r17,0(r23)
   47aa4:	b4000017 	ldw	r16,0(r22)
   47aa8:	0039883a 	mov	fp,zero
   47aac:	8822d0ba 	srli	r17,r17,2
   47ab0:	04400316 	blt	zero,r17,47ac0 <__sprint_r.part.0+0x78>
   47ab4:	00001706 	br	47b14 <__sprint_r.part.0+0xcc>
   47ab8:	84000104 	addi	r16,r16,4
   47abc:	8f001526 	beq	r17,fp,47b14 <__sprint_r.part.0+0xcc>
   47ac0:	81400017 	ldw	r5,0(r16)
   47ac4:	a009883a 	mov	r4,r20
   47ac8:	980d883a 	mov	r6,r19
   47acc:	00491640 	call	49164 <_fputwc_r>
   47ad0:	e7000044 	addi	fp,fp,1
   47ad4:	14bff81e 	bne	r2,r18,47ab8 <__alt_data_end+0xfffd6d78>
   47ad8:	9005883a 	mov	r2,r18
   47adc:	a8000215 	stw	zero,8(r21)
   47ae0:	a8000115 	stw	zero,4(r21)
   47ae4:	dfc00917 	ldw	ra,36(sp)
   47ae8:	df000817 	ldw	fp,32(sp)
   47aec:	ddc00717 	ldw	r23,28(sp)
   47af0:	dd800617 	ldw	r22,24(sp)
   47af4:	dd400517 	ldw	r21,20(sp)
   47af8:	dd000417 	ldw	r20,16(sp)
   47afc:	dcc00317 	ldw	r19,12(sp)
   47b00:	dc800217 	ldw	r18,8(sp)
   47b04:	dc400117 	ldw	r17,4(sp)
   47b08:	dc000017 	ldw	r16,0(sp)
   47b0c:	dec00a04 	addi	sp,sp,40
   47b10:	f800283a 	ret
   47b14:	a8c00217 	ldw	r3,8(r21)
   47b18:	8c63883a 	add	r17,r17,r17
   47b1c:	8c63883a 	add	r17,r17,r17
   47b20:	1c45c83a 	sub	r2,r3,r17
   47b24:	a8800215 	stw	r2,8(r21)
   47b28:	b5800204 	addi	r22,r22,8
   47b2c:	bdc00204 	addi	r23,r23,8
   47b30:	103fdb1e 	bne	r2,zero,47aa0 <__alt_data_end+0xfffd6d60>
   47b34:	0005883a 	mov	r2,zero
   47b38:	003fe806 	br	47adc <__alt_data_end+0xfffd6d9c>
   47b3c:	0044d800 	call	44d80 <__sfvwrite_r>
   47b40:	003fe606 	br	47adc <__alt_data_end+0xfffd6d9c>

00047b44 <__sprint_r>:
   47b44:	30c00217 	ldw	r3,8(r6)
   47b48:	18000126 	beq	r3,zero,47b50 <__sprint_r+0xc>
   47b4c:	0047a481 	jmpi	47a48 <__sprint_r.part.0>
   47b50:	30000115 	stw	zero,4(r6)
   47b54:	0005883a 	mov	r2,zero
   47b58:	f800283a 	ret

00047b5c <___vfiprintf_internal_r>:
   47b5c:	defeca04 	addi	sp,sp,-1240
   47b60:	dd813215 	stw	r22,1224(sp)
   47b64:	dd013015 	stw	r20,1216(sp)
   47b68:	dfc13515 	stw	ra,1236(sp)
   47b6c:	df013415 	stw	fp,1232(sp)
   47b70:	ddc13315 	stw	r23,1228(sp)
   47b74:	dd413115 	stw	r21,1220(sp)
   47b78:	dcc12f15 	stw	r19,1212(sp)
   47b7c:	dc812e15 	stw	r18,1208(sp)
   47b80:	dc412d15 	stw	r17,1204(sp)
   47b84:	dc012c15 	stw	r16,1200(sp)
   47b88:	d9012015 	stw	r4,1152(sp)
   47b8c:	d9c12115 	stw	r7,1156(sp)
   47b90:	2829883a 	mov	r20,r5
   47b94:	302d883a 	mov	r22,r6
   47b98:	20000226 	beq	r4,zero,47ba4 <___vfiprintf_internal_r+0x48>
   47b9c:	20800e17 	ldw	r2,56(r4)
   47ba0:	1001d326 	beq	r2,zero,482f0 <___vfiprintf_internal_r+0x794>
   47ba4:	a0c0030b 	ldhu	r3,12(r20)
   47ba8:	1908000c 	andi	r4,r3,8192
   47bac:	1805883a 	mov	r2,r3
   47bb0:	2000071e 	bne	r4,zero,47bd0 <___vfiprintf_internal_r+0x74>
   47bb4:	a1001917 	ldw	r4,100(r20)
   47bb8:	18880014 	ori	r2,r3,8192
   47bbc:	00f7ffc4 	movi	r3,-8193
   47bc0:	20c8703a 	and	r4,r4,r3
   47bc4:	a080030d 	sth	r2,12(r20)
   47bc8:	1007883a 	mov	r3,r2
   47bcc:	a1001915 	stw	r4,100(r20)
   47bd0:	1100020c 	andi	r4,r2,8
   47bd4:	20018926 	beq	r4,zero,481fc <___vfiprintf_internal_r+0x6a0>
   47bd8:	a1000417 	ldw	r4,16(r20)
   47bdc:	20018726 	beq	r4,zero,481fc <___vfiprintf_internal_r+0x6a0>
   47be0:	1080068c 	andi	r2,r2,26
   47be4:	01000284 	movi	r4,10
   47be8:	11018d26 	beq	r2,r4,48220 <___vfiprintf_internal_r+0x6c4>
   47bec:	da810a04 	addi	r10,sp,1064
   47bf0:	dac109c4 	addi	r11,sp,1063
   47bf4:	07000174 	movhi	fp,5
   47bf8:	05c00174 	movhi	r23,5
   47bfc:	da811e15 	stw	r10,1144(sp)
   47c00:	52d5c83a 	sub	r10,r10,r11
   47c04:	e71ed604 	addi	fp,fp,31576
   47c08:	bdded204 	addi	r23,r23,31560
   47c0c:	dac11f15 	stw	r11,1148(sp)
   47c10:	dec11a15 	stw	sp,1128(sp)
   47c14:	d8011c15 	stw	zero,1136(sp)
   47c18:	d8011b15 	stw	zero,1132(sp)
   47c1c:	d8012615 	stw	zero,1176(sp)
   47c20:	d8012215 	stw	zero,1160(sp)
   47c24:	da812715 	stw	r10,1180(sp)
   47c28:	d811883a 	mov	r8,sp
   47c2c:	b021883a 	mov	r16,r22
   47c30:	80800007 	ldb	r2,0(r16)
   47c34:	10039c26 	beq	r2,zero,48aa8 <___vfiprintf_internal_r+0xf4c>
   47c38:	01000944 	movi	r4,37
   47c3c:	11039a26 	beq	r2,r4,48aa8 <___vfiprintf_internal_r+0xf4c>
   47c40:	8005883a 	mov	r2,r16
   47c44:	00000106 	br	47c4c <___vfiprintf_internal_r+0xf0>
   47c48:	19000326 	beq	r3,r4,47c58 <___vfiprintf_internal_r+0xfc>
   47c4c:	10800044 	addi	r2,r2,1
   47c50:	10c00007 	ldb	r3,0(r2)
   47c54:	183ffc1e 	bne	r3,zero,47c48 <__alt_data_end+0xfffd6f08>
   47c58:	1425c83a 	sub	r18,r2,r16
   47c5c:	1023883a 	mov	r17,r2
   47c60:	90001026 	beq	r18,zero,47ca4 <___vfiprintf_internal_r+0x148>
   47c64:	d8c11c17 	ldw	r3,1136(sp)
   47c68:	d8811b17 	ldw	r2,1132(sp)
   47c6c:	44000015 	stw	r16,0(r8)
   47c70:	90c7883a 	add	r3,r18,r3
   47c74:	10800044 	addi	r2,r2,1
   47c78:	44800115 	stw	r18,4(r8)
   47c7c:	d8c11c15 	stw	r3,1136(sp)
   47c80:	d8811b15 	stw	r2,1132(sp)
   47c84:	010001c4 	movi	r4,7
   47c88:	2080750e 	bge	r4,r2,47e60 <___vfiprintf_internal_r+0x304>
   47c8c:	18039d1e 	bne	r3,zero,48b04 <___vfiprintf_internal_r+0xfa8>
   47c90:	dac12217 	ldw	r11,1160(sp)
   47c94:	d8011b15 	stw	zero,1132(sp)
   47c98:	d811883a 	mov	r8,sp
   47c9c:	5c97883a 	add	r11,r11,r18
   47ca0:	dac12215 	stw	r11,1160(sp)
   47ca4:	88800007 	ldb	r2,0(r17)
   47ca8:	1002e026 	beq	r2,zero,4882c <___vfiprintf_internal_r+0xcd0>
   47cac:	88c00047 	ldb	r3,1(r17)
   47cb0:	8c000044 	addi	r16,r17,1
   47cb4:	d8011d85 	stb	zero,1142(sp)
   47cb8:	000d883a 	mov	r6,zero
   47cbc:	027fffc4 	movi	r9,-1
   47cc0:	0027883a 	mov	r19,zero
   47cc4:	002b883a 	mov	r21,zero
   47cc8:	01001604 	movi	r4,88
   47ccc:	01400244 	movi	r5,9
   47cd0:	03000a84 	movi	r12,42
   47cd4:	01c01b04 	movi	r7,108
   47cd8:	84000044 	addi	r16,r16,1
   47cdc:	18bff804 	addi	r2,r3,-32
   47ce0:	20825f36 	bltu	r4,r2,48660 <___vfiprintf_internal_r+0xb04>
   47ce4:	100490ba 	slli	r2,r2,2
   47ce8:	02800134 	movhi	r10,4
   47cec:	529f3f04 	addi	r10,r10,31996
   47cf0:	1285883a 	add	r2,r2,r10
   47cf4:	10800017 	ldw	r2,0(r2)
   47cf8:	1000683a 	jmp	r2
   47cfc:	000484d0 	cmplti	zero,zero,4627
   47d00:	00048660 	cmpeqi	zero,zero,4633
   47d04:	00048660 	cmpeqi	zero,zero,4633
   47d08:	00048654 	movui	zero,4633
   47d0c:	00048660 	cmpeqi	zero,zero,4633
   47d10:	00048660 	cmpeqi	zero,zero,4633
   47d14:	00048660 	cmpeqi	zero,zero,4633
   47d18:	00048660 	cmpeqi	zero,zero,4633
   47d1c:	00048660 	cmpeqi	zero,zero,4633
   47d20:	00048660 	cmpeqi	zero,zero,4633
   47d24:	0004862c 	andhi	zero,zero,4632
   47d28:	00048648 	cmpgei	zero,zero,4633
   47d2c:	00048660 	cmpeqi	zero,zero,4633
   47d30:	00048300 	call	4830 <OSCtxSw_SWITCH_PC+0x47f0>
   47d34:	00048460 	cmpeqi	zero,zero,4625
   47d38:	00048660 	cmpeqi	zero,zero,4633
   47d3c:	000483e4 	muli	zero,zero,4623
   47d40:	000483f0 	cmpltui	zero,zero,4623
   47d44:	000483f0 	cmpltui	zero,zero,4623
   47d48:	000483f0 	cmpltui	zero,zero,4623
   47d4c:	000483f0 	cmpltui	zero,zero,4623
   47d50:	000483f0 	cmpltui	zero,zero,4623
   47d54:	000483f0 	cmpltui	zero,zero,4623
   47d58:	000483f0 	cmpltui	zero,zero,4623
   47d5c:	000483f0 	cmpltui	zero,zero,4623
   47d60:	000483f0 	cmpltui	zero,zero,4623
   47d64:	00048660 	cmpeqi	zero,zero,4633
   47d68:	00048660 	cmpeqi	zero,zero,4633
   47d6c:	00048660 	cmpeqi	zero,zero,4633
   47d70:	00048660 	cmpeqi	zero,zero,4633
   47d74:	00048660 	cmpeqi	zero,zero,4633
   47d78:	00048660 	cmpeqi	zero,zero,4633
   47d7c:	00048660 	cmpeqi	zero,zero,4633
   47d80:	00048660 	cmpeqi	zero,zero,4633
   47d84:	00048660 	cmpeqi	zero,zero,4633
   47d88:	00048660 	cmpeqi	zero,zero,4633
   47d8c:	0004841c 	xori	zero,zero,4624
   47d90:	00048660 	cmpeqi	zero,zero,4633
   47d94:	00048660 	cmpeqi	zero,zero,4633
   47d98:	00048660 	cmpeqi	zero,zero,4633
   47d9c:	00048660 	cmpeqi	zero,zero,4633
   47da0:	00048660 	cmpeqi	zero,zero,4633
   47da4:	00048660 	cmpeqi	zero,zero,4633
   47da8:	00048660 	cmpeqi	zero,zero,4633
   47dac:	00048660 	cmpeqi	zero,zero,4633
   47db0:	00048660 	cmpeqi	zero,zero,4633
   47db4:	00048660 	cmpeqi	zero,zero,4633
   47db8:	00047eb0 	cmpltui	zero,zero,4602
   47dbc:	00048660 	cmpeqi	zero,zero,4633
   47dc0:	00048660 	cmpeqi	zero,zero,4633
   47dc4:	00048660 	cmpeqi	zero,zero,4633
   47dc8:	00048660 	cmpeqi	zero,zero,4633
   47dcc:	00048660 	cmpeqi	zero,zero,4633
   47dd0:	00047e74 	movhi	zero,4601
   47dd4:	00048660 	cmpeqi	zero,zero,4633
   47dd8:	00048660 	cmpeqi	zero,zero,4633
   47ddc:	0004835c 	xori	zero,zero,4621
   47de0:	00048660 	cmpeqi	zero,zero,4633
   47de4:	00048660 	cmpeqi	zero,zero,4633
   47de8:	00048660 	cmpeqi	zero,zero,4633
   47dec:	00048660 	cmpeqi	zero,zero,4633
   47df0:	00048660 	cmpeqi	zero,zero,4633
   47df4:	00048660 	cmpeqi	zero,zero,4633
   47df8:	00048660 	cmpeqi	zero,zero,4633
   47dfc:	00048660 	cmpeqi	zero,zero,4633
   47e00:	00048660 	cmpeqi	zero,zero,4633
   47e04:	00048660 	cmpeqi	zero,zero,4633
   47e08:	000483b4 	movhi	zero,4622
   47e0c:	0004854c 	andi	zero,zero,4629
   47e10:	00048660 	cmpeqi	zero,zero,4633
   47e14:	00048660 	cmpeqi	zero,zero,4633
   47e18:	00048660 	cmpeqi	zero,zero,4633
   47e1c:	000485d4 	movui	zero,4631
   47e20:	0004854c 	andi	zero,zero,4629
   47e24:	00048660 	cmpeqi	zero,zero,4633
   47e28:	00048660 	cmpeqi	zero,zero,4633
   47e2c:	000485e0 	cmpeqi	zero,zero,4631
   47e30:	00048660 	cmpeqi	zero,zero,4633
   47e34:	000484a0 	cmpeqi	zero,zero,4626
   47e38:	00047eb4 	movhi	zero,4602
   47e3c:	00048588 	cmpgei	zero,zero,4630
   47e40:	000485c8 	cmpgei	zero,zero,4631
   47e44:	00048660 	cmpeqi	zero,zero,4633
   47e48:	000484ec 	andhi	zero,zero,4627
   47e4c:	00048660 	cmpeqi	zero,zero,4633
   47e50:	00047e78 	rdprs	zero,zero,4601
   47e54:	00048660 	cmpeqi	zero,zero,4633
   47e58:	00048660 	cmpeqi	zero,zero,4633
   47e5c:	000485f0 	cmpltui	zero,zero,4631
   47e60:	42000204 	addi	r8,r8,8
   47e64:	dac12217 	ldw	r11,1160(sp)
   47e68:	5c97883a 	add	r11,r11,r18
   47e6c:	dac12215 	stw	r11,1160(sp)
   47e70:	003f8c06 	br	47ca4 <__alt_data_end+0xfffd6f64>
   47e74:	ad400414 	ori	r21,r21,16
   47e78:	a880080c 	andi	r2,r21,32
   47e7c:	10012f1e 	bne	r2,zero,4833c <___vfiprintf_internal_r+0x7e0>
   47e80:	a880040c 	andi	r2,r21,16
   47e84:	1001ff1e 	bne	r2,zero,48684 <___vfiprintf_internal_r+0xb28>
   47e88:	a880100c 	andi	r2,r21,64
   47e8c:	1001fd26 	beq	r2,zero,48684 <___vfiprintf_internal_r+0xb28>
   47e90:	da812117 	ldw	r10,1156(sp)
   47e94:	002d883a 	mov	r22,zero
   47e98:	00800044 	movi	r2,1
   47e9c:	5480000b 	ldhu	r18,0(r10)
   47ea0:	52800104 	addi	r10,r10,4
   47ea4:	da812115 	stw	r10,1156(sp)
   47ea8:	9009883a 	mov	r4,r18
   47eac:	00000a06 	br	47ed8 <___vfiprintf_internal_r+0x37c>
   47eb0:	ad400414 	ori	r21,r21,16
   47eb4:	a880080c 	andi	r2,r21,32
   47eb8:	10011426 	beq	r2,zero,4830c <___vfiprintf_internal_r+0x7b0>
   47ebc:	da812117 	ldw	r10,1156(sp)
   47ec0:	0005883a 	mov	r2,zero
   47ec4:	54800017 	ldw	r18,0(r10)
   47ec8:	55800117 	ldw	r22,4(r10)
   47ecc:	52800204 	addi	r10,r10,8
   47ed0:	da812115 	stw	r10,1156(sp)
   47ed4:	9588b03a 	or	r4,r18,r22
   47ed8:	d8011d85 	stb	zero,1142(sp)
   47edc:	4823883a 	mov	r17,r9
   47ee0:	0019883a 	mov	r12,zero
   47ee4:	48000216 	blt	r9,zero,47ef0 <___vfiprintf_internal_r+0x394>
   47ee8:	00ffdfc4 	movi	r3,-129
   47eec:	a8ea703a 	and	r21,r21,r3
   47ef0:	2002221e 	bne	r4,zero,4877c <___vfiprintf_internal_r+0xc20>
   47ef4:	4802c726 	beq	r9,zero,48a14 <___vfiprintf_internal_r+0xeb8>
   47ef8:	10803fcc 	andi	r2,r2,255
   47efc:	00c00044 	movi	r3,1
   47f00:	10c24426 	beq	r2,r3,48814 <___vfiprintf_internal_r+0xcb8>
   47f04:	00c00084 	movi	r3,2
   47f08:	10c2cc26 	beq	r2,r3,48a3c <___vfiprintf_internal_r+0xee0>
   47f0c:	d8c10a04 	addi	r3,sp,1064
   47f10:	9008d0fa 	srli	r4,r18,3
   47f14:	b00a977a 	slli	r5,r22,29
   47f18:	b02cd0fa 	srli	r22,r22,3
   47f1c:	948001cc 	andi	r18,r18,7
   47f20:	90800c04 	addi	r2,r18,48
   47f24:	18ffffc4 	addi	r3,r3,-1
   47f28:	2924b03a 	or	r18,r5,r4
   47f2c:	18800005 	stb	r2,0(r3)
   47f30:	9588b03a 	or	r4,r18,r22
   47f34:	203ff61e 	bne	r4,zero,47f10 <__alt_data_end+0xfffd71d0>
   47f38:	a900004c 	andi	r4,r21,1
   47f3c:	d8c12415 	stw	r3,1168(sp)
   47f40:	2002fb1e 	bne	r4,zero,48b30 <___vfiprintf_internal_r+0xfd4>
   47f44:	da811e17 	ldw	r10,1144(sp)
   47f48:	50e3c83a 	sub	r17,r10,r3
   47f4c:	8825883a 	mov	r18,r17
   47f50:	8a40010e 	bge	r17,r9,47f58 <___vfiprintf_internal_r+0x3fc>
   47f54:	4825883a 	mov	r18,r9
   47f58:	63003fcc 	andi	r12,r12,255
   47f5c:	6300201c 	xori	r12,r12,128
   47f60:	633fe004 	addi	r12,r12,-128
   47f64:	60000126 	beq	r12,zero,47f6c <___vfiprintf_internal_r+0x410>
   47f68:	94800044 	addi	r18,r18,1
   47f6c:	ab80008c 	andi	r14,r21,2
   47f70:	70000126 	beq	r14,zero,47f78 <___vfiprintf_internal_r+0x41c>
   47f74:	94800084 	addi	r18,r18,2
   47f78:	ad80210c 	andi	r22,r21,132
   47f7c:	b001df1e 	bne	r22,zero,486fc <___vfiprintf_internal_r+0xba0>
   47f80:	9c8fc83a 	sub	r7,r19,r18
   47f84:	01c1dd0e 	bge	zero,r7,486fc <___vfiprintf_internal_r+0xba0>
   47f88:	03000404 	movi	r12,16
   47f8c:	d8811c17 	ldw	r2,1136(sp)
   47f90:	61c3920e 	bge	r12,r7,48ddc <___vfiprintf_internal_r+0x1280>
   47f94:	02800174 	movhi	r10,5
   47f98:	529ed604 	addi	r10,r10,31576
   47f9c:	dc012915 	stw	r16,1188(sp)
   47fa0:	d9811b17 	ldw	r6,1132(sp)
   47fa4:	da812315 	stw	r10,1164(sp)
   47fa8:	00c001c4 	movi	r3,7
   47fac:	da412515 	stw	r9,1172(sp)
   47fb0:	db812815 	stw	r14,1184(sp)
   47fb4:	3821883a 	mov	r16,r7
   47fb8:	00000506 	br	47fd0 <___vfiprintf_internal_r+0x474>
   47fbc:	31400084 	addi	r5,r6,2
   47fc0:	42000204 	addi	r8,r8,8
   47fc4:	200d883a 	mov	r6,r4
   47fc8:	843ffc04 	addi	r16,r16,-16
   47fcc:	64000d0e 	bge	r12,r16,48004 <___vfiprintf_internal_r+0x4a8>
   47fd0:	10800404 	addi	r2,r2,16
   47fd4:	31000044 	addi	r4,r6,1
   47fd8:	47000015 	stw	fp,0(r8)
   47fdc:	43000115 	stw	r12,4(r8)
   47fe0:	d8811c15 	stw	r2,1136(sp)
   47fe4:	d9011b15 	stw	r4,1132(sp)
   47fe8:	193ff40e 	bge	r3,r4,47fbc <__alt_data_end+0xfffd727c>
   47fec:	1001b51e 	bne	r2,zero,486c4 <___vfiprintf_internal_r+0xb68>
   47ff0:	843ffc04 	addi	r16,r16,-16
   47ff4:	000d883a 	mov	r6,zero
   47ff8:	01400044 	movi	r5,1
   47ffc:	d811883a 	mov	r8,sp
   48000:	643ff316 	blt	r12,r16,47fd0 <__alt_data_end+0xfffd7290>
   48004:	800f883a 	mov	r7,r16
   48008:	da412517 	ldw	r9,1172(sp)
   4800c:	db812817 	ldw	r14,1184(sp)
   48010:	dc012917 	ldw	r16,1188(sp)
   48014:	dac12317 	ldw	r11,1164(sp)
   48018:	3887883a 	add	r3,r7,r2
   4801c:	41c00115 	stw	r7,4(r8)
   48020:	42c00015 	stw	r11,0(r8)
   48024:	d8c11c15 	stw	r3,1136(sp)
   48028:	d9411b15 	stw	r5,1132(sp)
   4802c:	008001c4 	movi	r2,7
   48030:	11429316 	blt	r2,r5,48a80 <___vfiprintf_internal_r+0xf24>
   48034:	d9011d87 	ldb	r4,1142(sp)
   48038:	42000204 	addi	r8,r8,8
   4803c:	28800044 	addi	r2,r5,1
   48040:	2001b31e 	bne	r4,zero,48710 <___vfiprintf_internal_r+0xbb4>
   48044:	70000c26 	beq	r14,zero,48078 <___vfiprintf_internal_r+0x51c>
   48048:	d9011d04 	addi	r4,sp,1140
   4804c:	18c00084 	addi	r3,r3,2
   48050:	41000015 	stw	r4,0(r8)
   48054:	01000084 	movi	r4,2
   48058:	41000115 	stw	r4,4(r8)
   4805c:	d8c11c15 	stw	r3,1136(sp)
   48060:	d8811b15 	stw	r2,1132(sp)
   48064:	010001c4 	movi	r4,7
   48068:	20826516 	blt	r4,r2,48a00 <___vfiprintf_internal_r+0xea4>
   4806c:	100b883a 	mov	r5,r2
   48070:	42000204 	addi	r8,r8,8
   48074:	10800044 	addi	r2,r2,1
   48078:	01002004 	movi	r4,128
   4807c:	b1021a26 	beq	r22,r4,488e8 <___vfiprintf_internal_r+0xd8c>
   48080:	4c6dc83a 	sub	r22,r9,r17
   48084:	0580230e 	bge	zero,r22,48114 <___vfiprintf_internal_r+0x5b8>
   48088:	01c00404 	movi	r7,16
   4808c:	3d83300e 	bge	r7,r22,48d50 <___vfiprintf_internal_r+0x11f4>
   48090:	00800174 	movhi	r2,5
   48094:	109ed204 	addi	r2,r2,31560
   48098:	d8812315 	stw	r2,1164(sp)
   4809c:	030001c4 	movi	r12,7
   480a0:	00000506 	br	480b8 <___vfiprintf_internal_r+0x55c>
   480a4:	28800084 	addi	r2,r5,2
   480a8:	42000204 	addi	r8,r8,8
   480ac:	200b883a 	mov	r5,r4
   480b0:	b5bffc04 	addi	r22,r22,-16
   480b4:	3d800d0e 	bge	r7,r22,480ec <___vfiprintf_internal_r+0x590>
   480b8:	18c00404 	addi	r3,r3,16
   480bc:	29000044 	addi	r4,r5,1
   480c0:	45c00015 	stw	r23,0(r8)
   480c4:	41c00115 	stw	r7,4(r8)
   480c8:	d8c11c15 	stw	r3,1136(sp)
   480cc:	d9011b15 	stw	r4,1132(sp)
   480d0:	613ff40e 	bge	r12,r4,480a4 <__alt_data_end+0xfffd7364>
   480d4:	18019b1e 	bne	r3,zero,48744 <___vfiprintf_internal_r+0xbe8>
   480d8:	b5bffc04 	addi	r22,r22,-16
   480dc:	000b883a 	mov	r5,zero
   480e0:	00800044 	movi	r2,1
   480e4:	d811883a 	mov	r8,sp
   480e8:	3dbff316 	blt	r7,r22,480b8 <__alt_data_end+0xfffd7378>
   480ec:	da812317 	ldw	r10,1164(sp)
   480f0:	1d87883a 	add	r3,r3,r22
   480f4:	45800115 	stw	r22,4(r8)
   480f8:	42800015 	stw	r10,0(r8)
   480fc:	d8c11c15 	stw	r3,1136(sp)
   48100:	d8811b15 	stw	r2,1132(sp)
   48104:	010001c4 	movi	r4,7
   48108:	2081dd16 	blt	r4,r2,48880 <___vfiprintf_internal_r+0xd24>
   4810c:	42000204 	addi	r8,r8,8
   48110:	10800044 	addi	r2,r2,1
   48114:	da812417 	ldw	r10,1168(sp)
   48118:	1c47883a 	add	r3,r3,r17
   4811c:	44400115 	stw	r17,4(r8)
   48120:	42800015 	stw	r10,0(r8)
   48124:	d8c11c15 	stw	r3,1136(sp)
   48128:	d8811b15 	stw	r2,1132(sp)
   4812c:	010001c4 	movi	r4,7
   48130:	2081dc0e 	bge	r4,r2,488a4 <___vfiprintf_internal_r+0xd48>
   48134:	1802611e 	bne	r3,zero,48abc <___vfiprintf_internal_r+0xf60>
   48138:	d8011b15 	stw	zero,1132(sp)
   4813c:	aac0010c 	andi	r11,r21,4
   48140:	58002726 	beq	r11,zero,481e0 <___vfiprintf_internal_r+0x684>
   48144:	9ca3c83a 	sub	r17,r19,r18
   48148:	d811883a 	mov	r8,sp
   4814c:	0443510e 	bge	zero,r17,48e94 <___vfiprintf_internal_r+0x1338>
   48150:	01c00404 	movi	r7,16
   48154:	3c43320e 	bge	r7,r17,48e20 <___vfiprintf_internal_r+0x12c4>
   48158:	00800174 	movhi	r2,5
   4815c:	109ed604 	addi	r2,r2,31576
   48160:	d9011b17 	ldw	r4,1132(sp)
   48164:	d8812315 	stw	r2,1164(sp)
   48168:	382d883a 	mov	r22,r7
   4816c:	054001c4 	movi	r21,7
   48170:	00000506 	br	48188 <___vfiprintf_internal_r+0x62c>
   48174:	21400084 	addi	r5,r4,2
   48178:	42000204 	addi	r8,r8,8
   4817c:	1009883a 	mov	r4,r2
   48180:	8c7ffc04 	addi	r17,r17,-16
   48184:	b4400d0e 	bge	r22,r17,481bc <___vfiprintf_internal_r+0x660>
   48188:	18c00404 	addi	r3,r3,16
   4818c:	20800044 	addi	r2,r4,1
   48190:	47000015 	stw	fp,0(r8)
   48194:	45800115 	stw	r22,4(r8)
   48198:	d8c11c15 	stw	r3,1136(sp)
   4819c:	d8811b15 	stw	r2,1132(sp)
   481a0:	a8bff40e 	bge	r21,r2,48174 <__alt_data_end+0xfffd7434>
   481a4:	1801ac1e 	bne	r3,zero,48858 <___vfiprintf_internal_r+0xcfc>
   481a8:	8c7ffc04 	addi	r17,r17,-16
   481ac:	0009883a 	mov	r4,zero
   481b0:	01400044 	movi	r5,1
   481b4:	d811883a 	mov	r8,sp
   481b8:	b47ff316 	blt	r22,r17,48188 <__alt_data_end+0xfffd7448>
   481bc:	da812317 	ldw	r10,1164(sp)
   481c0:	1c47883a 	add	r3,r3,r17
   481c4:	44400115 	stw	r17,4(r8)
   481c8:	42800015 	stw	r10,0(r8)
   481cc:	d8c11c15 	stw	r3,1136(sp)
   481d0:	d9411b15 	stw	r5,1132(sp)
   481d4:	008001c4 	movi	r2,7
   481d8:	1141b70e 	bge	r2,r5,488b8 <___vfiprintf_internal_r+0xd5c>
   481dc:	1802cf1e 	bne	r3,zero,48d1c <___vfiprintf_internal_r+0x11c0>
   481e0:	94c2ca16 	blt	r18,r19,48d0c <___vfiprintf_internal_r+0x11b0>
   481e4:	dac12217 	ldw	r11,1160(sp)
   481e8:	5c97883a 	add	r11,r11,r18
   481ec:	dac12215 	stw	r11,1160(sp)
   481f0:	d8011b15 	stw	zero,1132(sp)
   481f4:	d811883a 	mov	r8,sp
   481f8:	003e8d06 	br	47c30 <__alt_data_end+0xfffd6ef0>
   481fc:	d9012017 	ldw	r4,1152(sp)
   48200:	a00b883a 	mov	r5,r20
   48204:	004291c0 	call	4291c <__swsetup_r>
   48208:	10002c1e 	bne	r2,zero,482bc <___vfiprintf_internal_r+0x760>
   4820c:	a0c0030b 	ldhu	r3,12(r20)
   48210:	01000284 	movi	r4,10
   48214:	1805883a 	mov	r2,r3
   48218:	1080068c 	andi	r2,r2,26
   4821c:	113e731e 	bne	r2,r4,47bec <__alt_data_end+0xfffd6eac>
   48220:	a080038b 	ldhu	r2,14(r20)
   48224:	113fffcc 	andi	r4,r2,65535
   48228:	2120001c 	xori	r4,r4,32768
   4822c:	21200004 	addi	r4,r4,-32768
   48230:	203e6e16 	blt	r4,zero,47bec <__alt_data_end+0xfffd6eac>
   48234:	a3001917 	ldw	r12,100(r20)
   48238:	a2c00717 	ldw	r11,28(r20)
   4823c:	a2800917 	ldw	r10,36(r20)
   48240:	d9012017 	ldw	r4,1152(sp)
   48244:	d9c12117 	ldw	r7,1156(sp)
   48248:	02410004 	movi	r9,1024
   4824c:	18ffff4c 	andi	r3,r3,65533
   48250:	da4b883a 	add	r5,sp,r9
   48254:	b00d883a 	mov	r6,r22
   48258:	d8c1030d 	sth	r3,1036(sp)
   4825c:	db011915 	stw	r12,1124(sp)
   48260:	d881038d 	sth	r2,1038(sp)
   48264:	dac10715 	stw	r11,1052(sp)
   48268:	da810915 	stw	r10,1060(sp)
   4826c:	dec10015 	stw	sp,1024(sp)
   48270:	dec10415 	stw	sp,1040(sp)
   48274:	da410215 	stw	r9,1032(sp)
   48278:	da410515 	stw	r9,1044(sp)
   4827c:	d8010615 	stw	zero,1048(sp)
   48280:	0047b5c0 	call	47b5c <___vfiprintf_internal_r>
   48284:	1021883a 	mov	r16,r2
   48288:	10000416 	blt	r2,zero,4829c <___vfiprintf_internal_r+0x740>
   4828c:	d9012017 	ldw	r4,1152(sp)
   48290:	d9410004 	addi	r5,sp,1024
   48294:	00443740 	call	44374 <_fflush_r>
   48298:	1002fc1e 	bne	r2,zero,48e8c <___vfiprintf_internal_r+0x1330>
   4829c:	d881030b 	ldhu	r2,1036(sp)
   482a0:	1080100c 	andi	r2,r2,64
   482a4:	10000326 	beq	r2,zero,482b4 <___vfiprintf_internal_r+0x758>
   482a8:	a080030b 	ldhu	r2,12(r20)
   482ac:	10801014 	ori	r2,r2,64
   482b0:	a080030d 	sth	r2,12(r20)
   482b4:	8005883a 	mov	r2,r16
   482b8:	00000106 	br	482c0 <___vfiprintf_internal_r+0x764>
   482bc:	00bfffc4 	movi	r2,-1
   482c0:	dfc13517 	ldw	ra,1236(sp)
   482c4:	df013417 	ldw	fp,1232(sp)
   482c8:	ddc13317 	ldw	r23,1228(sp)
   482cc:	dd813217 	ldw	r22,1224(sp)
   482d0:	dd413117 	ldw	r21,1220(sp)
   482d4:	dd013017 	ldw	r20,1216(sp)
   482d8:	dcc12f17 	ldw	r19,1212(sp)
   482dc:	dc812e17 	ldw	r18,1208(sp)
   482e0:	dc412d17 	ldw	r17,1204(sp)
   482e4:	dc012c17 	ldw	r16,1200(sp)
   482e8:	dec13604 	addi	sp,sp,1240
   482ec:	f800283a 	ret
   482f0:	004491c0 	call	4491c <__sinit>
   482f4:	003e2b06 	br	47ba4 <__alt_data_end+0xfffd6e64>
   482f8:	04e7c83a 	sub	r19,zero,r19
   482fc:	d8812115 	stw	r2,1156(sp)
   48300:	ad400114 	ori	r21,r21,4
   48304:	80c00007 	ldb	r3,0(r16)
   48308:	003e7306 	br	47cd8 <__alt_data_end+0xfffd6f98>
   4830c:	a880040c 	andi	r2,r21,16
   48310:	1000e41e 	bne	r2,zero,486a4 <___vfiprintf_internal_r+0xb48>
   48314:	a880100c 	andi	r2,r21,64
   48318:	1000e226 	beq	r2,zero,486a4 <___vfiprintf_internal_r+0xb48>
   4831c:	da812117 	ldw	r10,1156(sp)
   48320:	002d883a 	mov	r22,zero
   48324:	0005883a 	mov	r2,zero
   48328:	5480000b 	ldhu	r18,0(r10)
   4832c:	52800104 	addi	r10,r10,4
   48330:	da812115 	stw	r10,1156(sp)
   48334:	9009883a 	mov	r4,r18
   48338:	003ee706 	br	47ed8 <__alt_data_end+0xfffd7198>
   4833c:	da812117 	ldw	r10,1156(sp)
   48340:	00800044 	movi	r2,1
   48344:	54800017 	ldw	r18,0(r10)
   48348:	55800117 	ldw	r22,4(r10)
   4834c:	52800204 	addi	r10,r10,8
   48350:	da812115 	stw	r10,1156(sp)
   48354:	9588b03a 	or	r4,r18,r22
   48358:	003edf06 	br	47ed8 <__alt_data_end+0xfffd7198>
   4835c:	02c00174 	movhi	r11,5
   48360:	5ade6c04 	addi	r11,r11,31152
   48364:	d9811d85 	stb	r6,1142(sp)
   48368:	dac12615 	stw	r11,1176(sp)
   4836c:	a900080c 	andi	r4,r21,32
   48370:	d8812117 	ldw	r2,1156(sp)
   48374:	2000a526 	beq	r4,zero,4860c <___vfiprintf_internal_r+0xab0>
   48378:	da812117 	ldw	r10,1156(sp)
   4837c:	14800017 	ldw	r18,0(r2)
   48380:	15800117 	ldw	r22,4(r2)
   48384:	52800204 	addi	r10,r10,8
   48388:	da812115 	stw	r10,1156(sp)
   4838c:	a880004c 	andi	r2,r21,1
   48390:	1001d926 	beq	r2,zero,48af8 <___vfiprintf_internal_r+0xf9c>
   48394:	9588b03a 	or	r4,r18,r22
   48398:	20024426 	beq	r4,zero,48cac <___vfiprintf_internal_r+0x1150>
   4839c:	00800c04 	movi	r2,48
   483a0:	d8811d05 	stb	r2,1140(sp)
   483a4:	d8c11d45 	stb	r3,1141(sp)
   483a8:	ad400094 	ori	r21,r21,2
   483ac:	00800084 	movi	r2,2
   483b0:	003ec906 	br	47ed8 <__alt_data_end+0xfffd7198>
   483b4:	da812117 	ldw	r10,1156(sp)
   483b8:	04800044 	movi	r18,1
   483bc:	dac10004 	addi	r11,sp,1024
   483c0:	50800017 	ldw	r2,0(r10)
   483c4:	52800104 	addi	r10,r10,4
   483c8:	d8011d85 	stb	zero,1142(sp)
   483cc:	d8810005 	stb	r2,1024(sp)
   483d0:	da812115 	stw	r10,1156(sp)
   483d4:	9023883a 	mov	r17,r18
   483d8:	dac12415 	stw	r11,1168(sp)
   483dc:	0013883a 	mov	r9,zero
   483e0:	003ee206 	br	47f6c <__alt_data_end+0xfffd722c>
   483e4:	ad402014 	ori	r21,r21,128
   483e8:	80c00007 	ldb	r3,0(r16)
   483ec:	003e3a06 	br	47cd8 <__alt_data_end+0xfffd6f98>
   483f0:	8015883a 	mov	r10,r16
   483f4:	0027883a 	mov	r19,zero
   483f8:	18bff404 	addi	r2,r3,-48
   483fc:	50c00007 	ldb	r3,0(r10)
   48400:	9cc002a4 	muli	r19,r19,10
   48404:	84000044 	addi	r16,r16,1
   48408:	8015883a 	mov	r10,r16
   4840c:	98a7883a 	add	r19,r19,r2
   48410:	18bff404 	addi	r2,r3,-48
   48414:	28bff92e 	bgeu	r5,r2,483fc <__alt_data_end+0xfffd76bc>
   48418:	003e3006 	br	47cdc <__alt_data_end+0xfffd6f9c>
   4841c:	ad400414 	ori	r21,r21,16
   48420:	d9811d85 	stb	r6,1142(sp)
   48424:	a880080c 	andi	r2,r21,32
   48428:	d8c12117 	ldw	r3,1156(sp)
   4842c:	10004b26 	beq	r2,zero,4855c <___vfiprintf_internal_r+0xa00>
   48430:	da812117 	ldw	r10,1156(sp)
   48434:	18800117 	ldw	r2,4(r3)
   48438:	1c800017 	ldw	r18,0(r3)
   4843c:	52800204 	addi	r10,r10,8
   48440:	da812115 	stw	r10,1156(sp)
   48444:	102d883a 	mov	r22,r2
   48448:	1001f116 	blt	r2,zero,48c10 <___vfiprintf_internal_r+0x10b4>
   4844c:	db011d83 	ldbu	r12,1142(sp)
   48450:	4823883a 	mov	r17,r9
   48454:	00800044 	movi	r2,1
   48458:	9588b03a 	or	r4,r18,r22
   4845c:	003ea106 	br	47ee4 <__alt_data_end+0xfffd71a4>
   48460:	80c00007 	ldb	r3,0(r16)
   48464:	82800044 	addi	r10,r16,1
   48468:	1b027f26 	beq	r3,r12,48e68 <___vfiprintf_internal_r+0x130c>
   4846c:	18bff404 	addi	r2,r3,-48
   48470:	5021883a 	mov	r16,r10
   48474:	0013883a 	mov	r9,zero
   48478:	28be1836 	bltu	r5,r2,47cdc <__alt_data_end+0xfffd6f9c>
   4847c:	80c00007 	ldb	r3,0(r16)
   48480:	4a4002a4 	muli	r9,r9,10
   48484:	84000044 	addi	r16,r16,1
   48488:	1253883a 	add	r9,r2,r9
   4848c:	18bff404 	addi	r2,r3,-48
   48490:	28bffa2e 	bgeu	r5,r2,4847c <__alt_data_end+0xfffd773c>
   48494:	483e110e 	bge	r9,zero,47cdc <__alt_data_end+0xfffd6f9c>
   48498:	027fffc4 	movi	r9,-1
   4849c:	003e0f06 	br	47cdc <__alt_data_end+0xfffd6f9c>
   484a0:	d9811d85 	stb	r6,1142(sp)
   484a4:	a880080c 	andi	r2,r21,32
   484a8:	1001ee26 	beq	r2,zero,48c64 <___vfiprintf_internal_r+0x1108>
   484ac:	da812117 	ldw	r10,1156(sp)
   484b0:	dac12217 	ldw	r11,1160(sp)
   484b4:	50800017 	ldw	r2,0(r10)
   484b8:	5807d7fa 	srai	r3,r11,31
   484bc:	52800104 	addi	r10,r10,4
   484c0:	da812115 	stw	r10,1156(sp)
   484c4:	12c00015 	stw	r11,0(r2)
   484c8:	10c00115 	stw	r3,4(r2)
   484cc:	003dd806 	br	47c30 <__alt_data_end+0xfffd6ef0>
   484d0:	30803fcc 	andi	r2,r6,255
   484d4:	1080201c 	xori	r2,r2,128
   484d8:	10bfe004 	addi	r2,r2,-128
   484dc:	1001df1e 	bne	r2,zero,48c5c <___vfiprintf_internal_r+0x1100>
   484e0:	01800804 	movi	r6,32
   484e4:	80c00007 	ldb	r3,0(r16)
   484e8:	003dfb06 	br	47cd8 <__alt_data_end+0xfffd6f98>
   484ec:	da812117 	ldw	r10,1156(sp)
   484f0:	dac12117 	ldw	r11,1156(sp)
   484f4:	d8011d85 	stb	zero,1142(sp)
   484f8:	52800017 	ldw	r10,0(r10)
   484fc:	5d800104 	addi	r22,r11,4
   48500:	da812415 	stw	r10,1168(sp)
   48504:	50023b26 	beq	r10,zero,48df4 <___vfiprintf_internal_r+0x1298>
   48508:	d9012417 	ldw	r4,1168(sp)
   4850c:	48021f16 	blt	r9,zero,48d8c <___vfiprintf_internal_r+0x1230>
   48510:	480d883a 	mov	r6,r9
   48514:	000b883a 	mov	r5,zero
   48518:	da012a15 	stw	r8,1192(sp)
   4851c:	da412b15 	stw	r9,1196(sp)
   48520:	0045dd40 	call	45dd4 <memchr>
   48524:	da012a17 	ldw	r8,1192(sp)
   48528:	da412b17 	ldw	r9,1196(sp)
   4852c:	10024726 	beq	r2,zero,48e4c <___vfiprintf_internal_r+0x12f0>
   48530:	d8c12417 	ldw	r3,1168(sp)
   48534:	10e3c83a 	sub	r17,r2,r3
   48538:	4c41f616 	blt	r9,r17,48d14 <___vfiprintf_internal_r+0x11b8>
   4853c:	db011d83 	ldbu	r12,1142(sp)
   48540:	dd812115 	stw	r22,1156(sp)
   48544:	0013883a 	mov	r9,zero
   48548:	003e8006 	br	47f4c <__alt_data_end+0xfffd720c>
   4854c:	d9811d85 	stb	r6,1142(sp)
   48550:	a880080c 	andi	r2,r21,32
   48554:	d8c12117 	ldw	r3,1156(sp)
   48558:	103fb51e 	bne	r2,zero,48430 <__alt_data_end+0xfffd76f0>
   4855c:	a880040c 	andi	r2,r21,16
   48560:	10015e1e 	bne	r2,zero,48adc <___vfiprintf_internal_r+0xf80>
   48564:	a880100c 	andi	r2,r21,64
   48568:	10015c26 	beq	r2,zero,48adc <___vfiprintf_internal_r+0xf80>
   4856c:	1c80000f 	ldh	r18,0(r3)
   48570:	da812117 	ldw	r10,1156(sp)
   48574:	902dd7fa 	srai	r22,r18,31
   48578:	52800104 	addi	r10,r10,4
   4857c:	da812115 	stw	r10,1156(sp)
   48580:	b005883a 	mov	r2,r22
   48584:	003fb006 	br	48448 <__alt_data_end+0xfffd7708>
   48588:	da812117 	ldw	r10,1156(sp)
   4858c:	00800c04 	movi	r2,48
   48590:	02c00174 	movhi	r11,5
   48594:	54800017 	ldw	r18,0(r10)
   48598:	d8811d05 	stb	r2,1140(sp)
   4859c:	52800104 	addi	r10,r10,4
   485a0:	00801e04 	movi	r2,120
   485a4:	5ade7104 	addi	r11,r11,31172
   485a8:	d8811d45 	stb	r2,1141(sp)
   485ac:	002d883a 	mov	r22,zero
   485b0:	ad400094 	ori	r21,r21,2
   485b4:	da812115 	stw	r10,1156(sp)
   485b8:	dac12615 	stw	r11,1176(sp)
   485bc:	00800084 	movi	r2,2
   485c0:	9009883a 	mov	r4,r18
   485c4:	003e4406 	br	47ed8 <__alt_data_end+0xfffd7198>
   485c8:	ad400814 	ori	r21,r21,32
   485cc:	80c00007 	ldb	r3,0(r16)
   485d0:	003dc106 	br	47cd8 <__alt_data_end+0xfffd6f98>
   485d4:	ad401014 	ori	r21,r21,64
   485d8:	80c00007 	ldb	r3,0(r16)
   485dc:	003dbe06 	br	47cd8 <__alt_data_end+0xfffd6f98>
   485e0:	80c00007 	ldb	r3,0(r16)
   485e4:	19c1de26 	beq	r3,r7,48d60 <___vfiprintf_internal_r+0x1204>
   485e8:	ad400414 	ori	r21,r21,16
   485ec:	003dba06 	br	47cd8 <__alt_data_end+0xfffd6f98>
   485f0:	00800174 	movhi	r2,5
   485f4:	109e7104 	addi	r2,r2,31172
   485f8:	d8812615 	stw	r2,1176(sp)
   485fc:	d9811d85 	stb	r6,1142(sp)
   48600:	a900080c 	andi	r4,r21,32
   48604:	d8812117 	ldw	r2,1156(sp)
   48608:	203f5b1e 	bne	r4,zero,48378 <__alt_data_end+0xfffd7638>
   4860c:	a900040c 	andi	r4,r21,16
   48610:	2001a826 	beq	r4,zero,48cb4 <___vfiprintf_internal_r+0x1158>
   48614:	dac12117 	ldw	r11,1156(sp)
   48618:	14800017 	ldw	r18,0(r2)
   4861c:	002d883a 	mov	r22,zero
   48620:	5ac00104 	addi	r11,r11,4
   48624:	dac12115 	stw	r11,1156(sp)
   48628:	003f5806 	br	4838c <__alt_data_end+0xfffd764c>
   4862c:	da812117 	ldw	r10,1156(sp)
   48630:	54c00017 	ldw	r19,0(r10)
   48634:	50800104 	addi	r2,r10,4
   48638:	983f2f16 	blt	r19,zero,482f8 <__alt_data_end+0xfffd75b8>
   4863c:	d8812115 	stw	r2,1156(sp)
   48640:	80c00007 	ldb	r3,0(r16)
   48644:	003da406 	br	47cd8 <__alt_data_end+0xfffd6f98>
   48648:	01800ac4 	movi	r6,43
   4864c:	80c00007 	ldb	r3,0(r16)
   48650:	003da106 	br	47cd8 <__alt_data_end+0xfffd6f98>
   48654:	ad400054 	ori	r21,r21,1
   48658:	80c00007 	ldb	r3,0(r16)
   4865c:	003d9e06 	br	47cd8 <__alt_data_end+0xfffd6f98>
   48660:	d9811d85 	stb	r6,1142(sp)
   48664:	18007126 	beq	r3,zero,4882c <___vfiprintf_internal_r+0xcd0>
   48668:	04800044 	movi	r18,1
   4866c:	d8c10005 	stb	r3,1024(sp)
   48670:	d8c10004 	addi	r3,sp,1024
   48674:	d8011d85 	stb	zero,1142(sp)
   48678:	9023883a 	mov	r17,r18
   4867c:	d8c12415 	stw	r3,1168(sp)
   48680:	003f5606 	br	483dc <__alt_data_end+0xfffd769c>
   48684:	dac12117 	ldw	r11,1156(sp)
   48688:	002d883a 	mov	r22,zero
   4868c:	00800044 	movi	r2,1
   48690:	5c800017 	ldw	r18,0(r11)
   48694:	5ac00104 	addi	r11,r11,4
   48698:	dac12115 	stw	r11,1156(sp)
   4869c:	9009883a 	mov	r4,r18
   486a0:	003e0d06 	br	47ed8 <__alt_data_end+0xfffd7198>
   486a4:	dac12117 	ldw	r11,1156(sp)
   486a8:	002d883a 	mov	r22,zero
   486ac:	0005883a 	mov	r2,zero
   486b0:	5c800017 	ldw	r18,0(r11)
   486b4:	5ac00104 	addi	r11,r11,4
   486b8:	dac12115 	stw	r11,1156(sp)
   486bc:	9009883a 	mov	r4,r18
   486c0:	003e0506 	br	47ed8 <__alt_data_end+0xfffd7198>
   486c4:	d9012017 	ldw	r4,1152(sp)
   486c8:	a00b883a 	mov	r5,r20
   486cc:	d9811a04 	addi	r6,sp,1128
   486d0:	d8c12a15 	stw	r3,1192(sp)
   486d4:	db012b15 	stw	r12,1196(sp)
   486d8:	0047a480 	call	47a48 <__sprint_r.part.0>
   486dc:	d8c12a17 	ldw	r3,1192(sp)
   486e0:	db012b17 	ldw	r12,1196(sp)
   486e4:	1000571e 	bne	r2,zero,48844 <___vfiprintf_internal_r+0xce8>
   486e8:	d9811b17 	ldw	r6,1132(sp)
   486ec:	d8811c17 	ldw	r2,1136(sp)
   486f0:	d811883a 	mov	r8,sp
   486f4:	31400044 	addi	r5,r6,1
   486f8:	003e3306 	br	47fc8 <__alt_data_end+0xfffd7288>
   486fc:	d9411b17 	ldw	r5,1132(sp)
   48700:	d8c11c17 	ldw	r3,1136(sp)
   48704:	28800044 	addi	r2,r5,1
   48708:	d9011d87 	ldb	r4,1142(sp)
   4870c:	203e4d26 	beq	r4,zero,48044 <__alt_data_end+0xfffd7304>
   48710:	01000044 	movi	r4,1
   48714:	d9411d84 	addi	r5,sp,1142
   48718:	1907883a 	add	r3,r3,r4
   4871c:	41400015 	stw	r5,0(r8)
   48720:	41000115 	stw	r4,4(r8)
   48724:	d8c11c15 	stw	r3,1136(sp)
   48728:	d8811b15 	stw	r2,1132(sp)
   4872c:	014001c4 	movi	r5,7
   48730:	2880aa16 	blt	r5,r2,489dc <___vfiprintf_internal_r+0xe80>
   48734:	100b883a 	mov	r5,r2
   48738:	42000204 	addi	r8,r8,8
   4873c:	10800044 	addi	r2,r2,1
   48740:	003e4006 	br	48044 <__alt_data_end+0xfffd7304>
   48744:	d9012017 	ldw	r4,1152(sp)
   48748:	a00b883a 	mov	r5,r20
   4874c:	d9811a04 	addi	r6,sp,1128
   48750:	d9c12a15 	stw	r7,1192(sp)
   48754:	db012b15 	stw	r12,1196(sp)
   48758:	0047a480 	call	47a48 <__sprint_r.part.0>
   4875c:	d9c12a17 	ldw	r7,1192(sp)
   48760:	db012b17 	ldw	r12,1196(sp)
   48764:	1000371e 	bne	r2,zero,48844 <___vfiprintf_internal_r+0xce8>
   48768:	d9411b17 	ldw	r5,1132(sp)
   4876c:	d8c11c17 	ldw	r3,1136(sp)
   48770:	d811883a 	mov	r8,sp
   48774:	28800044 	addi	r2,r5,1
   48778:	003e4d06 	br	480b0 <__alt_data_end+0xfffd7370>
   4877c:	10803fcc 	andi	r2,r2,255
   48780:	00c00044 	movi	r3,1
   48784:	10fddf1e 	bne	r2,r3,47f04 <__alt_data_end+0xfffd71c4>
   48788:	b000021e 	bne	r22,zero,48794 <___vfiprintf_internal_r+0xc38>
   4878c:	00800244 	movi	r2,9
   48790:	1480202e 	bgeu	r2,r18,48814 <___vfiprintf_internal_r+0xcb8>
   48794:	dc012515 	stw	r16,1172(sp)
   48798:	dc410a04 	addi	r17,sp,1064
   4879c:	9021883a 	mov	r16,r18
   487a0:	da012415 	stw	r8,1168(sp)
   487a4:	b025883a 	mov	r18,r22
   487a8:	da412315 	stw	r9,1164(sp)
   487ac:	602d883a 	mov	r22,r12
   487b0:	8009883a 	mov	r4,r16
   487b4:	900b883a 	mov	r5,r18
   487b8:	01800284 	movi	r6,10
   487bc:	000f883a 	mov	r7,zero
   487c0:	0049dd40 	call	49dd4 <__umoddi3>
   487c4:	10800c04 	addi	r2,r2,48
   487c8:	8c7fffc4 	addi	r17,r17,-1
   487cc:	8009883a 	mov	r4,r16
   487d0:	900b883a 	mov	r5,r18
   487d4:	01800284 	movi	r6,10
   487d8:	000f883a 	mov	r7,zero
   487dc:	88800005 	stb	r2,0(r17)
   487e0:	00498140 	call	49814 <__udivdi3>
   487e4:	1021883a 	mov	r16,r2
   487e8:	10c4b03a 	or	r2,r2,r3
   487ec:	1825883a 	mov	r18,r3
   487f0:	103fef1e 	bne	r2,zero,487b0 <__alt_data_end+0xfffd7a70>
   487f4:	da811e17 	ldw	r10,1144(sp)
   487f8:	da012417 	ldw	r8,1168(sp)
   487fc:	da412317 	ldw	r9,1164(sp)
   48800:	dc412415 	stw	r17,1168(sp)
   48804:	b019883a 	mov	r12,r22
   48808:	dc012517 	ldw	r16,1172(sp)
   4880c:	5463c83a 	sub	r17,r10,r17
   48810:	003dce06 	br	47f4c <__alt_data_end+0xfffd720c>
   48814:	94800c04 	addi	r18,r18,48
   48818:	d8c109c4 	addi	r3,sp,1063
   4881c:	dc8109c5 	stb	r18,1063(sp)
   48820:	dc412717 	ldw	r17,1180(sp)
   48824:	d8c12415 	stw	r3,1168(sp)
   48828:	003dc806 	br	47f4c <__alt_data_end+0xfffd720c>
   4882c:	d8811c17 	ldw	r2,1136(sp)
   48830:	10000426 	beq	r2,zero,48844 <___vfiprintf_internal_r+0xce8>
   48834:	d9012017 	ldw	r4,1152(sp)
   48838:	a00b883a 	mov	r5,r20
   4883c:	d9811a04 	addi	r6,sp,1128
   48840:	0047a480 	call	47a48 <__sprint_r.part.0>
   48844:	a080030b 	ldhu	r2,12(r20)
   48848:	1080100c 	andi	r2,r2,64
   4884c:	103e9b1e 	bne	r2,zero,482bc <__alt_data_end+0xfffd757c>
   48850:	d8812217 	ldw	r2,1160(sp)
   48854:	003e9a06 	br	482c0 <__alt_data_end+0xfffd7580>
   48858:	d9012017 	ldw	r4,1152(sp)
   4885c:	a00b883a 	mov	r5,r20
   48860:	d9811a04 	addi	r6,sp,1128
   48864:	0047a480 	call	47a48 <__sprint_r.part.0>
   48868:	103ff61e 	bne	r2,zero,48844 <__alt_data_end+0xfffd7b04>
   4886c:	d9011b17 	ldw	r4,1132(sp)
   48870:	d8c11c17 	ldw	r3,1136(sp)
   48874:	d811883a 	mov	r8,sp
   48878:	21400044 	addi	r5,r4,1
   4887c:	003e4006 	br	48180 <__alt_data_end+0xfffd7440>
   48880:	1800d61e 	bne	r3,zero,48bdc <___vfiprintf_internal_r+0x1080>
   48884:	dac12417 	ldw	r11,1168(sp)
   48888:	00800044 	movi	r2,1
   4888c:	dc400115 	stw	r17,4(sp)
   48890:	dac00015 	stw	r11,0(sp)
   48894:	dc411c15 	stw	r17,1136(sp)
   48898:	d8811b15 	stw	r2,1132(sp)
   4889c:	8807883a 	mov	r3,r17
   488a0:	d811883a 	mov	r8,sp
   488a4:	42000204 	addi	r8,r8,8
   488a8:	aac0010c 	andi	r11,r21,4
   488ac:	58000226 	beq	r11,zero,488b8 <___vfiprintf_internal_r+0xd5c>
   488b0:	9ca3c83a 	sub	r17,r19,r18
   488b4:	047e2616 	blt	zero,r17,48150 <__alt_data_end+0xfffd7410>
   488b8:	94c0010e 	bge	r18,r19,488c0 <___vfiprintf_internal_r+0xd64>
   488bc:	9825883a 	mov	r18,r19
   488c0:	da812217 	ldw	r10,1160(sp)
   488c4:	5495883a 	add	r10,r10,r18
   488c8:	da812215 	stw	r10,1160(sp)
   488cc:	183e4826 	beq	r3,zero,481f0 <__alt_data_end+0xfffd74b0>
   488d0:	d9012017 	ldw	r4,1152(sp)
   488d4:	a00b883a 	mov	r5,r20
   488d8:	d9811a04 	addi	r6,sp,1128
   488dc:	0047a480 	call	47a48 <__sprint_r.part.0>
   488e0:	103e4326 	beq	r2,zero,481f0 <__alt_data_end+0xfffd74b0>
   488e4:	003fd706 	br	48844 <__alt_data_end+0xfffd7b04>
   488e8:	9cadc83a 	sub	r22,r19,r18
   488ec:	05bde40e 	bge	zero,r22,48080 <__alt_data_end+0xfffd7340>
   488f0:	03000404 	movi	r12,16
   488f4:	6581500e 	bge	r12,r22,48e38 <___vfiprintf_internal_r+0x12dc>
   488f8:	00800174 	movhi	r2,5
   488fc:	109ed204 	addi	r2,r2,31560
   48900:	d8812315 	stw	r2,1164(sp)
   48904:	8005883a 	mov	r2,r16
   48908:	038001c4 	movi	r14,7
   4890c:	b021883a 	mov	r16,r22
   48910:	da412515 	stw	r9,1172(sp)
   48914:	102d883a 	mov	r22,r2
   48918:	00000506 	br	48930 <___vfiprintf_internal_r+0xdd4>
   4891c:	29000084 	addi	r4,r5,2
   48920:	42000204 	addi	r8,r8,8
   48924:	100b883a 	mov	r5,r2
   48928:	843ffc04 	addi	r16,r16,-16
   4892c:	64000d0e 	bge	r12,r16,48964 <___vfiprintf_internal_r+0xe08>
   48930:	18c00404 	addi	r3,r3,16
   48934:	28800044 	addi	r2,r5,1
   48938:	45c00015 	stw	r23,0(r8)
   4893c:	43000115 	stw	r12,4(r8)
   48940:	d8c11c15 	stw	r3,1136(sp)
   48944:	d8811b15 	stw	r2,1132(sp)
   48948:	70bff40e 	bge	r14,r2,4891c <__alt_data_end+0xfffd7bdc>
   4894c:	1800151e 	bne	r3,zero,489a4 <___vfiprintf_internal_r+0xe48>
   48950:	843ffc04 	addi	r16,r16,-16
   48954:	000b883a 	mov	r5,zero
   48958:	01000044 	movi	r4,1
   4895c:	d811883a 	mov	r8,sp
   48960:	643ff316 	blt	r12,r16,48930 <__alt_data_end+0xfffd7bf0>
   48964:	da412517 	ldw	r9,1172(sp)
   48968:	b005883a 	mov	r2,r22
   4896c:	802d883a 	mov	r22,r16
   48970:	1021883a 	mov	r16,r2
   48974:	da812317 	ldw	r10,1164(sp)
   48978:	1d87883a 	add	r3,r3,r22
   4897c:	45800115 	stw	r22,4(r8)
   48980:	42800015 	stw	r10,0(r8)
   48984:	d8c11c15 	stw	r3,1136(sp)
   48988:	d9011b15 	stw	r4,1132(sp)
   4898c:	008001c4 	movi	r2,7
   48990:	11008d16 	blt	r2,r4,48bc8 <___vfiprintf_internal_r+0x106c>
   48994:	42000204 	addi	r8,r8,8
   48998:	20800044 	addi	r2,r4,1
   4899c:	200b883a 	mov	r5,r4
   489a0:	003db706 	br	48080 <__alt_data_end+0xfffd7340>
   489a4:	d9012017 	ldw	r4,1152(sp)
   489a8:	a00b883a 	mov	r5,r20
   489ac:	d9811a04 	addi	r6,sp,1128
   489b0:	db012b15 	stw	r12,1196(sp)
   489b4:	db812a15 	stw	r14,1192(sp)
   489b8:	0047a480 	call	47a48 <__sprint_r.part.0>
   489bc:	db012b17 	ldw	r12,1196(sp)
   489c0:	db812a17 	ldw	r14,1192(sp)
   489c4:	103f9f1e 	bne	r2,zero,48844 <__alt_data_end+0xfffd7b04>
   489c8:	d9411b17 	ldw	r5,1132(sp)
   489cc:	d8c11c17 	ldw	r3,1136(sp)
   489d0:	d811883a 	mov	r8,sp
   489d4:	29000044 	addi	r4,r5,1
   489d8:	003fd306 	br	48928 <__alt_data_end+0xfffd7be8>
   489dc:	18006c1e 	bne	r3,zero,48b90 <___vfiprintf_internal_r+0x1034>
   489e0:	70004f26 	beq	r14,zero,48b20 <___vfiprintf_internal_r+0xfc4>
   489e4:	d8811d04 	addi	r2,sp,1140
   489e8:	00c00084 	movi	r3,2
   489ec:	d8800015 	stw	r2,0(sp)
   489f0:	d8c00115 	stw	r3,4(sp)
   489f4:	2005883a 	mov	r2,r4
   489f8:	d811883a 	mov	r8,sp
   489fc:	003d9b06 	br	4806c <__alt_data_end+0xfffd732c>
   48a00:	1800571e 	bne	r3,zero,48b60 <___vfiprintf_internal_r+0x1004>
   48a04:	000b883a 	mov	r5,zero
   48a08:	00800044 	movi	r2,1
   48a0c:	d811883a 	mov	r8,sp
   48a10:	003d9906 	br	48078 <__alt_data_end+0xfffd7338>
   48a14:	10803fcc 	andi	r2,r2,255
   48a18:	1000251e 	bne	r2,zero,48ab0 <___vfiprintf_internal_r+0xf54>
   48a1c:	a880004c 	andi	r2,r21,1
   48a20:	10007826 	beq	r2,zero,48c04 <___vfiprintf_internal_r+0x10a8>
   48a24:	00800c04 	movi	r2,48
   48a28:	d8c109c4 	addi	r3,sp,1063
   48a2c:	d88109c5 	stb	r2,1063(sp)
   48a30:	dc412717 	ldw	r17,1180(sp)
   48a34:	d8c12415 	stw	r3,1168(sp)
   48a38:	003d4406 	br	47f4c <__alt_data_end+0xfffd720c>
   48a3c:	d9012617 	ldw	r4,1176(sp)
   48a40:	dc410a04 	addi	r17,sp,1064
   48a44:	908003cc 	andi	r2,r18,15
   48a48:	b006973a 	slli	r3,r22,28
   48a4c:	2085883a 	add	r2,r4,r2
   48a50:	9024d13a 	srli	r18,r18,4
   48a54:	10800003 	ldbu	r2,0(r2)
   48a58:	b02cd13a 	srli	r22,r22,4
   48a5c:	8c7fffc4 	addi	r17,r17,-1
   48a60:	1ca4b03a 	or	r18,r3,r18
   48a64:	88800005 	stb	r2,0(r17)
   48a68:	9584b03a 	or	r2,r18,r22
   48a6c:	103ff51e 	bne	r2,zero,48a44 <__alt_data_end+0xfffd7d04>
   48a70:	dac11e17 	ldw	r11,1144(sp)
   48a74:	dc412415 	stw	r17,1168(sp)
   48a78:	5c63c83a 	sub	r17,r11,r17
   48a7c:	003d3306 	br	47f4c <__alt_data_end+0xfffd720c>
   48a80:	1800941e 	bne	r3,zero,48cd4 <___vfiprintf_internal_r+0x1178>
   48a84:	d8811d87 	ldb	r2,1142(sp)
   48a88:	10006b26 	beq	r2,zero,48c38 <___vfiprintf_internal_r+0x10dc>
   48a8c:	00c00044 	movi	r3,1
   48a90:	d9011d84 	addi	r4,sp,1142
   48a94:	1805883a 	mov	r2,r3
   48a98:	d9000015 	stw	r4,0(sp)
   48a9c:	d8c00115 	stw	r3,4(sp)
   48aa0:	d811883a 	mov	r8,sp
   48aa4:	003f2306 	br	48734 <__alt_data_end+0xfffd79f4>
   48aa8:	8023883a 	mov	r17,r16
   48aac:	003c7d06 	br	47ca4 <__alt_data_end+0xfffd6f64>
   48ab0:	da810a04 	addi	r10,sp,1064
   48ab4:	da812415 	stw	r10,1168(sp)
   48ab8:	003d2406 	br	47f4c <__alt_data_end+0xfffd720c>
   48abc:	d9012017 	ldw	r4,1152(sp)
   48ac0:	a00b883a 	mov	r5,r20
   48ac4:	d9811a04 	addi	r6,sp,1128
   48ac8:	0047a480 	call	47a48 <__sprint_r.part.0>
   48acc:	103f5d1e 	bne	r2,zero,48844 <__alt_data_end+0xfffd7b04>
   48ad0:	d8c11c17 	ldw	r3,1136(sp)
   48ad4:	d811883a 	mov	r8,sp
   48ad8:	003f7306 	br	488a8 <__alt_data_end+0xfffd7b68>
   48adc:	1c800017 	ldw	r18,0(r3)
   48ae0:	dac12117 	ldw	r11,1156(sp)
   48ae4:	902dd7fa 	srai	r22,r18,31
   48ae8:	5ac00104 	addi	r11,r11,4
   48aec:	dac12115 	stw	r11,1156(sp)
   48af0:	b005883a 	mov	r2,r22
   48af4:	003e5406 	br	48448 <__alt_data_end+0xfffd7708>
   48af8:	00800084 	movi	r2,2
   48afc:	9588b03a 	or	r4,r18,r22
   48b00:	003cf506 	br	47ed8 <__alt_data_end+0xfffd7198>
   48b04:	d9012017 	ldw	r4,1152(sp)
   48b08:	a00b883a 	mov	r5,r20
   48b0c:	d9811a04 	addi	r6,sp,1128
   48b10:	0047a480 	call	47a48 <__sprint_r.part.0>
   48b14:	103f4b1e 	bne	r2,zero,48844 <__alt_data_end+0xfffd7b04>
   48b18:	d811883a 	mov	r8,sp
   48b1c:	003cd106 	br	47e64 <__alt_data_end+0xfffd7124>
   48b20:	000b883a 	mov	r5,zero
   48b24:	2005883a 	mov	r2,r4
   48b28:	d811883a 	mov	r8,sp
   48b2c:	003d5206 	br	48078 <__alt_data_end+0xfffd7338>
   48b30:	10803fcc 	andi	r2,r2,255
   48b34:	1080201c 	xori	r2,r2,128
   48b38:	10bfe004 	addi	r2,r2,-128
   48b3c:	01000c04 	movi	r4,48
   48b40:	11008e26 	beq	r2,r4,48d7c <___vfiprintf_internal_r+0x1220>
   48b44:	da812417 	ldw	r10,1168(sp)
   48b48:	dac11e17 	ldw	r11,1144(sp)
   48b4c:	193fffc5 	stb	r4,-1(r3)
   48b50:	52bfffc4 	addi	r10,r10,-1
   48b54:	da812415 	stw	r10,1168(sp)
   48b58:	5aa3c83a 	sub	r17,r11,r10
   48b5c:	003cfb06 	br	47f4c <__alt_data_end+0xfffd720c>
   48b60:	d9012017 	ldw	r4,1152(sp)
   48b64:	a00b883a 	mov	r5,r20
   48b68:	d9811a04 	addi	r6,sp,1128
   48b6c:	da412b15 	stw	r9,1196(sp)
   48b70:	0047a480 	call	47a48 <__sprint_r.part.0>
   48b74:	da412b17 	ldw	r9,1196(sp)
   48b78:	103f321e 	bne	r2,zero,48844 <__alt_data_end+0xfffd7b04>
   48b7c:	d9411b17 	ldw	r5,1132(sp)
   48b80:	d8c11c17 	ldw	r3,1136(sp)
   48b84:	d811883a 	mov	r8,sp
   48b88:	28800044 	addi	r2,r5,1
   48b8c:	003d3a06 	br	48078 <__alt_data_end+0xfffd7338>
   48b90:	d9012017 	ldw	r4,1152(sp)
   48b94:	a00b883a 	mov	r5,r20
   48b98:	d9811a04 	addi	r6,sp,1128
   48b9c:	da412b15 	stw	r9,1196(sp)
   48ba0:	db812a15 	stw	r14,1192(sp)
   48ba4:	0047a480 	call	47a48 <__sprint_r.part.0>
   48ba8:	da412b17 	ldw	r9,1196(sp)
   48bac:	db812a17 	ldw	r14,1192(sp)
   48bb0:	103f241e 	bne	r2,zero,48844 <__alt_data_end+0xfffd7b04>
   48bb4:	d9411b17 	ldw	r5,1132(sp)
   48bb8:	d8c11c17 	ldw	r3,1136(sp)
   48bbc:	d811883a 	mov	r8,sp
   48bc0:	28800044 	addi	r2,r5,1
   48bc4:	003d1f06 	br	48044 <__alt_data_end+0xfffd7304>
   48bc8:	1800781e 	bne	r3,zero,48dac <___vfiprintf_internal_r+0x1250>
   48bcc:	000b883a 	mov	r5,zero
   48bd0:	00800044 	movi	r2,1
   48bd4:	d811883a 	mov	r8,sp
   48bd8:	003d2906 	br	48080 <__alt_data_end+0xfffd7340>
   48bdc:	d9012017 	ldw	r4,1152(sp)
   48be0:	a00b883a 	mov	r5,r20
   48be4:	d9811a04 	addi	r6,sp,1128
   48be8:	0047a480 	call	47a48 <__sprint_r.part.0>
   48bec:	103f151e 	bne	r2,zero,48844 <__alt_data_end+0xfffd7b04>
   48bf0:	d8811b17 	ldw	r2,1132(sp)
   48bf4:	d8c11c17 	ldw	r3,1136(sp)
   48bf8:	d811883a 	mov	r8,sp
   48bfc:	10800044 	addi	r2,r2,1
   48c00:	003d4406 	br	48114 <__alt_data_end+0xfffd73d4>
   48c04:	dac10a04 	addi	r11,sp,1064
   48c08:	dac12415 	stw	r11,1168(sp)
   48c0c:	003ccf06 	br	47f4c <__alt_data_end+0xfffd720c>
   48c10:	04a5c83a 	sub	r18,zero,r18
   48c14:	9004c03a 	cmpne	r2,r18,zero
   48c18:	05adc83a 	sub	r22,zero,r22
   48c1c:	b0adc83a 	sub	r22,r22,r2
   48c20:	03000b44 	movi	r12,45
   48c24:	db011d85 	stb	r12,1142(sp)
   48c28:	4823883a 	mov	r17,r9
   48c2c:	00800044 	movi	r2,1
   48c30:	9588b03a 	or	r4,r18,r22
   48c34:	003cab06 	br	47ee4 <__alt_data_end+0xfffd71a4>
   48c38:	000b883a 	mov	r5,zero
   48c3c:	00800044 	movi	r2,1
   48c40:	d811883a 	mov	r8,sp
   48c44:	703d0c26 	beq	r14,zero,48078 <__alt_data_end+0xfffd7338>
   48c48:	00c00084 	movi	r3,2
   48c4c:	d9011d04 	addi	r4,sp,1140
   48c50:	d9000015 	stw	r4,0(sp)
   48c54:	d8c00115 	stw	r3,4(sp)
   48c58:	003d0406 	br	4806c <__alt_data_end+0xfffd732c>
   48c5c:	80c00007 	ldb	r3,0(r16)
   48c60:	003c1d06 	br	47cd8 <__alt_data_end+0xfffd6f98>
   48c64:	a880040c 	andi	r2,r21,16
   48c68:	1000091e 	bne	r2,zero,48c90 <___vfiprintf_internal_r+0x1134>
   48c6c:	aac0100c 	andi	r11,r21,64
   48c70:	58000726 	beq	r11,zero,48c90 <___vfiprintf_internal_r+0x1134>
   48c74:	da812117 	ldw	r10,1156(sp)
   48c78:	dac12217 	ldw	r11,1160(sp)
   48c7c:	50800017 	ldw	r2,0(r10)
   48c80:	52800104 	addi	r10,r10,4
   48c84:	da812115 	stw	r10,1156(sp)
   48c88:	12c0000d 	sth	r11,0(r2)
   48c8c:	003be806 	br	47c30 <__alt_data_end+0xfffd6ef0>
   48c90:	da812117 	ldw	r10,1156(sp)
   48c94:	dac12217 	ldw	r11,1160(sp)
   48c98:	50800017 	ldw	r2,0(r10)
   48c9c:	52800104 	addi	r10,r10,4
   48ca0:	da812115 	stw	r10,1156(sp)
   48ca4:	12c00015 	stw	r11,0(r2)
   48ca8:	003be106 	br	47c30 <__alt_data_end+0xfffd6ef0>
   48cac:	00800084 	movi	r2,2
   48cb0:	003c8906 	br	47ed8 <__alt_data_end+0xfffd7198>
   48cb4:	a900100c 	andi	r4,r21,64
   48cb8:	20001f26 	beq	r4,zero,48d38 <___vfiprintf_internal_r+0x11dc>
   48cbc:	da812117 	ldw	r10,1156(sp)
   48cc0:	1480000b 	ldhu	r18,0(r2)
   48cc4:	002d883a 	mov	r22,zero
   48cc8:	52800104 	addi	r10,r10,4
   48ccc:	da812115 	stw	r10,1156(sp)
   48cd0:	003dae06 	br	4838c <__alt_data_end+0xfffd764c>
   48cd4:	d9012017 	ldw	r4,1152(sp)
   48cd8:	a00b883a 	mov	r5,r20
   48cdc:	d9811a04 	addi	r6,sp,1128
   48ce0:	da412b15 	stw	r9,1196(sp)
   48ce4:	db812a15 	stw	r14,1192(sp)
   48ce8:	0047a480 	call	47a48 <__sprint_r.part.0>
   48cec:	da412b17 	ldw	r9,1196(sp)
   48cf0:	db812a17 	ldw	r14,1192(sp)
   48cf4:	103ed31e 	bne	r2,zero,48844 <__alt_data_end+0xfffd7b04>
   48cf8:	d9411b17 	ldw	r5,1132(sp)
   48cfc:	d8c11c17 	ldw	r3,1136(sp)
   48d00:	d811883a 	mov	r8,sp
   48d04:	28800044 	addi	r2,r5,1
   48d08:	003e7f06 	br	48708 <__alt_data_end+0xfffd79c8>
   48d0c:	9825883a 	mov	r18,r19
   48d10:	003d3406 	br	481e4 <__alt_data_end+0xfffd74a4>
   48d14:	4823883a 	mov	r17,r9
   48d18:	003e0806 	br	4853c <__alt_data_end+0xfffd77fc>
   48d1c:	d9012017 	ldw	r4,1152(sp)
   48d20:	a00b883a 	mov	r5,r20
   48d24:	d9811a04 	addi	r6,sp,1128
   48d28:	0047a480 	call	47a48 <__sprint_r.part.0>
   48d2c:	103ec51e 	bne	r2,zero,48844 <__alt_data_end+0xfffd7b04>
   48d30:	d8c11c17 	ldw	r3,1136(sp)
   48d34:	003ee006 	br	488b8 <__alt_data_end+0xfffd7b78>
   48d38:	dac12117 	ldw	r11,1156(sp)
   48d3c:	14800017 	ldw	r18,0(r2)
   48d40:	002d883a 	mov	r22,zero
   48d44:	5ac00104 	addi	r11,r11,4
   48d48:	dac12115 	stw	r11,1156(sp)
   48d4c:	003d8f06 	br	4838c <__alt_data_end+0xfffd764c>
   48d50:	02c00174 	movhi	r11,5
   48d54:	5aded204 	addi	r11,r11,31560
   48d58:	dac12315 	stw	r11,1164(sp)
   48d5c:	003ce306 	br	480ec <__alt_data_end+0xfffd73ac>
   48d60:	80c00043 	ldbu	r3,1(r16)
   48d64:	ad400814 	ori	r21,r21,32
   48d68:	84000044 	addi	r16,r16,1
   48d6c:	18c03fcc 	andi	r3,r3,255
   48d70:	18c0201c 	xori	r3,r3,128
   48d74:	18ffe004 	addi	r3,r3,-128
   48d78:	003bd706 	br	47cd8 <__alt_data_end+0xfffd6f98>
   48d7c:	dac11e17 	ldw	r11,1144(sp)
   48d80:	d8c12417 	ldw	r3,1168(sp)
   48d84:	58e3c83a 	sub	r17,r11,r3
   48d88:	003c7006 	br	47f4c <__alt_data_end+0xfffd720c>
   48d8c:	da012a15 	stw	r8,1192(sp)
   48d90:	00408640 	call	40864 <strlen>
   48d94:	1023883a 	mov	r17,r2
   48d98:	db011d83 	ldbu	r12,1142(sp)
   48d9c:	dd812115 	stw	r22,1156(sp)
   48da0:	0013883a 	mov	r9,zero
   48da4:	da012a17 	ldw	r8,1192(sp)
   48da8:	003c6806 	br	47f4c <__alt_data_end+0xfffd720c>
   48dac:	d9012017 	ldw	r4,1152(sp)
   48db0:	a00b883a 	mov	r5,r20
   48db4:	d9811a04 	addi	r6,sp,1128
   48db8:	da412b15 	stw	r9,1196(sp)
   48dbc:	0047a480 	call	47a48 <__sprint_r.part.0>
   48dc0:	da412b17 	ldw	r9,1196(sp)
   48dc4:	103e9f1e 	bne	r2,zero,48844 <__alt_data_end+0xfffd7b04>
   48dc8:	d9411b17 	ldw	r5,1132(sp)
   48dcc:	d8c11c17 	ldw	r3,1136(sp)
   48dd0:	d811883a 	mov	r8,sp
   48dd4:	28800044 	addi	r2,r5,1
   48dd8:	003ca906 	br	48080 <__alt_data_end+0xfffd7340>
   48ddc:	d9411b17 	ldw	r5,1132(sp)
   48de0:	01000174 	movhi	r4,5
   48de4:	211ed604 	addi	r4,r4,31576
   48de8:	d9012315 	stw	r4,1164(sp)
   48dec:	29400044 	addi	r5,r5,1
   48df0:	003c8806 	br	48014 <__alt_data_end+0xfffd72d4>
   48df4:	00800184 	movi	r2,6
   48df8:	1240012e 	bgeu	r2,r9,48e00 <___vfiprintf_internal_r+0x12a4>
   48dfc:	1013883a 	mov	r9,r2
   48e00:	4823883a 	mov	r17,r9
   48e04:	4825883a 	mov	r18,r9
   48e08:	48001516 	blt	r9,zero,48e60 <___vfiprintf_internal_r+0x1304>
   48e0c:	00800174 	movhi	r2,5
   48e10:	109e7604 	addi	r2,r2,31192
   48e14:	dd812115 	stw	r22,1156(sp)
   48e18:	d8812415 	stw	r2,1168(sp)
   48e1c:	003d6f06 	br	483dc <__alt_data_end+0xfffd769c>
   48e20:	d9411b17 	ldw	r5,1132(sp)
   48e24:	02c00174 	movhi	r11,5
   48e28:	5aded604 	addi	r11,r11,31576
   48e2c:	dac12315 	stw	r11,1164(sp)
   48e30:	29400044 	addi	r5,r5,1
   48e34:	003ce106 	br	481bc <__alt_data_end+0xfffd747c>
   48e38:	01000174 	movhi	r4,5
   48e3c:	211ed204 	addi	r4,r4,31560
   48e40:	d9012315 	stw	r4,1164(sp)
   48e44:	1009883a 	mov	r4,r2
   48e48:	003eca06 	br	48974 <__alt_data_end+0xfffd7c34>
   48e4c:	4823883a 	mov	r17,r9
   48e50:	db011d83 	ldbu	r12,1142(sp)
   48e54:	dd812115 	stw	r22,1156(sp)
   48e58:	0013883a 	mov	r9,zero
   48e5c:	003c3b06 	br	47f4c <__alt_data_end+0xfffd720c>
   48e60:	0025883a 	mov	r18,zero
   48e64:	003fe906 	br	48e0c <__alt_data_end+0xfffd80cc>
   48e68:	dac12117 	ldw	r11,1156(sp)
   48e6c:	8005883a 	mov	r2,r16
   48e70:	5021883a 	mov	r16,r10
   48e74:	5a400017 	ldw	r9,0(r11)
   48e78:	58c00104 	addi	r3,r11,4
   48e7c:	d8c12115 	stw	r3,1156(sp)
   48e80:	48000a16 	blt	r9,zero,48eac <___vfiprintf_internal_r+0x1350>
   48e84:	10c00047 	ldb	r3,1(r2)
   48e88:	003b9306 	br	47cd8 <__alt_data_end+0xfffd6f98>
   48e8c:	043fffc4 	movi	r16,-1
   48e90:	003d0206 	br	4829c <__alt_data_end+0xfffd755c>
   48e94:	94c0010e 	bge	r18,r19,48e9c <___vfiprintf_internal_r+0x1340>
   48e98:	9825883a 	mov	r18,r19
   48e9c:	da812217 	ldw	r10,1160(sp)
   48ea0:	5495883a 	add	r10,r10,r18
   48ea4:	da812215 	stw	r10,1160(sp)
   48ea8:	003cd106 	br	481f0 <__alt_data_end+0xfffd74b0>
   48eac:	027fffc4 	movi	r9,-1
   48eb0:	10c00047 	ldb	r3,1(r2)
   48eb4:	003b8806 	br	47cd8 <__alt_data_end+0xfffd6f98>

00048eb8 <__vfiprintf_internal>:
   48eb8:	2007883a 	mov	r3,r4
   48ebc:	010001b4 	movhi	r4,6
   48ec0:	21262104 	addi	r4,r4,-26492
   48ec4:	21000017 	ldw	r4,0(r4)
   48ec8:	2805883a 	mov	r2,r5
   48ecc:	300f883a 	mov	r7,r6
   48ed0:	180b883a 	mov	r5,r3
   48ed4:	100d883a 	mov	r6,r2
   48ed8:	0047b5c1 	jmpi	47b5c <___vfiprintf_internal_r>

00048edc <_write_r>:
   48edc:	defffd04 	addi	sp,sp,-12
   48ee0:	dc000015 	stw	r16,0(sp)
   48ee4:	040001b4 	movhi	r16,6
   48ee8:	dc400115 	stw	r17,4(sp)
   48eec:	842d3804 	addi	r16,r16,-19232
   48ef0:	2023883a 	mov	r17,r4
   48ef4:	2809883a 	mov	r4,r5
   48ef8:	300b883a 	mov	r5,r6
   48efc:	380d883a 	mov	r6,r7
   48f00:	dfc00215 	stw	ra,8(sp)
   48f04:	80000015 	stw	zero,0(r16)
   48f08:	004d22c0 	call	4d22c <write>
   48f0c:	00ffffc4 	movi	r3,-1
   48f10:	10c00526 	beq	r2,r3,48f28 <_write_r+0x4c>
   48f14:	dfc00217 	ldw	ra,8(sp)
   48f18:	dc400117 	ldw	r17,4(sp)
   48f1c:	dc000017 	ldw	r16,0(sp)
   48f20:	dec00304 	addi	sp,sp,12
   48f24:	f800283a 	ret
   48f28:	80c00017 	ldw	r3,0(r16)
   48f2c:	183ff926 	beq	r3,zero,48f14 <__alt_data_end+0xfffd81d4>
   48f30:	88c00015 	stw	r3,0(r17)
   48f34:	003ff706 	br	48f14 <__alt_data_end+0xfffd81d4>

00048f38 <_close_r>:
   48f38:	defffd04 	addi	sp,sp,-12
   48f3c:	dc000015 	stw	r16,0(sp)
   48f40:	040001b4 	movhi	r16,6
   48f44:	dc400115 	stw	r17,4(sp)
   48f48:	842d3804 	addi	r16,r16,-19232
   48f4c:	2023883a 	mov	r17,r4
   48f50:	2809883a 	mov	r4,r5
   48f54:	dfc00215 	stw	ra,8(sp)
   48f58:	80000015 	stw	zero,0(r16)
   48f5c:	004c9b40 	call	4c9b4 <close>
   48f60:	00ffffc4 	movi	r3,-1
   48f64:	10c00526 	beq	r2,r3,48f7c <_close_r+0x44>
   48f68:	dfc00217 	ldw	ra,8(sp)
   48f6c:	dc400117 	ldw	r17,4(sp)
   48f70:	dc000017 	ldw	r16,0(sp)
   48f74:	dec00304 	addi	sp,sp,12
   48f78:	f800283a 	ret
   48f7c:	80c00017 	ldw	r3,0(r16)
   48f80:	183ff926 	beq	r3,zero,48f68 <__alt_data_end+0xfffd8228>
   48f84:	88c00015 	stw	r3,0(r17)
   48f88:	003ff706 	br	48f68 <__alt_data_end+0xfffd8228>

00048f8c <_calloc_r>:
   48f8c:	298b383a 	mul	r5,r5,r6
   48f90:	defffe04 	addi	sp,sp,-8
   48f94:	dc000015 	stw	r16,0(sp)
   48f98:	dfc00115 	stw	ra,4(sp)
   48f9c:	004562c0 	call	4562c <_malloc_r>
   48fa0:	1021883a 	mov	r16,r2
   48fa4:	10002826 	beq	r2,zero,49048 <_calloc_r+0xbc>
   48fa8:	11bfff17 	ldw	r6,-4(r2)
   48fac:	00bfff04 	movi	r2,-4
   48fb0:	00c00904 	movi	r3,36
   48fb4:	308c703a 	and	r6,r6,r2
   48fb8:	308d883a 	add	r6,r6,r2
   48fbc:	19801436 	bltu	r3,r6,49010 <_calloc_r+0x84>
   48fc0:	008004c4 	movi	r2,19
   48fc4:	11800936 	bltu	r2,r6,48fec <_calloc_r+0x60>
   48fc8:	8005883a 	mov	r2,r16
   48fcc:	10000015 	stw	zero,0(r2)
   48fd0:	10000115 	stw	zero,4(r2)
   48fd4:	10000215 	stw	zero,8(r2)
   48fd8:	8005883a 	mov	r2,r16
   48fdc:	dfc00117 	ldw	ra,4(sp)
   48fe0:	dc000017 	ldw	r16,0(sp)
   48fe4:	dec00204 	addi	sp,sp,8
   48fe8:	f800283a 	ret
   48fec:	80000015 	stw	zero,0(r16)
   48ff0:	80000115 	stw	zero,4(r16)
   48ff4:	008006c4 	movi	r2,27
   48ff8:	11800d2e 	bgeu	r2,r6,49030 <_calloc_r+0xa4>
   48ffc:	80000215 	stw	zero,8(r16)
   49000:	80000315 	stw	zero,12(r16)
   49004:	30c00c26 	beq	r6,r3,49038 <_calloc_r+0xac>
   49008:	80800404 	addi	r2,r16,16
   4900c:	003fef06 	br	48fcc <__alt_data_end+0xfffd828c>
   49010:	8009883a 	mov	r4,r16
   49014:	000b883a 	mov	r5,zero
   49018:	00461500 	call	46150 <memset>
   4901c:	8005883a 	mov	r2,r16
   49020:	dfc00117 	ldw	ra,4(sp)
   49024:	dc000017 	ldw	r16,0(sp)
   49028:	dec00204 	addi	sp,sp,8
   4902c:	f800283a 	ret
   49030:	80800204 	addi	r2,r16,8
   49034:	003fe506 	br	48fcc <__alt_data_end+0xfffd828c>
   49038:	80000415 	stw	zero,16(r16)
   4903c:	80800604 	addi	r2,r16,24
   49040:	80000515 	stw	zero,20(r16)
   49044:	003fe106 	br	48fcc <__alt_data_end+0xfffd828c>
   49048:	0005883a 	mov	r2,zero
   4904c:	003fe306 	br	48fdc <__alt_data_end+0xfffd829c>

00049050 <_fclose_r>:
   49050:	28003226 	beq	r5,zero,4911c <_fclose_r+0xcc>
   49054:	defffc04 	addi	sp,sp,-16
   49058:	dc400115 	stw	r17,4(sp)
   4905c:	2023883a 	mov	r17,r4
   49060:	dc000015 	stw	r16,0(sp)
   49064:	dfc00315 	stw	ra,12(sp)
   49068:	dc800215 	stw	r18,8(sp)
   4906c:	2821883a 	mov	r16,r5
   49070:	004492c0 	call	4492c <__sfp_lock_acquire>
   49074:	88000226 	beq	r17,zero,49080 <_fclose_r+0x30>
   49078:	88800e17 	ldw	r2,56(r17)
   4907c:	10002926 	beq	r2,zero,49124 <_fclose_r+0xd4>
   49080:	8080030f 	ldh	r2,12(r16)
   49084:	10002226 	beq	r2,zero,49110 <_fclose_r+0xc0>
   49088:	8809883a 	mov	r4,r17
   4908c:	800b883a 	mov	r5,r16
   49090:	00443740 	call	44374 <_fflush_r>
   49094:	1025883a 	mov	r18,r2
   49098:	80800b17 	ldw	r2,44(r16)
   4909c:	10000426 	beq	r2,zero,490b0 <_fclose_r+0x60>
   490a0:	81400717 	ldw	r5,28(r16)
   490a4:	8809883a 	mov	r4,r17
   490a8:	103ee83a 	callr	r2
   490ac:	10002616 	blt	r2,zero,49148 <_fclose_r+0xf8>
   490b0:	8080030b 	ldhu	r2,12(r16)
   490b4:	1080200c 	andi	r2,r2,128
   490b8:	10001f1e 	bne	r2,zero,49138 <_fclose_r+0xe8>
   490bc:	81400c17 	ldw	r5,48(r16)
   490c0:	28000526 	beq	r5,zero,490d8 <_fclose_r+0x88>
   490c4:	80801004 	addi	r2,r16,64
   490c8:	28800226 	beq	r5,r2,490d4 <_fclose_r+0x84>
   490cc:	8809883a 	mov	r4,r17
   490d0:	0044a900 	call	44a90 <_free_r>
   490d4:	80000c15 	stw	zero,48(r16)
   490d8:	81401117 	ldw	r5,68(r16)
   490dc:	28000326 	beq	r5,zero,490ec <_fclose_r+0x9c>
   490e0:	8809883a 	mov	r4,r17
   490e4:	0044a900 	call	44a90 <_free_r>
   490e8:	80001115 	stw	zero,68(r16)
   490ec:	8000030d 	sth	zero,12(r16)
   490f0:	00449300 	call	44930 <__sfp_lock_release>
   490f4:	9005883a 	mov	r2,r18
   490f8:	dfc00317 	ldw	ra,12(sp)
   490fc:	dc800217 	ldw	r18,8(sp)
   49100:	dc400117 	ldw	r17,4(sp)
   49104:	dc000017 	ldw	r16,0(sp)
   49108:	dec00404 	addi	sp,sp,16
   4910c:	f800283a 	ret
   49110:	00449300 	call	44930 <__sfp_lock_release>
   49114:	0005883a 	mov	r2,zero
   49118:	003ff706 	br	490f8 <__alt_data_end+0xfffd83b8>
   4911c:	0005883a 	mov	r2,zero
   49120:	f800283a 	ret
   49124:	8809883a 	mov	r4,r17
   49128:	004491c0 	call	4491c <__sinit>
   4912c:	8080030f 	ldh	r2,12(r16)
   49130:	103fd51e 	bne	r2,zero,49088 <__alt_data_end+0xfffd8348>
   49134:	003ff606 	br	49110 <__alt_data_end+0xfffd83d0>
   49138:	81400417 	ldw	r5,16(r16)
   4913c:	8809883a 	mov	r4,r17
   49140:	0044a900 	call	44a90 <_free_r>
   49144:	003fdd06 	br	490bc <__alt_data_end+0xfffd837c>
   49148:	04bfffc4 	movi	r18,-1
   4914c:	003fd806 	br	490b0 <__alt_data_end+0xfffd8370>

00049150 <fclose>:
   49150:	008001b4 	movhi	r2,6
   49154:	10a62104 	addi	r2,r2,-26492
   49158:	200b883a 	mov	r5,r4
   4915c:	11000017 	ldw	r4,0(r2)
   49160:	00490501 	jmpi	49050 <_fclose_r>

00049164 <_fputwc_r>:
   49164:	3080030b 	ldhu	r2,12(r6)
   49168:	defff804 	addi	sp,sp,-32
   4916c:	dcc00415 	stw	r19,16(sp)
   49170:	dc800315 	stw	r18,12(sp)
   49174:	dc000115 	stw	r16,4(sp)
   49178:	dfc00715 	stw	ra,28(sp)
   4917c:	dd400615 	stw	r21,24(sp)
   49180:	dd000515 	stw	r20,20(sp)
   49184:	dc400215 	stw	r17,8(sp)
   49188:	10c8000c 	andi	r3,r2,8192
   4918c:	3021883a 	mov	r16,r6
   49190:	2027883a 	mov	r19,r4
   49194:	2825883a 	mov	r18,r5
   49198:	1800051e 	bne	r3,zero,491b0 <_fputwc_r+0x4c>
   4919c:	30c01917 	ldw	r3,100(r6)
   491a0:	10880014 	ori	r2,r2,8192
   491a4:	3080030d 	sth	r2,12(r6)
   491a8:	18880014 	ori	r2,r3,8192
   491ac:	30801915 	stw	r2,100(r6)
   491b0:	004541c0 	call	4541c <__locale_mb_cur_max>
   491b4:	00c00044 	movi	r3,1
   491b8:	10c03e26 	beq	r2,r3,492b4 <_fputwc_r+0x150>
   491bc:	9809883a 	mov	r4,r19
   491c0:	d80b883a 	mov	r5,sp
   491c4:	900d883a 	mov	r6,r18
   491c8:	81c01704 	addi	r7,r16,92
   491cc:	00496140 	call	49614 <_wcrtomb_r>
   491d0:	1029883a 	mov	r20,r2
   491d4:	00bfffc4 	movi	r2,-1
   491d8:	a0802026 	beq	r20,r2,4925c <_fputwc_r+0xf8>
   491dc:	d9400003 	ldbu	r5,0(sp)
   491e0:	a0001c26 	beq	r20,zero,49254 <_fputwc_r+0xf0>
   491e4:	0023883a 	mov	r17,zero
   491e8:	05400284 	movi	r21,10
   491ec:	00000906 	br	49214 <_fputwc_r+0xb0>
   491f0:	80800017 	ldw	r2,0(r16)
   491f4:	11400005 	stb	r5,0(r2)
   491f8:	80c00017 	ldw	r3,0(r16)
   491fc:	18c00044 	addi	r3,r3,1
   49200:	80c00015 	stw	r3,0(r16)
   49204:	8c400044 	addi	r17,r17,1
   49208:	dc45883a 	add	r2,sp,r17
   4920c:	8d00112e 	bgeu	r17,r20,49254 <_fputwc_r+0xf0>
   49210:	11400003 	ldbu	r5,0(r2)
   49214:	80c00217 	ldw	r3,8(r16)
   49218:	18ffffc4 	addi	r3,r3,-1
   4921c:	80c00215 	stw	r3,8(r16)
   49220:	183ff30e 	bge	r3,zero,491f0 <__alt_data_end+0xfffd84b0>
   49224:	80800617 	ldw	r2,24(r16)
   49228:	18801916 	blt	r3,r2,49290 <_fputwc_r+0x12c>
   4922c:	80800017 	ldw	r2,0(r16)
   49230:	11400005 	stb	r5,0(r2)
   49234:	80800017 	ldw	r2,0(r16)
   49238:	10c00003 	ldbu	r3,0(r2)
   4923c:	10800044 	addi	r2,r2,1
   49240:	1d402326 	beq	r3,r21,492d0 <_fputwc_r+0x16c>
   49244:	80800015 	stw	r2,0(r16)
   49248:	8c400044 	addi	r17,r17,1
   4924c:	dc45883a 	add	r2,sp,r17
   49250:	8d3fef36 	bltu	r17,r20,49210 <__alt_data_end+0xfffd84d0>
   49254:	9005883a 	mov	r2,r18
   49258:	00000406 	br	4926c <_fputwc_r+0x108>
   4925c:	80c0030b 	ldhu	r3,12(r16)
   49260:	a005883a 	mov	r2,r20
   49264:	18c01014 	ori	r3,r3,64
   49268:	80c0030d 	sth	r3,12(r16)
   4926c:	dfc00717 	ldw	ra,28(sp)
   49270:	dd400617 	ldw	r21,24(sp)
   49274:	dd000517 	ldw	r20,20(sp)
   49278:	dcc00417 	ldw	r19,16(sp)
   4927c:	dc800317 	ldw	r18,12(sp)
   49280:	dc400217 	ldw	r17,8(sp)
   49284:	dc000117 	ldw	r16,4(sp)
   49288:	dec00804 	addi	sp,sp,32
   4928c:	f800283a 	ret
   49290:	9809883a 	mov	r4,r19
   49294:	29403fcc 	andi	r5,r5,255
   49298:	800d883a 	mov	r6,r16
   4929c:	00494a40 	call	494a4 <__swbuf_r>
   492a0:	10bfffe0 	cmpeqi	r2,r2,-1
   492a4:	10803fcc 	andi	r2,r2,255
   492a8:	103fd626 	beq	r2,zero,49204 <__alt_data_end+0xfffd84c4>
   492ac:	00bfffc4 	movi	r2,-1
   492b0:	003fee06 	br	4926c <__alt_data_end+0xfffd852c>
   492b4:	90ffffc4 	addi	r3,r18,-1
   492b8:	01003f84 	movi	r4,254
   492bc:	20ffbf36 	bltu	r4,r3,491bc <__alt_data_end+0xfffd847c>
   492c0:	900b883a 	mov	r5,r18
   492c4:	dc800005 	stb	r18,0(sp)
   492c8:	1029883a 	mov	r20,r2
   492cc:	003fc506 	br	491e4 <__alt_data_end+0xfffd84a4>
   492d0:	9809883a 	mov	r4,r19
   492d4:	a80b883a 	mov	r5,r21
   492d8:	800d883a 	mov	r6,r16
   492dc:	00494a40 	call	494a4 <__swbuf_r>
   492e0:	10bfffe0 	cmpeqi	r2,r2,-1
   492e4:	003fef06 	br	492a4 <__alt_data_end+0xfffd8564>

000492e8 <fputwc>:
   492e8:	defffc04 	addi	sp,sp,-16
   492ec:	dc000115 	stw	r16,4(sp)
   492f0:	040001b4 	movhi	r16,6
   492f4:	84262104 	addi	r16,r16,-26492
   492f8:	dc400215 	stw	r17,8(sp)
   492fc:	2023883a 	mov	r17,r4
   49300:	81000017 	ldw	r4,0(r16)
   49304:	dfc00315 	stw	ra,12(sp)
   49308:	280d883a 	mov	r6,r5
   4930c:	20000626 	beq	r4,zero,49328 <fputwc+0x40>
   49310:	20800e17 	ldw	r2,56(r4)
   49314:	1000041e 	bne	r2,zero,49328 <fputwc+0x40>
   49318:	d9400015 	stw	r5,0(sp)
   4931c:	004491c0 	call	4491c <__sinit>
   49320:	81000017 	ldw	r4,0(r16)
   49324:	d9800017 	ldw	r6,0(sp)
   49328:	880b883a 	mov	r5,r17
   4932c:	dfc00317 	ldw	ra,12(sp)
   49330:	dc400217 	ldw	r17,8(sp)
   49334:	dc000117 	ldw	r16,4(sp)
   49338:	dec00404 	addi	sp,sp,16
   4933c:	00491641 	jmpi	49164 <_fputwc_r>

00049340 <_fstat_r>:
   49340:	defffd04 	addi	sp,sp,-12
   49344:	dc000015 	stw	r16,0(sp)
   49348:	040001b4 	movhi	r16,6
   4934c:	dc400115 	stw	r17,4(sp)
   49350:	842d3804 	addi	r16,r16,-19232
   49354:	2023883a 	mov	r17,r4
   49358:	2809883a 	mov	r4,r5
   4935c:	300b883a 	mov	r5,r6
   49360:	dfc00215 	stw	ra,8(sp)
   49364:	80000015 	stw	zero,0(r16)
   49368:	004cb000 	call	4cb00 <fstat>
   4936c:	00ffffc4 	movi	r3,-1
   49370:	10c00526 	beq	r2,r3,49388 <_fstat_r+0x48>
   49374:	dfc00217 	ldw	ra,8(sp)
   49378:	dc400117 	ldw	r17,4(sp)
   4937c:	dc000017 	ldw	r16,0(sp)
   49380:	dec00304 	addi	sp,sp,12
   49384:	f800283a 	ret
   49388:	80c00017 	ldw	r3,0(r16)
   4938c:	183ff926 	beq	r3,zero,49374 <__alt_data_end+0xfffd8634>
   49390:	88c00015 	stw	r3,0(r17)
   49394:	003ff706 	br	49374 <__alt_data_end+0xfffd8634>

00049398 <_isatty_r>:
   49398:	defffd04 	addi	sp,sp,-12
   4939c:	dc000015 	stw	r16,0(sp)
   493a0:	040001b4 	movhi	r16,6
   493a4:	dc400115 	stw	r17,4(sp)
   493a8:	842d3804 	addi	r16,r16,-19232
   493ac:	2023883a 	mov	r17,r4
   493b0:	2809883a 	mov	r4,r5
   493b4:	dfc00215 	stw	ra,8(sp)
   493b8:	80000015 	stw	zero,0(r16)
   493bc:	004cc000 	call	4cc00 <isatty>
   493c0:	00ffffc4 	movi	r3,-1
   493c4:	10c00526 	beq	r2,r3,493dc <_isatty_r+0x44>
   493c8:	dfc00217 	ldw	ra,8(sp)
   493cc:	dc400117 	ldw	r17,4(sp)
   493d0:	dc000017 	ldw	r16,0(sp)
   493d4:	dec00304 	addi	sp,sp,12
   493d8:	f800283a 	ret
   493dc:	80c00017 	ldw	r3,0(r16)
   493e0:	183ff926 	beq	r3,zero,493c8 <__alt_data_end+0xfffd8688>
   493e4:	88c00015 	stw	r3,0(r17)
   493e8:	003ff706 	br	493c8 <__alt_data_end+0xfffd8688>

000493ec <_lseek_r>:
   493ec:	defffd04 	addi	sp,sp,-12
   493f0:	dc000015 	stw	r16,0(sp)
   493f4:	040001b4 	movhi	r16,6
   493f8:	dc400115 	stw	r17,4(sp)
   493fc:	842d3804 	addi	r16,r16,-19232
   49400:	2023883a 	mov	r17,r4
   49404:	2809883a 	mov	r4,r5
   49408:	300b883a 	mov	r5,r6
   4940c:	380d883a 	mov	r6,r7
   49410:	dfc00215 	stw	ra,8(sp)
   49414:	80000015 	stw	zero,0(r16)
   49418:	004cdd80 	call	4cdd8 <lseek>
   4941c:	00ffffc4 	movi	r3,-1
   49420:	10c00526 	beq	r2,r3,49438 <_lseek_r+0x4c>
   49424:	dfc00217 	ldw	ra,8(sp)
   49428:	dc400117 	ldw	r17,4(sp)
   4942c:	dc000017 	ldw	r16,0(sp)
   49430:	dec00304 	addi	sp,sp,12
   49434:	f800283a 	ret
   49438:	80c00017 	ldw	r3,0(r16)
   4943c:	183ff926 	beq	r3,zero,49424 <__alt_data_end+0xfffd86e4>
   49440:	88c00015 	stw	r3,0(r17)
   49444:	003ff706 	br	49424 <__alt_data_end+0xfffd86e4>

00049448 <_read_r>:
   49448:	defffd04 	addi	sp,sp,-12
   4944c:	dc000015 	stw	r16,0(sp)
   49450:	040001b4 	movhi	r16,6
   49454:	dc400115 	stw	r17,4(sp)
   49458:	842d3804 	addi	r16,r16,-19232
   4945c:	2023883a 	mov	r17,r4
   49460:	2809883a 	mov	r4,r5
   49464:	300b883a 	mov	r5,r6
   49468:	380d883a 	mov	r6,r7
   4946c:	dfc00215 	stw	ra,8(sp)
   49470:	80000015 	stw	zero,0(r16)
   49474:	004cfd00 	call	4cfd0 <read>
   49478:	00ffffc4 	movi	r3,-1
   4947c:	10c00526 	beq	r2,r3,49494 <_read_r+0x4c>
   49480:	dfc00217 	ldw	ra,8(sp)
   49484:	dc400117 	ldw	r17,4(sp)
   49488:	dc000017 	ldw	r16,0(sp)
   4948c:	dec00304 	addi	sp,sp,12
   49490:	f800283a 	ret
   49494:	80c00017 	ldw	r3,0(r16)
   49498:	183ff926 	beq	r3,zero,49480 <__alt_data_end+0xfffd8740>
   4949c:	88c00015 	stw	r3,0(r17)
   494a0:	003ff706 	br	49480 <__alt_data_end+0xfffd8740>

000494a4 <__swbuf_r>:
   494a4:	defffc04 	addi	sp,sp,-16
   494a8:	dc800215 	stw	r18,8(sp)
   494ac:	dc400115 	stw	r17,4(sp)
   494b0:	dc000015 	stw	r16,0(sp)
   494b4:	dfc00315 	stw	ra,12(sp)
   494b8:	2025883a 	mov	r18,r4
   494bc:	2823883a 	mov	r17,r5
   494c0:	3021883a 	mov	r16,r6
   494c4:	20000226 	beq	r4,zero,494d0 <__swbuf_r+0x2c>
   494c8:	20800e17 	ldw	r2,56(r4)
   494cc:	10004126 	beq	r2,zero,495d4 <__swbuf_r+0x130>
   494d0:	80c00617 	ldw	r3,24(r16)
   494d4:	8180030b 	ldhu	r6,12(r16)
   494d8:	80c00215 	stw	r3,8(r16)
   494dc:	30c0020c 	andi	r3,r6,8
   494e0:	18003526 	beq	r3,zero,495b8 <__swbuf_r+0x114>
   494e4:	80c00417 	ldw	r3,16(r16)
   494e8:	18003326 	beq	r3,zero,495b8 <__swbuf_r+0x114>
   494ec:	3088000c 	andi	r2,r6,8192
   494f0:	8c403fcc 	andi	r17,r17,255
   494f4:	10001726 	beq	r2,zero,49554 <__swbuf_r+0xb0>
   494f8:	80800017 	ldw	r2,0(r16)
   494fc:	81000517 	ldw	r4,20(r16)
   49500:	10c7c83a 	sub	r3,r2,r3
   49504:	19001d0e 	bge	r3,r4,4957c <__swbuf_r+0xd8>
   49508:	18c00044 	addi	r3,r3,1
   4950c:	81400217 	ldw	r5,8(r16)
   49510:	11000044 	addi	r4,r2,1
   49514:	81000015 	stw	r4,0(r16)
   49518:	297fffc4 	addi	r5,r5,-1
   4951c:	81400215 	stw	r5,8(r16)
   49520:	14400005 	stb	r17,0(r2)
   49524:	80800517 	ldw	r2,20(r16)
   49528:	10c01d26 	beq	r2,r3,495a0 <__swbuf_r+0xfc>
   4952c:	8080030b 	ldhu	r2,12(r16)
   49530:	1080004c 	andi	r2,r2,1
   49534:	1000181e 	bne	r2,zero,49598 <__swbuf_r+0xf4>
   49538:	8805883a 	mov	r2,r17
   4953c:	dfc00317 	ldw	ra,12(sp)
   49540:	dc800217 	ldw	r18,8(sp)
   49544:	dc400117 	ldw	r17,4(sp)
   49548:	dc000017 	ldw	r16,0(sp)
   4954c:	dec00404 	addi	sp,sp,16
   49550:	f800283a 	ret
   49554:	81001917 	ldw	r4,100(r16)
   49558:	00b7ffc4 	movi	r2,-8193
   4955c:	31880014 	ori	r6,r6,8192
   49560:	2084703a 	and	r2,r4,r2
   49564:	80801915 	stw	r2,100(r16)
   49568:	80800017 	ldw	r2,0(r16)
   4956c:	81000517 	ldw	r4,20(r16)
   49570:	8180030d 	sth	r6,12(r16)
   49574:	10c7c83a 	sub	r3,r2,r3
   49578:	193fe316 	blt	r3,r4,49508 <__alt_data_end+0xfffd87c8>
   4957c:	9009883a 	mov	r4,r18
   49580:	800b883a 	mov	r5,r16
   49584:	00443740 	call	44374 <_fflush_r>
   49588:	1000091e 	bne	r2,zero,495b0 <__swbuf_r+0x10c>
   4958c:	80800017 	ldw	r2,0(r16)
   49590:	00c00044 	movi	r3,1
   49594:	003fdd06 	br	4950c <__alt_data_end+0xfffd87cc>
   49598:	00800284 	movi	r2,10
   4959c:	88bfe61e 	bne	r17,r2,49538 <__alt_data_end+0xfffd87f8>
   495a0:	9009883a 	mov	r4,r18
   495a4:	800b883a 	mov	r5,r16
   495a8:	00443740 	call	44374 <_fflush_r>
   495ac:	103fe226 	beq	r2,zero,49538 <__alt_data_end+0xfffd87f8>
   495b0:	00bfffc4 	movi	r2,-1
   495b4:	003fe106 	br	4953c <__alt_data_end+0xfffd87fc>
   495b8:	9009883a 	mov	r4,r18
   495bc:	800b883a 	mov	r5,r16
   495c0:	004291c0 	call	4291c <__swsetup_r>
   495c4:	1000051e 	bne	r2,zero,495dc <__swbuf_r+0x138>
   495c8:	8180030b 	ldhu	r6,12(r16)
   495cc:	80c00417 	ldw	r3,16(r16)
   495d0:	003fc606 	br	494ec <__alt_data_end+0xfffd87ac>
   495d4:	004491c0 	call	4491c <__sinit>
   495d8:	003fbd06 	br	494d0 <__alt_data_end+0xfffd8790>
   495dc:	80c0030b 	ldhu	r3,12(r16)
   495e0:	00bfffc4 	movi	r2,-1
   495e4:	18c01014 	ori	r3,r3,64
   495e8:	80c0030d 	sth	r3,12(r16)
   495ec:	00c00244 	movi	r3,9
   495f0:	90c00015 	stw	r3,0(r18)
   495f4:	003fd106 	br	4953c <__alt_data_end+0xfffd87fc>

000495f8 <__swbuf>:
   495f8:	00c001b4 	movhi	r3,6
   495fc:	18e62104 	addi	r3,r3,-26492
   49600:	2005883a 	mov	r2,r4
   49604:	19000017 	ldw	r4,0(r3)
   49608:	280d883a 	mov	r6,r5
   4960c:	100b883a 	mov	r5,r2
   49610:	00494a41 	jmpi	494a4 <__swbuf_r>

00049614 <_wcrtomb_r>:
   49614:	defff604 	addi	sp,sp,-40
   49618:	008001b4 	movhi	r2,6
   4961c:	dc800815 	stw	r18,32(sp)
   49620:	dc400715 	stw	r17,28(sp)
   49624:	dc000615 	stw	r16,24(sp)
   49628:	10a62504 	addi	r2,r2,-26476
   4962c:	dfc00915 	stw	ra,36(sp)
   49630:	2021883a 	mov	r16,r4
   49634:	3823883a 	mov	r17,r7
   49638:	14800017 	ldw	r18,0(r2)
   4963c:	28001426 	beq	r5,zero,49690 <_wcrtomb_r+0x7c>
   49640:	d9400415 	stw	r5,16(sp)
   49644:	d9800515 	stw	r6,20(sp)
   49648:	00454100 	call	45410 <__locale_charset>
   4964c:	d9400417 	ldw	r5,16(sp)
   49650:	d9800517 	ldw	r6,20(sp)
   49654:	8009883a 	mov	r4,r16
   49658:	dc400015 	stw	r17,0(sp)
   4965c:	100f883a 	mov	r7,r2
   49660:	903ee83a 	callr	r18
   49664:	00ffffc4 	movi	r3,-1
   49668:	10c0031e 	bne	r2,r3,49678 <_wcrtomb_r+0x64>
   4966c:	88000015 	stw	zero,0(r17)
   49670:	00c02284 	movi	r3,138
   49674:	80c00015 	stw	r3,0(r16)
   49678:	dfc00917 	ldw	ra,36(sp)
   4967c:	dc800817 	ldw	r18,32(sp)
   49680:	dc400717 	ldw	r17,28(sp)
   49684:	dc000617 	ldw	r16,24(sp)
   49688:	dec00a04 	addi	sp,sp,40
   4968c:	f800283a 	ret
   49690:	00454100 	call	45410 <__locale_charset>
   49694:	8009883a 	mov	r4,r16
   49698:	dc400015 	stw	r17,0(sp)
   4969c:	d9400104 	addi	r5,sp,4
   496a0:	000d883a 	mov	r6,zero
   496a4:	100f883a 	mov	r7,r2
   496a8:	903ee83a 	callr	r18
   496ac:	003fed06 	br	49664 <__alt_data_end+0xfffd8924>

000496b0 <wcrtomb>:
   496b0:	defff504 	addi	sp,sp,-44
   496b4:	dc400515 	stw	r17,20(sp)
   496b8:	dc000415 	stw	r16,16(sp)
   496bc:	dfc00a15 	stw	ra,40(sp)
   496c0:	dd400915 	stw	r21,36(sp)
   496c4:	dd000815 	stw	r20,32(sp)
   496c8:	dcc00715 	stw	r19,28(sp)
   496cc:	dc800615 	stw	r18,24(sp)
   496d0:	2021883a 	mov	r16,r4
   496d4:	3023883a 	mov	r17,r6
   496d8:	20001d26 	beq	r4,zero,49750 <wcrtomb+0xa0>
   496dc:	048001b4 	movhi	r18,6
   496e0:	94a62104 	addi	r18,r18,-26492
   496e4:	008001b4 	movhi	r2,6
   496e8:	95400017 	ldw	r21,0(r18)
   496ec:	10a62504 	addi	r2,r2,-26476
   496f0:	15000017 	ldw	r20,0(r2)
   496f4:	2827883a 	mov	r19,r5
   496f8:	00454100 	call	45410 <__locale_charset>
   496fc:	a809883a 	mov	r4,r21
   49700:	dc400015 	stw	r17,0(sp)
   49704:	800b883a 	mov	r5,r16
   49708:	980d883a 	mov	r6,r19
   4970c:	100f883a 	mov	r7,r2
   49710:	a03ee83a 	callr	r20
   49714:	00ffffc4 	movi	r3,-1
   49718:	10c0041e 	bne	r2,r3,4972c <wcrtomb+0x7c>
   4971c:	90c00017 	ldw	r3,0(r18)
   49720:	01002284 	movi	r4,138
   49724:	88000015 	stw	zero,0(r17)
   49728:	19000015 	stw	r4,0(r3)
   4972c:	dfc00a17 	ldw	ra,40(sp)
   49730:	dd400917 	ldw	r21,36(sp)
   49734:	dd000817 	ldw	r20,32(sp)
   49738:	dcc00717 	ldw	r19,28(sp)
   4973c:	dc800617 	ldw	r18,24(sp)
   49740:	dc400517 	ldw	r17,20(sp)
   49744:	dc000417 	ldw	r16,16(sp)
   49748:	dec00b04 	addi	sp,sp,44
   4974c:	f800283a 	ret
   49750:	048001b4 	movhi	r18,6
   49754:	94a62104 	addi	r18,r18,-26492
   49758:	008001b4 	movhi	r2,6
   4975c:	94c00017 	ldw	r19,0(r18)
   49760:	10a62504 	addi	r2,r2,-26476
   49764:	14000017 	ldw	r16,0(r2)
   49768:	00454100 	call	45410 <__locale_charset>
   4976c:	9809883a 	mov	r4,r19
   49770:	dc400015 	stw	r17,0(sp)
   49774:	d9400104 	addi	r5,sp,4
   49778:	000d883a 	mov	r6,zero
   4977c:	100f883a 	mov	r7,r2
   49780:	803ee83a 	callr	r16
   49784:	003fe306 	br	49714 <__alt_data_end+0xfffd89d4>

00049788 <__ascii_wctomb>:
   49788:	28000526 	beq	r5,zero,497a0 <__ascii_wctomb+0x18>
   4978c:	00803fc4 	movi	r2,255
   49790:	11800536 	bltu	r2,r6,497a8 <__ascii_wctomb+0x20>
   49794:	29800005 	stb	r6,0(r5)
   49798:	00800044 	movi	r2,1
   4979c:	f800283a 	ret
   497a0:	0005883a 	mov	r2,zero
   497a4:	f800283a 	ret
   497a8:	00802284 	movi	r2,138
   497ac:	20800015 	stw	r2,0(r4)
   497b0:	00bfffc4 	movi	r2,-1
   497b4:	f800283a 	ret

000497b8 <_wctomb_r>:
   497b8:	008001b4 	movhi	r2,6
   497bc:	defff904 	addi	sp,sp,-28
   497c0:	10a62504 	addi	r2,r2,-26476
   497c4:	dfc00615 	stw	ra,24(sp)
   497c8:	dc400515 	stw	r17,20(sp)
   497cc:	dc000415 	stw	r16,16(sp)
   497d0:	3823883a 	mov	r17,r7
   497d4:	14000017 	ldw	r16,0(r2)
   497d8:	d9000115 	stw	r4,4(sp)
   497dc:	d9400215 	stw	r5,8(sp)
   497e0:	d9800315 	stw	r6,12(sp)
   497e4:	00454100 	call	45410 <__locale_charset>
   497e8:	d9000117 	ldw	r4,4(sp)
   497ec:	d9400217 	ldw	r5,8(sp)
   497f0:	d9800317 	ldw	r6,12(sp)
   497f4:	dc400015 	stw	r17,0(sp)
   497f8:	100f883a 	mov	r7,r2
   497fc:	803ee83a 	callr	r16
   49800:	dfc00617 	ldw	ra,24(sp)
   49804:	dc400517 	ldw	r17,20(sp)
   49808:	dc000417 	ldw	r16,16(sp)
   4980c:	dec00704 	addi	sp,sp,28
   49810:	f800283a 	ret

00049814 <__udivdi3>:
   49814:	defff504 	addi	sp,sp,-44
   49818:	dcc00415 	stw	r19,16(sp)
   4981c:	dc000115 	stw	r16,4(sp)
   49820:	dfc00a15 	stw	ra,40(sp)
   49824:	df000915 	stw	fp,36(sp)
   49828:	ddc00815 	stw	r23,32(sp)
   4982c:	dd800715 	stw	r22,28(sp)
   49830:	dd400615 	stw	r21,24(sp)
   49834:	dd000515 	stw	r20,20(sp)
   49838:	dc800315 	stw	r18,12(sp)
   4983c:	dc400215 	stw	r17,8(sp)
   49840:	2027883a 	mov	r19,r4
   49844:	2821883a 	mov	r16,r5
   49848:	3800421e 	bne	r7,zero,49954 <__udivdi3+0x140>
   4984c:	3025883a 	mov	r18,r6
   49850:	2023883a 	mov	r17,r4
   49854:	2980542e 	bgeu	r5,r6,499a8 <__udivdi3+0x194>
   49858:	00bfffd4 	movui	r2,65535
   4985c:	282d883a 	mov	r22,r5
   49860:	1180a836 	bltu	r2,r6,49b04 <__udivdi3+0x2f0>
   49864:	00803fc4 	movi	r2,255
   49868:	1181422e 	bgeu	r2,r6,49d74 <__udivdi3+0x560>
   4986c:	00800204 	movi	r2,8
   49870:	1007883a 	mov	r3,r2
   49874:	3084d83a 	srl	r2,r6,r2
   49878:	01000174 	movhi	r4,5
   4987c:	211eda04 	addi	r4,r4,31592
   49880:	2085883a 	add	r2,r4,r2
   49884:	10800003 	ldbu	r2,0(r2)
   49888:	10c7883a 	add	r3,r2,r3
   4988c:	00800804 	movi	r2,32
   49890:	10c5c83a 	sub	r2,r2,r3
   49894:	10000526 	beq	r2,zero,498ac <__udivdi3+0x98>
   49898:	80a0983a 	sll	r16,r16,r2
   4989c:	98c6d83a 	srl	r3,r19,r3
   498a0:	30a4983a 	sll	r18,r6,r2
   498a4:	98a2983a 	sll	r17,r19,r2
   498a8:	80ecb03a 	or	r22,r16,r3
   498ac:	902ad43a 	srli	r21,r18,16
   498b0:	b009883a 	mov	r4,r22
   498b4:	953fffcc 	andi	r20,r18,65535
   498b8:	a80b883a 	mov	r5,r21
   498bc:	00407280 	call	40728 <__umodsi3>
   498c0:	b009883a 	mov	r4,r22
   498c4:	a80b883a 	mov	r5,r21
   498c8:	1027883a 	mov	r19,r2
   498cc:	00407200 	call	40720 <__udivsi3>
   498d0:	1021883a 	mov	r16,r2
   498d4:	8806d43a 	srli	r3,r17,16
   498d8:	9804943a 	slli	r2,r19,16
   498dc:	8527383a 	mul	r19,r16,r20
   498e0:	10c4b03a 	or	r2,r2,r3
   498e4:	14c0052e 	bgeu	r2,r19,498fc <__udivdi3+0xe8>
   498e8:	1485883a 	add	r2,r2,r18
   498ec:	80ffffc4 	addi	r3,r16,-1
   498f0:	14800136 	bltu	r2,r18,498f8 <__udivdi3+0xe4>
   498f4:	14c13436 	bltu	r2,r19,49dc8 <__udivdi3+0x5b4>
   498f8:	1821883a 	mov	r16,r3
   498fc:	14e7c83a 	sub	r19,r2,r19
   49900:	9809883a 	mov	r4,r19
   49904:	a80b883a 	mov	r5,r21
   49908:	00407280 	call	40728 <__umodsi3>
   4990c:	102d883a 	mov	r22,r2
   49910:	9809883a 	mov	r4,r19
   49914:	a80b883a 	mov	r5,r21
   49918:	00407200 	call	40720 <__udivsi3>
   4991c:	b02c943a 	slli	r22,r22,16
   49920:	1529383a 	mul	r20,r2,r20
   49924:	8c7fffcc 	andi	r17,r17,65535
   49928:	b462b03a 	or	r17,r22,r17
   4992c:	8d00052e 	bgeu	r17,r20,49944 <__udivdi3+0x130>
   49930:	8ca3883a 	add	r17,r17,r18
   49934:	10ffffc4 	addi	r3,r2,-1
   49938:	8c80f636 	bltu	r17,r18,49d14 <__udivdi3+0x500>
   4993c:	8d00f52e 	bgeu	r17,r20,49d14 <__udivdi3+0x500>
   49940:	10bfff84 	addi	r2,r2,-2
   49944:	8020943a 	slli	r16,r16,16
   49948:	0007883a 	mov	r3,zero
   4994c:	1404b03a 	or	r2,r2,r16
   49950:	00005b06 	br	49ac0 <__udivdi3+0x2ac>
   49954:	29c05836 	bltu	r5,r7,49ab8 <__udivdi3+0x2a4>
   49958:	00bfffd4 	movui	r2,65535
   4995c:	11c0642e 	bgeu	r2,r7,49af0 <__udivdi3+0x2dc>
   49960:	00804034 	movhi	r2,256
   49964:	10bfffc4 	addi	r2,r2,-1
   49968:	11c0f32e 	bgeu	r2,r7,49d38 <__udivdi3+0x524>
   4996c:	00c00604 	movi	r3,24
   49970:	180b883a 	mov	r5,r3
   49974:	38c6d83a 	srl	r3,r7,r3
   49978:	00800174 	movhi	r2,5
   4997c:	109eda04 	addi	r2,r2,31592
   49980:	10c7883a 	add	r3,r2,r3
   49984:	18c00003 	ldbu	r3,0(r3)
   49988:	01000804 	movi	r4,32
   4998c:	1947883a 	add	r3,r3,r5
   49990:	20e5c83a 	sub	r18,r4,r3
   49994:	9000661e 	bne	r18,zero,49b30 <__udivdi3+0x31c>
   49998:	3c00f936 	bltu	r7,r16,49d80 <__udivdi3+0x56c>
   4999c:	9985403a 	cmpgeu	r2,r19,r6
   499a0:	0007883a 	mov	r3,zero
   499a4:	00004606 	br	49ac0 <__udivdi3+0x2ac>
   499a8:	3000041e 	bne	r6,zero,499bc <__udivdi3+0x1a8>
   499ac:	01000044 	movi	r4,1
   499b0:	000b883a 	mov	r5,zero
   499b4:	00407200 	call	40720 <__udivsi3>
   499b8:	1025883a 	mov	r18,r2
   499bc:	00bfffd4 	movui	r2,65535
   499c0:	1480562e 	bgeu	r2,r18,49b1c <__udivdi3+0x308>
   499c4:	00804034 	movhi	r2,256
   499c8:	10bfffc4 	addi	r2,r2,-1
   499cc:	1480e32e 	bgeu	r2,r18,49d5c <__udivdi3+0x548>
   499d0:	00800604 	movi	r2,24
   499d4:	1007883a 	mov	r3,r2
   499d8:	9084d83a 	srl	r2,r18,r2
   499dc:	01000174 	movhi	r4,5
   499e0:	211eda04 	addi	r4,r4,31592
   499e4:	2085883a 	add	r2,r4,r2
   499e8:	10800003 	ldbu	r2,0(r2)
   499ec:	10c5883a 	add	r2,r2,r3
   499f0:	00c00804 	movi	r3,32
   499f4:	1887c83a 	sub	r3,r3,r2
   499f8:	1800911e 	bne	r3,zero,49c40 <__udivdi3+0x42c>
   499fc:	9028d43a 	srli	r20,r18,16
   49a00:	84a1c83a 	sub	r16,r16,r18
   49a04:	957fffcc 	andi	r21,r18,65535
   49a08:	00c00044 	movi	r3,1
   49a0c:	8009883a 	mov	r4,r16
   49a10:	a00b883a 	mov	r5,r20
   49a14:	d8c00015 	stw	r3,0(sp)
   49a18:	00407280 	call	40728 <__umodsi3>
   49a1c:	8009883a 	mov	r4,r16
   49a20:	a00b883a 	mov	r5,r20
   49a24:	1027883a 	mov	r19,r2
   49a28:	00407200 	call	40720 <__udivsi3>
   49a2c:	1021883a 	mov	r16,r2
   49a30:	880cd43a 	srli	r6,r17,16
   49a34:	9804943a 	slli	r2,r19,16
   49a38:	8567383a 	mul	r19,r16,r21
   49a3c:	d8c00017 	ldw	r3,0(sp)
   49a40:	1188b03a 	or	r4,r2,r6
   49a44:	24c0052e 	bgeu	r4,r19,49a5c <__udivdi3+0x248>
   49a48:	2489883a 	add	r4,r4,r18
   49a4c:	80bfffc4 	addi	r2,r16,-1
   49a50:	24800136 	bltu	r4,r18,49a58 <__udivdi3+0x244>
   49a54:	24c0d936 	bltu	r4,r19,49dbc <__udivdi3+0x5a8>
   49a58:	1021883a 	mov	r16,r2
   49a5c:	24e7c83a 	sub	r19,r4,r19
   49a60:	9809883a 	mov	r4,r19
   49a64:	a00b883a 	mov	r5,r20
   49a68:	d8c00015 	stw	r3,0(sp)
   49a6c:	00407280 	call	40728 <__umodsi3>
   49a70:	102d883a 	mov	r22,r2
   49a74:	9809883a 	mov	r4,r19
   49a78:	a00b883a 	mov	r5,r20
   49a7c:	00407200 	call	40720 <__udivsi3>
   49a80:	b02c943a 	slli	r22,r22,16
   49a84:	156b383a 	mul	r21,r2,r21
   49a88:	8c7fffcc 	andi	r17,r17,65535
   49a8c:	b462b03a 	or	r17,r22,r17
   49a90:	d8c00017 	ldw	r3,0(sp)
   49a94:	8d40052e 	bgeu	r17,r21,49aac <__udivdi3+0x298>
   49a98:	8ca3883a 	add	r17,r17,r18
   49a9c:	113fffc4 	addi	r4,r2,-1
   49aa0:	8c809a36 	bltu	r17,r18,49d0c <__udivdi3+0x4f8>
   49aa4:	8d40992e 	bgeu	r17,r21,49d0c <__udivdi3+0x4f8>
   49aa8:	10bfff84 	addi	r2,r2,-2
   49aac:	8020943a 	slli	r16,r16,16
   49ab0:	1404b03a 	or	r2,r2,r16
   49ab4:	00000206 	br	49ac0 <__udivdi3+0x2ac>
   49ab8:	0007883a 	mov	r3,zero
   49abc:	0005883a 	mov	r2,zero
   49ac0:	dfc00a17 	ldw	ra,40(sp)
   49ac4:	df000917 	ldw	fp,36(sp)
   49ac8:	ddc00817 	ldw	r23,32(sp)
   49acc:	dd800717 	ldw	r22,28(sp)
   49ad0:	dd400617 	ldw	r21,24(sp)
   49ad4:	dd000517 	ldw	r20,20(sp)
   49ad8:	dcc00417 	ldw	r19,16(sp)
   49adc:	dc800317 	ldw	r18,12(sp)
   49ae0:	dc400217 	ldw	r17,8(sp)
   49ae4:	dc000117 	ldw	r16,4(sp)
   49ae8:	dec00b04 	addi	sp,sp,44
   49aec:	f800283a 	ret
   49af0:	00803fc4 	movi	r2,255
   49af4:	11c0932e 	bgeu	r2,r7,49d44 <__udivdi3+0x530>
   49af8:	00c00204 	movi	r3,8
   49afc:	180b883a 	mov	r5,r3
   49b00:	003f9c06 	br	49974 <__alt_data_end+0xfffd8c34>
   49b04:	00804034 	movhi	r2,256
   49b08:	10bfffc4 	addi	r2,r2,-1
   49b0c:	1180902e 	bgeu	r2,r6,49d50 <__udivdi3+0x53c>
   49b10:	00800604 	movi	r2,24
   49b14:	1007883a 	mov	r3,r2
   49b18:	003f5606 	br	49874 <__alt_data_end+0xfffd8b34>
   49b1c:	00803fc4 	movi	r2,255
   49b20:	1480912e 	bgeu	r2,r18,49d68 <__udivdi3+0x554>
   49b24:	00800204 	movi	r2,8
   49b28:	1007883a 	mov	r3,r2
   49b2c:	003faa06 	br	499d8 <__alt_data_end+0xfffd8c98>
   49b30:	30eed83a 	srl	r23,r6,r3
   49b34:	3c8e983a 	sll	r7,r7,r18
   49b38:	80f8d83a 	srl	fp,r16,r3
   49b3c:	98c6d83a 	srl	r3,r19,r3
   49b40:	3deeb03a 	or	r23,r7,r23
   49b44:	b828d43a 	srli	r20,r23,16
   49b48:	84a0983a 	sll	r16,r16,r18
   49b4c:	e009883a 	mov	r4,fp
   49b50:	a00b883a 	mov	r5,r20
   49b54:	80e2b03a 	or	r17,r16,r3
   49b58:	34aa983a 	sll	r21,r6,r18
   49b5c:	00407280 	call	40728 <__umodsi3>
   49b60:	e009883a 	mov	r4,fp
   49b64:	a00b883a 	mov	r5,r20
   49b68:	102d883a 	mov	r22,r2
   49b6c:	00407200 	call	40720 <__udivsi3>
   49b70:	1021883a 	mov	r16,r2
   49b74:	bf3fffcc 	andi	fp,r23,65535
   49b78:	b004943a 	slli	r2,r22,16
   49b7c:	8808d43a 	srli	r4,r17,16
   49b80:	872d383a 	mul	r22,r16,fp
   49b84:	1104b03a 	or	r2,r2,r4
   49b88:	1580042e 	bgeu	r2,r22,49b9c <__udivdi3+0x388>
   49b8c:	15c5883a 	add	r2,r2,r23
   49b90:	80ffffc4 	addi	r3,r16,-1
   49b94:	15c0812e 	bgeu	r2,r23,49d9c <__udivdi3+0x588>
   49b98:	1821883a 	mov	r16,r3
   49b9c:	15adc83a 	sub	r22,r2,r22
   49ba0:	b009883a 	mov	r4,r22
   49ba4:	a00b883a 	mov	r5,r20
   49ba8:	00407280 	call	40728 <__umodsi3>
   49bac:	a00b883a 	mov	r5,r20
   49bb0:	b009883a 	mov	r4,r22
   49bb4:	d8800015 	stw	r2,0(sp)
   49bb8:	00407200 	call	40720 <__udivsi3>
   49bbc:	d8c00017 	ldw	r3,0(sp)
   49bc0:	170b383a 	mul	r5,r2,fp
   49bc4:	8c7fffcc 	andi	r17,r17,65535
   49bc8:	1806943a 	slli	r3,r3,16
   49bcc:	1c46b03a 	or	r3,r3,r17
   49bd0:	1940042e 	bgeu	r3,r5,49be4 <__udivdi3+0x3d0>
   49bd4:	1dc7883a 	add	r3,r3,r23
   49bd8:	113fffc4 	addi	r4,r2,-1
   49bdc:	1dc06b2e 	bgeu	r3,r23,49d8c <__udivdi3+0x578>
   49be0:	2005883a 	mov	r2,r4
   49be4:	8020943a 	slli	r16,r16,16
   49be8:	a9ffffcc 	andi	r7,r21,65535
   49bec:	a82ad43a 	srli	r21,r21,16
   49bf0:	1404b03a 	or	r2,r2,r16
   49bf4:	113fffcc 	andi	r4,r2,65535
   49bf8:	100cd43a 	srli	r6,r2,16
   49bfc:	21d3383a 	mul	r9,r4,r7
   49c00:	2549383a 	mul	r4,r4,r21
   49c04:	31cf383a 	mul	r7,r6,r7
   49c08:	4810d43a 	srli	r8,r9,16
   49c0c:	1947c83a 	sub	r3,r3,r5
   49c10:	3909883a 	add	r4,r7,r4
   49c14:	2209883a 	add	r4,r4,r8
   49c18:	354d383a 	mul	r6,r6,r21
   49c1c:	21c0022e 	bgeu	r4,r7,49c28 <__udivdi3+0x414>
   49c20:	01400074 	movhi	r5,1
   49c24:	314d883a 	add	r6,r6,r5
   49c28:	202ad43a 	srli	r21,r4,16
   49c2c:	354d883a 	add	r6,r6,r21
   49c30:	19803f36 	bltu	r3,r6,49d30 <__udivdi3+0x51c>
   49c34:	19803926 	beq	r3,r6,49d1c <__udivdi3+0x508>
   49c38:	0007883a 	mov	r3,zero
   49c3c:	003fa006 	br	49ac0 <__alt_data_end+0xfffd8d80>
   49c40:	90e4983a 	sll	r18,r18,r3
   49c44:	80aad83a 	srl	r21,r16,r2
   49c48:	80e0983a 	sll	r16,r16,r3
   49c4c:	9028d43a 	srli	r20,r18,16
   49c50:	9884d83a 	srl	r2,r19,r2
   49c54:	a809883a 	mov	r4,r21
   49c58:	a00b883a 	mov	r5,r20
   49c5c:	80acb03a 	or	r22,r16,r2
   49c60:	98e2983a 	sll	r17,r19,r3
   49c64:	00407280 	call	40728 <__umodsi3>
   49c68:	a809883a 	mov	r4,r21
   49c6c:	a00b883a 	mov	r5,r20
   49c70:	1021883a 	mov	r16,r2
   49c74:	00407200 	call	40720 <__udivsi3>
   49c78:	957fffcc 	andi	r21,r18,65535
   49c7c:	8020943a 	slli	r16,r16,16
   49c80:	b00ad43a 	srli	r5,r22,16
   49c84:	1567383a 	mul	r19,r2,r21
   49c88:	102f883a 	mov	r23,r2
   49c8c:	8148b03a 	or	r4,r16,r5
   49c90:	24c0062e 	bgeu	r4,r19,49cac <__udivdi3+0x498>
   49c94:	2489883a 	add	r4,r4,r18
   49c98:	10bfffc4 	addi	r2,r2,-1
   49c9c:	24804536 	bltu	r4,r18,49db4 <__udivdi3+0x5a0>
   49ca0:	24c0442e 	bgeu	r4,r19,49db4 <__udivdi3+0x5a0>
   49ca4:	bdffff84 	addi	r23,r23,-2
   49ca8:	2489883a 	add	r4,r4,r18
   49cac:	24e7c83a 	sub	r19,r4,r19
   49cb0:	9809883a 	mov	r4,r19
   49cb4:	a00b883a 	mov	r5,r20
   49cb8:	00407280 	call	40728 <__umodsi3>
   49cbc:	1021883a 	mov	r16,r2
   49cc0:	9809883a 	mov	r4,r19
   49cc4:	a00b883a 	mov	r5,r20
   49cc8:	00407200 	call	40720 <__udivsi3>
   49ccc:	8020943a 	slli	r16,r16,16
   49cd0:	1007883a 	mov	r3,r2
   49cd4:	1545383a 	mul	r2,r2,r21
   49cd8:	b13fffcc 	andi	r4,r22,65535
   49cdc:	8108b03a 	or	r4,r16,r4
   49ce0:	2080062e 	bgeu	r4,r2,49cfc <__udivdi3+0x4e8>
   49ce4:	2489883a 	add	r4,r4,r18
   49ce8:	197fffc4 	addi	r5,r3,-1
   49cec:	24802f36 	bltu	r4,r18,49dac <__udivdi3+0x598>
   49cf0:	20802e2e 	bgeu	r4,r2,49dac <__udivdi3+0x598>
   49cf4:	18ffff84 	addi	r3,r3,-2
   49cf8:	2489883a 	add	r4,r4,r18
   49cfc:	b82e943a 	slli	r23,r23,16
   49d00:	20a1c83a 	sub	r16,r4,r2
   49d04:	1dc6b03a 	or	r3,r3,r23
   49d08:	003f4006 	br	49a0c <__alt_data_end+0xfffd8ccc>
   49d0c:	2005883a 	mov	r2,r4
   49d10:	003f6606 	br	49aac <__alt_data_end+0xfffd8d6c>
   49d14:	1805883a 	mov	r2,r3
   49d18:	003f0a06 	br	49944 <__alt_data_end+0xfffd8c04>
   49d1c:	2006943a 	slli	r3,r4,16
   49d20:	9c88983a 	sll	r4,r19,r18
   49d24:	4a7fffcc 	andi	r9,r9,65535
   49d28:	1a47883a 	add	r3,r3,r9
   49d2c:	20ffc22e 	bgeu	r4,r3,49c38 <__alt_data_end+0xfffd8ef8>
   49d30:	10bfffc4 	addi	r2,r2,-1
   49d34:	003fc006 	br	49c38 <__alt_data_end+0xfffd8ef8>
   49d38:	00c00404 	movi	r3,16
   49d3c:	180b883a 	mov	r5,r3
   49d40:	003f0c06 	br	49974 <__alt_data_end+0xfffd8c34>
   49d44:	0007883a 	mov	r3,zero
   49d48:	000b883a 	mov	r5,zero
   49d4c:	003f0906 	br	49974 <__alt_data_end+0xfffd8c34>
   49d50:	00800404 	movi	r2,16
   49d54:	1007883a 	mov	r3,r2
   49d58:	003ec606 	br	49874 <__alt_data_end+0xfffd8b34>
   49d5c:	00800404 	movi	r2,16
   49d60:	1007883a 	mov	r3,r2
   49d64:	003f1c06 	br	499d8 <__alt_data_end+0xfffd8c98>
   49d68:	0005883a 	mov	r2,zero
   49d6c:	0007883a 	mov	r3,zero
   49d70:	003f1906 	br	499d8 <__alt_data_end+0xfffd8c98>
   49d74:	0005883a 	mov	r2,zero
   49d78:	0007883a 	mov	r3,zero
   49d7c:	003ebd06 	br	49874 <__alt_data_end+0xfffd8b34>
   49d80:	0007883a 	mov	r3,zero
   49d84:	00800044 	movi	r2,1
   49d88:	003f4d06 	br	49ac0 <__alt_data_end+0xfffd8d80>
   49d8c:	197f942e 	bgeu	r3,r5,49be0 <__alt_data_end+0xfffd8ea0>
   49d90:	10bfff84 	addi	r2,r2,-2
   49d94:	1dc7883a 	add	r3,r3,r23
   49d98:	003f9206 	br	49be4 <__alt_data_end+0xfffd8ea4>
   49d9c:	15bf7e2e 	bgeu	r2,r22,49b98 <__alt_data_end+0xfffd8e58>
   49da0:	843fff84 	addi	r16,r16,-2
   49da4:	15c5883a 	add	r2,r2,r23
   49da8:	003f7c06 	br	49b9c <__alt_data_end+0xfffd8e5c>
   49dac:	2807883a 	mov	r3,r5
   49db0:	003fd206 	br	49cfc <__alt_data_end+0xfffd8fbc>
   49db4:	102f883a 	mov	r23,r2
   49db8:	003fbc06 	br	49cac <__alt_data_end+0xfffd8f6c>
   49dbc:	843fff84 	addi	r16,r16,-2
   49dc0:	2489883a 	add	r4,r4,r18
   49dc4:	003f2506 	br	49a5c <__alt_data_end+0xfffd8d1c>
   49dc8:	843fff84 	addi	r16,r16,-2
   49dcc:	1485883a 	add	r2,r2,r18
   49dd0:	003eca06 	br	498fc <__alt_data_end+0xfffd8bbc>

00049dd4 <__umoddi3>:
   49dd4:	defff404 	addi	sp,sp,-48
   49dd8:	ddc00915 	stw	r23,36(sp)
   49ddc:	dc400315 	stw	r17,12(sp)
   49de0:	dc000215 	stw	r16,8(sp)
   49de4:	dfc00b15 	stw	ra,44(sp)
   49de8:	df000a15 	stw	fp,40(sp)
   49dec:	dd800815 	stw	r22,32(sp)
   49df0:	dd400715 	stw	r21,28(sp)
   49df4:	dd000615 	stw	r20,24(sp)
   49df8:	dcc00515 	stw	r19,20(sp)
   49dfc:	dc800415 	stw	r18,16(sp)
   49e00:	2021883a 	mov	r16,r4
   49e04:	2823883a 	mov	r17,r5
   49e08:	282f883a 	mov	r23,r5
   49e0c:	3800381e 	bne	r7,zero,49ef0 <__umoddi3+0x11c>
   49e10:	3027883a 	mov	r19,r6
   49e14:	2029883a 	mov	r20,r4
   49e18:	29804e2e 	bgeu	r5,r6,49f54 <__umoddi3+0x180>
   49e1c:	00bfffd4 	movui	r2,65535
   49e20:	11809c36 	bltu	r2,r6,4a094 <__umoddi3+0x2c0>
   49e24:	00803fc4 	movi	r2,255
   49e28:	11813b2e 	bgeu	r2,r6,4a318 <__umoddi3+0x544>
   49e2c:	01400204 	movi	r5,8
   49e30:	2805883a 	mov	r2,r5
   49e34:	314ad83a 	srl	r5,r6,r5
   49e38:	00c00174 	movhi	r3,5
   49e3c:	18deda04 	addi	r3,r3,31592
   49e40:	194b883a 	add	r5,r3,r5
   49e44:	29000003 	ldbu	r4,0(r5)
   49e48:	2089883a 	add	r4,r4,r2
   49e4c:	00800804 	movi	r2,32
   49e50:	1105c83a 	sub	r2,r2,r4
   49e54:	1000ec26 	beq	r2,zero,4a208 <__umoddi3+0x434>
   49e58:	88a2983a 	sll	r17,r17,r2
   49e5c:	8108d83a 	srl	r4,r16,r4
   49e60:	30a6983a 	sll	r19,r6,r2
   49e64:	80a8983a 	sll	r20,r16,r2
   49e68:	1025883a 	mov	r18,r2
   49e6c:	892eb03a 	or	r23,r17,r4
   49e70:	982cd43a 	srli	r22,r19,16
   49e74:	b809883a 	mov	r4,r23
   49e78:	9d7fffcc 	andi	r21,r19,65535
   49e7c:	b00b883a 	mov	r5,r22
   49e80:	00407280 	call	40728 <__umodsi3>
   49e84:	b809883a 	mov	r4,r23
   49e88:	b00b883a 	mov	r5,r22
   49e8c:	1021883a 	mov	r16,r2
   49e90:	00407200 	call	40720 <__udivsi3>
   49e94:	8020943a 	slli	r16,r16,16
   49e98:	a00cd43a 	srli	r6,r20,16
   49e9c:	1545383a 	mul	r2,r2,r21
   49ea0:	8188b03a 	or	r4,r16,r6
   49ea4:	2080042e 	bgeu	r4,r2,49eb8 <__umoddi3+0xe4>
   49ea8:	24c9883a 	add	r4,r4,r19
   49eac:	24c00236 	bltu	r4,r19,49eb8 <__umoddi3+0xe4>
   49eb0:	2080012e 	bgeu	r4,r2,49eb8 <__umoddi3+0xe4>
   49eb4:	24c9883a 	add	r4,r4,r19
   49eb8:	20a3c83a 	sub	r17,r4,r2
   49ebc:	8809883a 	mov	r4,r17
   49ec0:	b00b883a 	mov	r5,r22
   49ec4:	00407280 	call	40728 <__umodsi3>
   49ec8:	8809883a 	mov	r4,r17
   49ecc:	b00b883a 	mov	r5,r22
   49ed0:	1021883a 	mov	r16,r2
   49ed4:	00407200 	call	40720 <__udivsi3>
   49ed8:	8006943a 	slli	r3,r16,16
   49edc:	1545383a 	mul	r2,r2,r21
   49ee0:	a13fffcc 	andi	r4,r20,65535
   49ee4:	1906b03a 	or	r3,r3,r4
   49ee8:	1880532e 	bgeu	r3,r2,4a038 <__umoddi3+0x264>
   49eec:	00004e06 	br	4a028 <__umoddi3+0x254>
   49ef0:	29c05536 	bltu	r5,r7,4a048 <__umoddi3+0x274>
   49ef4:	00bfffd4 	movui	r2,65535
   49ef8:	11c0612e 	bgeu	r2,r7,4a080 <__umoddi3+0x2ac>
   49efc:	00804034 	movhi	r2,256
   49f00:	10bfffc4 	addi	r2,r2,-1
   49f04:	11c0f82e 	bgeu	r2,r7,4a2e8 <__umoddi3+0x514>
   49f08:	01400604 	movi	r5,24
   49f0c:	282b883a 	mov	r21,r5
   49f10:	394ad83a 	srl	r5,r7,r5
   49f14:	00c00174 	movhi	r3,5
   49f18:	18deda04 	addi	r3,r3,31592
   49f1c:	194b883a 	add	r5,r3,r5
   49f20:	28800003 	ldbu	r2,0(r5)
   49f24:	00c00804 	movi	r3,32
   49f28:	156b883a 	add	r21,r2,r21
   49f2c:	1d69c83a 	sub	r20,r3,r21
   49f30:	a000631e 	bne	r20,zero,4a0c0 <__umoddi3+0x2ec>
   49f34:	3c400136 	bltu	r7,r17,49f3c <__umoddi3+0x168>
   49f38:	81810436 	bltu	r16,r6,4a34c <__umoddi3+0x578>
   49f3c:	8185c83a 	sub	r2,r16,r6
   49f40:	89e3c83a 	sub	r17,r17,r7
   49f44:	8087803a 	cmpltu	r3,r16,r2
   49f48:	88efc83a 	sub	r23,r17,r3
   49f4c:	b807883a 	mov	r3,r23
   49f50:	00003f06 	br	4a050 <__umoddi3+0x27c>
   49f54:	3000041e 	bne	r6,zero,49f68 <__umoddi3+0x194>
   49f58:	01000044 	movi	r4,1
   49f5c:	000b883a 	mov	r5,zero
   49f60:	00407200 	call	40720 <__udivsi3>
   49f64:	1027883a 	mov	r19,r2
   49f68:	00bfffd4 	movui	r2,65535
   49f6c:	14c04f2e 	bgeu	r2,r19,4a0ac <__umoddi3+0x2d8>
   49f70:	00804034 	movhi	r2,256
   49f74:	10bfffc4 	addi	r2,r2,-1
   49f78:	14c0e42e 	bgeu	r2,r19,4a30c <__umoddi3+0x538>
   49f7c:	00800604 	movi	r2,24
   49f80:	1007883a 	mov	r3,r2
   49f84:	9884d83a 	srl	r2,r19,r2
   49f88:	01000174 	movhi	r4,5
   49f8c:	211eda04 	addi	r4,r4,31592
   49f90:	2085883a 	add	r2,r4,r2
   49f94:	11000003 	ldbu	r4,0(r2)
   49f98:	00800804 	movi	r2,32
   49f9c:	20c7883a 	add	r3,r4,r3
   49fa0:	10c5c83a 	sub	r2,r2,r3
   49fa4:	10009a1e 	bne	r2,zero,4a210 <__umoddi3+0x43c>
   49fa8:	982cd43a 	srli	r22,r19,16
   49fac:	8ce3c83a 	sub	r17,r17,r19
   49fb0:	9c3fffcc 	andi	r16,r19,65535
   49fb4:	0025883a 	mov	r18,zero
   49fb8:	8809883a 	mov	r4,r17
   49fbc:	b00b883a 	mov	r5,r22
   49fc0:	00407280 	call	40728 <__umodsi3>
   49fc4:	8809883a 	mov	r4,r17
   49fc8:	b00b883a 	mov	r5,r22
   49fcc:	102b883a 	mov	r21,r2
   49fd0:	00407200 	call	40720 <__udivsi3>
   49fd4:	a806943a 	slli	r3,r21,16
   49fd8:	a008d43a 	srli	r4,r20,16
   49fdc:	1405383a 	mul	r2,r2,r16
   49fe0:	190cb03a 	or	r6,r3,r4
   49fe4:	3080032e 	bgeu	r6,r2,49ff4 <__umoddi3+0x220>
   49fe8:	34cd883a 	add	r6,r6,r19
   49fec:	34c00136 	bltu	r6,r19,49ff4 <__umoddi3+0x220>
   49ff0:	3080d436 	bltu	r6,r2,4a344 <__umoddi3+0x570>
   49ff4:	30abc83a 	sub	r21,r6,r2
   49ff8:	a809883a 	mov	r4,r21
   49ffc:	b00b883a 	mov	r5,r22
   4a000:	00407280 	call	40728 <__umodsi3>
   4a004:	1023883a 	mov	r17,r2
   4a008:	a809883a 	mov	r4,r21
   4a00c:	b00b883a 	mov	r5,r22
   4a010:	00407200 	call	40720 <__udivsi3>
   4a014:	8822943a 	slli	r17,r17,16
   4a018:	1405383a 	mul	r2,r2,r16
   4a01c:	a13fffcc 	andi	r4,r20,65535
   4a020:	8906b03a 	or	r3,r17,r4
   4a024:	1880042e 	bgeu	r3,r2,4a038 <__umoddi3+0x264>
   4a028:	1cc7883a 	add	r3,r3,r19
   4a02c:	1cc00236 	bltu	r3,r19,4a038 <__umoddi3+0x264>
   4a030:	1880012e 	bgeu	r3,r2,4a038 <__umoddi3+0x264>
   4a034:	1cc7883a 	add	r3,r3,r19
   4a038:	1887c83a 	sub	r3,r3,r2
   4a03c:	1c84d83a 	srl	r2,r3,r18
   4a040:	0007883a 	mov	r3,zero
   4a044:	00000206 	br	4a050 <__umoddi3+0x27c>
   4a048:	2005883a 	mov	r2,r4
   4a04c:	2807883a 	mov	r3,r5
   4a050:	dfc00b17 	ldw	ra,44(sp)
   4a054:	df000a17 	ldw	fp,40(sp)
   4a058:	ddc00917 	ldw	r23,36(sp)
   4a05c:	dd800817 	ldw	r22,32(sp)
   4a060:	dd400717 	ldw	r21,28(sp)
   4a064:	dd000617 	ldw	r20,24(sp)
   4a068:	dcc00517 	ldw	r19,20(sp)
   4a06c:	dc800417 	ldw	r18,16(sp)
   4a070:	dc400317 	ldw	r17,12(sp)
   4a074:	dc000217 	ldw	r16,8(sp)
   4a078:	dec00c04 	addi	sp,sp,48
   4a07c:	f800283a 	ret
   4a080:	00803fc4 	movi	r2,255
   4a084:	11c0952e 	bgeu	r2,r7,4a2dc <__umoddi3+0x508>
   4a088:	01400204 	movi	r5,8
   4a08c:	282b883a 	mov	r21,r5
   4a090:	003f9f06 	br	49f10 <__alt_data_end+0xfffd91d0>
   4a094:	00804034 	movhi	r2,256
   4a098:	10bfffc4 	addi	r2,r2,-1
   4a09c:	1180952e 	bgeu	r2,r6,4a2f4 <__umoddi3+0x520>
   4a0a0:	01400604 	movi	r5,24
   4a0a4:	2805883a 	mov	r2,r5
   4a0a8:	003f6206 	br	49e34 <__alt_data_end+0xfffd90f4>
   4a0ac:	00803fc4 	movi	r2,255
   4a0b0:	14c0932e 	bgeu	r2,r19,4a300 <__umoddi3+0x52c>
   4a0b4:	00800204 	movi	r2,8
   4a0b8:	1007883a 	mov	r3,r2
   4a0bc:	003fb106 	br	49f84 <__alt_data_end+0xfffd9244>
   4a0c0:	3548d83a 	srl	r4,r6,r21
   4a0c4:	3d0e983a 	sll	r7,r7,r20
   4a0c8:	8d10983a 	sll	r8,r17,r20
   4a0cc:	8d6cd83a 	srl	r22,r17,r21
   4a0d0:	3922b03a 	or	r17,r7,r4
   4a0d4:	882ed43a 	srli	r23,r17,16
   4a0d8:	8564d83a 	srl	r18,r16,r21
   4a0dc:	b009883a 	mov	r4,r22
   4a0e0:	b80b883a 	mov	r5,r23
   4a0e4:	44a4b03a 	or	r18,r8,r18
   4a0e8:	3526983a 	sll	r19,r6,r20
   4a0ec:	00407280 	call	40728 <__umodsi3>
   4a0f0:	b009883a 	mov	r4,r22
   4a0f4:	b80b883a 	mov	r5,r23
   4a0f8:	1039883a 	mov	fp,r2
   4a0fc:	00407200 	call	40720 <__udivsi3>
   4a100:	102d883a 	mov	r22,r2
   4a104:	8a3fffcc 	andi	r8,r17,65535
   4a108:	e004943a 	slli	r2,fp,16
   4a10c:	900cd43a 	srli	r6,r18,16
   4a110:	b239383a 	mul	fp,r22,r8
   4a114:	8520983a 	sll	r16,r16,r20
   4a118:	118ab03a 	or	r5,r2,r6
   4a11c:	2f00042e 	bgeu	r5,fp,4a130 <__umoddi3+0x35c>
   4a120:	2c4b883a 	add	r5,r5,r17
   4a124:	b0bfffc4 	addi	r2,r22,-1
   4a128:	2c40822e 	bgeu	r5,r17,4a334 <__umoddi3+0x560>
   4a12c:	102d883a 	mov	r22,r2
   4a130:	2f39c83a 	sub	fp,r5,fp
   4a134:	e009883a 	mov	r4,fp
   4a138:	b80b883a 	mov	r5,r23
   4a13c:	da000115 	stw	r8,4(sp)
   4a140:	00407280 	call	40728 <__umodsi3>
   4a144:	e009883a 	mov	r4,fp
   4a148:	b80b883a 	mov	r5,r23
   4a14c:	d8800015 	stw	r2,0(sp)
   4a150:	00407200 	call	40720 <__udivsi3>
   4a154:	d9800017 	ldw	r6,0(sp)
   4a158:	da000117 	ldw	r8,4(sp)
   4a15c:	94bfffcc 	andi	r18,r18,65535
   4a160:	300c943a 	slli	r6,r6,16
   4a164:	1209383a 	mul	r4,r2,r8
   4a168:	3490b03a 	or	r8,r6,r18
   4a16c:	4100042e 	bgeu	r8,r4,4a180 <__umoddi3+0x3ac>
   4a170:	4451883a 	add	r8,r8,r17
   4a174:	10ffffc4 	addi	r3,r2,-1
   4a178:	44406a2e 	bgeu	r8,r17,4a324 <__umoddi3+0x550>
   4a17c:	1805883a 	mov	r2,r3
   4a180:	b012943a 	slli	r9,r22,16
   4a184:	9abfffcc 	andi	r10,r19,65535
   4a188:	980ed43a 	srli	r7,r19,16
   4a18c:	124ab03a 	or	r5,r2,r9
   4a190:	2a7fffcc 	andi	r9,r5,65535
   4a194:	280ad43a 	srli	r5,r5,16
   4a198:	4a8d383a 	mul	r6,r9,r10
   4a19c:	49d3383a 	mul	r9,r9,r7
   4a1a0:	2a95383a 	mul	r10,r5,r10
   4a1a4:	3004d43a 	srli	r2,r6,16
   4a1a8:	4111c83a 	sub	r8,r8,r4
   4a1ac:	5253883a 	add	r9,r10,r9
   4a1b0:	4893883a 	add	r9,r9,r2
   4a1b4:	29cb383a 	mul	r5,r5,r7
   4a1b8:	4a80022e 	bgeu	r9,r10,4a1c4 <__umoddi3+0x3f0>
   4a1bc:	00800074 	movhi	r2,1
   4a1c0:	288b883a 	add	r5,r5,r2
   4a1c4:	4808d43a 	srli	r4,r9,16
   4a1c8:	4812943a 	slli	r9,r9,16
   4a1cc:	31bfffcc 	andi	r6,r6,65535
   4a1d0:	290b883a 	add	r5,r5,r4
   4a1d4:	498d883a 	add	r6,r9,r6
   4a1d8:	41403a36 	bltu	r8,r5,4a2c4 <__umoddi3+0x4f0>
   4a1dc:	41405d26 	beq	r8,r5,4a354 <__umoddi3+0x580>
   4a1e0:	4149c83a 	sub	r4,r8,r5
   4a1e4:	300f883a 	mov	r7,r6
   4a1e8:	81cfc83a 	sub	r7,r16,r7
   4a1ec:	81c7803a 	cmpltu	r3,r16,r7
   4a1f0:	20c7c83a 	sub	r3,r4,r3
   4a1f4:	1d44983a 	sll	r2,r3,r21
   4a1f8:	3d0ed83a 	srl	r7,r7,r20
   4a1fc:	1d06d83a 	srl	r3,r3,r20
   4a200:	11c4b03a 	or	r2,r2,r7
   4a204:	003f9206 	br	4a050 <__alt_data_end+0xfffd9310>
   4a208:	0025883a 	mov	r18,zero
   4a20c:	003f1806 	br	49e70 <__alt_data_end+0xfffd9130>
   4a210:	98a6983a 	sll	r19,r19,r2
   4a214:	88e8d83a 	srl	r20,r17,r3
   4a218:	80c6d83a 	srl	r3,r16,r3
   4a21c:	982cd43a 	srli	r22,r19,16
   4a220:	88a2983a 	sll	r17,r17,r2
   4a224:	a009883a 	mov	r4,r20
   4a228:	b00b883a 	mov	r5,r22
   4a22c:	88eab03a 	or	r21,r17,r3
   4a230:	1025883a 	mov	r18,r2
   4a234:	00407280 	call	40728 <__umodsi3>
   4a238:	a009883a 	mov	r4,r20
   4a23c:	b00b883a 	mov	r5,r22
   4a240:	1023883a 	mov	r17,r2
   4a244:	00407200 	call	40720 <__udivsi3>
   4a248:	9f3fffcc 	andi	fp,r19,65535
   4a24c:	8822943a 	slli	r17,r17,16
   4a250:	a80ad43a 	srli	r5,r21,16
   4a254:	1705383a 	mul	r2,r2,fp
   4a258:	84a8983a 	sll	r20,r16,r18
   4a25c:	8948b03a 	or	r4,r17,r5
   4a260:	2080042e 	bgeu	r4,r2,4a274 <__umoddi3+0x4a0>
   4a264:	24c9883a 	add	r4,r4,r19
   4a268:	24c00236 	bltu	r4,r19,4a274 <__umoddi3+0x4a0>
   4a26c:	2080012e 	bgeu	r4,r2,4a274 <__umoddi3+0x4a0>
   4a270:	24c9883a 	add	r4,r4,r19
   4a274:	20afc83a 	sub	r23,r4,r2
   4a278:	b809883a 	mov	r4,r23
   4a27c:	b00b883a 	mov	r5,r22
   4a280:	00407280 	call	40728 <__umodsi3>
   4a284:	1023883a 	mov	r17,r2
   4a288:	b809883a 	mov	r4,r23
   4a28c:	b00b883a 	mov	r5,r22
   4a290:	00407200 	call	40720 <__udivsi3>
   4a294:	8822943a 	slli	r17,r17,16
   4a298:	1705383a 	mul	r2,r2,fp
   4a29c:	a93fffcc 	andi	r4,r21,65535
   4a2a0:	8908b03a 	or	r4,r17,r4
   4a2a4:	2080042e 	bgeu	r4,r2,4a2b8 <__umoddi3+0x4e4>
   4a2a8:	24c9883a 	add	r4,r4,r19
   4a2ac:	24c00236 	bltu	r4,r19,4a2b8 <__umoddi3+0x4e4>
   4a2b0:	2080012e 	bgeu	r4,r2,4a2b8 <__umoddi3+0x4e4>
   4a2b4:	24c9883a 	add	r4,r4,r19
   4a2b8:	20a3c83a 	sub	r17,r4,r2
   4a2bc:	e021883a 	mov	r16,fp
   4a2c0:	003f3d06 	br	49fb8 <__alt_data_end+0xfffd9278>
   4a2c4:	34cfc83a 	sub	r7,r6,r19
   4a2c8:	2c4bc83a 	sub	r5,r5,r17
   4a2cc:	31cd803a 	cmpltu	r6,r6,r7
   4a2d0:	298dc83a 	sub	r6,r5,r6
   4a2d4:	4189c83a 	sub	r4,r8,r6
   4a2d8:	003fc306 	br	4a1e8 <__alt_data_end+0xfffd94a8>
   4a2dc:	000b883a 	mov	r5,zero
   4a2e0:	002b883a 	mov	r21,zero
   4a2e4:	003f0a06 	br	49f10 <__alt_data_end+0xfffd91d0>
   4a2e8:	01400404 	movi	r5,16
   4a2ec:	282b883a 	mov	r21,r5
   4a2f0:	003f0706 	br	49f10 <__alt_data_end+0xfffd91d0>
   4a2f4:	01400404 	movi	r5,16
   4a2f8:	2805883a 	mov	r2,r5
   4a2fc:	003ecd06 	br	49e34 <__alt_data_end+0xfffd90f4>
   4a300:	0005883a 	mov	r2,zero
   4a304:	0007883a 	mov	r3,zero
   4a308:	003f1e06 	br	49f84 <__alt_data_end+0xfffd9244>
   4a30c:	00800404 	movi	r2,16
   4a310:	1007883a 	mov	r3,r2
   4a314:	003f1b06 	br	49f84 <__alt_data_end+0xfffd9244>
   4a318:	000b883a 	mov	r5,zero
   4a31c:	0005883a 	mov	r2,zero
   4a320:	003ec406 	br	49e34 <__alt_data_end+0xfffd90f4>
   4a324:	413f952e 	bgeu	r8,r4,4a17c <__alt_data_end+0xfffd943c>
   4a328:	10bfff84 	addi	r2,r2,-2
   4a32c:	4451883a 	add	r8,r8,r17
   4a330:	003f9306 	br	4a180 <__alt_data_end+0xfffd9440>
   4a334:	2f3f7d2e 	bgeu	r5,fp,4a12c <__alt_data_end+0xfffd93ec>
   4a338:	b5bfff84 	addi	r22,r22,-2
   4a33c:	2c4b883a 	add	r5,r5,r17
   4a340:	003f7b06 	br	4a130 <__alt_data_end+0xfffd93f0>
   4a344:	34cd883a 	add	r6,r6,r19
   4a348:	003f2a06 	br	49ff4 <__alt_data_end+0xfffd92b4>
   4a34c:	8005883a 	mov	r2,r16
   4a350:	003efe06 	br	49f4c <__alt_data_end+0xfffd920c>
   4a354:	81bfdb36 	bltu	r16,r6,4a2c4 <__alt_data_end+0xfffd9584>
   4a358:	300f883a 	mov	r7,r6
   4a35c:	0009883a 	mov	r4,zero
   4a360:	003fa106 	br	4a1e8 <__alt_data_end+0xfffd94a8>

0004a364 <__adddf3>:
   4a364:	02000434 	movhi	r8,16
   4a368:	423fffc4 	addi	r8,r8,-1
   4a36c:	defffb04 	addi	sp,sp,-20
   4a370:	2a12703a 	and	r9,r5,r8
   4a374:	2806d7fa 	srli	r3,r5,31
   4a378:	3a10703a 	and	r8,r7,r8
   4a37c:	3804d53a 	srli	r2,r7,20
   4a380:	3014d77a 	srli	r10,r6,29
   4a384:	dc000015 	stw	r16,0(sp)
   4a388:	481290fa 	slli	r9,r9,3
   4a38c:	2820d53a 	srli	r16,r5,20
   4a390:	401090fa 	slli	r8,r8,3
   4a394:	200ad77a 	srli	r5,r4,29
   4a398:	380ed7fa 	srli	r7,r7,31
   4a39c:	dc800215 	stw	r18,8(sp)
   4a3a0:	dc400115 	stw	r17,4(sp)
   4a3a4:	dfc00415 	stw	ra,16(sp)
   4a3a8:	dcc00315 	stw	r19,12(sp)
   4a3ac:	1c803fcc 	andi	r18,r3,255
   4a3b0:	8401ffcc 	andi	r16,r16,2047
   4a3b4:	494ab03a 	or	r5,r9,r5
   4a3b8:	202290fa 	slli	r17,r4,3
   4a3bc:	1081ffcc 	andi	r2,r2,2047
   4a3c0:	4290b03a 	or	r8,r8,r10
   4a3c4:	300c90fa 	slli	r6,r6,3
   4a3c8:	91c07026 	beq	r18,r7,4a58c <__adddf3+0x228>
   4a3cc:	8087c83a 	sub	r3,r16,r2
   4a3d0:	00c0b30e 	bge	zero,r3,4a6a0 <__adddf3+0x33c>
   4a3d4:	10002a1e 	bne	r2,zero,4a480 <__adddf3+0x11c>
   4a3d8:	4184b03a 	or	r2,r8,r6
   4a3dc:	1000991e 	bne	r2,zero,4a644 <__adddf3+0x2e0>
   4a3e0:	888001cc 	andi	r2,r17,7
   4a3e4:	10005b26 	beq	r2,zero,4a554 <__adddf3+0x1f0>
   4a3e8:	88c003cc 	andi	r3,r17,15
   4a3ec:	00800104 	movi	r2,4
   4a3f0:	18805826 	beq	r3,r2,4a554 <__adddf3+0x1f0>
   4a3f4:	89800104 	addi	r6,r17,4
   4a3f8:	3463803a 	cmpltu	r17,r6,r17
   4a3fc:	2c4b883a 	add	r5,r5,r17
   4a400:	2880202c 	andhi	r2,r5,128
   4a404:	9007883a 	mov	r3,r18
   4a408:	3023883a 	mov	r17,r6
   4a40c:	10005426 	beq	r2,zero,4a560 <__adddf3+0x1fc>
   4a410:	84000044 	addi	r16,r16,1
   4a414:	0081ffc4 	movi	r2,2047
   4a418:	8080c126 	beq	r16,r2,4a720 <__adddf3+0x3bc>
   4a41c:	013fe034 	movhi	r4,65408
   4a420:	213fffc4 	addi	r4,r4,-1
   4a424:	290a703a 	and	r5,r5,r4
   4a428:	2804977a 	slli	r2,r5,29
   4a42c:	280a927a 	slli	r5,r5,9
   4a430:	8822d0fa 	srli	r17,r17,3
   4a434:	8401ffcc 	andi	r16,r16,2047
   4a438:	2808d33a 	srli	r4,r5,12
   4a43c:	1444b03a 	or	r2,r2,r17
   4a440:	8401ffcc 	andi	r16,r16,2047
   4a444:	800a953a 	slli	r5,r16,20
   4a448:	18c03fcc 	andi	r3,r3,255
   4a44c:	04000434 	movhi	r16,16
   4a450:	180697fa 	slli	r3,r3,31
   4a454:	843fffc4 	addi	r16,r16,-1
   4a458:	2420703a 	and	r16,r4,r16
   4a45c:	8160b03a 	or	r16,r16,r5
   4a460:	80c6b03a 	or	r3,r16,r3
   4a464:	dfc00417 	ldw	ra,16(sp)
   4a468:	dcc00317 	ldw	r19,12(sp)
   4a46c:	dc800217 	ldw	r18,8(sp)
   4a470:	dc400117 	ldw	r17,4(sp)
   4a474:	dc000017 	ldw	r16,0(sp)
   4a478:	dec00504 	addi	sp,sp,20
   4a47c:	f800283a 	ret
   4a480:	0081ffc4 	movi	r2,2047
   4a484:	80bfd626 	beq	r16,r2,4a3e0 <__alt_data_end+0xfffd96a0>
   4a488:	42002034 	orhi	r8,r8,128
   4a48c:	00800e04 	movi	r2,56
   4a490:	10c0a616 	blt	r2,r3,4a72c <__adddf3+0x3c8>
   4a494:	008007c4 	movi	r2,31
   4a498:	10c0c916 	blt	r2,r3,4a7c0 <__adddf3+0x45c>
   4a49c:	00800804 	movi	r2,32
   4a4a0:	10c5c83a 	sub	r2,r2,r3
   4a4a4:	408e983a 	sll	r7,r8,r2
   4a4a8:	30c8d83a 	srl	r4,r6,r3
   4a4ac:	3084983a 	sll	r2,r6,r2
   4a4b0:	40c6d83a 	srl	r3,r8,r3
   4a4b4:	390cb03a 	or	r6,r7,r4
   4a4b8:	1004c03a 	cmpne	r2,r2,zero
   4a4bc:	308cb03a 	or	r6,r6,r2
   4a4c0:	898dc83a 	sub	r6,r17,r6
   4a4c4:	89a3803a 	cmpltu	r17,r17,r6
   4a4c8:	28cbc83a 	sub	r5,r5,r3
   4a4cc:	2c4bc83a 	sub	r5,r5,r17
   4a4d0:	3023883a 	mov	r17,r6
   4a4d4:	2880202c 	andhi	r2,r5,128
   4a4d8:	10006d26 	beq	r2,zero,4a690 <__adddf3+0x32c>
   4a4dc:	04c02034 	movhi	r19,128
   4a4e0:	9cffffc4 	addi	r19,r19,-1
   4a4e4:	2ce6703a 	and	r19,r5,r19
   4a4e8:	98007e26 	beq	r19,zero,4a6e4 <__adddf3+0x380>
   4a4ec:	9809883a 	mov	r4,r19
   4a4f0:	004c9000 	call	4c900 <__clzsi2>
   4a4f4:	10fffe04 	addi	r3,r2,-8
   4a4f8:	010007c4 	movi	r4,31
   4a4fc:	20c07f16 	blt	r4,r3,4a6fc <__adddf3+0x398>
   4a500:	01400a04 	movi	r5,40
   4a504:	2885c83a 	sub	r2,r5,r2
   4a508:	888ad83a 	srl	r5,r17,r2
   4a50c:	98e6983a 	sll	r19,r19,r3
   4a510:	88e2983a 	sll	r17,r17,r3
   4a514:	2ce6b03a 	or	r19,r5,r19
   4a518:	1c007c16 	blt	r3,r16,4a70c <__adddf3+0x3a8>
   4a51c:	1c21c83a 	sub	r16,r3,r16
   4a520:	81400044 	addi	r5,r16,1
   4a524:	00c007c4 	movi	r3,31
   4a528:	19409816 	blt	r3,r5,4a78c <__adddf3+0x428>
   4a52c:	1c21c83a 	sub	r16,r3,r16
   4a530:	8c08983a 	sll	r4,r17,r16
   4a534:	8946d83a 	srl	r3,r17,r5
   4a538:	9c20983a 	sll	r16,r19,r16
   4a53c:	2008c03a 	cmpne	r4,r4,zero
   4a540:	994ad83a 	srl	r5,r19,r5
   4a544:	1c06b03a 	or	r3,r3,r16
   4a548:	1922b03a 	or	r17,r3,r4
   4a54c:	0021883a 	mov	r16,zero
   4a550:	003fa306 	br	4a3e0 <__alt_data_end+0xfffd96a0>
   4a554:	2880202c 	andhi	r2,r5,128
   4a558:	9007883a 	mov	r3,r18
   4a55c:	103fac1e 	bne	r2,zero,4a410 <__alt_data_end+0xfffd96d0>
   4a560:	2804977a 	slli	r2,r5,29
   4a564:	8822d0fa 	srli	r17,r17,3
   4a568:	0101ffc4 	movi	r4,2047
   4a56c:	280ad0fa 	srli	r5,r5,3
   4a570:	1444b03a 	or	r2,r2,r17
   4a574:	81002c26 	beq	r16,r4,4a628 <__adddf3+0x2c4>
   4a578:	8120703a 	and	r16,r16,r4
   4a57c:	01000434 	movhi	r4,16
   4a580:	213fffc4 	addi	r4,r4,-1
   4a584:	2908703a 	and	r4,r5,r4
   4a588:	003fad06 	br	4a440 <__alt_data_end+0xfffd9700>
   4a58c:	8089c83a 	sub	r4,r16,r2
   4a590:	01006a0e 	bge	zero,r4,4a73c <__adddf3+0x3d8>
   4a594:	10003326 	beq	r2,zero,4a664 <__adddf3+0x300>
   4a598:	0081ffc4 	movi	r2,2047
   4a59c:	80bf9026 	beq	r16,r2,4a3e0 <__alt_data_end+0xfffd96a0>
   4a5a0:	42002034 	orhi	r8,r8,128
   4a5a4:	00800e04 	movi	r2,56
   4a5a8:	1100b116 	blt	r2,r4,4a870 <__adddf3+0x50c>
   4a5ac:	008007c4 	movi	r2,31
   4a5b0:	1100e216 	blt	r2,r4,4a93c <__adddf3+0x5d8>
   4a5b4:	00800804 	movi	r2,32
   4a5b8:	1105c83a 	sub	r2,r2,r4
   4a5bc:	4092983a 	sll	r9,r8,r2
   4a5c0:	310ed83a 	srl	r7,r6,r4
   4a5c4:	3084983a 	sll	r2,r6,r2
   4a5c8:	4110d83a 	srl	r8,r8,r4
   4a5cc:	49ccb03a 	or	r6,r9,r7
   4a5d0:	1004c03a 	cmpne	r2,r2,zero
   4a5d4:	308cb03a 	or	r6,r6,r2
   4a5d8:	344d883a 	add	r6,r6,r17
   4a5dc:	3463803a 	cmpltu	r17,r6,r17
   4a5e0:	414b883a 	add	r5,r8,r5
   4a5e4:	2c4b883a 	add	r5,r5,r17
   4a5e8:	3023883a 	mov	r17,r6
   4a5ec:	2880202c 	andhi	r2,r5,128
   4a5f0:	10002726 	beq	r2,zero,4a690 <__adddf3+0x32c>
   4a5f4:	84000044 	addi	r16,r16,1
   4a5f8:	0081ffc4 	movi	r2,2047
   4a5fc:	8080ae26 	beq	r16,r2,4a8b8 <__adddf3+0x554>
   4a600:	00bfe034 	movhi	r2,65408
   4a604:	10bfffc4 	addi	r2,r2,-1
   4a608:	288a703a 	and	r5,r5,r2
   4a60c:	880cd07a 	srli	r6,r17,1
   4a610:	280897fa 	slli	r4,r5,31
   4a614:	88c0004c 	andi	r3,r17,1
   4a618:	30e2b03a 	or	r17,r6,r3
   4a61c:	280ad07a 	srli	r5,r5,1
   4a620:	8922b03a 	or	r17,r17,r4
   4a624:	003f6e06 	br	4a3e0 <__alt_data_end+0xfffd96a0>
   4a628:	1148b03a 	or	r4,r2,r5
   4a62c:	20003c26 	beq	r4,zero,4a720 <__adddf3+0x3bc>
   4a630:	29000234 	orhi	r4,r5,8
   4a634:	01400434 	movhi	r5,16
   4a638:	297fffc4 	addi	r5,r5,-1
   4a63c:	2148703a 	and	r4,r4,r5
   4a640:	003f7f06 	br	4a440 <__alt_data_end+0xfffd9700>
   4a644:	18ffffc4 	addi	r3,r3,-1
   4a648:	18004d1e 	bne	r3,zero,4a780 <__adddf3+0x41c>
   4a64c:	898dc83a 	sub	r6,r17,r6
   4a650:	89a3803a 	cmpltu	r17,r17,r6
   4a654:	2a0bc83a 	sub	r5,r5,r8
   4a658:	2c4bc83a 	sub	r5,r5,r17
   4a65c:	3023883a 	mov	r17,r6
   4a660:	003f9c06 	br	4a4d4 <__alt_data_end+0xfffd9794>
   4a664:	4184b03a 	or	r2,r8,r6
   4a668:	103f5d26 	beq	r2,zero,4a3e0 <__alt_data_end+0xfffd96a0>
   4a66c:	213fffc4 	addi	r4,r4,-1
   4a670:	203fd926 	beq	r4,zero,4a5d8 <__alt_data_end+0xfffd9898>
   4a674:	0081ffc4 	movi	r2,2047
   4a678:	80bfca1e 	bne	r16,r2,4a5a4 <__alt_data_end+0xfffd9864>
   4a67c:	003f5806 	br	4a3e0 <__alt_data_end+0xfffd96a0>
   4a680:	10c8b03a 	or	r4,r2,r3
   4a684:	20008b26 	beq	r4,zero,4a8b4 <__adddf3+0x550>
   4a688:	100b883a 	mov	r5,r2
   4a68c:	1823883a 	mov	r17,r3
   4a690:	888001cc 	andi	r2,r17,7
   4a694:	103f541e 	bne	r2,zero,4a3e8 <__alt_data_end+0xfffd96a8>
   4a698:	9007883a 	mov	r3,r18
   4a69c:	003fb006 	br	4a560 <__alt_data_end+0xfffd9820>
   4a6a0:	1800531e 	bne	r3,zero,4a7f0 <__adddf3+0x48c>
   4a6a4:	80800044 	addi	r2,r16,1
   4a6a8:	1081ffcc 	andi	r2,r2,2047
   4a6ac:	00c00044 	movi	r3,1
   4a6b0:	1880990e 	bge	r3,r2,4a918 <__adddf3+0x5b4>
   4a6b4:	8985c83a 	sub	r2,r17,r6
   4a6b8:	8887803a 	cmpltu	r3,r17,r2
   4a6bc:	2a27c83a 	sub	r19,r5,r8
   4a6c0:	98e7c83a 	sub	r19,r19,r3
   4a6c4:	98c0202c 	andhi	r3,r19,128
   4a6c8:	18006226 	beq	r3,zero,4a854 <__adddf3+0x4f0>
   4a6cc:	3463c83a 	sub	r17,r6,r17
   4a6d0:	4151c83a 	sub	r8,r8,r5
   4a6d4:	344d803a 	cmpltu	r6,r6,r17
   4a6d8:	41a7c83a 	sub	r19,r8,r6
   4a6dc:	3825883a 	mov	r18,r7
   4a6e0:	983f821e 	bne	r19,zero,4a4ec <__alt_data_end+0xfffd97ac>
   4a6e4:	8809883a 	mov	r4,r17
   4a6e8:	004c9000 	call	4c900 <__clzsi2>
   4a6ec:	10800804 	addi	r2,r2,32
   4a6f0:	10fffe04 	addi	r3,r2,-8
   4a6f4:	010007c4 	movi	r4,31
   4a6f8:	20ff810e 	bge	r4,r3,4a500 <__alt_data_end+0xfffd97c0>
   4a6fc:	14fff604 	addi	r19,r2,-40
   4a700:	8ce6983a 	sll	r19,r17,r19
   4a704:	0023883a 	mov	r17,zero
   4a708:	1c3f840e 	bge	r3,r16,4a51c <__alt_data_end+0xfffd97dc>
   4a70c:	017fe034 	movhi	r5,65408
   4a710:	297fffc4 	addi	r5,r5,-1
   4a714:	80e1c83a 	sub	r16,r16,r3
   4a718:	994a703a 	and	r5,r19,r5
   4a71c:	003f3006 	br	4a3e0 <__alt_data_end+0xfffd96a0>
   4a720:	0009883a 	mov	r4,zero
   4a724:	0005883a 	mov	r2,zero
   4a728:	003f4506 	br	4a440 <__alt_data_end+0xfffd9700>
   4a72c:	418cb03a 	or	r6,r8,r6
   4a730:	300cc03a 	cmpne	r6,r6,zero
   4a734:	0007883a 	mov	r3,zero
   4a738:	003f6106 	br	4a4c0 <__alt_data_end+0xfffd9780>
   4a73c:	2000921e 	bne	r4,zero,4a988 <__adddf3+0x624>
   4a740:	80800044 	addi	r2,r16,1
   4a744:	11c1ffcc 	andi	r7,r2,2047
   4a748:	01000044 	movi	r4,1
   4a74c:	21c0610e 	bge	r4,r7,4a8d4 <__adddf3+0x570>
   4a750:	0101ffc4 	movi	r4,2047
   4a754:	1100a326 	beq	r2,r4,4a9e4 <__adddf3+0x680>
   4a758:	344d883a 	add	r6,r6,r17
   4a75c:	3463803a 	cmpltu	r17,r6,r17
   4a760:	414b883a 	add	r5,r8,r5
   4a764:	2c4b883a 	add	r5,r5,r17
   4a768:	282297fa 	slli	r17,r5,31
   4a76c:	300cd07a 	srli	r6,r6,1
   4a770:	280ad07a 	srli	r5,r5,1
   4a774:	1021883a 	mov	r16,r2
   4a778:	89a2b03a 	or	r17,r17,r6
   4a77c:	003f1806 	br	4a3e0 <__alt_data_end+0xfffd96a0>
   4a780:	0081ffc4 	movi	r2,2047
   4a784:	80bf411e 	bne	r16,r2,4a48c <__alt_data_end+0xfffd974c>
   4a788:	003f1506 	br	4a3e0 <__alt_data_end+0xfffd96a0>
   4a78c:	80bff844 	addi	r2,r16,-31
   4a790:	00c00804 	movi	r3,32
   4a794:	9884d83a 	srl	r2,r19,r2
   4a798:	28c04a26 	beq	r5,r3,4a8c4 <__adddf3+0x560>
   4a79c:	00c00fc4 	movi	r3,63
   4a7a0:	1c21c83a 	sub	r16,r3,r16
   4a7a4:	9c26983a 	sll	r19,r19,r16
   4a7a8:	9c62b03a 	or	r17,r19,r17
   4a7ac:	8822c03a 	cmpne	r17,r17,zero
   4a7b0:	88a2b03a 	or	r17,r17,r2
   4a7b4:	000b883a 	mov	r5,zero
   4a7b8:	0021883a 	mov	r16,zero
   4a7bc:	003fb406 	br	4a690 <__alt_data_end+0xfffd9950>
   4a7c0:	18bff804 	addi	r2,r3,-32
   4a7c4:	01000804 	movi	r4,32
   4a7c8:	4084d83a 	srl	r2,r8,r2
   4a7cc:	19003f26 	beq	r3,r4,4a8cc <__adddf3+0x568>
   4a7d0:	01001004 	movi	r4,64
   4a7d4:	20c7c83a 	sub	r3,r4,r3
   4a7d8:	40d0983a 	sll	r8,r8,r3
   4a7dc:	418cb03a 	or	r6,r8,r6
   4a7e0:	300cc03a 	cmpne	r6,r6,zero
   4a7e4:	308cb03a 	or	r6,r6,r2
   4a7e8:	0007883a 	mov	r3,zero
   4a7ec:	003f3406 	br	4a4c0 <__alt_data_end+0xfffd9780>
   4a7f0:	80002326 	beq	r16,zero,4a880 <__adddf3+0x51c>
   4a7f4:	0101ffc4 	movi	r4,2047
   4a7f8:	11005e26 	beq	r2,r4,4a974 <__adddf3+0x610>
   4a7fc:	00c7c83a 	sub	r3,zero,r3
   4a800:	29402034 	orhi	r5,r5,128
   4a804:	01000e04 	movi	r4,56
   4a808:	20c07216 	blt	r4,r3,4a9d4 <__adddf3+0x670>
   4a80c:	010007c4 	movi	r4,31
   4a810:	20c0ce16 	blt	r4,r3,4ab4c <__adddf3+0x7e8>
   4a814:	01000804 	movi	r4,32
   4a818:	20c9c83a 	sub	r4,r4,r3
   4a81c:	2914983a 	sll	r10,r5,r4
   4a820:	88d2d83a 	srl	r9,r17,r3
   4a824:	8908983a 	sll	r4,r17,r4
   4a828:	28c6d83a 	srl	r3,r5,r3
   4a82c:	5262b03a 	or	r17,r10,r9
   4a830:	2008c03a 	cmpne	r4,r4,zero
   4a834:	8922b03a 	or	r17,r17,r4
   4a838:	3463c83a 	sub	r17,r6,r17
   4a83c:	40c7c83a 	sub	r3,r8,r3
   4a840:	344d803a 	cmpltu	r6,r6,r17
   4a844:	198bc83a 	sub	r5,r3,r6
   4a848:	1021883a 	mov	r16,r2
   4a84c:	3825883a 	mov	r18,r7
   4a850:	003f2006 	br	4a4d4 <__alt_data_end+0xfffd9794>
   4a854:	9886b03a 	or	r3,r19,r2
   4a858:	1800141e 	bne	r3,zero,4a8ac <__adddf3+0x548>
   4a85c:	0007883a 	mov	r3,zero
   4a860:	000b883a 	mov	r5,zero
   4a864:	0023883a 	mov	r17,zero
   4a868:	0021883a 	mov	r16,zero
   4a86c:	003f3c06 	br	4a560 <__alt_data_end+0xfffd9820>
   4a870:	418cb03a 	or	r6,r8,r6
   4a874:	300cc03a 	cmpne	r6,r6,zero
   4a878:	0011883a 	mov	r8,zero
   4a87c:	003f5606 	br	4a5d8 <__alt_data_end+0xfffd9898>
   4a880:	2c48b03a 	or	r4,r5,r17
   4a884:	20003b26 	beq	r4,zero,4a974 <__adddf3+0x610>
   4a888:	00c6303a 	nor	r3,zero,r3
   4a88c:	1800371e 	bne	r3,zero,4a96c <__adddf3+0x608>
   4a890:	3463c83a 	sub	r17,r6,r17
   4a894:	414bc83a 	sub	r5,r8,r5
   4a898:	344d803a 	cmpltu	r6,r6,r17
   4a89c:	298bc83a 	sub	r5,r5,r6
   4a8a0:	1021883a 	mov	r16,r2
   4a8a4:	3825883a 	mov	r18,r7
   4a8a8:	003f0a06 	br	4a4d4 <__alt_data_end+0xfffd9794>
   4a8ac:	1023883a 	mov	r17,r2
   4a8b0:	003f0d06 	br	4a4e8 <__alt_data_end+0xfffd97a8>
   4a8b4:	0007883a 	mov	r3,zero
   4a8b8:	000b883a 	mov	r5,zero
   4a8bc:	0023883a 	mov	r17,zero
   4a8c0:	003f2706 	br	4a560 <__alt_data_end+0xfffd9820>
   4a8c4:	0027883a 	mov	r19,zero
   4a8c8:	003fb706 	br	4a7a8 <__alt_data_end+0xfffd9a68>
   4a8cc:	0011883a 	mov	r8,zero
   4a8d0:	003fc206 	br	4a7dc <__alt_data_end+0xfffd9a9c>
   4a8d4:	2c44b03a 	or	r2,r5,r17
   4a8d8:	8000871e 	bne	r16,zero,4aaf8 <__adddf3+0x794>
   4a8dc:	1000b126 	beq	r2,zero,4aba4 <__adddf3+0x840>
   4a8e0:	4184b03a 	or	r2,r8,r6
   4a8e4:	103ebe26 	beq	r2,zero,4a3e0 <__alt_data_end+0xfffd96a0>
   4a8e8:	3445883a 	add	r2,r6,r17
   4a8ec:	1463803a 	cmpltu	r17,r2,r17
   4a8f0:	414b883a 	add	r5,r8,r5
   4a8f4:	2c4b883a 	add	r5,r5,r17
   4a8f8:	28c0202c 	andhi	r3,r5,128
   4a8fc:	1023883a 	mov	r17,r2
   4a900:	183f6326 	beq	r3,zero,4a690 <__alt_data_end+0xfffd9950>
   4a904:	00bfe034 	movhi	r2,65408
   4a908:	10bfffc4 	addi	r2,r2,-1
   4a90c:	2021883a 	mov	r16,r4
   4a910:	288a703a 	and	r5,r5,r2
   4a914:	003eb206 	br	4a3e0 <__alt_data_end+0xfffd96a0>
   4a918:	2c44b03a 	or	r2,r5,r17
   4a91c:	8000251e 	bne	r16,zero,4a9b4 <__adddf3+0x650>
   4a920:	10004b1e 	bne	r2,zero,4aa50 <__adddf3+0x6ec>
   4a924:	4184b03a 	or	r2,r8,r6
   4a928:	103fe226 	beq	r2,zero,4a8b4 <__alt_data_end+0xfffd9b74>
   4a92c:	400b883a 	mov	r5,r8
   4a930:	3023883a 	mov	r17,r6
   4a934:	3825883a 	mov	r18,r7
   4a938:	003ea906 	br	4a3e0 <__alt_data_end+0xfffd96a0>
   4a93c:	20bff804 	addi	r2,r4,-32
   4a940:	01c00804 	movi	r7,32
   4a944:	4084d83a 	srl	r2,r8,r2
   4a948:	21c07e26 	beq	r4,r7,4ab44 <__adddf3+0x7e0>
   4a94c:	01c01004 	movi	r7,64
   4a950:	3909c83a 	sub	r4,r7,r4
   4a954:	4110983a 	sll	r8,r8,r4
   4a958:	418cb03a 	or	r6,r8,r6
   4a95c:	300cc03a 	cmpne	r6,r6,zero
   4a960:	308cb03a 	or	r6,r6,r2
   4a964:	0011883a 	mov	r8,zero
   4a968:	003f1b06 	br	4a5d8 <__alt_data_end+0xfffd9898>
   4a96c:	0101ffc4 	movi	r4,2047
   4a970:	113fa41e 	bne	r2,r4,4a804 <__alt_data_end+0xfffd9ac4>
   4a974:	400b883a 	mov	r5,r8
   4a978:	3023883a 	mov	r17,r6
   4a97c:	1021883a 	mov	r16,r2
   4a980:	3825883a 	mov	r18,r7
   4a984:	003e9606 	br	4a3e0 <__alt_data_end+0xfffd96a0>
   4a988:	80001a1e 	bne	r16,zero,4a9f4 <__adddf3+0x690>
   4a98c:	2c4eb03a 	or	r7,r5,r17
   4a990:	38005526 	beq	r7,zero,4aae8 <__adddf3+0x784>
   4a994:	0108303a 	nor	r4,zero,r4
   4a998:	2000511e 	bne	r4,zero,4aae0 <__adddf3+0x77c>
   4a99c:	89a3883a 	add	r17,r17,r6
   4a9a0:	414b883a 	add	r5,r8,r5
   4a9a4:	898d803a 	cmpltu	r6,r17,r6
   4a9a8:	298b883a 	add	r5,r5,r6
   4a9ac:	1021883a 	mov	r16,r2
   4a9b0:	003f0e06 	br	4a5ec <__alt_data_end+0xfffd98ac>
   4a9b4:	1000341e 	bne	r2,zero,4aa88 <__adddf3+0x724>
   4a9b8:	4184b03a 	or	r2,r8,r6
   4a9bc:	10006f26 	beq	r2,zero,4ab7c <__adddf3+0x818>
   4a9c0:	400b883a 	mov	r5,r8
   4a9c4:	3023883a 	mov	r17,r6
   4a9c8:	3825883a 	mov	r18,r7
   4a9cc:	0401ffc4 	movi	r16,2047
   4a9d0:	003e8306 	br	4a3e0 <__alt_data_end+0xfffd96a0>
   4a9d4:	2c62b03a 	or	r17,r5,r17
   4a9d8:	8822c03a 	cmpne	r17,r17,zero
   4a9dc:	0007883a 	mov	r3,zero
   4a9e0:	003f9506 	br	4a838 <__alt_data_end+0xfffd9af8>
   4a9e4:	1021883a 	mov	r16,r2
   4a9e8:	000b883a 	mov	r5,zero
   4a9ec:	0023883a 	mov	r17,zero
   4a9f0:	003edb06 	br	4a560 <__alt_data_end+0xfffd9820>
   4a9f4:	01c1ffc4 	movi	r7,2047
   4a9f8:	11c03b26 	beq	r2,r7,4aae8 <__adddf3+0x784>
   4a9fc:	0109c83a 	sub	r4,zero,r4
   4aa00:	29402034 	orhi	r5,r5,128
   4aa04:	01c00e04 	movi	r7,56
   4aa08:	39006216 	blt	r7,r4,4ab94 <__adddf3+0x830>
   4aa0c:	01c007c4 	movi	r7,31
   4aa10:	39006b16 	blt	r7,r4,4abc0 <__adddf3+0x85c>
   4aa14:	01c00804 	movi	r7,32
   4aa18:	390fc83a 	sub	r7,r7,r4
   4aa1c:	29d4983a 	sll	r10,r5,r7
   4aa20:	8912d83a 	srl	r9,r17,r4
   4aa24:	89ce983a 	sll	r7,r17,r7
   4aa28:	2908d83a 	srl	r4,r5,r4
   4aa2c:	5262b03a 	or	r17,r10,r9
   4aa30:	380ac03a 	cmpne	r5,r7,zero
   4aa34:	8962b03a 	or	r17,r17,r5
   4aa38:	89a3883a 	add	r17,r17,r6
   4aa3c:	2211883a 	add	r8,r4,r8
   4aa40:	898d803a 	cmpltu	r6,r17,r6
   4aa44:	418b883a 	add	r5,r8,r6
   4aa48:	1021883a 	mov	r16,r2
   4aa4c:	003ee706 	br	4a5ec <__alt_data_end+0xfffd98ac>
   4aa50:	4184b03a 	or	r2,r8,r6
   4aa54:	103e6226 	beq	r2,zero,4a3e0 <__alt_data_end+0xfffd96a0>
   4aa58:	8987c83a 	sub	r3,r17,r6
   4aa5c:	88c9803a 	cmpltu	r4,r17,r3
   4aa60:	2a05c83a 	sub	r2,r5,r8
   4aa64:	1105c83a 	sub	r2,r2,r4
   4aa68:	1100202c 	andhi	r4,r2,128
   4aa6c:	203f0426 	beq	r4,zero,4a680 <__alt_data_end+0xfffd9940>
   4aa70:	3463c83a 	sub	r17,r6,r17
   4aa74:	414bc83a 	sub	r5,r8,r5
   4aa78:	344d803a 	cmpltu	r6,r6,r17
   4aa7c:	298bc83a 	sub	r5,r5,r6
   4aa80:	3825883a 	mov	r18,r7
   4aa84:	003e5606 	br	4a3e0 <__alt_data_end+0xfffd96a0>
   4aa88:	4184b03a 	or	r2,r8,r6
   4aa8c:	10002b26 	beq	r2,zero,4ab3c <__adddf3+0x7d8>
   4aa90:	2804d0fa 	srli	r2,r5,3
   4aa94:	8822d0fa 	srli	r17,r17,3
   4aa98:	280a977a 	slli	r5,r5,29
   4aa9c:	10c0022c 	andhi	r3,r2,8
   4aaa0:	2c62b03a 	or	r17,r5,r17
   4aaa4:	18000826 	beq	r3,zero,4aac8 <__adddf3+0x764>
   4aaa8:	4008d0fa 	srli	r4,r8,3
   4aaac:	20c0022c 	andhi	r3,r4,8
   4aab0:	1800051e 	bne	r3,zero,4aac8 <__adddf3+0x764>
   4aab4:	300cd0fa 	srli	r6,r6,3
   4aab8:	4010977a 	slli	r8,r8,29
   4aabc:	2005883a 	mov	r2,r4
   4aac0:	3825883a 	mov	r18,r7
   4aac4:	41a2b03a 	or	r17,r8,r6
   4aac8:	880ad77a 	srli	r5,r17,29
   4aacc:	100490fa 	slli	r2,r2,3
   4aad0:	882290fa 	slli	r17,r17,3
   4aad4:	0401ffc4 	movi	r16,2047
   4aad8:	288ab03a 	or	r5,r5,r2
   4aadc:	003e4006 	br	4a3e0 <__alt_data_end+0xfffd96a0>
   4aae0:	01c1ffc4 	movi	r7,2047
   4aae4:	11ffc71e 	bne	r2,r7,4aa04 <__alt_data_end+0xfffd9cc4>
   4aae8:	400b883a 	mov	r5,r8
   4aaec:	3023883a 	mov	r17,r6
   4aaf0:	1021883a 	mov	r16,r2
   4aaf4:	003e3a06 	br	4a3e0 <__alt_data_end+0xfffd96a0>
   4aaf8:	10002d26 	beq	r2,zero,4abb0 <__adddf3+0x84c>
   4aafc:	4184b03a 	or	r2,r8,r6
   4ab00:	10000e26 	beq	r2,zero,4ab3c <__adddf3+0x7d8>
   4ab04:	2804d0fa 	srli	r2,r5,3
   4ab08:	8822d0fa 	srli	r17,r17,3
   4ab0c:	280a977a 	slli	r5,r5,29
   4ab10:	10c0022c 	andhi	r3,r2,8
   4ab14:	2c62b03a 	or	r17,r5,r17
   4ab18:	183feb26 	beq	r3,zero,4aac8 <__alt_data_end+0xfffd9d88>
   4ab1c:	4008d0fa 	srli	r4,r8,3
   4ab20:	20c0022c 	andhi	r3,r4,8
   4ab24:	183fe81e 	bne	r3,zero,4aac8 <__alt_data_end+0xfffd9d88>
   4ab28:	300cd0fa 	srli	r6,r6,3
   4ab2c:	4010977a 	slli	r8,r8,29
   4ab30:	2005883a 	mov	r2,r4
   4ab34:	41a2b03a 	or	r17,r8,r6
   4ab38:	003fe306 	br	4aac8 <__alt_data_end+0xfffd9d88>
   4ab3c:	0401ffc4 	movi	r16,2047
   4ab40:	003e2706 	br	4a3e0 <__alt_data_end+0xfffd96a0>
   4ab44:	0011883a 	mov	r8,zero
   4ab48:	003f8306 	br	4a958 <__alt_data_end+0xfffd9c18>
   4ab4c:	193ff804 	addi	r4,r3,-32
   4ab50:	02400804 	movi	r9,32
   4ab54:	2908d83a 	srl	r4,r5,r4
   4ab58:	1a402526 	beq	r3,r9,4abf0 <__adddf3+0x88c>
   4ab5c:	02401004 	movi	r9,64
   4ab60:	48c7c83a 	sub	r3,r9,r3
   4ab64:	28ca983a 	sll	r5,r5,r3
   4ab68:	2c62b03a 	or	r17,r5,r17
   4ab6c:	8822c03a 	cmpne	r17,r17,zero
   4ab70:	8922b03a 	or	r17,r17,r4
   4ab74:	0007883a 	mov	r3,zero
   4ab78:	003f2f06 	br	4a838 <__alt_data_end+0xfffd9af8>
   4ab7c:	01402034 	movhi	r5,128
   4ab80:	0007883a 	mov	r3,zero
   4ab84:	297fffc4 	addi	r5,r5,-1
   4ab88:	047ffe04 	movi	r17,-8
   4ab8c:	0401ffc4 	movi	r16,2047
   4ab90:	003e7306 	br	4a560 <__alt_data_end+0xfffd9820>
   4ab94:	2c62b03a 	or	r17,r5,r17
   4ab98:	8822c03a 	cmpne	r17,r17,zero
   4ab9c:	0009883a 	mov	r4,zero
   4aba0:	003fa506 	br	4aa38 <__alt_data_end+0xfffd9cf8>
   4aba4:	400b883a 	mov	r5,r8
   4aba8:	3023883a 	mov	r17,r6
   4abac:	003e0c06 	br	4a3e0 <__alt_data_end+0xfffd96a0>
   4abb0:	400b883a 	mov	r5,r8
   4abb4:	3023883a 	mov	r17,r6
   4abb8:	0401ffc4 	movi	r16,2047
   4abbc:	003e0806 	br	4a3e0 <__alt_data_end+0xfffd96a0>
   4abc0:	21fff804 	addi	r7,r4,-32
   4abc4:	02400804 	movi	r9,32
   4abc8:	29ced83a 	srl	r7,r5,r7
   4abcc:	22400a26 	beq	r4,r9,4abf8 <__adddf3+0x894>
   4abd0:	02401004 	movi	r9,64
   4abd4:	4909c83a 	sub	r4,r9,r4
   4abd8:	290a983a 	sll	r5,r5,r4
   4abdc:	2c62b03a 	or	r17,r5,r17
   4abe0:	8822c03a 	cmpne	r17,r17,zero
   4abe4:	89e2b03a 	or	r17,r17,r7
   4abe8:	0009883a 	mov	r4,zero
   4abec:	003f9206 	br	4aa38 <__alt_data_end+0xfffd9cf8>
   4abf0:	000b883a 	mov	r5,zero
   4abf4:	003fdc06 	br	4ab68 <__alt_data_end+0xfffd9e28>
   4abf8:	000b883a 	mov	r5,zero
   4abfc:	003ff706 	br	4abdc <__alt_data_end+0xfffd9e9c>

0004ac00 <__divdf3>:
   4ac00:	defff204 	addi	sp,sp,-56
   4ac04:	dd000815 	stw	r20,32(sp)
   4ac08:	2828d53a 	srli	r20,r5,20
   4ac0c:	dd800a15 	stw	r22,40(sp)
   4ac10:	282cd7fa 	srli	r22,r5,31
   4ac14:	dc000415 	stw	r16,16(sp)
   4ac18:	04000434 	movhi	r16,16
   4ac1c:	df000c15 	stw	fp,48(sp)
   4ac20:	dcc00715 	stw	r19,28(sp)
   4ac24:	dc800615 	stw	r18,24(sp)
   4ac28:	dc400515 	stw	r17,20(sp)
   4ac2c:	843fffc4 	addi	r16,r16,-1
   4ac30:	dfc00d15 	stw	ra,52(sp)
   4ac34:	ddc00b15 	stw	r23,44(sp)
   4ac38:	dd400915 	stw	r21,36(sp)
   4ac3c:	a501ffcc 	andi	r20,r20,2047
   4ac40:	2025883a 	mov	r18,r4
   4ac44:	2027883a 	mov	r19,r4
   4ac48:	2c22703a 	and	r17,r5,r16
   4ac4c:	b7003fcc 	andi	fp,r22,255
   4ac50:	a0005e26 	beq	r20,zero,4adcc <__divdf3+0x1cc>
   4ac54:	0081ffc4 	movi	r2,2047
   4ac58:	a0803526 	beq	r20,r2,4ad30 <__divdf3+0x130>
   4ac5c:	8c000434 	orhi	r16,r17,16
   4ac60:	2004d77a 	srli	r2,r4,29
   4ac64:	802090fa 	slli	r16,r16,3
   4ac68:	202690fa 	slli	r19,r4,3
   4ac6c:	a53f0044 	addi	r20,r20,-1023
   4ac70:	80a2b03a 	or	r17,r16,r2
   4ac74:	0025883a 	mov	r18,zero
   4ac78:	0011883a 	mov	r8,zero
   4ac7c:	380ad53a 	srli	r5,r7,20
   4ac80:	382ed7fa 	srli	r23,r7,31
   4ac84:	04000434 	movhi	r16,16
   4ac88:	843fffc4 	addi	r16,r16,-1
   4ac8c:	2941ffcc 	andi	r5,r5,2047
   4ac90:	302b883a 	mov	r21,r6
   4ac94:	3c20703a 	and	r16,r7,r16
   4ac98:	ba403fcc 	andi	r9,r23,255
   4ac9c:	28006726 	beq	r5,zero,4ae3c <__divdf3+0x23c>
   4aca0:	0081ffc4 	movi	r2,2047
   4aca4:	28805f26 	beq	r5,r2,4ae24 <__divdf3+0x224>
   4aca8:	84000434 	orhi	r16,r16,16
   4acac:	3004d77a 	srli	r2,r6,29
   4acb0:	802090fa 	slli	r16,r16,3
   4acb4:	302a90fa 	slli	r21,r6,3
   4acb8:	297f0044 	addi	r5,r5,-1023
   4acbc:	80a0b03a 	or	r16,r16,r2
   4acc0:	000f883a 	mov	r7,zero
   4acc4:	3c86b03a 	or	r3,r7,r18
   4acc8:	180690ba 	slli	r3,r3,2
   4accc:	00800174 	movhi	r2,5
   4acd0:	10ab3c04 	addi	r2,r2,-21264
   4acd4:	1887883a 	add	r3,r3,r2
   4acd8:	18c00017 	ldw	r3,0(r3)
   4acdc:	b5c8f03a 	xor	r4,r22,r23
   4ace0:	200d883a 	mov	r6,r4
   4ace4:	24803fcc 	andi	r18,r4,255
   4ace8:	a169c83a 	sub	r20,r20,r5
   4acec:	1800683a 	jmp	r3
   4acf0:	0004af38 	rdprs	zero,zero,4796
   4acf4:	0004ad68 	cmpgeui	zero,zero,4789
   4acf8:	0004aefc 	xorhi	zero,zero,4795
   4acfc:	0004ad4c 	andi	zero,zero,4789
   4ad00:	0004aefc 	xorhi	zero,zero,4795
   4ad04:	0004aed0 	cmplti	zero,zero,4795
   4ad08:	0004aefc 	xorhi	zero,zero,4795
   4ad0c:	0004ad4c 	andi	zero,zero,4789
   4ad10:	0004ad68 	cmpgeui	zero,zero,4789
   4ad14:	0004ad68 	cmpgeui	zero,zero,4789
   4ad18:	0004aed0 	cmplti	zero,zero,4795
   4ad1c:	0004ad4c 	andi	zero,zero,4789
   4ad20:	0004ad5c 	xori	zero,zero,4789
   4ad24:	0004ad5c 	xori	zero,zero,4789
   4ad28:	0004ad5c 	xori	zero,zero,4789
   4ad2c:	0004af0c 	andi	zero,zero,4796
   4ad30:	8904b03a 	or	r2,r17,r4
   4ad34:	1000631e 	bne	r2,zero,4aec4 <__divdf3+0x2c4>
   4ad38:	04800204 	movi	r18,8
   4ad3c:	0023883a 	mov	r17,zero
   4ad40:	0027883a 	mov	r19,zero
   4ad44:	02000084 	movi	r8,2
   4ad48:	003fcc06 	br	4ac7c <__alt_data_end+0xfffd9f3c>
   4ad4c:	8023883a 	mov	r17,r16
   4ad50:	a827883a 	mov	r19,r21
   4ad54:	4839883a 	mov	fp,r9
   4ad58:	3811883a 	mov	r8,r7
   4ad5c:	00800084 	movi	r2,2
   4ad60:	40812a1e 	bne	r8,r2,4b20c <__divdf3+0x60c>
   4ad64:	e025883a 	mov	r18,fp
   4ad68:	9180004c 	andi	r6,r18,1
   4ad6c:	0101ffc4 	movi	r4,2047
   4ad70:	000b883a 	mov	r5,zero
   4ad74:	0027883a 	mov	r19,zero
   4ad78:	2008953a 	slli	r4,r4,20
   4ad7c:	30c03fcc 	andi	r3,r6,255
   4ad80:	04000434 	movhi	r16,16
   4ad84:	180697fa 	slli	r3,r3,31
   4ad88:	843fffc4 	addi	r16,r16,-1
   4ad8c:	2c20703a 	and	r16,r5,r16
   4ad90:	8120b03a 	or	r16,r16,r4
   4ad94:	80c6b03a 	or	r3,r16,r3
   4ad98:	9805883a 	mov	r2,r19
   4ad9c:	dfc00d17 	ldw	ra,52(sp)
   4ada0:	df000c17 	ldw	fp,48(sp)
   4ada4:	ddc00b17 	ldw	r23,44(sp)
   4ada8:	dd800a17 	ldw	r22,40(sp)
   4adac:	dd400917 	ldw	r21,36(sp)
   4adb0:	dd000817 	ldw	r20,32(sp)
   4adb4:	dcc00717 	ldw	r19,28(sp)
   4adb8:	dc800617 	ldw	r18,24(sp)
   4adbc:	dc400517 	ldw	r17,20(sp)
   4adc0:	dc000417 	ldw	r16,16(sp)
   4adc4:	dec00e04 	addi	sp,sp,56
   4adc8:	f800283a 	ret
   4adcc:	8904b03a 	or	r2,r17,r4
   4add0:	10003726 	beq	r2,zero,4aeb0 <__divdf3+0x2b0>
   4add4:	88011c26 	beq	r17,zero,4b248 <__divdf3+0x648>
   4add8:	8809883a 	mov	r4,r17
   4addc:	d9800315 	stw	r6,12(sp)
   4ade0:	d9c00115 	stw	r7,4(sp)
   4ade4:	004c9000 	call	4c900 <__clzsi2>
   4ade8:	d9800317 	ldw	r6,12(sp)
   4adec:	d9c00117 	ldw	r7,4(sp)
   4adf0:	1007883a 	mov	r3,r2
   4adf4:	01000a04 	movi	r4,40
   4adf8:	1cfffe04 	addi	r19,r3,-8
   4adfc:	20c9c83a 	sub	r4,r4,r3
   4ae00:	8cca983a 	sll	r5,r17,r19
   4ae04:	9108d83a 	srl	r4,r18,r4
   4ae08:	94e6983a 	sll	r19,r18,r19
   4ae0c:	2162b03a 	or	r17,r4,r5
   4ae10:	053f0344 	movi	r20,-1011
   4ae14:	a0e9c83a 	sub	r20,r20,r3
   4ae18:	0025883a 	mov	r18,zero
   4ae1c:	0011883a 	mov	r8,zero
   4ae20:	003f9606 	br	4ac7c <__alt_data_end+0xfffd9f3c>
   4ae24:	8184b03a 	or	r2,r16,r6
   4ae28:	10001f1e 	bne	r2,zero,4aea8 <__divdf3+0x2a8>
   4ae2c:	0021883a 	mov	r16,zero
   4ae30:	002b883a 	mov	r21,zero
   4ae34:	01c00084 	movi	r7,2
   4ae38:	003fa206 	br	4acc4 <__alt_data_end+0xfffd9f84>
   4ae3c:	8184b03a 	or	r2,r16,r6
   4ae40:	10001526 	beq	r2,zero,4ae98 <__divdf3+0x298>
   4ae44:	80010c26 	beq	r16,zero,4b278 <__divdf3+0x678>
   4ae48:	8009883a 	mov	r4,r16
   4ae4c:	d9800315 	stw	r6,12(sp)
   4ae50:	da000215 	stw	r8,8(sp)
   4ae54:	da400015 	stw	r9,0(sp)
   4ae58:	004c9000 	call	4c900 <__clzsi2>
   4ae5c:	d9800317 	ldw	r6,12(sp)
   4ae60:	da000217 	ldw	r8,8(sp)
   4ae64:	da400017 	ldw	r9,0(sp)
   4ae68:	1007883a 	mov	r3,r2
   4ae6c:	01000a04 	movi	r4,40
   4ae70:	1d7ffe04 	addi	r21,r3,-8
   4ae74:	20c9c83a 	sub	r4,r4,r3
   4ae78:	8560983a 	sll	r16,r16,r21
   4ae7c:	3108d83a 	srl	r4,r6,r4
   4ae80:	356a983a 	sll	r21,r6,r21
   4ae84:	2420b03a 	or	r16,r4,r16
   4ae88:	017f0344 	movi	r5,-1011
   4ae8c:	28cbc83a 	sub	r5,r5,r3
   4ae90:	000f883a 	mov	r7,zero
   4ae94:	003f8b06 	br	4acc4 <__alt_data_end+0xfffd9f84>
   4ae98:	0021883a 	mov	r16,zero
   4ae9c:	002b883a 	mov	r21,zero
   4aea0:	01c00044 	movi	r7,1
   4aea4:	003f8706 	br	4acc4 <__alt_data_end+0xfffd9f84>
   4aea8:	01c000c4 	movi	r7,3
   4aeac:	003f8506 	br	4acc4 <__alt_data_end+0xfffd9f84>
   4aeb0:	04800104 	movi	r18,4
   4aeb4:	0023883a 	mov	r17,zero
   4aeb8:	0027883a 	mov	r19,zero
   4aebc:	02000044 	movi	r8,1
   4aec0:	003f6e06 	br	4ac7c <__alt_data_end+0xfffd9f3c>
   4aec4:	04800304 	movi	r18,12
   4aec8:	020000c4 	movi	r8,3
   4aecc:	003f6b06 	br	4ac7c <__alt_data_end+0xfffd9f3c>
   4aed0:	01400434 	movhi	r5,16
   4aed4:	000d883a 	mov	r6,zero
   4aed8:	297fffc4 	addi	r5,r5,-1
   4aedc:	04ffffc4 	movi	r19,-1
   4aee0:	0101ffc4 	movi	r4,2047
   4aee4:	003fa406 	br	4ad78 <__alt_data_end+0xfffda038>
   4aee8:	043f0084 	movi	r16,-1022
   4aeec:	8521c83a 	sub	r16,r16,r20
   4aef0:	00800e04 	movi	r2,56
   4aef4:	1401200e 	bge	r2,r16,4b378 <__divdf3+0x778>
   4aef8:	9180004c 	andi	r6,r18,1
   4aefc:	0009883a 	mov	r4,zero
   4af00:	000b883a 	mov	r5,zero
   4af04:	0027883a 	mov	r19,zero
   4af08:	003f9b06 	br	4ad78 <__alt_data_end+0xfffda038>
   4af0c:	8880022c 	andhi	r2,r17,8
   4af10:	1000c726 	beq	r2,zero,4b230 <__divdf3+0x630>
   4af14:	8080022c 	andhi	r2,r16,8
   4af18:	1000c51e 	bne	r2,zero,4b230 <__divdf3+0x630>
   4af1c:	00800434 	movhi	r2,16
   4af20:	81400234 	orhi	r5,r16,8
   4af24:	10bfffc4 	addi	r2,r2,-1
   4af28:	b80d883a 	mov	r6,r23
   4af2c:	288a703a 	and	r5,r5,r2
   4af30:	a827883a 	mov	r19,r21
   4af34:	003fea06 	br	4aee0 <__alt_data_end+0xfffda1a0>
   4af38:	8440ea36 	bltu	r16,r17,4b2e4 <__divdf3+0x6e4>
   4af3c:	8c00e826 	beq	r17,r16,4b2e0 <__divdf3+0x6e0>
   4af40:	a53fffc4 	addi	r20,r20,-1
   4af44:	882d883a 	mov	r22,r17
   4af48:	000d883a 	mov	r6,zero
   4af4c:	a804d63a 	srli	r2,r21,24
   4af50:	8020923a 	slli	r16,r16,8
   4af54:	b009883a 	mov	r4,r22
   4af58:	d9800315 	stw	r6,12(sp)
   4af5c:	1420b03a 	or	r16,r2,r16
   4af60:	802ed43a 	srli	r23,r16,16
   4af64:	873fffcc 	andi	fp,r16,65535
   4af68:	a82a923a 	slli	r21,r21,8
   4af6c:	b80b883a 	mov	r5,r23
   4af70:	00407200 	call	40720 <__udivsi3>
   4af74:	b009883a 	mov	r4,r22
   4af78:	b80b883a 	mov	r5,r23
   4af7c:	1023883a 	mov	r17,r2
   4af80:	00407280 	call	40728 <__umodsi3>
   4af84:	1004943a 	slli	r2,r2,16
   4af88:	9808d43a 	srli	r4,r19,16
   4af8c:	8f2d383a 	mul	r22,r17,fp
   4af90:	d9800317 	ldw	r6,12(sp)
   4af94:	1106b03a 	or	r3,r2,r4
   4af98:	1d80062e 	bgeu	r3,r22,4afb4 <__divdf3+0x3b4>
   4af9c:	1c07883a 	add	r3,r3,r16
   4afa0:	88bfffc4 	addi	r2,r17,-1
   4afa4:	1c00dc36 	bltu	r3,r16,4b318 <__divdf3+0x718>
   4afa8:	1d80db2e 	bgeu	r3,r22,4b318 <__divdf3+0x718>
   4afac:	8c7fff84 	addi	r17,r17,-2
   4afb0:	1c07883a 	add	r3,r3,r16
   4afb4:	1dadc83a 	sub	r22,r3,r22
   4afb8:	b009883a 	mov	r4,r22
   4afbc:	b80b883a 	mov	r5,r23
   4afc0:	d9800315 	stw	r6,12(sp)
   4afc4:	00407200 	call	40720 <__udivsi3>
   4afc8:	b009883a 	mov	r4,r22
   4afcc:	b80b883a 	mov	r5,r23
   4afd0:	d8800015 	stw	r2,0(sp)
   4afd4:	00407280 	call	40728 <__umodsi3>
   4afd8:	da400017 	ldw	r9,0(sp)
   4afdc:	1004943a 	slli	r2,r2,16
   4afe0:	9cffffcc 	andi	r19,r19,65535
   4afe4:	4f07383a 	mul	r3,r9,fp
   4afe8:	14c8b03a 	or	r4,r2,r19
   4afec:	d9800317 	ldw	r6,12(sp)
   4aff0:	20c0062e 	bgeu	r4,r3,4b00c <__divdf3+0x40c>
   4aff4:	2409883a 	add	r4,r4,r16
   4aff8:	48bfffc4 	addi	r2,r9,-1
   4affc:	2400c436 	bltu	r4,r16,4b310 <__divdf3+0x710>
   4b000:	20c0c32e 	bgeu	r4,r3,4b310 <__divdf3+0x710>
   4b004:	4a7fff84 	addi	r9,r9,-2
   4b008:	2409883a 	add	r4,r4,r16
   4b00c:	8822943a 	slli	r17,r17,16
   4b010:	a80ed43a 	srli	r7,r21,16
   4b014:	aa3fffcc 	andi	r8,r21,65535
   4b018:	4c62b03a 	or	r17,r9,r17
   4b01c:	8816d43a 	srli	r11,r17,16
   4b020:	897fffcc 	andi	r5,r17,65535
   4b024:	2a15383a 	mul	r10,r5,r8
   4b028:	5a19383a 	mul	r12,r11,r8
   4b02c:	29cb383a 	mul	r5,r5,r7
   4b030:	5012d43a 	srli	r9,r10,16
   4b034:	20c5c83a 	sub	r2,r4,r3
   4b038:	614b883a 	add	r5,r12,r5
   4b03c:	2a4b883a 	add	r5,r5,r9
   4b040:	59c7383a 	mul	r3,r11,r7
   4b044:	2b00022e 	bgeu	r5,r12,4b050 <__divdf3+0x450>
   4b048:	01000074 	movhi	r4,1
   4b04c:	1907883a 	add	r3,r3,r4
   4b050:	2808d43a 	srli	r4,r5,16
   4b054:	280a943a 	slli	r5,r5,16
   4b058:	54ffffcc 	andi	r19,r10,65535
   4b05c:	1907883a 	add	r3,r3,r4
   4b060:	2ccb883a 	add	r5,r5,r19
   4b064:	10c09336 	bltu	r2,r3,4b2b4 <__divdf3+0x6b4>
   4b068:	10c0ad26 	beq	r2,r3,4b320 <__divdf3+0x720>
   4b06c:	10c7c83a 	sub	r3,r2,r3
   4b070:	3167c83a 	sub	r19,r6,r5
   4b074:	34ed803a 	cmpltu	r22,r6,r19
   4b078:	1dadc83a 	sub	r22,r3,r22
   4b07c:	b400b226 	beq	r22,r16,4b348 <__divdf3+0x748>
   4b080:	b009883a 	mov	r4,r22
   4b084:	b80b883a 	mov	r5,r23
   4b088:	d9c00115 	stw	r7,4(sp)
   4b08c:	da000215 	stw	r8,8(sp)
   4b090:	00407200 	call	40720 <__udivsi3>
   4b094:	b009883a 	mov	r4,r22
   4b098:	b80b883a 	mov	r5,r23
   4b09c:	d8800315 	stw	r2,12(sp)
   4b0a0:	00407280 	call	40728 <__umodsi3>
   4b0a4:	d9800317 	ldw	r6,12(sp)
   4b0a8:	1004943a 	slli	r2,r2,16
   4b0ac:	9808d43a 	srli	r4,r19,16
   4b0b0:	372d383a 	mul	r22,r6,fp
   4b0b4:	d9c00117 	ldw	r7,4(sp)
   4b0b8:	1106b03a 	or	r3,r2,r4
   4b0bc:	da000217 	ldw	r8,8(sp)
   4b0c0:	1d80062e 	bgeu	r3,r22,4b0dc <__divdf3+0x4dc>
   4b0c4:	1c07883a 	add	r3,r3,r16
   4b0c8:	30bfffc4 	addi	r2,r6,-1
   4b0cc:	1c00a036 	bltu	r3,r16,4b350 <__divdf3+0x750>
   4b0d0:	1d809f2e 	bgeu	r3,r22,4b350 <__divdf3+0x750>
   4b0d4:	31bfff84 	addi	r6,r6,-2
   4b0d8:	1c07883a 	add	r3,r3,r16
   4b0dc:	1dadc83a 	sub	r22,r3,r22
   4b0e0:	b009883a 	mov	r4,r22
   4b0e4:	b80b883a 	mov	r5,r23
   4b0e8:	d9800315 	stw	r6,12(sp)
   4b0ec:	d9c00115 	stw	r7,4(sp)
   4b0f0:	da000215 	stw	r8,8(sp)
   4b0f4:	00407200 	call	40720 <__udivsi3>
   4b0f8:	b009883a 	mov	r4,r22
   4b0fc:	b80b883a 	mov	r5,r23
   4b100:	d8800015 	stw	r2,0(sp)
   4b104:	00407280 	call	40728 <__umodsi3>
   4b108:	da400017 	ldw	r9,0(sp)
   4b10c:	1004943a 	slli	r2,r2,16
   4b110:	993fffcc 	andi	r4,r19,65535
   4b114:	4f39383a 	mul	fp,r9,fp
   4b118:	1106b03a 	or	r3,r2,r4
   4b11c:	d9800317 	ldw	r6,12(sp)
   4b120:	d9c00117 	ldw	r7,4(sp)
   4b124:	da000217 	ldw	r8,8(sp)
   4b128:	1f00062e 	bgeu	r3,fp,4b144 <__divdf3+0x544>
   4b12c:	1c07883a 	add	r3,r3,r16
   4b130:	48bfffc4 	addi	r2,r9,-1
   4b134:	1c008836 	bltu	r3,r16,4b358 <__divdf3+0x758>
   4b138:	1f00872e 	bgeu	r3,fp,4b358 <__divdf3+0x758>
   4b13c:	4a7fff84 	addi	r9,r9,-2
   4b140:	1c07883a 	add	r3,r3,r16
   4b144:	3008943a 	slli	r4,r6,16
   4b148:	1f07c83a 	sub	r3,r3,fp
   4b14c:	4926b03a 	or	r19,r9,r4
   4b150:	993fffcc 	andi	r4,r19,65535
   4b154:	980cd43a 	srli	r6,r19,16
   4b158:	220b383a 	mul	r5,r4,r8
   4b15c:	21c5383a 	mul	r2,r4,r7
   4b160:	3211383a 	mul	r8,r6,r8
   4b164:	2808d43a 	srli	r4,r5,16
   4b168:	31cf383a 	mul	r7,r6,r7
   4b16c:	4085883a 	add	r2,r8,r2
   4b170:	1105883a 	add	r2,r2,r4
   4b174:	1200022e 	bgeu	r2,r8,4b180 <__divdf3+0x580>
   4b178:	01000074 	movhi	r4,1
   4b17c:	390f883a 	add	r7,r7,r4
   4b180:	1008d43a 	srli	r4,r2,16
   4b184:	1004943a 	slli	r2,r2,16
   4b188:	297fffcc 	andi	r5,r5,65535
   4b18c:	390f883a 	add	r7,r7,r4
   4b190:	1145883a 	add	r2,r2,r5
   4b194:	19c06536 	bltu	r3,r7,4b32c <__divdf3+0x72c>
   4b198:	19c09f26 	beq	r3,r7,4b418 <__divdf3+0x818>
   4b19c:	9cc00054 	ori	r19,r19,1
   4b1a0:	a100ffc4 	addi	r4,r20,1023
   4b1a4:	013f500e 	bge	zero,r4,4aee8 <__alt_data_end+0xfffda1a8>
   4b1a8:	988001cc 	andi	r2,r19,7
   4b1ac:	10000726 	beq	r2,zero,4b1cc <__divdf3+0x5cc>
   4b1b0:	98c003cc 	andi	r3,r19,15
   4b1b4:	00800104 	movi	r2,4
   4b1b8:	18800426 	beq	r3,r2,4b1cc <__divdf3+0x5cc>
   4b1bc:	9885883a 	add	r2,r19,r2
   4b1c0:	14e1803a 	cmpltu	r16,r2,r19
   4b1c4:	8c23883a 	add	r17,r17,r16
   4b1c8:	1027883a 	mov	r19,r2
   4b1cc:	8880402c 	andhi	r2,r17,256
   4b1d0:	10000426 	beq	r2,zero,4b1e4 <__divdf3+0x5e4>
   4b1d4:	00bfc034 	movhi	r2,65280
   4b1d8:	10bfffc4 	addi	r2,r2,-1
   4b1dc:	a1010004 	addi	r4,r20,1024
   4b1e0:	88a2703a 	and	r17,r17,r2
   4b1e4:	0081ff84 	movi	r2,2046
   4b1e8:	113edf16 	blt	r2,r4,4ad68 <__alt_data_end+0xfffda028>
   4b1ec:	9826d0fa 	srli	r19,r19,3
   4b1f0:	8804977a 	slli	r2,r17,29
   4b1f4:	8820927a 	slli	r16,r17,9
   4b1f8:	2101ffcc 	andi	r4,r4,2047
   4b1fc:	14e6b03a 	or	r19,r2,r19
   4b200:	800ad33a 	srli	r5,r16,12
   4b204:	9180004c 	andi	r6,r18,1
   4b208:	003edb06 	br	4ad78 <__alt_data_end+0xfffda038>
   4b20c:	008000c4 	movi	r2,3
   4b210:	4080a826 	beq	r8,r2,4b4b4 <__divdf3+0x8b4>
   4b214:	00800044 	movi	r2,1
   4b218:	4080551e 	bne	r8,r2,4b370 <__divdf3+0x770>
   4b21c:	e00d883a 	mov	r6,fp
   4b220:	0009883a 	mov	r4,zero
   4b224:	000b883a 	mov	r5,zero
   4b228:	0027883a 	mov	r19,zero
   4b22c:	003ed206 	br	4ad78 <__alt_data_end+0xfffda038>
   4b230:	00800434 	movhi	r2,16
   4b234:	89400234 	orhi	r5,r17,8
   4b238:	10bfffc4 	addi	r2,r2,-1
   4b23c:	b00d883a 	mov	r6,r22
   4b240:	288a703a 	and	r5,r5,r2
   4b244:	003f2606 	br	4aee0 <__alt_data_end+0xfffda1a0>
   4b248:	d9800315 	stw	r6,12(sp)
   4b24c:	d9c00115 	stw	r7,4(sp)
   4b250:	004c9000 	call	4c900 <__clzsi2>
   4b254:	10c00804 	addi	r3,r2,32
   4b258:	010009c4 	movi	r4,39
   4b25c:	d9800317 	ldw	r6,12(sp)
   4b260:	d9c00117 	ldw	r7,4(sp)
   4b264:	20fee30e 	bge	r4,r3,4adf4 <__alt_data_end+0xfffda0b4>
   4b268:	117ffe04 	addi	r5,r2,-8
   4b26c:	9162983a 	sll	r17,r18,r5
   4b270:	0027883a 	mov	r19,zero
   4b274:	003ee606 	br	4ae10 <__alt_data_end+0xfffda0d0>
   4b278:	3009883a 	mov	r4,r6
   4b27c:	d9800315 	stw	r6,12(sp)
   4b280:	da000215 	stw	r8,8(sp)
   4b284:	da400015 	stw	r9,0(sp)
   4b288:	004c9000 	call	4c900 <__clzsi2>
   4b28c:	10c00804 	addi	r3,r2,32
   4b290:	010009c4 	movi	r4,39
   4b294:	d9800317 	ldw	r6,12(sp)
   4b298:	da000217 	ldw	r8,8(sp)
   4b29c:	da400017 	ldw	r9,0(sp)
   4b2a0:	20fef20e 	bge	r4,r3,4ae6c <__alt_data_end+0xfffda12c>
   4b2a4:	10bffe04 	addi	r2,r2,-8
   4b2a8:	a8a0983a 	sll	r16,r21,r2
   4b2ac:	002b883a 	mov	r21,zero
   4b2b0:	003ef506 	br	4ae88 <__alt_data_end+0xfffda148>
   4b2b4:	354d883a 	add	r6,r6,r21
   4b2b8:	3549803a 	cmpltu	r4,r6,r21
   4b2bc:	2409883a 	add	r4,r4,r16
   4b2c0:	2089883a 	add	r4,r4,r2
   4b2c4:	88bfffc4 	addi	r2,r17,-1
   4b2c8:	81000c2e 	bgeu	r16,r4,4b2fc <__divdf3+0x6fc>
   4b2cc:	20c04436 	bltu	r4,r3,4b3e0 <__divdf3+0x7e0>
   4b2d0:	19006f26 	beq	r3,r4,4b490 <__divdf3+0x890>
   4b2d4:	20c7c83a 	sub	r3,r4,r3
   4b2d8:	1023883a 	mov	r17,r2
   4b2dc:	003f6406 	br	4b070 <__alt_data_end+0xfffda330>
   4b2e0:	9d7f1736 	bltu	r19,r21,4af40 <__alt_data_end+0xfffda200>
   4b2e4:	9806d07a 	srli	r3,r19,1
   4b2e8:	880497fa 	slli	r2,r17,31
   4b2ec:	980c97fa 	slli	r6,r19,31
   4b2f0:	882cd07a 	srli	r22,r17,1
   4b2f4:	18a6b03a 	or	r19,r3,r2
   4b2f8:	003f1406 	br	4af4c <__alt_data_end+0xfffda20c>
   4b2fc:	243ff51e 	bne	r4,r16,4b2d4 <__alt_data_end+0xfffda594>
   4b300:	357ff22e 	bgeu	r6,r21,4b2cc <__alt_data_end+0xfffda58c>
   4b304:	80c7c83a 	sub	r3,r16,r3
   4b308:	1023883a 	mov	r17,r2
   4b30c:	003f5806 	br	4b070 <__alt_data_end+0xfffda330>
   4b310:	1013883a 	mov	r9,r2
   4b314:	003f3d06 	br	4b00c <__alt_data_end+0xfffda2cc>
   4b318:	1023883a 	mov	r17,r2
   4b31c:	003f2506 	br	4afb4 <__alt_data_end+0xfffda274>
   4b320:	317fe436 	bltu	r6,r5,4b2b4 <__alt_data_end+0xfffda574>
   4b324:	0007883a 	mov	r3,zero
   4b328:	003f5106 	br	4b070 <__alt_data_end+0xfffda330>
   4b32c:	1c07883a 	add	r3,r3,r16
   4b330:	993fffc4 	addi	r4,r19,-1
   4b334:	1c000a2e 	bgeu	r3,r16,4b360 <__divdf3+0x760>
   4b338:	2027883a 	mov	r19,r4
   4b33c:	19ff971e 	bne	r3,r7,4b19c <__alt_data_end+0xfffda45c>
   4b340:	a8bf961e 	bne	r21,r2,4b19c <__alt_data_end+0xfffda45c>
   4b344:	003f9606 	br	4b1a0 <__alt_data_end+0xfffda460>
   4b348:	04ffffc4 	movi	r19,-1
   4b34c:	003f9406 	br	4b1a0 <__alt_data_end+0xfffda460>
   4b350:	100d883a 	mov	r6,r2
   4b354:	003f6106 	br	4b0dc <__alt_data_end+0xfffda39c>
   4b358:	1013883a 	mov	r9,r2
   4b35c:	003f7906 	br	4b144 <__alt_data_end+0xfffda404>
   4b360:	19c02636 	bltu	r3,r7,4b3fc <__divdf3+0x7fc>
   4b364:	38c04d26 	beq	r7,r3,4b49c <__divdf3+0x89c>
   4b368:	2027883a 	mov	r19,r4
   4b36c:	003f8b06 	br	4b19c <__alt_data_end+0xfffda45c>
   4b370:	e025883a 	mov	r18,fp
   4b374:	003f8a06 	br	4b1a0 <__alt_data_end+0xfffda460>
   4b378:	008007c4 	movi	r2,31
   4b37c:	14002a16 	blt	r2,r16,4b428 <__divdf3+0x828>
   4b380:	a5010784 	addi	r20,r20,1054
   4b384:	8d04983a 	sll	r2,r17,r20
   4b388:	9c06d83a 	srl	r3,r19,r16
   4b38c:	9d28983a 	sll	r20,r19,r20
   4b390:	8c20d83a 	srl	r16,r17,r16
   4b394:	1886b03a 	or	r3,r3,r2
   4b398:	a004c03a 	cmpne	r2,r20,zero
   4b39c:	1884b03a 	or	r2,r3,r2
   4b3a0:	10c001cc 	andi	r3,r2,7
   4b3a4:	18000726 	beq	r3,zero,4b3c4 <__divdf3+0x7c4>
   4b3a8:	110003cc 	andi	r4,r2,15
   4b3ac:	00c00104 	movi	r3,4
   4b3b0:	20c00426 	beq	r4,r3,4b3c4 <__divdf3+0x7c4>
   4b3b4:	10c00104 	addi	r3,r2,4
   4b3b8:	1885803a 	cmpltu	r2,r3,r2
   4b3bc:	80a1883a 	add	r16,r16,r2
   4b3c0:	1805883a 	mov	r2,r3
   4b3c4:	80c0202c 	andhi	r3,r16,128
   4b3c8:	18002d26 	beq	r3,zero,4b480 <__divdf3+0x880>
   4b3cc:	9180004c 	andi	r6,r18,1
   4b3d0:	01000044 	movi	r4,1
   4b3d4:	000b883a 	mov	r5,zero
   4b3d8:	0027883a 	mov	r19,zero
   4b3dc:	003e6606 	br	4ad78 <__alt_data_end+0xfffda038>
   4b3e0:	354d883a 	add	r6,r6,r21
   4b3e4:	356d803a 	cmpltu	r22,r6,r21
   4b3e8:	b42d883a 	add	r22,r22,r16
   4b3ec:	b12d883a 	add	r22,r22,r4
   4b3f0:	8c7fff84 	addi	r17,r17,-2
   4b3f4:	b0c7c83a 	sub	r3,r22,r3
   4b3f8:	003f1d06 	br	4b070 <__alt_data_end+0xfffda330>
   4b3fc:	ad4b883a 	add	r5,r21,r21
   4b400:	2d6b803a 	cmpltu	r21,r5,r21
   4b404:	ac2b883a 	add	r21,r21,r16
   4b408:	1d47883a 	add	r3,r3,r21
   4b40c:	993fff84 	addi	r4,r19,-2
   4b410:	282b883a 	mov	r21,r5
   4b414:	003fc806 	br	4b338 <__alt_data_end+0xfffda5f8>
   4b418:	103fc41e 	bne	r2,zero,4b32c <__alt_data_end+0xfffda5ec>
   4b41c:	002b883a 	mov	r21,zero
   4b420:	a8bf5e1e 	bne	r21,r2,4b19c <__alt_data_end+0xfffda45c>
   4b424:	003f5e06 	br	4b1a0 <__alt_data_end+0xfffda460>
   4b428:	00bef884 	movi	r2,-1054
   4b42c:	1505c83a 	sub	r2,r2,r20
   4b430:	00c00804 	movi	r3,32
   4b434:	8884d83a 	srl	r2,r17,r2
   4b438:	80c01c26 	beq	r16,r3,4b4ac <__divdf3+0x8ac>
   4b43c:	a0c10f84 	addi	r3,r20,1086
   4b440:	88c6983a 	sll	r3,r17,r3
   4b444:	1cc6b03a 	or	r3,r3,r19
   4b448:	1806c03a 	cmpne	r3,r3,zero
   4b44c:	1884b03a 	or	r2,r3,r2
   4b450:	140001cc 	andi	r16,r2,7
   4b454:	8000061e 	bne	r16,zero,4b470 <__divdf3+0x870>
   4b458:	000b883a 	mov	r5,zero
   4b45c:	1004d0fa 	srli	r2,r2,3
   4b460:	9180004c 	andi	r6,r18,1
   4b464:	0009883a 	mov	r4,zero
   4b468:	1426b03a 	or	r19,r2,r16
   4b46c:	003e4206 	br	4ad78 <__alt_data_end+0xfffda038>
   4b470:	110003cc 	andi	r4,r2,15
   4b474:	00c00104 	movi	r3,4
   4b478:	0021883a 	mov	r16,zero
   4b47c:	20ffcd1e 	bne	r4,r3,4b3b4 <__alt_data_end+0xfffda674>
   4b480:	800a927a 	slli	r5,r16,9
   4b484:	8020977a 	slli	r16,r16,29
   4b488:	280ad33a 	srli	r5,r5,12
   4b48c:	003ff306 	br	4b45c <__alt_data_end+0xfffda71c>
   4b490:	317fd336 	bltu	r6,r5,4b3e0 <__alt_data_end+0xfffda6a0>
   4b494:	1023883a 	mov	r17,r2
   4b498:	003fa206 	br	4b324 <__alt_data_end+0xfffda5e4>
   4b49c:	a8bfd736 	bltu	r21,r2,4b3fc <__alt_data_end+0xfffda6bc>
   4b4a0:	2027883a 	mov	r19,r4
   4b4a4:	a8bf3d1e 	bne	r21,r2,4b19c <__alt_data_end+0xfffda45c>
   4b4a8:	003f3d06 	br	4b1a0 <__alt_data_end+0xfffda460>
   4b4ac:	0007883a 	mov	r3,zero
   4b4b0:	003fe406 	br	4b444 <__alt_data_end+0xfffda704>
   4b4b4:	00800434 	movhi	r2,16
   4b4b8:	89400234 	orhi	r5,r17,8
   4b4bc:	10bfffc4 	addi	r2,r2,-1
   4b4c0:	e00d883a 	mov	r6,fp
   4b4c4:	288a703a 	and	r5,r5,r2
   4b4c8:	003e8506 	br	4aee0 <__alt_data_end+0xfffda1a0>

0004b4cc <__eqdf2>:
   4b4cc:	2804d53a 	srli	r2,r5,20
   4b4d0:	3806d53a 	srli	r3,r7,20
   4b4d4:	02000434 	movhi	r8,16
   4b4d8:	423fffc4 	addi	r8,r8,-1
   4b4dc:	1081ffcc 	andi	r2,r2,2047
   4b4e0:	0241ffc4 	movi	r9,2047
   4b4e4:	2a14703a 	and	r10,r5,r8
   4b4e8:	18c1ffcc 	andi	r3,r3,2047
   4b4ec:	3a10703a 	and	r8,r7,r8
   4b4f0:	280ad7fa 	srli	r5,r5,31
   4b4f4:	380ed7fa 	srli	r7,r7,31
   4b4f8:	12400f26 	beq	r2,r9,4b538 <__eqdf2+0x6c>
   4b4fc:	0241ffc4 	movi	r9,2047
   4b500:	1a400326 	beq	r3,r9,4b510 <__eqdf2+0x44>
   4b504:	10c00526 	beq	r2,r3,4b51c <__eqdf2+0x50>
   4b508:	00800044 	movi	r2,1
   4b50c:	f800283a 	ret
   4b510:	4192b03a 	or	r9,r8,r6
   4b514:	483ffc1e 	bne	r9,zero,4b508 <__alt_data_end+0xfffda7c8>
   4b518:	10fffb1e 	bne	r2,r3,4b508 <__alt_data_end+0xfffda7c8>
   4b51c:	523ffa1e 	bne	r10,r8,4b508 <__alt_data_end+0xfffda7c8>
   4b520:	21bff91e 	bne	r4,r6,4b508 <__alt_data_end+0xfffda7c8>
   4b524:	29c00826 	beq	r5,r7,4b548 <__eqdf2+0x7c>
   4b528:	103ff71e 	bne	r2,zero,4b508 <__alt_data_end+0xfffda7c8>
   4b52c:	5104b03a 	or	r2,r10,r4
   4b530:	1004c03a 	cmpne	r2,r2,zero
   4b534:	f800283a 	ret
   4b538:	5112b03a 	or	r9,r10,r4
   4b53c:	483fef26 	beq	r9,zero,4b4fc <__alt_data_end+0xfffda7bc>
   4b540:	00800044 	movi	r2,1
   4b544:	f800283a 	ret
   4b548:	0005883a 	mov	r2,zero
   4b54c:	f800283a 	ret

0004b550 <__gedf2>:
   4b550:	2804d53a 	srli	r2,r5,20
   4b554:	3806d53a 	srli	r3,r7,20
   4b558:	02000434 	movhi	r8,16
   4b55c:	423fffc4 	addi	r8,r8,-1
   4b560:	0241ffc4 	movi	r9,2047
   4b564:	1081ffcc 	andi	r2,r2,2047
   4b568:	2a14703a 	and	r10,r5,r8
   4b56c:	1a46703a 	and	r3,r3,r9
   4b570:	3a10703a 	and	r8,r7,r8
   4b574:	280ad7fa 	srli	r5,r5,31
   4b578:	380ed7fa 	srli	r7,r7,31
   4b57c:	12400b26 	beq	r2,r9,4b5ac <__gedf2+0x5c>
   4b580:	1a401626 	beq	r3,r9,4b5dc <__gedf2+0x8c>
   4b584:	10000c1e 	bne	r2,zero,4b5b8 <__gedf2+0x68>
   4b588:	5112b03a 	or	r9,r10,r4
   4b58c:	4813003a 	cmpeq	r9,r9,zero
   4b590:	4817883a 	mov	r11,r9
   4b594:	18000c1e 	bne	r3,zero,4b5c8 <__gedf2+0x78>
   4b598:	4198b03a 	or	r12,r8,r6
   4b59c:	60000a1e 	bne	r12,zero,4b5c8 <__gedf2+0x78>
   4b5a0:	48001326 	beq	r9,zero,4b5f0 <__gedf2+0xa0>
   4b5a4:	0005883a 	mov	r2,zero
   4b5a8:	f800283a 	ret
   4b5ac:	5112b03a 	or	r9,r10,r4
   4b5b0:	4800191e 	bne	r9,zero,4b618 <__gedf2+0xc8>
   4b5b4:	18800926 	beq	r3,r2,4b5dc <__gedf2+0x8c>
   4b5b8:	18000b1e 	bne	r3,zero,4b5e8 <__gedf2+0x98>
   4b5bc:	4192b03a 	or	r9,r8,r6
   4b5c0:	0017883a 	mov	r11,zero
   4b5c4:	48000a26 	beq	r9,zero,4b5f0 <__gedf2+0xa0>
   4b5c8:	39c03fcc 	andi	r7,r7,255
   4b5cc:	58000726 	beq	r11,zero,4b5ec <__gedf2+0x9c>
   4b5d0:	3800081e 	bne	r7,zero,4b5f4 <__gedf2+0xa4>
   4b5d4:	00bfffc4 	movi	r2,-1
   4b5d8:	f800283a 	ret
   4b5dc:	4192b03a 	or	r9,r8,r6
   4b5e0:	48000d1e 	bne	r9,zero,4b618 <__gedf2+0xc8>
   4b5e4:	103fe826 	beq	r2,zero,4b588 <__alt_data_end+0xfffda848>
   4b5e8:	39c03fcc 	andi	r7,r7,255
   4b5ec:	29c00326 	beq	r5,r7,4b5fc <__gedf2+0xac>
   4b5f0:	283ff81e 	bne	r5,zero,4b5d4 <__alt_data_end+0xfffda894>
   4b5f4:	00800044 	movi	r2,1
   4b5f8:	f800283a 	ret
   4b5fc:	18bffc16 	blt	r3,r2,4b5f0 <__alt_data_end+0xfffda8b0>
   4b600:	10c00316 	blt	r2,r3,4b610 <__gedf2+0xc0>
   4b604:	42bffa36 	bltu	r8,r10,4b5f0 <__alt_data_end+0xfffda8b0>
   4b608:	52000526 	beq	r10,r8,4b620 <__gedf2+0xd0>
   4b60c:	523fe52e 	bgeu	r10,r8,4b5a4 <__alt_data_end+0xfffda864>
   4b610:	283ff026 	beq	r5,zero,4b5d4 <__alt_data_end+0xfffda894>
   4b614:	003ff706 	br	4b5f4 <__alt_data_end+0xfffda8b4>
   4b618:	00bfff84 	movi	r2,-2
   4b61c:	f800283a 	ret
   4b620:	313ff336 	bltu	r6,r4,4b5f0 <__alt_data_end+0xfffda8b0>
   4b624:	21bfdf2e 	bgeu	r4,r6,4b5a4 <__alt_data_end+0xfffda864>
   4b628:	283fea26 	beq	r5,zero,4b5d4 <__alt_data_end+0xfffda894>
   4b62c:	003ff106 	br	4b5f4 <__alt_data_end+0xfffda8b4>

0004b630 <__ledf2>:
   4b630:	2804d53a 	srli	r2,r5,20
   4b634:	3810d53a 	srli	r8,r7,20
   4b638:	00c00434 	movhi	r3,16
   4b63c:	18ffffc4 	addi	r3,r3,-1
   4b640:	0241ffc4 	movi	r9,2047
   4b644:	1081ffcc 	andi	r2,r2,2047
   4b648:	28d4703a 	and	r10,r5,r3
   4b64c:	4250703a 	and	r8,r8,r9
   4b650:	38c6703a 	and	r3,r7,r3
   4b654:	280ad7fa 	srli	r5,r5,31
   4b658:	380ed7fa 	srli	r7,r7,31
   4b65c:	12400b26 	beq	r2,r9,4b68c <__ledf2+0x5c>
   4b660:	42401926 	beq	r8,r9,4b6c8 <__ledf2+0x98>
   4b664:	10000c1e 	bne	r2,zero,4b698 <__ledf2+0x68>
   4b668:	5112b03a 	or	r9,r10,r4
   4b66c:	4813003a 	cmpeq	r9,r9,zero
   4b670:	4817883a 	mov	r11,r9
   4b674:	40000f26 	beq	r8,zero,4b6b4 <__ledf2+0x84>
   4b678:	39c03fcc 	andi	r7,r7,255
   4b67c:	58001826 	beq	r11,zero,4b6e0 <__ledf2+0xb0>
   4b680:	38000a1e 	bne	r7,zero,4b6ac <__ledf2+0x7c>
   4b684:	00bfffc4 	movi	r2,-1
   4b688:	f800283a 	ret
   4b68c:	5112b03a 	or	r9,r10,r4
   4b690:	48000f1e 	bne	r9,zero,4b6d0 <__ledf2+0xa0>
   4b694:	40800c26 	beq	r8,r2,4b6c8 <__ledf2+0x98>
   4b698:	4000101e 	bne	r8,zero,4b6dc <__ledf2+0xac>
   4b69c:	1992b03a 	or	r9,r3,r6
   4b6a0:	0017883a 	mov	r11,zero
   4b6a4:	483ff41e 	bne	r9,zero,4b678 <__alt_data_end+0xfffda938>
   4b6a8:	283ff61e 	bne	r5,zero,4b684 <__alt_data_end+0xfffda944>
   4b6ac:	00800044 	movi	r2,1
   4b6b0:	f800283a 	ret
   4b6b4:	1998b03a 	or	r12,r3,r6
   4b6b8:	603fef1e 	bne	r12,zero,4b678 <__alt_data_end+0xfffda938>
   4b6bc:	483ffa26 	beq	r9,zero,4b6a8 <__alt_data_end+0xfffda968>
   4b6c0:	0005883a 	mov	r2,zero
   4b6c4:	f800283a 	ret
   4b6c8:	1992b03a 	or	r9,r3,r6
   4b6cc:	48000226 	beq	r9,zero,4b6d8 <__ledf2+0xa8>
   4b6d0:	00800084 	movi	r2,2
   4b6d4:	f800283a 	ret
   4b6d8:	103fe326 	beq	r2,zero,4b668 <__alt_data_end+0xfffda928>
   4b6dc:	39c03fcc 	andi	r7,r7,255
   4b6e0:	29fff11e 	bne	r5,r7,4b6a8 <__alt_data_end+0xfffda968>
   4b6e4:	40bff016 	blt	r8,r2,4b6a8 <__alt_data_end+0xfffda968>
   4b6e8:	12000316 	blt	r2,r8,4b6f8 <__ledf2+0xc8>
   4b6ec:	1abfee36 	bltu	r3,r10,4b6a8 <__alt_data_end+0xfffda968>
   4b6f0:	50c00326 	beq	r10,r3,4b700 <__ledf2+0xd0>
   4b6f4:	50fff22e 	bgeu	r10,r3,4b6c0 <__alt_data_end+0xfffda980>
   4b6f8:	283fe226 	beq	r5,zero,4b684 <__alt_data_end+0xfffda944>
   4b6fc:	003feb06 	br	4b6ac <__alt_data_end+0xfffda96c>
   4b700:	313fe936 	bltu	r6,r4,4b6a8 <__alt_data_end+0xfffda968>
   4b704:	21bfee2e 	bgeu	r4,r6,4b6c0 <__alt_data_end+0xfffda980>
   4b708:	283fde26 	beq	r5,zero,4b684 <__alt_data_end+0xfffda944>
   4b70c:	003fe706 	br	4b6ac <__alt_data_end+0xfffda96c>

0004b710 <__muldf3>:
   4b710:	defff204 	addi	sp,sp,-56
   4b714:	2804d53a 	srli	r2,r5,20
   4b718:	dd800a15 	stw	r22,40(sp)
   4b71c:	282cd7fa 	srli	r22,r5,31
   4b720:	dc000415 	stw	r16,16(sp)
   4b724:	04000434 	movhi	r16,16
   4b728:	df000c15 	stw	fp,48(sp)
   4b72c:	dd000815 	stw	r20,32(sp)
   4b730:	dcc00715 	stw	r19,28(sp)
   4b734:	dc800615 	stw	r18,24(sp)
   4b738:	dc400515 	stw	r17,20(sp)
   4b73c:	843fffc4 	addi	r16,r16,-1
   4b740:	dfc00d15 	stw	ra,52(sp)
   4b744:	ddc00b15 	stw	r23,44(sp)
   4b748:	dd400915 	stw	r21,36(sp)
   4b74c:	1501ffcc 	andi	r20,r2,2047
   4b750:	2023883a 	mov	r17,r4
   4b754:	2025883a 	mov	r18,r4
   4b758:	2c20703a 	and	r16,r5,r16
   4b75c:	b027883a 	mov	r19,r22
   4b760:	b7003fcc 	andi	fp,r22,255
   4b764:	a0005926 	beq	r20,zero,4b8cc <__muldf3+0x1bc>
   4b768:	0081ffc4 	movi	r2,2047
   4b76c:	a0803426 	beq	r20,r2,4b840 <__muldf3+0x130>
   4b770:	84000434 	orhi	r16,r16,16
   4b774:	2004d77a 	srli	r2,r4,29
   4b778:	802090fa 	slli	r16,r16,3
   4b77c:	202490fa 	slli	r18,r4,3
   4b780:	a53f0044 	addi	r20,r20,-1023
   4b784:	80a0b03a 	or	r16,r16,r2
   4b788:	002b883a 	mov	r21,zero
   4b78c:	0015883a 	mov	r10,zero
   4b790:	3812d53a 	srli	r9,r7,20
   4b794:	3806d7fa 	srli	r3,r7,31
   4b798:	02000434 	movhi	r8,16
   4b79c:	423fffc4 	addi	r8,r8,-1
   4b7a0:	4941ffcc 	andi	r5,r9,2047
   4b7a4:	302f883a 	mov	r23,r6
   4b7a8:	3a22703a 	and	r17,r7,r8
   4b7ac:	1ac03fcc 	andi	r11,r3,255
   4b7b0:	28006226 	beq	r5,zero,4b93c <__muldf3+0x22c>
   4b7b4:	0081ffc4 	movi	r2,2047
   4b7b8:	28805a26 	beq	r5,r2,4b924 <__muldf3+0x214>
   4b7bc:	8a000434 	orhi	r8,r17,16
   4b7c0:	3004d77a 	srli	r2,r6,29
   4b7c4:	401090fa 	slli	r8,r8,3
   4b7c8:	302e90fa 	slli	r23,r6,3
   4b7cc:	297f0044 	addi	r5,r5,-1023
   4b7d0:	40a2b03a 	or	r17,r8,r2
   4b7d4:	0013883a 	mov	r9,zero
   4b7d8:	4d4cb03a 	or	r6,r9,r21
   4b7dc:	300c90ba 	slli	r6,r6,2
   4b7e0:	02000174 	movhi	r8,5
   4b7e4:	422e0004 	addi	r8,r8,-18432
   4b7e8:	320d883a 	add	r6,r6,r8
   4b7ec:	31800017 	ldw	r6,0(r6)
   4b7f0:	a14b883a 	add	r5,r20,r5
   4b7f4:	1dacf03a 	xor	r22,r3,r22
   4b7f8:	2b000044 	addi	r12,r5,1
   4b7fc:	3000683a 	jmp	r6
   4b800:	0004ba3c 	xorhi	zero,zero,4840
   4b804:	0004ba28 	cmpgeui	zero,zero,4840
   4b808:	0004ba28 	cmpgeui	zero,zero,4840
   4b80c:	0004ba14 	movui	zero,4840
   4b810:	0004b85c 	xori	zero,zero,4833
   4b814:	0004b85c 	xori	zero,zero,4833
   4b818:	0004b9fc 	xorhi	zero,zero,4839
   4b81c:	0004ba14 	movui	zero,4840
   4b820:	0004b85c 	xori	zero,zero,4833
   4b824:	0004b9fc 	xorhi	zero,zero,4839
   4b828:	0004b85c 	xori	zero,zero,4833
   4b82c:	0004ba14 	movui	zero,4840
   4b830:	0004b860 	cmpeqi	zero,zero,4833
   4b834:	0004b860 	cmpeqi	zero,zero,4833
   4b838:	0004b860 	cmpeqi	zero,zero,4833
   4b83c:	0004bc38 	rdprs	zero,zero,4848
   4b840:	8104b03a 	or	r2,r16,r4
   4b844:	10006a1e 	bne	r2,zero,4b9f0 <__muldf3+0x2e0>
   4b848:	05400204 	movi	r21,8
   4b84c:	0021883a 	mov	r16,zero
   4b850:	0025883a 	mov	r18,zero
   4b854:	02800084 	movi	r10,2
   4b858:	003fcd06 	br	4b790 <__alt_data_end+0xfffdaa50>
   4b85c:	b039883a 	mov	fp,r22
   4b860:	00800084 	movi	r2,2
   4b864:	50804e1e 	bne	r10,r2,4b9a0 <__muldf3+0x290>
   4b868:	e4c0004c 	andi	r19,fp,1
   4b86c:	0101ffc4 	movi	r4,2047
   4b870:	0021883a 	mov	r16,zero
   4b874:	0025883a 	mov	r18,zero
   4b878:	2008953a 	slli	r4,r4,20
   4b87c:	98c03fcc 	andi	r3,r19,255
   4b880:	01400434 	movhi	r5,16
   4b884:	297fffc4 	addi	r5,r5,-1
   4b888:	180697fa 	slli	r3,r3,31
   4b88c:	8160703a 	and	r16,r16,r5
   4b890:	8120b03a 	or	r16,r16,r4
   4b894:	80c6b03a 	or	r3,r16,r3
   4b898:	9005883a 	mov	r2,r18
   4b89c:	dfc00d17 	ldw	ra,52(sp)
   4b8a0:	df000c17 	ldw	fp,48(sp)
   4b8a4:	ddc00b17 	ldw	r23,44(sp)
   4b8a8:	dd800a17 	ldw	r22,40(sp)
   4b8ac:	dd400917 	ldw	r21,36(sp)
   4b8b0:	dd000817 	ldw	r20,32(sp)
   4b8b4:	dcc00717 	ldw	r19,28(sp)
   4b8b8:	dc800617 	ldw	r18,24(sp)
   4b8bc:	dc400517 	ldw	r17,20(sp)
   4b8c0:	dc000417 	ldw	r16,16(sp)
   4b8c4:	dec00e04 	addi	sp,sp,56
   4b8c8:	f800283a 	ret
   4b8cc:	8104b03a 	or	r2,r16,r4
   4b8d0:	10004226 	beq	r2,zero,4b9dc <__muldf3+0x2cc>
   4b8d4:	8000f926 	beq	r16,zero,4bcbc <__muldf3+0x5ac>
   4b8d8:	8009883a 	mov	r4,r16
   4b8dc:	d9800315 	stw	r6,12(sp)
   4b8e0:	d9c00015 	stw	r7,0(sp)
   4b8e4:	004c9000 	call	4c900 <__clzsi2>
   4b8e8:	d9800317 	ldw	r6,12(sp)
   4b8ec:	d9c00017 	ldw	r7,0(sp)
   4b8f0:	1007883a 	mov	r3,r2
   4b8f4:	01000a04 	movi	r4,40
   4b8f8:	18bffe04 	addi	r2,r3,-8
   4b8fc:	20c9c83a 	sub	r4,r4,r3
   4b900:	80a0983a 	sll	r16,r16,r2
   4b904:	8908d83a 	srl	r4,r17,r4
   4b908:	88a4983a 	sll	r18,r17,r2
   4b90c:	2420b03a 	or	r16,r4,r16
   4b910:	017f0344 	movi	r5,-1011
   4b914:	28e9c83a 	sub	r20,r5,r3
   4b918:	002b883a 	mov	r21,zero
   4b91c:	0015883a 	mov	r10,zero
   4b920:	003f9b06 	br	4b790 <__alt_data_end+0xfffdaa50>
   4b924:	8984b03a 	or	r2,r17,r6
   4b928:	10002a1e 	bne	r2,zero,4b9d4 <__muldf3+0x2c4>
   4b92c:	0023883a 	mov	r17,zero
   4b930:	002f883a 	mov	r23,zero
   4b934:	02400084 	movi	r9,2
   4b938:	003fa706 	br	4b7d8 <__alt_data_end+0xfffdaa98>
   4b93c:	8984b03a 	or	r2,r17,r6
   4b940:	10002026 	beq	r2,zero,4b9c4 <__muldf3+0x2b4>
   4b944:	8800cc26 	beq	r17,zero,4bc78 <__muldf3+0x568>
   4b948:	8809883a 	mov	r4,r17
   4b94c:	d8c00215 	stw	r3,8(sp)
   4b950:	d9800315 	stw	r6,12(sp)
   4b954:	da800015 	stw	r10,0(sp)
   4b958:	dac00115 	stw	r11,4(sp)
   4b95c:	004c9000 	call	4c900 <__clzsi2>
   4b960:	d8c00217 	ldw	r3,8(sp)
   4b964:	d9800317 	ldw	r6,12(sp)
   4b968:	da800017 	ldw	r10,0(sp)
   4b96c:	dac00117 	ldw	r11,4(sp)
   4b970:	1009883a 	mov	r4,r2
   4b974:	01400a04 	movi	r5,40
   4b978:	25fffe04 	addi	r23,r4,-8
   4b97c:	290bc83a 	sub	r5,r5,r4
   4b980:	8dd0983a 	sll	r8,r17,r23
   4b984:	314ad83a 	srl	r5,r6,r5
   4b988:	35ee983a 	sll	r23,r6,r23
   4b98c:	2a22b03a 	or	r17,r5,r8
   4b990:	017f0344 	movi	r5,-1011
   4b994:	290bc83a 	sub	r5,r5,r4
   4b998:	0013883a 	mov	r9,zero
   4b99c:	003f8e06 	br	4b7d8 <__alt_data_end+0xfffdaa98>
   4b9a0:	008000c4 	movi	r2,3
   4b9a4:	50811d26 	beq	r10,r2,4be1c <__muldf3+0x70c>
   4b9a8:	00800044 	movi	r2,1
   4b9ac:	5080e01e 	bne	r10,r2,4bd30 <__muldf3+0x620>
   4b9b0:	e0a6703a 	and	r19,fp,r2
   4b9b4:	0009883a 	mov	r4,zero
   4b9b8:	0021883a 	mov	r16,zero
   4b9bc:	0025883a 	mov	r18,zero
   4b9c0:	003fad06 	br	4b878 <__alt_data_end+0xfffdab38>
   4b9c4:	0023883a 	mov	r17,zero
   4b9c8:	002f883a 	mov	r23,zero
   4b9cc:	02400044 	movi	r9,1
   4b9d0:	003f8106 	br	4b7d8 <__alt_data_end+0xfffdaa98>
   4b9d4:	024000c4 	movi	r9,3
   4b9d8:	003f7f06 	br	4b7d8 <__alt_data_end+0xfffdaa98>
   4b9dc:	05400104 	movi	r21,4
   4b9e0:	0021883a 	mov	r16,zero
   4b9e4:	0025883a 	mov	r18,zero
   4b9e8:	02800044 	movi	r10,1
   4b9ec:	003f6806 	br	4b790 <__alt_data_end+0xfffdaa50>
   4b9f0:	05400304 	movi	r21,12
   4b9f4:	028000c4 	movi	r10,3
   4b9f8:	003f6506 	br	4b790 <__alt_data_end+0xfffdaa50>
   4b9fc:	04000434 	movhi	r16,16
   4ba00:	0027883a 	mov	r19,zero
   4ba04:	843fffc4 	addi	r16,r16,-1
   4ba08:	04bfffc4 	movi	r18,-1
   4ba0c:	0101ffc4 	movi	r4,2047
   4ba10:	003f9906 	br	4b878 <__alt_data_end+0xfffdab38>
   4ba14:	8821883a 	mov	r16,r17
   4ba18:	b825883a 	mov	r18,r23
   4ba1c:	5839883a 	mov	fp,r11
   4ba20:	4815883a 	mov	r10,r9
   4ba24:	003f8e06 	br	4b860 <__alt_data_end+0xfffdab20>
   4ba28:	8821883a 	mov	r16,r17
   4ba2c:	b825883a 	mov	r18,r23
   4ba30:	b039883a 	mov	fp,r22
   4ba34:	4815883a 	mov	r10,r9
   4ba38:	003f8906 	br	4b860 <__alt_data_end+0xfffdab20>
   4ba3c:	b80cd43a 	srli	r6,r23,16
   4ba40:	9006d43a 	srli	r3,r18,16
   4ba44:	90bfffcc 	andi	r2,r18,65535
   4ba48:	bdffffcc 	andi	r23,r23,65535
   4ba4c:	b891383a 	mul	r8,r23,r2
   4ba50:	b8c9383a 	mul	r4,r23,r3
   4ba54:	309b383a 	mul	r13,r6,r2
   4ba58:	400ed43a 	srli	r7,r8,16
   4ba5c:	30df383a 	mul	r15,r6,r3
   4ba60:	235b883a 	add	r13,r4,r13
   4ba64:	69db883a 	add	r13,r13,r7
   4ba68:	6900022e 	bgeu	r13,r4,4ba74 <__muldf3+0x364>
   4ba6c:	01000074 	movhi	r4,1
   4ba70:	791f883a 	add	r15,r15,r4
   4ba74:	8828d43a 	srli	r20,r17,16
   4ba78:	8c7fffcc 	andi	r17,r17,65535
   4ba7c:	888f383a 	mul	r7,r17,r2
   4ba80:	88d3383a 	mul	r9,r17,r3
   4ba84:	a0a5383a 	mul	r18,r20,r2
   4ba88:	3816d43a 	srli	r11,r7,16
   4ba8c:	6814943a 	slli	r10,r13,16
   4ba90:	4ca5883a 	add	r18,r9,r18
   4ba94:	423fffcc 	andi	r8,r8,65535
   4ba98:	92e5883a 	add	r18,r18,r11
   4ba9c:	6808d43a 	srli	r4,r13,16
   4baa0:	5215883a 	add	r10,r10,r8
   4baa4:	a0c7383a 	mul	r3,r20,r3
   4baa8:	9240022e 	bgeu	r18,r9,4bab4 <__muldf3+0x3a4>
   4baac:	00800074 	movhi	r2,1
   4bab0:	1887883a 	add	r3,r3,r2
   4bab4:	802ad43a 	srli	r21,r16,16
   4bab8:	80bfffcc 	andi	r2,r16,65535
   4babc:	b893383a 	mul	r9,r23,r2
   4bac0:	3091383a 	mul	r8,r6,r2
   4bac4:	bd6f383a 	mul	r23,r23,r21
   4bac8:	9026943a 	slli	r19,r18,16
   4bacc:	481ad43a 	srli	r13,r9,16
   4bad0:	9024d43a 	srli	r18,r18,16
   4bad4:	39ffffcc 	andi	r7,r7,65535
   4bad8:	ba11883a 	add	r8,r23,r8
   4badc:	99e7883a 	add	r19,r19,r7
   4bae0:	4351883a 	add	r8,r8,r13
   4bae4:	1c97883a 	add	r11,r3,r18
   4bae8:	354d383a 	mul	r6,r6,r21
   4baec:	9925883a 	add	r18,r19,r4
   4baf0:	45c0022e 	bgeu	r8,r23,4bafc <__muldf3+0x3ec>
   4baf4:	00c00074 	movhi	r3,1
   4baf8:	30cd883a 	add	r6,r6,r3
   4bafc:	8889383a 	mul	r4,r17,r2
   4bb00:	8d63383a 	mul	r17,r17,r21
   4bb04:	a085383a 	mul	r2,r20,r2
   4bb08:	200ed43a 	srli	r7,r4,16
   4bb0c:	401cd43a 	srli	r14,r8,16
   4bb10:	401a943a 	slli	r13,r8,16
   4bb14:	8885883a 	add	r2,r17,r2
   4bb18:	4a3fffcc 	andi	r8,r9,65535
   4bb1c:	11c5883a 	add	r2,r2,r7
   4bb20:	339d883a 	add	r14,r6,r14
   4bb24:	6a11883a 	add	r8,r13,r8
   4bb28:	a561383a 	mul	r16,r20,r21
   4bb2c:	1440022e 	bgeu	r2,r17,4bb38 <__muldf3+0x428>
   4bb30:	00c00074 	movhi	r3,1
   4bb34:	80e1883a 	add	r16,r16,r3
   4bb38:	1006943a 	slli	r3,r2,16
   4bb3c:	213fffcc 	andi	r4,r4,65535
   4bb40:	93db883a 	add	r13,r18,r15
   4bb44:	1909883a 	add	r4,r3,r4
   4bb48:	22c7883a 	add	r3,r4,r11
   4bb4c:	6cd3803a 	cmpltu	r9,r13,r19
   4bb50:	6a09883a 	add	r4,r13,r8
   4bb54:	1a5b883a 	add	r13,r3,r9
   4bb58:	2211803a 	cmpltu	r8,r4,r8
   4bb5c:	734d883a 	add	r6,r14,r13
   4bb60:	100ed43a 	srli	r7,r2,16
   4bb64:	6a53803a 	cmpltu	r9,r13,r9
   4bb68:	3205883a 	add	r2,r6,r8
   4bb6c:	1ac7803a 	cmpltu	r3,r3,r11
   4bb70:	1211803a 	cmpltu	r8,r2,r8
   4bb74:	48c6b03a 	or	r3,r9,r3
   4bb78:	338d803a 	cmpltu	r6,r6,r14
   4bb7c:	19c7883a 	add	r3,r3,r7
   4bb80:	418cb03a 	or	r6,r8,r6
   4bb84:	1987883a 	add	r3,r3,r6
   4bb88:	2024927a 	slli	r18,r4,9
   4bb8c:	1c07883a 	add	r3,r3,r16
   4bb90:	1806927a 	slli	r3,r3,9
   4bb94:	1020d5fa 	srli	r16,r2,23
   4bb98:	2008d5fa 	srli	r4,r4,23
   4bb9c:	9294b03a 	or	r10,r18,r10
   4bba0:	1004927a 	slli	r2,r2,9
   4bba4:	5024c03a 	cmpne	r18,r10,zero
   4bba8:	1c20b03a 	or	r16,r3,r16
   4bbac:	9108b03a 	or	r4,r18,r4
   4bbb0:	80c0402c 	andhi	r3,r16,256
   4bbb4:	20a4b03a 	or	r18,r4,r2
   4bbb8:	18000726 	beq	r3,zero,4bbd8 <__muldf3+0x4c8>
   4bbbc:	9006d07a 	srli	r3,r18,1
   4bbc0:	800897fa 	slli	r4,r16,31
   4bbc4:	9080004c 	andi	r2,r18,1
   4bbc8:	8020d07a 	srli	r16,r16,1
   4bbcc:	10c4b03a 	or	r2,r2,r3
   4bbd0:	1124b03a 	or	r18,r2,r4
   4bbd4:	600b883a 	mov	r5,r12
   4bbd8:	2900ffc4 	addi	r4,r5,1023
   4bbdc:	01004b0e 	bge	zero,r4,4bd0c <__muldf3+0x5fc>
   4bbe0:	908001cc 	andi	r2,r18,7
   4bbe4:	10000726 	beq	r2,zero,4bc04 <__muldf3+0x4f4>
   4bbe8:	90c003cc 	andi	r3,r18,15
   4bbec:	00800104 	movi	r2,4
   4bbf0:	18800426 	beq	r3,r2,4bc04 <__muldf3+0x4f4>
   4bbf4:	9087883a 	add	r3,r18,r2
   4bbf8:	1c85803a 	cmpltu	r2,r3,r18
   4bbfc:	80a1883a 	add	r16,r16,r2
   4bc00:	1825883a 	mov	r18,r3
   4bc04:	8080402c 	andhi	r2,r16,256
   4bc08:	10000426 	beq	r2,zero,4bc1c <__muldf3+0x50c>
   4bc0c:	00bfc034 	movhi	r2,65280
   4bc10:	10bfffc4 	addi	r2,r2,-1
   4bc14:	29010004 	addi	r4,r5,1024
   4bc18:	80a0703a 	and	r16,r16,r2
   4bc1c:	0081ff84 	movi	r2,2046
   4bc20:	1100320e 	bge	r2,r4,4bcec <__muldf3+0x5dc>
   4bc24:	b4c0004c 	andi	r19,r22,1
   4bc28:	0101ffc4 	movi	r4,2047
   4bc2c:	0021883a 	mov	r16,zero
   4bc30:	0025883a 	mov	r18,zero
   4bc34:	003f1006 	br	4b878 <__alt_data_end+0xfffdab38>
   4bc38:	8080022c 	andhi	r2,r16,8
   4bc3c:	10000926 	beq	r2,zero,4bc64 <__muldf3+0x554>
   4bc40:	8880022c 	andhi	r2,r17,8
   4bc44:	1000071e 	bne	r2,zero,4bc64 <__muldf3+0x554>
   4bc48:	00800434 	movhi	r2,16
   4bc4c:	8c000234 	orhi	r16,r17,8
   4bc50:	10bfffc4 	addi	r2,r2,-1
   4bc54:	1827883a 	mov	r19,r3
   4bc58:	80a0703a 	and	r16,r16,r2
   4bc5c:	b825883a 	mov	r18,r23
   4bc60:	003f6a06 	br	4ba0c <__alt_data_end+0xfffdaccc>
   4bc64:	00800434 	movhi	r2,16
   4bc68:	84000234 	orhi	r16,r16,8
   4bc6c:	10bfffc4 	addi	r2,r2,-1
   4bc70:	80a0703a 	and	r16,r16,r2
   4bc74:	003f6506 	br	4ba0c <__alt_data_end+0xfffdaccc>
   4bc78:	3009883a 	mov	r4,r6
   4bc7c:	d8c00215 	stw	r3,8(sp)
   4bc80:	d9800315 	stw	r6,12(sp)
   4bc84:	da800015 	stw	r10,0(sp)
   4bc88:	dac00115 	stw	r11,4(sp)
   4bc8c:	004c9000 	call	4c900 <__clzsi2>
   4bc90:	11000804 	addi	r4,r2,32
   4bc94:	014009c4 	movi	r5,39
   4bc98:	d8c00217 	ldw	r3,8(sp)
   4bc9c:	d9800317 	ldw	r6,12(sp)
   4bca0:	da800017 	ldw	r10,0(sp)
   4bca4:	dac00117 	ldw	r11,4(sp)
   4bca8:	293f320e 	bge	r5,r4,4b974 <__alt_data_end+0xfffdac34>
   4bcac:	10bffe04 	addi	r2,r2,-8
   4bcb0:	b8a2983a 	sll	r17,r23,r2
   4bcb4:	002f883a 	mov	r23,zero
   4bcb8:	003f3506 	br	4b990 <__alt_data_end+0xfffdac50>
   4bcbc:	d9800315 	stw	r6,12(sp)
   4bcc0:	d9c00015 	stw	r7,0(sp)
   4bcc4:	004c9000 	call	4c900 <__clzsi2>
   4bcc8:	10c00804 	addi	r3,r2,32
   4bccc:	010009c4 	movi	r4,39
   4bcd0:	d9800317 	ldw	r6,12(sp)
   4bcd4:	d9c00017 	ldw	r7,0(sp)
   4bcd8:	20ff060e 	bge	r4,r3,4b8f4 <__alt_data_end+0xfffdabb4>
   4bcdc:	10bffe04 	addi	r2,r2,-8
   4bce0:	88a0983a 	sll	r16,r17,r2
   4bce4:	0025883a 	mov	r18,zero
   4bce8:	003f0906 	br	4b910 <__alt_data_end+0xfffdabd0>
   4bcec:	9004d0fa 	srli	r2,r18,3
   4bcf0:	8024977a 	slli	r18,r16,29
   4bcf4:	8020927a 	slli	r16,r16,9
   4bcf8:	2101ffcc 	andi	r4,r4,2047
   4bcfc:	90a4b03a 	or	r18,r18,r2
   4bd00:	8020d33a 	srli	r16,r16,12
   4bd04:	b4c0004c 	andi	r19,r22,1
   4bd08:	003edb06 	br	4b878 <__alt_data_end+0xfffdab38>
   4bd0c:	00ff0084 	movi	r3,-1022
   4bd10:	1947c83a 	sub	r3,r3,r5
   4bd14:	00800e04 	movi	r2,56
   4bd18:	10c0080e 	bge	r2,r3,4bd3c <__muldf3+0x62c>
   4bd1c:	b4c0004c 	andi	r19,r22,1
   4bd20:	0009883a 	mov	r4,zero
   4bd24:	0021883a 	mov	r16,zero
   4bd28:	0025883a 	mov	r18,zero
   4bd2c:	003ed206 	br	4b878 <__alt_data_end+0xfffdab38>
   4bd30:	600b883a 	mov	r5,r12
   4bd34:	e02d883a 	mov	r22,fp
   4bd38:	003fa706 	br	4bbd8 <__alt_data_end+0xfffdae98>
   4bd3c:	008007c4 	movi	r2,31
   4bd40:	10c01816 	blt	r2,r3,4bda4 <__muldf3+0x694>
   4bd44:	29410784 	addi	r5,r5,1054
   4bd48:	8144983a 	sll	r2,r16,r5
   4bd4c:	90c8d83a 	srl	r4,r18,r3
   4bd50:	914a983a 	sll	r5,r18,r5
   4bd54:	80c6d83a 	srl	r3,r16,r3
   4bd58:	2088b03a 	or	r4,r4,r2
   4bd5c:	2804c03a 	cmpne	r2,r5,zero
   4bd60:	2084b03a 	or	r2,r4,r2
   4bd64:	110001cc 	andi	r4,r2,7
   4bd68:	20000726 	beq	r4,zero,4bd88 <__muldf3+0x678>
   4bd6c:	114003cc 	andi	r5,r2,15
   4bd70:	01000104 	movi	r4,4
   4bd74:	29000426 	beq	r5,r4,4bd88 <__muldf3+0x678>
   4bd78:	11000104 	addi	r4,r2,4
   4bd7c:	2085803a 	cmpltu	r2,r4,r2
   4bd80:	1887883a 	add	r3,r3,r2
   4bd84:	2005883a 	mov	r2,r4
   4bd88:	1900202c 	andhi	r4,r3,128
   4bd8c:	20001826 	beq	r4,zero,4bdf0 <__muldf3+0x6e0>
   4bd90:	b4c0004c 	andi	r19,r22,1
   4bd94:	01000044 	movi	r4,1
   4bd98:	0021883a 	mov	r16,zero
   4bd9c:	0025883a 	mov	r18,zero
   4bda0:	003eb506 	br	4b878 <__alt_data_end+0xfffdab38>
   4bda4:	00bef884 	movi	r2,-1054
   4bda8:	1145c83a 	sub	r2,r2,r5
   4bdac:	8088d83a 	srl	r4,r16,r2
   4bdb0:	00800804 	movi	r2,32
   4bdb4:	18801726 	beq	r3,r2,4be14 <__muldf3+0x704>
   4bdb8:	28810f84 	addi	r2,r5,1086
   4bdbc:	8084983a 	sll	r2,r16,r2
   4bdc0:	1484b03a 	or	r2,r2,r18
   4bdc4:	1004c03a 	cmpne	r2,r2,zero
   4bdc8:	1104b03a 	or	r2,r2,r4
   4bdcc:	10c001cc 	andi	r3,r2,7
   4bdd0:	18000b1e 	bne	r3,zero,4be00 <__muldf3+0x6f0>
   4bdd4:	0021883a 	mov	r16,zero
   4bdd8:	1004d0fa 	srli	r2,r2,3
   4bddc:	b4c0004c 	andi	r19,r22,1
   4bde0:	0009883a 	mov	r4,zero
   4bde4:	10e4b03a 	or	r18,r2,r3
   4bde8:	003ea306 	br	4b878 <__alt_data_end+0xfffdab38>
   4bdec:	0007883a 	mov	r3,zero
   4bdf0:	1820927a 	slli	r16,r3,9
   4bdf4:	1806977a 	slli	r3,r3,29
   4bdf8:	8020d33a 	srli	r16,r16,12
   4bdfc:	003ff606 	br	4bdd8 <__alt_data_end+0xfffdb098>
   4be00:	110003cc 	andi	r4,r2,15
   4be04:	00c00104 	movi	r3,4
   4be08:	20fff826 	beq	r4,r3,4bdec <__alt_data_end+0xfffdb0ac>
   4be0c:	0007883a 	mov	r3,zero
   4be10:	003fd906 	br	4bd78 <__alt_data_end+0xfffdb038>
   4be14:	0005883a 	mov	r2,zero
   4be18:	003fe906 	br	4bdc0 <__alt_data_end+0xfffdb080>
   4be1c:	00800434 	movhi	r2,16
   4be20:	84000234 	orhi	r16,r16,8
   4be24:	10bfffc4 	addi	r2,r2,-1
   4be28:	e4c0004c 	andi	r19,fp,1
   4be2c:	80a0703a 	and	r16,r16,r2
   4be30:	003ef606 	br	4ba0c <__alt_data_end+0xfffdaccc>

0004be34 <__subdf3>:
   4be34:	00c00434 	movhi	r3,16
   4be38:	18ffffc4 	addi	r3,r3,-1
   4be3c:	defffb04 	addi	sp,sp,-20
   4be40:	28d2703a 	and	r9,r5,r3
   4be44:	3814d53a 	srli	r10,r7,20
   4be48:	38c6703a 	and	r3,r7,r3
   4be4c:	3004d77a 	srli	r2,r6,29
   4be50:	dc800215 	stw	r18,8(sp)
   4be54:	dc000015 	stw	r16,0(sp)
   4be58:	2824d7fa 	srli	r18,r5,31
   4be5c:	2820d53a 	srli	r16,r5,20
   4be60:	481290fa 	slli	r9,r9,3
   4be64:	200ad77a 	srli	r5,r4,29
   4be68:	180690fa 	slli	r3,r3,3
   4be6c:	dc400115 	stw	r17,4(sp)
   4be70:	dfc00415 	stw	ra,16(sp)
   4be74:	202290fa 	slli	r17,r4,3
   4be78:	dcc00315 	stw	r19,12(sp)
   4be7c:	5281ffcc 	andi	r10,r10,2047
   4be80:	0101ffc4 	movi	r4,2047
   4be84:	9011883a 	mov	r8,r18
   4be88:	8401ffcc 	andi	r16,r16,2047
   4be8c:	94803fcc 	andi	r18,r18,255
   4be90:	494ab03a 	or	r5,r9,r5
   4be94:	380ed7fa 	srli	r7,r7,31
   4be98:	1886b03a 	or	r3,r3,r2
   4be9c:	300c90fa 	slli	r6,r6,3
   4bea0:	51009026 	beq	r10,r4,4c0e4 <__subdf3+0x2b0>
   4bea4:	39c0005c 	xori	r7,r7,1
   4bea8:	8285c83a 	sub	r2,r16,r10
   4beac:	91c06f26 	beq	r18,r7,4c06c <__subdf3+0x238>
   4beb0:	0080b10e 	bge	zero,r2,4c178 <__subdf3+0x344>
   4beb4:	50002a1e 	bne	r10,zero,4bf60 <__subdf3+0x12c>
   4beb8:	1988b03a 	or	r4,r3,r6
   4bebc:	2000941e 	bne	r4,zero,4c110 <__subdf3+0x2dc>
   4bec0:	888001cc 	andi	r2,r17,7
   4bec4:	10005b26 	beq	r2,zero,4c034 <__subdf3+0x200>
   4bec8:	88c003cc 	andi	r3,r17,15
   4becc:	00800104 	movi	r2,4
   4bed0:	18805826 	beq	r3,r2,4c034 <__subdf3+0x200>
   4bed4:	88c00104 	addi	r3,r17,4
   4bed8:	1c63803a 	cmpltu	r17,r3,r17
   4bedc:	2c4b883a 	add	r5,r5,r17
   4bee0:	2880202c 	andhi	r2,r5,128
   4bee4:	9200004c 	andi	r8,r18,1
   4bee8:	1823883a 	mov	r17,r3
   4beec:	10005426 	beq	r2,zero,4c040 <__subdf3+0x20c>
   4bef0:	84000044 	addi	r16,r16,1
   4bef4:	0081ffc4 	movi	r2,2047
   4bef8:	8080bf26 	beq	r16,r2,4c1f8 <__subdf3+0x3c4>
   4befc:	013fe034 	movhi	r4,65408
   4bf00:	213fffc4 	addi	r4,r4,-1
   4bf04:	290a703a 	and	r5,r5,r4
   4bf08:	2804977a 	slli	r2,r5,29
   4bf0c:	280a927a 	slli	r5,r5,9
   4bf10:	8822d0fa 	srli	r17,r17,3
   4bf14:	8401ffcc 	andi	r16,r16,2047
   4bf18:	2808d33a 	srli	r4,r5,12
   4bf1c:	1444b03a 	or	r2,r2,r17
   4bf20:	8401ffcc 	andi	r16,r16,2047
   4bf24:	800a953a 	slli	r5,r16,20
   4bf28:	40c03fcc 	andi	r3,r8,255
   4bf2c:	04000434 	movhi	r16,16
   4bf30:	180697fa 	slli	r3,r3,31
   4bf34:	843fffc4 	addi	r16,r16,-1
   4bf38:	2420703a 	and	r16,r4,r16
   4bf3c:	8160b03a 	or	r16,r16,r5
   4bf40:	80c6b03a 	or	r3,r16,r3
   4bf44:	dfc00417 	ldw	ra,16(sp)
   4bf48:	dcc00317 	ldw	r19,12(sp)
   4bf4c:	dc800217 	ldw	r18,8(sp)
   4bf50:	dc400117 	ldw	r17,4(sp)
   4bf54:	dc000017 	ldw	r16,0(sp)
   4bf58:	dec00504 	addi	sp,sp,20
   4bf5c:	f800283a 	ret
   4bf60:	0101ffc4 	movi	r4,2047
   4bf64:	813fd626 	beq	r16,r4,4bec0 <__alt_data_end+0xfffdb180>
   4bf68:	18c02034 	orhi	r3,r3,128
   4bf6c:	01000e04 	movi	r4,56
   4bf70:	2080a416 	blt	r4,r2,4c204 <__subdf3+0x3d0>
   4bf74:	010007c4 	movi	r4,31
   4bf78:	2080c716 	blt	r4,r2,4c298 <__subdf3+0x464>
   4bf7c:	01000804 	movi	r4,32
   4bf80:	2089c83a 	sub	r4,r4,r2
   4bf84:	1910983a 	sll	r8,r3,r4
   4bf88:	308ed83a 	srl	r7,r6,r2
   4bf8c:	3108983a 	sll	r4,r6,r4
   4bf90:	1884d83a 	srl	r2,r3,r2
   4bf94:	41ccb03a 	or	r6,r8,r7
   4bf98:	2008c03a 	cmpne	r4,r4,zero
   4bf9c:	310cb03a 	or	r6,r6,r4
   4bfa0:	898dc83a 	sub	r6,r17,r6
   4bfa4:	89a3803a 	cmpltu	r17,r17,r6
   4bfa8:	288bc83a 	sub	r5,r5,r2
   4bfac:	2c4bc83a 	sub	r5,r5,r17
   4bfb0:	3023883a 	mov	r17,r6
   4bfb4:	2880202c 	andhi	r2,r5,128
   4bfb8:	10006b26 	beq	r2,zero,4c168 <__subdf3+0x334>
   4bfbc:	04c02034 	movhi	r19,128
   4bfc0:	9cffffc4 	addi	r19,r19,-1
   4bfc4:	2ce6703a 	and	r19,r5,r19
   4bfc8:	98007c26 	beq	r19,zero,4c1bc <__subdf3+0x388>
   4bfcc:	9809883a 	mov	r4,r19
   4bfd0:	004c9000 	call	4c900 <__clzsi2>
   4bfd4:	10fffe04 	addi	r3,r2,-8
   4bfd8:	010007c4 	movi	r4,31
   4bfdc:	20c07d16 	blt	r4,r3,4c1d4 <__subdf3+0x3a0>
   4bfe0:	01400a04 	movi	r5,40
   4bfe4:	2885c83a 	sub	r2,r5,r2
   4bfe8:	888ad83a 	srl	r5,r17,r2
   4bfec:	98e6983a 	sll	r19,r19,r3
   4bff0:	88e2983a 	sll	r17,r17,r3
   4bff4:	2ce6b03a 	or	r19,r5,r19
   4bff8:	1c007a16 	blt	r3,r16,4c1e4 <__subdf3+0x3b0>
   4bffc:	1c21c83a 	sub	r16,r3,r16
   4c000:	81400044 	addi	r5,r16,1
   4c004:	00c007c4 	movi	r3,31
   4c008:	19409616 	blt	r3,r5,4c264 <__subdf3+0x430>
   4c00c:	1c21c83a 	sub	r16,r3,r16
   4c010:	8c08983a 	sll	r4,r17,r16
   4c014:	8946d83a 	srl	r3,r17,r5
   4c018:	9c20983a 	sll	r16,r19,r16
   4c01c:	2008c03a 	cmpne	r4,r4,zero
   4c020:	994ad83a 	srl	r5,r19,r5
   4c024:	1c06b03a 	or	r3,r3,r16
   4c028:	1922b03a 	or	r17,r3,r4
   4c02c:	0021883a 	mov	r16,zero
   4c030:	003fa306 	br	4bec0 <__alt_data_end+0xfffdb180>
   4c034:	2880202c 	andhi	r2,r5,128
   4c038:	9200004c 	andi	r8,r18,1
   4c03c:	103fac1e 	bne	r2,zero,4bef0 <__alt_data_end+0xfffdb1b0>
   4c040:	2804977a 	slli	r2,r5,29
   4c044:	8822d0fa 	srli	r17,r17,3
   4c048:	00c1ffc4 	movi	r3,2047
   4c04c:	280ad0fa 	srli	r5,r5,3
   4c050:	1444b03a 	or	r2,r2,r17
   4c054:	80c02726 	beq	r16,r3,4c0f4 <__subdf3+0x2c0>
   4c058:	01000434 	movhi	r4,16
   4c05c:	213fffc4 	addi	r4,r4,-1
   4c060:	80e0703a 	and	r16,r16,r3
   4c064:	2908703a 	and	r4,r5,r4
   4c068:	003fad06 	br	4bf20 <__alt_data_end+0xfffdb1e0>
   4c06c:	0080690e 	bge	zero,r2,4c214 <__subdf3+0x3e0>
   4c070:	50002f26 	beq	r10,zero,4c130 <__subdf3+0x2fc>
   4c074:	0101ffc4 	movi	r4,2047
   4c078:	813f9126 	beq	r16,r4,4bec0 <__alt_data_end+0xfffdb180>
   4c07c:	18c02034 	orhi	r3,r3,128
   4c080:	01000e04 	movi	r4,56
   4c084:	2080b00e 	bge	r4,r2,4c348 <__subdf3+0x514>
   4c088:	198cb03a 	or	r6,r3,r6
   4c08c:	300ec03a 	cmpne	r7,r6,zero
   4c090:	0005883a 	mov	r2,zero
   4c094:	3c4f883a 	add	r7,r7,r17
   4c098:	3c63803a 	cmpltu	r17,r7,r17
   4c09c:	114b883a 	add	r5,r2,r5
   4c0a0:	2c4b883a 	add	r5,r5,r17
   4c0a4:	3823883a 	mov	r17,r7
   4c0a8:	2880202c 	andhi	r2,r5,128
   4c0ac:	10002e26 	beq	r2,zero,4c168 <__subdf3+0x334>
   4c0b0:	84000044 	addi	r16,r16,1
   4c0b4:	0081ffc4 	movi	r2,2047
   4c0b8:	8080de26 	beq	r16,r2,4c434 <__subdf3+0x600>
   4c0bc:	00bfe034 	movhi	r2,65408
   4c0c0:	10bfffc4 	addi	r2,r2,-1
   4c0c4:	288a703a 	and	r5,r5,r2
   4c0c8:	880cd07a 	srli	r6,r17,1
   4c0cc:	280897fa 	slli	r4,r5,31
   4c0d0:	88c0004c 	andi	r3,r17,1
   4c0d4:	30e2b03a 	or	r17,r6,r3
   4c0d8:	280ad07a 	srli	r5,r5,1
   4c0dc:	8922b03a 	or	r17,r17,r4
   4c0e0:	003f7706 	br	4bec0 <__alt_data_end+0xfffdb180>
   4c0e4:	1984b03a 	or	r2,r3,r6
   4c0e8:	103f6e26 	beq	r2,zero,4bea4 <__alt_data_end+0xfffdb164>
   4c0ec:	39c03fcc 	andi	r7,r7,255
   4c0f0:	003f6d06 	br	4bea8 <__alt_data_end+0xfffdb168>
   4c0f4:	1146b03a 	or	r3,r2,r5
   4c0f8:	18003f26 	beq	r3,zero,4c1f8 <__subdf3+0x3c4>
   4c0fc:	00c00434 	movhi	r3,16
   4c100:	29000234 	orhi	r4,r5,8
   4c104:	18ffffc4 	addi	r3,r3,-1
   4c108:	20c8703a 	and	r4,r4,r3
   4c10c:	003f8406 	br	4bf20 <__alt_data_end+0xfffdb1e0>
   4c110:	10bfffc4 	addi	r2,r2,-1
   4c114:	1000501e 	bne	r2,zero,4c258 <__subdf3+0x424>
   4c118:	898fc83a 	sub	r7,r17,r6
   4c11c:	89e3803a 	cmpltu	r17,r17,r7
   4c120:	28cbc83a 	sub	r5,r5,r3
   4c124:	2c4bc83a 	sub	r5,r5,r17
   4c128:	3823883a 	mov	r17,r7
   4c12c:	003fa106 	br	4bfb4 <__alt_data_end+0xfffdb274>
   4c130:	1988b03a 	or	r4,r3,r6
   4c134:	203f6226 	beq	r4,zero,4bec0 <__alt_data_end+0xfffdb180>
   4c138:	10bfffc4 	addi	r2,r2,-1
   4c13c:	10009b1e 	bne	r2,zero,4c3ac <__subdf3+0x578>
   4c140:	344d883a 	add	r6,r6,r17
   4c144:	3463803a 	cmpltu	r17,r6,r17
   4c148:	194b883a 	add	r5,r3,r5
   4c14c:	2c4b883a 	add	r5,r5,r17
   4c150:	3023883a 	mov	r17,r6
   4c154:	003fd406 	br	4c0a8 <__alt_data_end+0xfffdb368>
   4c158:	1106b03a 	or	r3,r2,r4
   4c15c:	1800b426 	beq	r3,zero,4c430 <__subdf3+0x5fc>
   4c160:	100b883a 	mov	r5,r2
   4c164:	2023883a 	mov	r17,r4
   4c168:	888001cc 	andi	r2,r17,7
   4c16c:	103f561e 	bne	r2,zero,4bec8 <__alt_data_end+0xfffdb188>
   4c170:	9200004c 	andi	r8,r18,1
   4c174:	003fb206 	br	4c040 <__alt_data_end+0xfffdb300>
   4c178:	1000531e 	bne	r2,zero,4c2c8 <__subdf3+0x494>
   4c17c:	80800044 	addi	r2,r16,1
   4c180:	1081ffcc 	andi	r2,r2,2047
   4c184:	01000044 	movi	r4,1
   4c188:	2080a00e 	bge	r4,r2,4c40c <__subdf3+0x5d8>
   4c18c:	8985c83a 	sub	r2,r17,r6
   4c190:	8889803a 	cmpltu	r4,r17,r2
   4c194:	28e7c83a 	sub	r19,r5,r3
   4c198:	9927c83a 	sub	r19,r19,r4
   4c19c:	9900202c 	andhi	r4,r19,128
   4c1a0:	20006226 	beq	r4,zero,4c32c <__subdf3+0x4f8>
   4c1a4:	3463c83a 	sub	r17,r6,r17
   4c1a8:	194bc83a 	sub	r5,r3,r5
   4c1ac:	344d803a 	cmpltu	r6,r6,r17
   4c1b0:	29a7c83a 	sub	r19,r5,r6
   4c1b4:	3825883a 	mov	r18,r7
   4c1b8:	983f841e 	bne	r19,zero,4bfcc <__alt_data_end+0xfffdb28c>
   4c1bc:	8809883a 	mov	r4,r17
   4c1c0:	004c9000 	call	4c900 <__clzsi2>
   4c1c4:	10800804 	addi	r2,r2,32
   4c1c8:	10fffe04 	addi	r3,r2,-8
   4c1cc:	010007c4 	movi	r4,31
   4c1d0:	20ff830e 	bge	r4,r3,4bfe0 <__alt_data_end+0xfffdb2a0>
   4c1d4:	14fff604 	addi	r19,r2,-40
   4c1d8:	8ce6983a 	sll	r19,r17,r19
   4c1dc:	0023883a 	mov	r17,zero
   4c1e0:	1c3f860e 	bge	r3,r16,4bffc <__alt_data_end+0xfffdb2bc>
   4c1e4:	017fe034 	movhi	r5,65408
   4c1e8:	297fffc4 	addi	r5,r5,-1
   4c1ec:	80e1c83a 	sub	r16,r16,r3
   4c1f0:	994a703a 	and	r5,r19,r5
   4c1f4:	003f3206 	br	4bec0 <__alt_data_end+0xfffdb180>
   4c1f8:	0009883a 	mov	r4,zero
   4c1fc:	0005883a 	mov	r2,zero
   4c200:	003f4706 	br	4bf20 <__alt_data_end+0xfffdb1e0>
   4c204:	198cb03a 	or	r6,r3,r6
   4c208:	300cc03a 	cmpne	r6,r6,zero
   4c20c:	0005883a 	mov	r2,zero
   4c210:	003f6306 	br	4bfa0 <__alt_data_end+0xfffdb260>
   4c214:	10009d1e 	bne	r2,zero,4c48c <__subdf3+0x658>
   4c218:	81c00044 	addi	r7,r16,1
   4c21c:	3881ffcc 	andi	r2,r7,2047
   4c220:	02400044 	movi	r9,1
   4c224:	4880680e 	bge	r9,r2,4c3c8 <__subdf3+0x594>
   4c228:	0081ffc4 	movi	r2,2047
   4c22c:	3880ae26 	beq	r7,r2,4c4e8 <__subdf3+0x6b4>
   4c230:	344d883a 	add	r6,r6,r17
   4c234:	3463803a 	cmpltu	r17,r6,r17
   4c238:	194b883a 	add	r5,r3,r5
   4c23c:	2c4b883a 	add	r5,r5,r17
   4c240:	282297fa 	slli	r17,r5,31
   4c244:	300cd07a 	srli	r6,r6,1
   4c248:	280ad07a 	srli	r5,r5,1
   4c24c:	3821883a 	mov	r16,r7
   4c250:	89a2b03a 	or	r17,r17,r6
   4c254:	003f1a06 	br	4bec0 <__alt_data_end+0xfffdb180>
   4c258:	0101ffc4 	movi	r4,2047
   4c25c:	813f431e 	bne	r16,r4,4bf6c <__alt_data_end+0xfffdb22c>
   4c260:	003f1706 	br	4bec0 <__alt_data_end+0xfffdb180>
   4c264:	80bff844 	addi	r2,r16,-31
   4c268:	00c00804 	movi	r3,32
   4c26c:	9884d83a 	srl	r2,r19,r2
   4c270:	28c05126 	beq	r5,r3,4c3b8 <__subdf3+0x584>
   4c274:	00c00fc4 	movi	r3,63
   4c278:	1c21c83a 	sub	r16,r3,r16
   4c27c:	9c26983a 	sll	r19,r19,r16
   4c280:	9c62b03a 	or	r17,r19,r17
   4c284:	8822c03a 	cmpne	r17,r17,zero
   4c288:	88a2b03a 	or	r17,r17,r2
   4c28c:	000b883a 	mov	r5,zero
   4c290:	0021883a 	mov	r16,zero
   4c294:	003fb406 	br	4c168 <__alt_data_end+0xfffdb428>
   4c298:	113ff804 	addi	r4,r2,-32
   4c29c:	01c00804 	movi	r7,32
   4c2a0:	1908d83a 	srl	r4,r3,r4
   4c2a4:	11c04626 	beq	r2,r7,4c3c0 <__subdf3+0x58c>
   4c2a8:	01c01004 	movi	r7,64
   4c2ac:	3885c83a 	sub	r2,r7,r2
   4c2b0:	1884983a 	sll	r2,r3,r2
   4c2b4:	118cb03a 	or	r6,r2,r6
   4c2b8:	300cc03a 	cmpne	r6,r6,zero
   4c2bc:	310cb03a 	or	r6,r6,r4
   4c2c0:	0005883a 	mov	r2,zero
   4c2c4:	003f3606 	br	4bfa0 <__alt_data_end+0xfffdb260>
   4c2c8:	80002b26 	beq	r16,zero,4c378 <__subdf3+0x544>
   4c2cc:	0101ffc4 	movi	r4,2047
   4c2d0:	51006926 	beq	r10,r4,4c478 <__subdf3+0x644>
   4c2d4:	0085c83a 	sub	r2,zero,r2
   4c2d8:	29402034 	orhi	r5,r5,128
   4c2dc:	01000e04 	movi	r4,56
   4c2e0:	20807d16 	blt	r4,r2,4c4d8 <__subdf3+0x6a4>
   4c2e4:	010007c4 	movi	r4,31
   4c2e8:	2080d916 	blt	r4,r2,4c650 <__subdf3+0x81c>
   4c2ec:	01000804 	movi	r4,32
   4c2f0:	2089c83a 	sub	r4,r4,r2
   4c2f4:	2912983a 	sll	r9,r5,r4
   4c2f8:	8890d83a 	srl	r8,r17,r2
   4c2fc:	8908983a 	sll	r4,r17,r4
   4c300:	2884d83a 	srl	r2,r5,r2
   4c304:	4a22b03a 	or	r17,r9,r8
   4c308:	2008c03a 	cmpne	r4,r4,zero
   4c30c:	8922b03a 	or	r17,r17,r4
   4c310:	3463c83a 	sub	r17,r6,r17
   4c314:	1885c83a 	sub	r2,r3,r2
   4c318:	344d803a 	cmpltu	r6,r6,r17
   4c31c:	118bc83a 	sub	r5,r2,r6
   4c320:	5021883a 	mov	r16,r10
   4c324:	3825883a 	mov	r18,r7
   4c328:	003f2206 	br	4bfb4 <__alt_data_end+0xfffdb274>
   4c32c:	9886b03a 	or	r3,r19,r2
   4c330:	18001c1e 	bne	r3,zero,4c3a4 <__subdf3+0x570>
   4c334:	0011883a 	mov	r8,zero
   4c338:	000b883a 	mov	r5,zero
   4c33c:	0023883a 	mov	r17,zero
   4c340:	0021883a 	mov	r16,zero
   4c344:	003f3e06 	br	4c040 <__alt_data_end+0xfffdb300>
   4c348:	010007c4 	movi	r4,31
   4c34c:	20803c16 	blt	r4,r2,4c440 <__subdf3+0x60c>
   4c350:	01000804 	movi	r4,32
   4c354:	2089c83a 	sub	r4,r4,r2
   4c358:	1912983a 	sll	r9,r3,r4
   4c35c:	308ed83a 	srl	r7,r6,r2
   4c360:	3108983a 	sll	r4,r6,r4
   4c364:	1884d83a 	srl	r2,r3,r2
   4c368:	49ceb03a 	or	r7,r9,r7
   4c36c:	2008c03a 	cmpne	r4,r4,zero
   4c370:	390eb03a 	or	r7,r7,r4
   4c374:	003f4706 	br	4c094 <__alt_data_end+0xfffdb354>
   4c378:	2c48b03a 	or	r4,r5,r17
   4c37c:	20003e26 	beq	r4,zero,4c478 <__subdf3+0x644>
   4c380:	0084303a 	nor	r2,zero,r2
   4c384:	10003a1e 	bne	r2,zero,4c470 <__subdf3+0x63c>
   4c388:	3463c83a 	sub	r17,r6,r17
   4c38c:	194bc83a 	sub	r5,r3,r5
   4c390:	344d803a 	cmpltu	r6,r6,r17
   4c394:	298bc83a 	sub	r5,r5,r6
   4c398:	5021883a 	mov	r16,r10
   4c39c:	3825883a 	mov	r18,r7
   4c3a0:	003f0406 	br	4bfb4 <__alt_data_end+0xfffdb274>
   4c3a4:	1023883a 	mov	r17,r2
   4c3a8:	003f0706 	br	4bfc8 <__alt_data_end+0xfffdb288>
   4c3ac:	0101ffc4 	movi	r4,2047
   4c3b0:	813f331e 	bne	r16,r4,4c080 <__alt_data_end+0xfffdb340>
   4c3b4:	003ec206 	br	4bec0 <__alt_data_end+0xfffdb180>
   4c3b8:	0027883a 	mov	r19,zero
   4c3bc:	003fb006 	br	4c280 <__alt_data_end+0xfffdb540>
   4c3c0:	0005883a 	mov	r2,zero
   4c3c4:	003fbb06 	br	4c2b4 <__alt_data_end+0xfffdb574>
   4c3c8:	2c44b03a 	or	r2,r5,r17
   4c3cc:	80008b1e 	bne	r16,zero,4c5fc <__subdf3+0x7c8>
   4c3d0:	1000b526 	beq	r2,zero,4c6a8 <__subdf3+0x874>
   4c3d4:	1984b03a 	or	r2,r3,r6
   4c3d8:	103eb926 	beq	r2,zero,4bec0 <__alt_data_end+0xfffdb180>
   4c3dc:	3449883a 	add	r4,r6,r17
   4c3e0:	2463803a 	cmpltu	r17,r4,r17
   4c3e4:	194b883a 	add	r5,r3,r5
   4c3e8:	2c4b883a 	add	r5,r5,r17
   4c3ec:	2880202c 	andhi	r2,r5,128
   4c3f0:	2023883a 	mov	r17,r4
   4c3f4:	103f5c26 	beq	r2,zero,4c168 <__alt_data_end+0xfffdb428>
   4c3f8:	00bfe034 	movhi	r2,65408
   4c3fc:	10bfffc4 	addi	r2,r2,-1
   4c400:	4821883a 	mov	r16,r9
   4c404:	288a703a 	and	r5,r5,r2
   4c408:	003ead06 	br	4bec0 <__alt_data_end+0xfffdb180>
   4c40c:	2c44b03a 	or	r2,r5,r17
   4c410:	8000291e 	bne	r16,zero,4c4b8 <__subdf3+0x684>
   4c414:	10004f1e 	bne	r2,zero,4c554 <__subdf3+0x720>
   4c418:	1984b03a 	or	r2,r3,r6
   4c41c:	10000426 	beq	r2,zero,4c430 <__subdf3+0x5fc>
   4c420:	180b883a 	mov	r5,r3
   4c424:	3023883a 	mov	r17,r6
   4c428:	3825883a 	mov	r18,r7
   4c42c:	003ea406 	br	4bec0 <__alt_data_end+0xfffdb180>
   4c430:	0011883a 	mov	r8,zero
   4c434:	000b883a 	mov	r5,zero
   4c438:	0023883a 	mov	r17,zero
   4c43c:	003f0006 	br	4c040 <__alt_data_end+0xfffdb300>
   4c440:	11fff804 	addi	r7,r2,-32
   4c444:	19c8d83a 	srl	r4,r3,r7
   4c448:	01c00804 	movi	r7,32
   4c44c:	11c07e26 	beq	r2,r7,4c648 <__subdf3+0x814>
   4c450:	01c01004 	movi	r7,64
   4c454:	3885c83a 	sub	r2,r7,r2
   4c458:	1884983a 	sll	r2,r3,r2
   4c45c:	118cb03a 	or	r6,r2,r6
   4c460:	300ec03a 	cmpne	r7,r6,zero
   4c464:	390eb03a 	or	r7,r7,r4
   4c468:	0005883a 	mov	r2,zero
   4c46c:	003f0906 	br	4c094 <__alt_data_end+0xfffdb354>
   4c470:	0101ffc4 	movi	r4,2047
   4c474:	513f991e 	bne	r10,r4,4c2dc <__alt_data_end+0xfffdb59c>
   4c478:	180b883a 	mov	r5,r3
   4c47c:	3023883a 	mov	r17,r6
   4c480:	5021883a 	mov	r16,r10
   4c484:	3825883a 	mov	r18,r7
   4c488:	003e8d06 	br	4bec0 <__alt_data_end+0xfffdb180>
   4c48c:	80001a1e 	bne	r16,zero,4c4f8 <__subdf3+0x6c4>
   4c490:	2c48b03a 	or	r4,r5,r17
   4c494:	20005526 	beq	r4,zero,4c5ec <__subdf3+0x7b8>
   4c498:	0084303a 	nor	r2,zero,r2
   4c49c:	1000511e 	bne	r2,zero,4c5e4 <__subdf3+0x7b0>
   4c4a0:	89a3883a 	add	r17,r17,r6
   4c4a4:	194b883a 	add	r5,r3,r5
   4c4a8:	898d803a 	cmpltu	r6,r17,r6
   4c4ac:	298b883a 	add	r5,r5,r6
   4c4b0:	5021883a 	mov	r16,r10
   4c4b4:	003efc06 	br	4c0a8 <__alt_data_end+0xfffdb368>
   4c4b8:	1000341e 	bne	r2,zero,4c58c <__subdf3+0x758>
   4c4bc:	1984b03a 	or	r2,r3,r6
   4c4c0:	10006f26 	beq	r2,zero,4c680 <__subdf3+0x84c>
   4c4c4:	180b883a 	mov	r5,r3
   4c4c8:	3023883a 	mov	r17,r6
   4c4cc:	3825883a 	mov	r18,r7
   4c4d0:	0401ffc4 	movi	r16,2047
   4c4d4:	003e7a06 	br	4bec0 <__alt_data_end+0xfffdb180>
   4c4d8:	2c62b03a 	or	r17,r5,r17
   4c4dc:	8822c03a 	cmpne	r17,r17,zero
   4c4e0:	0005883a 	mov	r2,zero
   4c4e4:	003f8a06 	br	4c310 <__alt_data_end+0xfffdb5d0>
   4c4e8:	3821883a 	mov	r16,r7
   4c4ec:	000b883a 	mov	r5,zero
   4c4f0:	0023883a 	mov	r17,zero
   4c4f4:	003ed206 	br	4c040 <__alt_data_end+0xfffdb300>
   4c4f8:	0101ffc4 	movi	r4,2047
   4c4fc:	51003b26 	beq	r10,r4,4c5ec <__subdf3+0x7b8>
   4c500:	0085c83a 	sub	r2,zero,r2
   4c504:	29402034 	orhi	r5,r5,128
   4c508:	01000e04 	movi	r4,56
   4c50c:	20806216 	blt	r4,r2,4c698 <__subdf3+0x864>
   4c510:	010007c4 	movi	r4,31
   4c514:	20806b16 	blt	r4,r2,4c6c4 <__subdf3+0x890>
   4c518:	01000804 	movi	r4,32
   4c51c:	2089c83a 	sub	r4,r4,r2
   4c520:	2912983a 	sll	r9,r5,r4
   4c524:	888ed83a 	srl	r7,r17,r2
   4c528:	8908983a 	sll	r4,r17,r4
   4c52c:	2884d83a 	srl	r2,r5,r2
   4c530:	49e2b03a 	or	r17,r9,r7
   4c534:	2008c03a 	cmpne	r4,r4,zero
   4c538:	8922b03a 	or	r17,r17,r4
   4c53c:	89a3883a 	add	r17,r17,r6
   4c540:	10c5883a 	add	r2,r2,r3
   4c544:	898d803a 	cmpltu	r6,r17,r6
   4c548:	118b883a 	add	r5,r2,r6
   4c54c:	5021883a 	mov	r16,r10
   4c550:	003ed506 	br	4c0a8 <__alt_data_end+0xfffdb368>
   4c554:	1984b03a 	or	r2,r3,r6
   4c558:	103e5926 	beq	r2,zero,4bec0 <__alt_data_end+0xfffdb180>
   4c55c:	8989c83a 	sub	r4,r17,r6
   4c560:	8911803a 	cmpltu	r8,r17,r4
   4c564:	28c5c83a 	sub	r2,r5,r3
   4c568:	1205c83a 	sub	r2,r2,r8
   4c56c:	1200202c 	andhi	r8,r2,128
   4c570:	403ef926 	beq	r8,zero,4c158 <__alt_data_end+0xfffdb418>
   4c574:	3463c83a 	sub	r17,r6,r17
   4c578:	194bc83a 	sub	r5,r3,r5
   4c57c:	344d803a 	cmpltu	r6,r6,r17
   4c580:	298bc83a 	sub	r5,r5,r6
   4c584:	3825883a 	mov	r18,r7
   4c588:	003e4d06 	br	4bec0 <__alt_data_end+0xfffdb180>
   4c58c:	1984b03a 	or	r2,r3,r6
   4c590:	10002b26 	beq	r2,zero,4c640 <__subdf3+0x80c>
   4c594:	2808d0fa 	srli	r4,r5,3
   4c598:	8822d0fa 	srli	r17,r17,3
   4c59c:	280a977a 	slli	r5,r5,29
   4c5a0:	2080022c 	andhi	r2,r4,8
   4c5a4:	2c62b03a 	or	r17,r5,r17
   4c5a8:	10000826 	beq	r2,zero,4c5cc <__subdf3+0x798>
   4c5ac:	1810d0fa 	srli	r8,r3,3
   4c5b0:	4080022c 	andhi	r2,r8,8
   4c5b4:	1000051e 	bne	r2,zero,4c5cc <__subdf3+0x798>
   4c5b8:	300cd0fa 	srli	r6,r6,3
   4c5bc:	1804977a 	slli	r2,r3,29
   4c5c0:	4009883a 	mov	r4,r8
   4c5c4:	3825883a 	mov	r18,r7
   4c5c8:	11a2b03a 	or	r17,r2,r6
   4c5cc:	880ad77a 	srli	r5,r17,29
   4c5d0:	200890fa 	slli	r4,r4,3
   4c5d4:	882290fa 	slli	r17,r17,3
   4c5d8:	0401ffc4 	movi	r16,2047
   4c5dc:	290ab03a 	or	r5,r5,r4
   4c5e0:	003e3706 	br	4bec0 <__alt_data_end+0xfffdb180>
   4c5e4:	0101ffc4 	movi	r4,2047
   4c5e8:	513fc71e 	bne	r10,r4,4c508 <__alt_data_end+0xfffdb7c8>
   4c5ec:	180b883a 	mov	r5,r3
   4c5f0:	3023883a 	mov	r17,r6
   4c5f4:	5021883a 	mov	r16,r10
   4c5f8:	003e3106 	br	4bec0 <__alt_data_end+0xfffdb180>
   4c5fc:	10002d26 	beq	r2,zero,4c6b4 <__subdf3+0x880>
   4c600:	1984b03a 	or	r2,r3,r6
   4c604:	10000e26 	beq	r2,zero,4c640 <__subdf3+0x80c>
   4c608:	2808d0fa 	srli	r4,r5,3
   4c60c:	8822d0fa 	srli	r17,r17,3
   4c610:	280a977a 	slli	r5,r5,29
   4c614:	2080022c 	andhi	r2,r4,8
   4c618:	2c62b03a 	or	r17,r5,r17
   4c61c:	103feb26 	beq	r2,zero,4c5cc <__alt_data_end+0xfffdb88c>
   4c620:	180ed0fa 	srli	r7,r3,3
   4c624:	3880022c 	andhi	r2,r7,8
   4c628:	103fe81e 	bne	r2,zero,4c5cc <__alt_data_end+0xfffdb88c>
   4c62c:	300cd0fa 	srli	r6,r6,3
   4c630:	1804977a 	slli	r2,r3,29
   4c634:	3809883a 	mov	r4,r7
   4c638:	11a2b03a 	or	r17,r2,r6
   4c63c:	003fe306 	br	4c5cc <__alt_data_end+0xfffdb88c>
   4c640:	0401ffc4 	movi	r16,2047
   4c644:	003e1e06 	br	4bec0 <__alt_data_end+0xfffdb180>
   4c648:	0005883a 	mov	r2,zero
   4c64c:	003f8306 	br	4c45c <__alt_data_end+0xfffdb71c>
   4c650:	113ff804 	addi	r4,r2,-32
   4c654:	02000804 	movi	r8,32
   4c658:	2908d83a 	srl	r4,r5,r4
   4c65c:	12002526 	beq	r2,r8,4c6f4 <__subdf3+0x8c0>
   4c660:	02001004 	movi	r8,64
   4c664:	4085c83a 	sub	r2,r8,r2
   4c668:	288a983a 	sll	r5,r5,r2
   4c66c:	2c62b03a 	or	r17,r5,r17
   4c670:	8822c03a 	cmpne	r17,r17,zero
   4c674:	8922b03a 	or	r17,r17,r4
   4c678:	0005883a 	mov	r2,zero
   4c67c:	003f2406 	br	4c310 <__alt_data_end+0xfffdb5d0>
   4c680:	01402034 	movhi	r5,128
   4c684:	0011883a 	mov	r8,zero
   4c688:	297fffc4 	addi	r5,r5,-1
   4c68c:	047ffe04 	movi	r17,-8
   4c690:	0401ffc4 	movi	r16,2047
   4c694:	003e6a06 	br	4c040 <__alt_data_end+0xfffdb300>
   4c698:	2c62b03a 	or	r17,r5,r17
   4c69c:	8822c03a 	cmpne	r17,r17,zero
   4c6a0:	0005883a 	mov	r2,zero
   4c6a4:	003fa506 	br	4c53c <__alt_data_end+0xfffdb7fc>
   4c6a8:	180b883a 	mov	r5,r3
   4c6ac:	3023883a 	mov	r17,r6
   4c6b0:	003e0306 	br	4bec0 <__alt_data_end+0xfffdb180>
   4c6b4:	180b883a 	mov	r5,r3
   4c6b8:	3023883a 	mov	r17,r6
   4c6bc:	0401ffc4 	movi	r16,2047
   4c6c0:	003dff06 	br	4bec0 <__alt_data_end+0xfffdb180>
   4c6c4:	113ff804 	addi	r4,r2,-32
   4c6c8:	01c00804 	movi	r7,32
   4c6cc:	2908d83a 	srl	r4,r5,r4
   4c6d0:	11c00a26 	beq	r2,r7,4c6fc <__subdf3+0x8c8>
   4c6d4:	01c01004 	movi	r7,64
   4c6d8:	3885c83a 	sub	r2,r7,r2
   4c6dc:	288a983a 	sll	r5,r5,r2
   4c6e0:	2c62b03a 	or	r17,r5,r17
   4c6e4:	8822c03a 	cmpne	r17,r17,zero
   4c6e8:	8922b03a 	or	r17,r17,r4
   4c6ec:	0005883a 	mov	r2,zero
   4c6f0:	003f9206 	br	4c53c <__alt_data_end+0xfffdb7fc>
   4c6f4:	000b883a 	mov	r5,zero
   4c6f8:	003fdc06 	br	4c66c <__alt_data_end+0xfffdb92c>
   4c6fc:	000b883a 	mov	r5,zero
   4c700:	003ff706 	br	4c6e0 <__alt_data_end+0xfffdb9a0>

0004c704 <__fixdfsi>:
   4c704:	2806d53a 	srli	r3,r5,20
   4c708:	00800434 	movhi	r2,16
   4c70c:	10bfffc4 	addi	r2,r2,-1
   4c710:	18c1ffcc 	andi	r3,r3,2047
   4c714:	0180ff84 	movi	r6,1022
   4c718:	2884703a 	and	r2,r5,r2
   4c71c:	280ad7fa 	srli	r5,r5,31
   4c720:	30c0130e 	bge	r6,r3,4c770 <__fixdfsi+0x6c>
   4c724:	01810744 	movi	r6,1053
   4c728:	30c00d16 	blt	r6,r3,4c760 <__fixdfsi+0x5c>
   4c72c:	01810cc4 	movi	r6,1075
   4c730:	30cdc83a 	sub	r6,r6,r3
   4c734:	01c007c4 	movi	r7,31
   4c738:	10800434 	orhi	r2,r2,16
   4c73c:	39800e0e 	bge	r7,r6,4c778 <__fixdfsi+0x74>
   4c740:	010104c4 	movi	r4,1043
   4c744:	20c7c83a 	sub	r3,r4,r3
   4c748:	10c6d83a 	srl	r3,r2,r3
   4c74c:	29403fcc 	andi	r5,r5,255
   4c750:	0145c83a 	sub	r2,zero,r5
   4c754:	1884f03a 	xor	r2,r3,r2
   4c758:	1145883a 	add	r2,r2,r5
   4c75c:	f800283a 	ret
   4c760:	00a00034 	movhi	r2,32768
   4c764:	10bfffc4 	addi	r2,r2,-1
   4c768:	2885883a 	add	r2,r5,r2
   4c76c:	f800283a 	ret
   4c770:	0005883a 	mov	r2,zero
   4c774:	f800283a 	ret
   4c778:	18fefb44 	addi	r3,r3,-1043
   4c77c:	2188d83a 	srl	r4,r4,r6
   4c780:	10c6983a 	sll	r3,r2,r3
   4c784:	20c6b03a 	or	r3,r4,r3
   4c788:	003ff006 	br	4c74c <__alt_data_end+0xfffdba0c>

0004c78c <__floatsidf>:
   4c78c:	defffd04 	addi	sp,sp,-12
   4c790:	dc400115 	stw	r17,4(sp)
   4c794:	dfc00215 	stw	ra,8(sp)
   4c798:	dc000015 	stw	r16,0(sp)
   4c79c:	2023883a 	mov	r17,r4
   4c7a0:	20001426 	beq	r4,zero,4c7f4 <__floatsidf+0x68>
   4c7a4:	2020d7fa 	srli	r16,r4,31
   4c7a8:	80000126 	beq	r16,zero,4c7b0 <__floatsidf+0x24>
   4c7ac:	0123c83a 	sub	r17,zero,r4
   4c7b0:	8809883a 	mov	r4,r17
   4c7b4:	004c9000 	call	4c900 <__clzsi2>
   4c7b8:	01410784 	movi	r5,1054
   4c7bc:	00c00284 	movi	r3,10
   4c7c0:	288bc83a 	sub	r5,r5,r2
   4c7c4:	18801c16 	blt	r3,r2,4c838 <__floatsidf+0xac>
   4c7c8:	00c002c4 	movi	r3,11
   4c7cc:	1887c83a 	sub	r3,r3,r2
   4c7d0:	88c8d83a 	srl	r4,r17,r3
   4c7d4:	00c00434 	movhi	r3,16
   4c7d8:	18ffffc4 	addi	r3,r3,-1
   4c7dc:	10800544 	addi	r2,r2,21
   4c7e0:	20c8703a 	and	r4,r4,r3
   4c7e4:	8884983a 	sll	r2,r17,r2
   4c7e8:	28c1ffcc 	andi	r3,r5,2047
   4c7ec:	800d883a 	mov	r6,r16
   4c7f0:	00000406 	br	4c804 <__floatsidf+0x78>
   4c7f4:	000d883a 	mov	r6,zero
   4c7f8:	0007883a 	mov	r3,zero
   4c7fc:	0009883a 	mov	r4,zero
   4c800:	0005883a 	mov	r2,zero
   4c804:	180a953a 	slli	r5,r3,20
   4c808:	31803fcc 	andi	r6,r6,255
   4c80c:	00c00434 	movhi	r3,16
   4c810:	300c97fa 	slli	r6,r6,31
   4c814:	18ffffc4 	addi	r3,r3,-1
   4c818:	20c6703a 	and	r3,r4,r3
   4c81c:	1946b03a 	or	r3,r3,r5
   4c820:	1986b03a 	or	r3,r3,r6
   4c824:	dfc00217 	ldw	ra,8(sp)
   4c828:	dc400117 	ldw	r17,4(sp)
   4c82c:	dc000017 	ldw	r16,0(sp)
   4c830:	dec00304 	addi	sp,sp,12
   4c834:	f800283a 	ret
   4c838:	10fffd44 	addi	r3,r2,-11
   4c83c:	88c8983a 	sll	r4,r17,r3
   4c840:	00800434 	movhi	r2,16
   4c844:	10bfffc4 	addi	r2,r2,-1
   4c848:	2088703a 	and	r4,r4,r2
   4c84c:	28c1ffcc 	andi	r3,r5,2047
   4c850:	800d883a 	mov	r6,r16
   4c854:	0005883a 	mov	r2,zero
   4c858:	003fea06 	br	4c804 <__alt_data_end+0xfffdbac4>

0004c85c <__floatunsidf>:
   4c85c:	defffe04 	addi	sp,sp,-8
   4c860:	dc000015 	stw	r16,0(sp)
   4c864:	dfc00115 	stw	ra,4(sp)
   4c868:	2021883a 	mov	r16,r4
   4c86c:	20001026 	beq	r4,zero,4c8b0 <__floatunsidf+0x54>
   4c870:	004c9000 	call	4c900 <__clzsi2>
   4c874:	01410784 	movi	r5,1054
   4c878:	100d883a 	mov	r6,r2
   4c87c:	288bc83a 	sub	r5,r5,r2
   4c880:	00800284 	movi	r2,10
   4c884:	11801616 	blt	r2,r6,4c8e0 <__floatunsidf+0x84>
   4c888:	008002c4 	movi	r2,11
   4c88c:	1185c83a 	sub	r2,r2,r6
   4c890:	8084d83a 	srl	r2,r16,r2
   4c894:	00c00434 	movhi	r3,16
   4c898:	31c00544 	addi	r7,r6,21
   4c89c:	18ffffc4 	addi	r3,r3,-1
   4c8a0:	81e0983a 	sll	r16,r16,r7
   4c8a4:	10cc703a 	and	r6,r2,r3
   4c8a8:	2941ffcc 	andi	r5,r5,2047
   4c8ac:	00000206 	br	4c8b8 <__floatunsidf+0x5c>
   4c8b0:	000b883a 	mov	r5,zero
   4c8b4:	000d883a 	mov	r6,zero
   4c8b8:	280a953a 	slli	r5,r5,20
   4c8bc:	00c00434 	movhi	r3,16
   4c8c0:	18ffffc4 	addi	r3,r3,-1
   4c8c4:	30c6703a 	and	r3,r6,r3
   4c8c8:	8005883a 	mov	r2,r16
   4c8cc:	1946b03a 	or	r3,r3,r5
   4c8d0:	dfc00117 	ldw	ra,4(sp)
   4c8d4:	dc000017 	ldw	r16,0(sp)
   4c8d8:	dec00204 	addi	sp,sp,8
   4c8dc:	f800283a 	ret
   4c8e0:	31bffd44 	addi	r6,r6,-11
   4c8e4:	818c983a 	sll	r6,r16,r6
   4c8e8:	00800434 	movhi	r2,16
   4c8ec:	10bfffc4 	addi	r2,r2,-1
   4c8f0:	2941ffcc 	andi	r5,r5,2047
   4c8f4:	0021883a 	mov	r16,zero
   4c8f8:	308c703a 	and	r6,r6,r2
   4c8fc:	003fee06 	br	4c8b8 <__alt_data_end+0xfffdbb78>

0004c900 <__clzsi2>:
   4c900:	00bfffd4 	movui	r2,65535
   4c904:	11000b36 	bltu	r2,r4,4c934 <__clzsi2+0x34>
   4c908:	00803fc4 	movi	r2,255
   4c90c:	1100122e 	bgeu	r2,r4,4c958 <__clzsi2+0x58>
   4c910:	00c00204 	movi	r3,8
   4c914:	01400604 	movi	r5,24
   4c918:	20c8d83a 	srl	r4,r4,r3
   4c91c:	00800174 	movhi	r2,5
   4c920:	109eda04 	addi	r2,r2,31592
   4c924:	1109883a 	add	r4,r2,r4
   4c928:	20800003 	ldbu	r2,0(r4)
   4c92c:	2885c83a 	sub	r2,r5,r2
   4c930:	f800283a 	ret
   4c934:	00804034 	movhi	r2,256
   4c938:	10bfffc4 	addi	r2,r2,-1
   4c93c:	11000336 	bltu	r2,r4,4c94c <__clzsi2+0x4c>
   4c940:	00c00404 	movi	r3,16
   4c944:	180b883a 	mov	r5,r3
   4c948:	003ff306 	br	4c918 <__alt_data_end+0xfffdbbd8>
   4c94c:	00c00604 	movi	r3,24
   4c950:	01400204 	movi	r5,8
   4c954:	003ff006 	br	4c918 <__alt_data_end+0xfffdbbd8>
   4c958:	0007883a 	mov	r3,zero
   4c95c:	01400804 	movi	r5,32
   4c960:	003fed06 	br	4c918 <__alt_data_end+0xfffdbbd8>

0004c964 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4c964:	defffe04 	addi	sp,sp,-8
   4c968:	dfc00115 	stw	ra,4(sp)
   4c96c:	df000015 	stw	fp,0(sp)
   4c970:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4c974:	008001b4 	movhi	r2,6
   4c978:	10a62b04 	addi	r2,r2,-26452
   4c97c:	10800017 	ldw	r2,0(r2)
   4c980:	10000526 	beq	r2,zero,4c998 <alt_get_errno+0x34>
   4c984:	008001b4 	movhi	r2,6
   4c988:	10a62b04 	addi	r2,r2,-26452
   4c98c:	10800017 	ldw	r2,0(r2)
   4c990:	103ee83a 	callr	r2
   4c994:	00000206 	br	4c9a0 <alt_get_errno+0x3c>
   4c998:	008001b4 	movhi	r2,6
   4c99c:	10ad3804 	addi	r2,r2,-19232
}
   4c9a0:	e037883a 	mov	sp,fp
   4c9a4:	dfc00117 	ldw	ra,4(sp)
   4c9a8:	df000017 	ldw	fp,0(sp)
   4c9ac:	dec00204 	addi	sp,sp,8
   4c9b0:	f800283a 	ret

0004c9b4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   4c9b4:	defffb04 	addi	sp,sp,-20
   4c9b8:	dfc00415 	stw	ra,16(sp)
   4c9bc:	df000315 	stw	fp,12(sp)
   4c9c0:	df000304 	addi	fp,sp,12
   4c9c4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   4c9c8:	e0bfff17 	ldw	r2,-4(fp)
   4c9cc:	10000616 	blt	r2,zero,4c9e8 <close+0x34>
   4c9d0:	e0bfff17 	ldw	r2,-4(fp)
   4c9d4:	10c00324 	muli	r3,r2,12
   4c9d8:	008001b4 	movhi	r2,6
   4c9dc:	10a1a504 	addi	r2,r2,-31084
   4c9e0:	1885883a 	add	r2,r3,r2
   4c9e4:	00000106 	br	4c9ec <close+0x38>
   4c9e8:	0005883a 	mov	r2,zero
   4c9ec:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   4c9f0:	e0bffd17 	ldw	r2,-12(fp)
   4c9f4:	10001926 	beq	r2,zero,4ca5c <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   4c9f8:	e0bffd17 	ldw	r2,-12(fp)
   4c9fc:	10800017 	ldw	r2,0(r2)
   4ca00:	10800417 	ldw	r2,16(r2)
   4ca04:	10000626 	beq	r2,zero,4ca20 <close+0x6c>
   4ca08:	e0bffd17 	ldw	r2,-12(fp)
   4ca0c:	10800017 	ldw	r2,0(r2)
   4ca10:	10800417 	ldw	r2,16(r2)
   4ca14:	e13ffd17 	ldw	r4,-12(fp)
   4ca18:	103ee83a 	callr	r2
   4ca1c:	00000106 	br	4ca24 <close+0x70>
   4ca20:	0005883a 	mov	r2,zero
   4ca24:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   4ca28:	e13fff17 	ldw	r4,-4(fp)
   4ca2c:	004d0cc0 	call	4d0cc <alt_release_fd>
    if (rval < 0)
   4ca30:	e0bffe17 	ldw	r2,-8(fp)
   4ca34:	1000070e 	bge	r2,zero,4ca54 <close+0xa0>
    {
      ALT_ERRNO = -rval;
   4ca38:	004c9640 	call	4c964 <alt_get_errno>
   4ca3c:	1007883a 	mov	r3,r2
   4ca40:	e0bffe17 	ldw	r2,-8(fp)
   4ca44:	0085c83a 	sub	r2,zero,r2
   4ca48:	18800015 	stw	r2,0(r3)
      return -1;
   4ca4c:	00bfffc4 	movi	r2,-1
   4ca50:	00000706 	br	4ca70 <close+0xbc>
    }
    return 0;
   4ca54:	0005883a 	mov	r2,zero
   4ca58:	00000506 	br	4ca70 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   4ca5c:	004c9640 	call	4c964 <alt_get_errno>
   4ca60:	1007883a 	mov	r3,r2
   4ca64:	00801444 	movi	r2,81
   4ca68:	18800015 	stw	r2,0(r3)
    return -1;
   4ca6c:	00bfffc4 	movi	r2,-1
  }
}
   4ca70:	e037883a 	mov	sp,fp
   4ca74:	dfc00117 	ldw	ra,4(sp)
   4ca78:	df000017 	ldw	fp,0(sp)
   4ca7c:	dec00204 	addi	sp,sp,8
   4ca80:	f800283a 	ret

0004ca84 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   4ca84:	defffc04 	addi	sp,sp,-16
   4ca88:	df000315 	stw	fp,12(sp)
   4ca8c:	df000304 	addi	fp,sp,12
   4ca90:	e13ffd15 	stw	r4,-12(fp)
   4ca94:	e17ffe15 	stw	r5,-8(fp)
   4ca98:	e1bfff15 	stw	r6,-4(fp)
  return len;
   4ca9c:	e0bfff17 	ldw	r2,-4(fp)
}
   4caa0:	e037883a 	mov	sp,fp
   4caa4:	df000017 	ldw	fp,0(sp)
   4caa8:	dec00104 	addi	sp,sp,4
   4caac:	f800283a 	ret

0004cab0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4cab0:	defffe04 	addi	sp,sp,-8
   4cab4:	dfc00115 	stw	ra,4(sp)
   4cab8:	df000015 	stw	fp,0(sp)
   4cabc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4cac0:	008001b4 	movhi	r2,6
   4cac4:	10a62b04 	addi	r2,r2,-26452
   4cac8:	10800017 	ldw	r2,0(r2)
   4cacc:	10000526 	beq	r2,zero,4cae4 <alt_get_errno+0x34>
   4cad0:	008001b4 	movhi	r2,6
   4cad4:	10a62b04 	addi	r2,r2,-26452
   4cad8:	10800017 	ldw	r2,0(r2)
   4cadc:	103ee83a 	callr	r2
   4cae0:	00000206 	br	4caec <alt_get_errno+0x3c>
   4cae4:	008001b4 	movhi	r2,6
   4cae8:	10ad3804 	addi	r2,r2,-19232
}
   4caec:	e037883a 	mov	sp,fp
   4caf0:	dfc00117 	ldw	ra,4(sp)
   4caf4:	df000017 	ldw	fp,0(sp)
   4caf8:	dec00204 	addi	sp,sp,8
   4cafc:	f800283a 	ret

0004cb00 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   4cb00:	defffb04 	addi	sp,sp,-20
   4cb04:	dfc00415 	stw	ra,16(sp)
   4cb08:	df000315 	stw	fp,12(sp)
   4cb0c:	df000304 	addi	fp,sp,12
   4cb10:	e13ffe15 	stw	r4,-8(fp)
   4cb14:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4cb18:	e0bffe17 	ldw	r2,-8(fp)
   4cb1c:	10000616 	blt	r2,zero,4cb38 <fstat+0x38>
   4cb20:	e0bffe17 	ldw	r2,-8(fp)
   4cb24:	10c00324 	muli	r3,r2,12
   4cb28:	008001b4 	movhi	r2,6
   4cb2c:	10a1a504 	addi	r2,r2,-31084
   4cb30:	1885883a 	add	r2,r3,r2
   4cb34:	00000106 	br	4cb3c <fstat+0x3c>
   4cb38:	0005883a 	mov	r2,zero
   4cb3c:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   4cb40:	e0bffd17 	ldw	r2,-12(fp)
   4cb44:	10001026 	beq	r2,zero,4cb88 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   4cb48:	e0bffd17 	ldw	r2,-12(fp)
   4cb4c:	10800017 	ldw	r2,0(r2)
   4cb50:	10800817 	ldw	r2,32(r2)
   4cb54:	10000726 	beq	r2,zero,4cb74 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
   4cb58:	e0bffd17 	ldw	r2,-12(fp)
   4cb5c:	10800017 	ldw	r2,0(r2)
   4cb60:	10800817 	ldw	r2,32(r2)
   4cb64:	e13ffd17 	ldw	r4,-12(fp)
   4cb68:	e17fff17 	ldw	r5,-4(fp)
   4cb6c:	103ee83a 	callr	r2
   4cb70:	00000a06 	br	4cb9c <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   4cb74:	e0bfff17 	ldw	r2,-4(fp)
   4cb78:	00c80004 	movi	r3,8192
   4cb7c:	10c00115 	stw	r3,4(r2)
      return 0;
   4cb80:	0005883a 	mov	r2,zero
   4cb84:	00000506 	br	4cb9c <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   4cb88:	004cab00 	call	4cab0 <alt_get_errno>
   4cb8c:	1007883a 	mov	r3,r2
   4cb90:	00801444 	movi	r2,81
   4cb94:	18800015 	stw	r2,0(r3)
    return -1;
   4cb98:	00bfffc4 	movi	r2,-1
  }
}
   4cb9c:	e037883a 	mov	sp,fp
   4cba0:	dfc00117 	ldw	ra,4(sp)
   4cba4:	df000017 	ldw	fp,0(sp)
   4cba8:	dec00204 	addi	sp,sp,8
   4cbac:	f800283a 	ret

0004cbb0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4cbb0:	defffe04 	addi	sp,sp,-8
   4cbb4:	dfc00115 	stw	ra,4(sp)
   4cbb8:	df000015 	stw	fp,0(sp)
   4cbbc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4cbc0:	008001b4 	movhi	r2,6
   4cbc4:	10a62b04 	addi	r2,r2,-26452
   4cbc8:	10800017 	ldw	r2,0(r2)
   4cbcc:	10000526 	beq	r2,zero,4cbe4 <alt_get_errno+0x34>
   4cbd0:	008001b4 	movhi	r2,6
   4cbd4:	10a62b04 	addi	r2,r2,-26452
   4cbd8:	10800017 	ldw	r2,0(r2)
   4cbdc:	103ee83a 	callr	r2
   4cbe0:	00000206 	br	4cbec <alt_get_errno+0x3c>
   4cbe4:	008001b4 	movhi	r2,6
   4cbe8:	10ad3804 	addi	r2,r2,-19232
}
   4cbec:	e037883a 	mov	sp,fp
   4cbf0:	dfc00117 	ldw	ra,4(sp)
   4cbf4:	df000017 	ldw	fp,0(sp)
   4cbf8:	dec00204 	addi	sp,sp,8
   4cbfc:	f800283a 	ret

0004cc00 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   4cc00:	deffed04 	addi	sp,sp,-76
   4cc04:	dfc01215 	stw	ra,72(sp)
   4cc08:	df001115 	stw	fp,68(sp)
   4cc0c:	df001104 	addi	fp,sp,68
   4cc10:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4cc14:	e0bfff17 	ldw	r2,-4(fp)
   4cc18:	10000616 	blt	r2,zero,4cc34 <isatty+0x34>
   4cc1c:	e0bfff17 	ldw	r2,-4(fp)
   4cc20:	10c00324 	muli	r3,r2,12
   4cc24:	008001b4 	movhi	r2,6
   4cc28:	10a1a504 	addi	r2,r2,-31084
   4cc2c:	1885883a 	add	r2,r3,r2
   4cc30:	00000106 	br	4cc38 <isatty+0x38>
   4cc34:	0005883a 	mov	r2,zero
   4cc38:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   4cc3c:	e0bfef17 	ldw	r2,-68(fp)
   4cc40:	10000e26 	beq	r2,zero,4cc7c <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   4cc44:	e0bfef17 	ldw	r2,-68(fp)
   4cc48:	10800017 	ldw	r2,0(r2)
   4cc4c:	10800817 	ldw	r2,32(r2)
   4cc50:	1000021e 	bne	r2,zero,4cc5c <isatty+0x5c>
    {
      return 1;
   4cc54:	00800044 	movi	r2,1
   4cc58:	00000d06 	br	4cc90 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   4cc5c:	e0bff004 	addi	r2,fp,-64
   4cc60:	e13fff17 	ldw	r4,-4(fp)
   4cc64:	100b883a 	mov	r5,r2
   4cc68:	004cb000 	call	4cb00 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   4cc6c:	e0bff117 	ldw	r2,-60(fp)
   4cc70:	10880020 	cmpeqi	r2,r2,8192
   4cc74:	10803fcc 	andi	r2,r2,255
   4cc78:	00000506 	br	4cc90 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   4cc7c:	004cbb00 	call	4cbb0 <alt_get_errno>
   4cc80:	1007883a 	mov	r3,r2
   4cc84:	00801444 	movi	r2,81
   4cc88:	18800015 	stw	r2,0(r3)
    return 0;
   4cc8c:	0005883a 	mov	r2,zero
  }
}
   4cc90:	e037883a 	mov	sp,fp
   4cc94:	dfc00117 	ldw	ra,4(sp)
   4cc98:	df000017 	ldw	fp,0(sp)
   4cc9c:	dec00204 	addi	sp,sp,8
   4cca0:	f800283a 	ret

0004cca4 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   4cca4:	defffc04 	addi	sp,sp,-16
   4cca8:	df000315 	stw	fp,12(sp)
   4ccac:	df000304 	addi	fp,sp,12
   4ccb0:	e13ffd15 	stw	r4,-12(fp)
   4ccb4:	e17ffe15 	stw	r5,-8(fp)
   4ccb8:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   4ccbc:	e0fffe17 	ldw	r3,-8(fp)
   4ccc0:	e0bffd17 	ldw	r2,-12(fp)
   4ccc4:	18800c26 	beq	r3,r2,4ccf8 <alt_load_section+0x54>
  {
    while( to != end )
   4ccc8:	00000806 	br	4ccec <alt_load_section+0x48>
    {
      *to++ = *from++;
   4cccc:	e0bffe17 	ldw	r2,-8(fp)
   4ccd0:	10c00104 	addi	r3,r2,4
   4ccd4:	e0fffe15 	stw	r3,-8(fp)
   4ccd8:	e0fffd17 	ldw	r3,-12(fp)
   4ccdc:	19000104 	addi	r4,r3,4
   4cce0:	e13ffd15 	stw	r4,-12(fp)
   4cce4:	18c00017 	ldw	r3,0(r3)
   4cce8:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   4ccec:	e0fffe17 	ldw	r3,-8(fp)
   4ccf0:	e0bfff17 	ldw	r2,-4(fp)
   4ccf4:	18bff51e 	bne	r3,r2,4cccc <__alt_data_end+0xfffdbf8c>
    {
      *to++ = *from++;
    }
  }
}
   4ccf8:	e037883a 	mov	sp,fp
   4ccfc:	df000017 	ldw	fp,0(sp)
   4cd00:	dec00104 	addi	sp,sp,4
   4cd04:	f800283a 	ret

0004cd08 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   4cd08:	defffe04 	addi	sp,sp,-8
   4cd0c:	dfc00115 	stw	ra,4(sp)
   4cd10:	df000015 	stw	fp,0(sp)
   4cd14:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   4cd18:	010001b4 	movhi	r4,6
   4cd1c:	21264f04 	addi	r4,r4,-26308
   4cd20:	01400174 	movhi	r5,5
   4cd24:	295f6e04 	addi	r5,r5,32184
   4cd28:	018001b4 	movhi	r6,6
   4cd2c:	31a64f04 	addi	r6,r6,-26308
   4cd30:	004cca40 	call	4cca4 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   4cd34:	01000134 	movhi	r4,4
   4cd38:	21000804 	addi	r4,r4,32
   4cd3c:	01400134 	movhi	r5,4
   4cd40:	29400804 	addi	r5,r5,32
   4cd44:	01800134 	movhi	r6,4
   4cd48:	31806f04 	addi	r6,r6,444
   4cd4c:	004cca40 	call	4cca4 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   4cd50:	01000174 	movhi	r4,5
   4cd54:	211e2404 	addi	r4,r4,30864
   4cd58:	01400174 	movhi	r5,5
   4cd5c:	295e2404 	addi	r5,r5,30864
   4cd60:	01800174 	movhi	r6,5
   4cd64:	319f6e04 	addi	r6,r6,32184
   4cd68:	004cca40 	call	4cca4 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   4cd6c:	00566b80 	call	566b8 <alt_dcache_flush_all>
  alt_icache_flush_all();
   4cd70:	00568800 	call	56880 <alt_icache_flush_all>
}
   4cd74:	e037883a 	mov	sp,fp
   4cd78:	dfc00117 	ldw	ra,4(sp)
   4cd7c:	df000017 	ldw	fp,0(sp)
   4cd80:	dec00204 	addi	sp,sp,8
   4cd84:	f800283a 	ret

0004cd88 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4cd88:	defffe04 	addi	sp,sp,-8
   4cd8c:	dfc00115 	stw	ra,4(sp)
   4cd90:	df000015 	stw	fp,0(sp)
   4cd94:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4cd98:	008001b4 	movhi	r2,6
   4cd9c:	10a62b04 	addi	r2,r2,-26452
   4cda0:	10800017 	ldw	r2,0(r2)
   4cda4:	10000526 	beq	r2,zero,4cdbc <alt_get_errno+0x34>
   4cda8:	008001b4 	movhi	r2,6
   4cdac:	10a62b04 	addi	r2,r2,-26452
   4cdb0:	10800017 	ldw	r2,0(r2)
   4cdb4:	103ee83a 	callr	r2
   4cdb8:	00000206 	br	4cdc4 <alt_get_errno+0x3c>
   4cdbc:	008001b4 	movhi	r2,6
   4cdc0:	10ad3804 	addi	r2,r2,-19232
}
   4cdc4:	e037883a 	mov	sp,fp
   4cdc8:	dfc00117 	ldw	ra,4(sp)
   4cdcc:	df000017 	ldw	fp,0(sp)
   4cdd0:	dec00204 	addi	sp,sp,8
   4cdd4:	f800283a 	ret

0004cdd8 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   4cdd8:	defff904 	addi	sp,sp,-28
   4cddc:	dfc00615 	stw	ra,24(sp)
   4cde0:	df000515 	stw	fp,20(sp)
   4cde4:	df000504 	addi	fp,sp,20
   4cde8:	e13ffd15 	stw	r4,-12(fp)
   4cdec:	e17ffe15 	stw	r5,-8(fp)
   4cdf0:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   4cdf4:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4cdf8:	e0bffd17 	ldw	r2,-12(fp)
   4cdfc:	10000616 	blt	r2,zero,4ce18 <lseek+0x40>
   4ce00:	e0bffd17 	ldw	r2,-12(fp)
   4ce04:	10c00324 	muli	r3,r2,12
   4ce08:	008001b4 	movhi	r2,6
   4ce0c:	10a1a504 	addi	r2,r2,-31084
   4ce10:	1885883a 	add	r2,r3,r2
   4ce14:	00000106 	br	4ce1c <lseek+0x44>
   4ce18:	0005883a 	mov	r2,zero
   4ce1c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   4ce20:	e0bffc17 	ldw	r2,-16(fp)
   4ce24:	10001026 	beq	r2,zero,4ce68 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   4ce28:	e0bffc17 	ldw	r2,-16(fp)
   4ce2c:	10800017 	ldw	r2,0(r2)
   4ce30:	10800717 	ldw	r2,28(r2)
   4ce34:	10000926 	beq	r2,zero,4ce5c <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   4ce38:	e0bffc17 	ldw	r2,-16(fp)
   4ce3c:	10800017 	ldw	r2,0(r2)
   4ce40:	10800717 	ldw	r2,28(r2)
   4ce44:	e13ffc17 	ldw	r4,-16(fp)
   4ce48:	e17ffe17 	ldw	r5,-8(fp)
   4ce4c:	e1bfff17 	ldw	r6,-4(fp)
   4ce50:	103ee83a 	callr	r2
   4ce54:	e0bffb15 	stw	r2,-20(fp)
   4ce58:	00000506 	br	4ce70 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   4ce5c:	00bfde84 	movi	r2,-134
   4ce60:	e0bffb15 	stw	r2,-20(fp)
   4ce64:	00000206 	br	4ce70 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
   4ce68:	00bfebc4 	movi	r2,-81
   4ce6c:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   4ce70:	e0bffb17 	ldw	r2,-20(fp)
   4ce74:	1000070e 	bge	r2,zero,4ce94 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
   4ce78:	004cd880 	call	4cd88 <alt_get_errno>
   4ce7c:	1007883a 	mov	r3,r2
   4ce80:	e0bffb17 	ldw	r2,-20(fp)
   4ce84:	0085c83a 	sub	r2,zero,r2
   4ce88:	18800015 	stw	r2,0(r3)
    rc = -1;
   4ce8c:	00bfffc4 	movi	r2,-1
   4ce90:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   4ce94:	e0bffb17 	ldw	r2,-20(fp)
}
   4ce98:	e037883a 	mov	sp,fp
   4ce9c:	dfc00117 	ldw	ra,4(sp)
   4cea0:	df000017 	ldw	fp,0(sp)
   4cea4:	dec00204 	addi	sp,sp,8
   4cea8:	f800283a 	ret

0004ceac <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   4ceac:	defff904 	addi	sp,sp,-28
   4ceb0:	dfc00615 	stw	ra,24(sp)
   4ceb4:	df000515 	stw	fp,20(sp)
   4ceb8:	df000504 	addi	fp,sp,20
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   4cebc:	0009883a 	mov	r4,zero
   4cec0:	00556bc0 	call	556bc <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   4cec4:	004e27c0 	call	4e27c <OSInit>
   4cec8:	01000044 	movi	r4,1
   4cecc:	0052ddc0 	call	52ddc <OSSemCreate>
   4ced0:	1007883a 	mov	r3,r2
   4ced4:	008001b4 	movhi	r2,6
   4ced8:	10ad3e04 	addi	r2,r2,-19208
   4cedc:	10c00015 	stw	r3,0(r2)
   4cee0:	01000044 	movi	r4,1
   4cee4:	0052ddc0 	call	52ddc <OSSemCreate>
   4cee8:	1007883a 	mov	r3,r2
   4ceec:	008001b4 	movhi	r2,6
   4cef0:	10ad4004 	addi	r2,r2,-19200
   4cef4:	10c00015 	stw	r3,0(r2)
   4cef8:	008001b4 	movhi	r2,6
   4cefc:	10ad3904 	addi	r2,r2,-19228
   4cf00:	e0bffc15 	stw	r2,-16(fp)
   4cf04:	00800044 	movi	r2,1
   4cf08:	e0bffd0d 	sth	r2,-12(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
   4cf0c:	e0bffd0b 	ldhu	r2,-12(fp)
   4cf10:	1009883a 	mov	r4,r2
   4cf14:	0052ddc0 	call	52ddc <OSSemCreate>
   4cf18:	1007883a 	mov	r3,r2
   4cf1c:	e0bffc17 	ldw	r2,-16(fp)
   4cf20:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   4cf24:	00556f00 	call	556f0 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   4cf28:	01000174 	movhi	r4,5
   4cf2c:	211f1d04 	addi	r4,r4,31860
   4cf30:	01400174 	movhi	r5,5
   4cf34:	295f1d04 	addi	r5,r5,31860
   4cf38:	01800174 	movhi	r6,5
   4cf3c:	319f1d04 	addi	r6,r6,31860
   4cf40:	0056c400 	call	56c40 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   4cf44:	00567c80 	call	567c8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   4cf48:	01000174 	movhi	r4,5
   4cf4c:	211a0904 	addi	r4,r4,26660
   4cf50:	00574e40 	call	574e4 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   4cf54:	d1271a17 	ldw	r4,-25496(gp)
   4cf58:	d0e71b17 	ldw	r3,-25492(gp)
   4cf5c:	d0a71c17 	ldw	r2,-25488(gp)
   4cf60:	180b883a 	mov	r5,r3
   4cf64:	100d883a 	mov	r6,r2
   4cf68:	00404bc0 	call	404bc <main>
   4cf6c:	e0bffb15 	stw	r2,-20(fp)
  close(STDOUT_FILENO);
   4cf70:	01000044 	movi	r4,1
   4cf74:	004c9b40 	call	4c9b4 <close>
  exit (result);
   4cf78:	e13ffb17 	ldw	r4,-20(fp)
   4cf7c:	00574f80 	call	574f8 <exit>

0004cf80 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4cf80:	defffe04 	addi	sp,sp,-8
   4cf84:	dfc00115 	stw	ra,4(sp)
   4cf88:	df000015 	stw	fp,0(sp)
   4cf8c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4cf90:	008001b4 	movhi	r2,6
   4cf94:	10a62b04 	addi	r2,r2,-26452
   4cf98:	10800017 	ldw	r2,0(r2)
   4cf9c:	10000526 	beq	r2,zero,4cfb4 <alt_get_errno+0x34>
   4cfa0:	008001b4 	movhi	r2,6
   4cfa4:	10a62b04 	addi	r2,r2,-26452
   4cfa8:	10800017 	ldw	r2,0(r2)
   4cfac:	103ee83a 	callr	r2
   4cfb0:	00000206 	br	4cfbc <alt_get_errno+0x3c>
   4cfb4:	008001b4 	movhi	r2,6
   4cfb8:	10ad3804 	addi	r2,r2,-19232
}
   4cfbc:	e037883a 	mov	sp,fp
   4cfc0:	dfc00117 	ldw	ra,4(sp)
   4cfc4:	df000017 	ldw	fp,0(sp)
   4cfc8:	dec00204 	addi	sp,sp,8
   4cfcc:	f800283a 	ret

0004cfd0 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   4cfd0:	defff904 	addi	sp,sp,-28
   4cfd4:	dfc00615 	stw	ra,24(sp)
   4cfd8:	df000515 	stw	fp,20(sp)
   4cfdc:	df000504 	addi	fp,sp,20
   4cfe0:	e13ffd15 	stw	r4,-12(fp)
   4cfe4:	e17ffe15 	stw	r5,-8(fp)
   4cfe8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4cfec:	e0bffd17 	ldw	r2,-12(fp)
   4cff0:	10000616 	blt	r2,zero,4d00c <read+0x3c>
   4cff4:	e0bffd17 	ldw	r2,-12(fp)
   4cff8:	10c00324 	muli	r3,r2,12
   4cffc:	008001b4 	movhi	r2,6
   4d000:	10a1a504 	addi	r2,r2,-31084
   4d004:	1885883a 	add	r2,r3,r2
   4d008:	00000106 	br	4d010 <read+0x40>
   4d00c:	0005883a 	mov	r2,zero
   4d010:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   4d014:	e0bffb17 	ldw	r2,-20(fp)
   4d018:	10002226 	beq	r2,zero,4d0a4 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   4d01c:	e0bffb17 	ldw	r2,-20(fp)
   4d020:	10800217 	ldw	r2,8(r2)
   4d024:	108000cc 	andi	r2,r2,3
   4d028:	10800060 	cmpeqi	r2,r2,1
   4d02c:	1000181e 	bne	r2,zero,4d090 <read+0xc0>
        (fd->dev->read))
   4d030:	e0bffb17 	ldw	r2,-20(fp)
   4d034:	10800017 	ldw	r2,0(r2)
   4d038:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   4d03c:	10001426 	beq	r2,zero,4d090 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   4d040:	e0bffb17 	ldw	r2,-20(fp)
   4d044:	10800017 	ldw	r2,0(r2)
   4d048:	10800517 	ldw	r2,20(r2)
   4d04c:	e0ffff17 	ldw	r3,-4(fp)
   4d050:	e13ffb17 	ldw	r4,-20(fp)
   4d054:	e17ffe17 	ldw	r5,-8(fp)
   4d058:	180d883a 	mov	r6,r3
   4d05c:	103ee83a 	callr	r2
   4d060:	e0bffc15 	stw	r2,-16(fp)
   4d064:	e0bffc17 	ldw	r2,-16(fp)
   4d068:	1000070e 	bge	r2,zero,4d088 <read+0xb8>
        {
          ALT_ERRNO = -rval;
   4d06c:	004cf800 	call	4cf80 <alt_get_errno>
   4d070:	1007883a 	mov	r3,r2
   4d074:	e0bffc17 	ldw	r2,-16(fp)
   4d078:	0085c83a 	sub	r2,zero,r2
   4d07c:	18800015 	stw	r2,0(r3)
          return -1;
   4d080:	00bfffc4 	movi	r2,-1
   4d084:	00000c06 	br	4d0b8 <read+0xe8>
        }
        return rval;
   4d088:	e0bffc17 	ldw	r2,-16(fp)
   4d08c:	00000a06 	br	4d0b8 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
   4d090:	004cf800 	call	4cf80 <alt_get_errno>
   4d094:	1007883a 	mov	r3,r2
   4d098:	00800344 	movi	r2,13
   4d09c:	18800015 	stw	r2,0(r3)
   4d0a0:	00000406 	br	4d0b4 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   4d0a4:	004cf800 	call	4cf80 <alt_get_errno>
   4d0a8:	1007883a 	mov	r3,r2
   4d0ac:	00801444 	movi	r2,81
   4d0b0:	18800015 	stw	r2,0(r3)
  }
  return -1;
   4d0b4:	00bfffc4 	movi	r2,-1
}
   4d0b8:	e037883a 	mov	sp,fp
   4d0bc:	dfc00117 	ldw	ra,4(sp)
   4d0c0:	df000017 	ldw	fp,0(sp)
   4d0c4:	dec00204 	addi	sp,sp,8
   4d0c8:	f800283a 	ret

0004d0cc <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   4d0cc:	defffe04 	addi	sp,sp,-8
   4d0d0:	df000115 	stw	fp,4(sp)
   4d0d4:	df000104 	addi	fp,sp,4
   4d0d8:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   4d0dc:	e0bfff17 	ldw	r2,-4(fp)
   4d0e0:	108000d0 	cmplti	r2,r2,3
   4d0e4:	10000d1e 	bne	r2,zero,4d11c <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   4d0e8:	008001b4 	movhi	r2,6
   4d0ec:	10a1a504 	addi	r2,r2,-31084
   4d0f0:	e0ffff17 	ldw	r3,-4(fp)
   4d0f4:	18c00324 	muli	r3,r3,12
   4d0f8:	10c5883a 	add	r2,r2,r3
   4d0fc:	10800204 	addi	r2,r2,8
   4d100:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   4d104:	008001b4 	movhi	r2,6
   4d108:	10a1a504 	addi	r2,r2,-31084
   4d10c:	e0ffff17 	ldw	r3,-4(fp)
   4d110:	18c00324 	muli	r3,r3,12
   4d114:	10c5883a 	add	r2,r2,r3
   4d118:	10000015 	stw	zero,0(r2)
  }
}
   4d11c:	e037883a 	mov	sp,fp
   4d120:	df000017 	ldw	fp,0(sp)
   4d124:	dec00104 	addi	sp,sp,4
   4d128:	f800283a 	ret

0004d12c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   4d12c:	defff904 	addi	sp,sp,-28
   4d130:	df000615 	stw	fp,24(sp)
   4d134:	df000604 	addi	fp,sp,24
   4d138:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4d13c:	0005303a 	rdctl	r2,status
   4d140:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4d144:	e0fffc17 	ldw	r3,-16(fp)
   4d148:	00bfff84 	movi	r2,-2
   4d14c:	1884703a 	and	r2,r3,r2
   4d150:	1001703a 	wrctl	status,r2
  
  return context;
   4d154:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   4d158:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   4d15c:	d0a00c17 	ldw	r2,-32720(gp)
   4d160:	10c000c4 	addi	r3,r2,3
   4d164:	00bfff04 	movi	r2,-4
   4d168:	1884703a 	and	r2,r3,r2
   4d16c:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   4d170:	d0e00c17 	ldw	r3,-32720(gp)
   4d174:	e0bfff17 	ldw	r2,-4(fp)
   4d178:	1887883a 	add	r3,r3,r2
   4d17c:	008001f4 	movhi	r2,7
   4d180:	10835004 	addi	r2,r2,3392
   4d184:	10c0062e 	bgeu	r2,r3,4d1a0 <sbrk+0x74>
   4d188:	e0bffa17 	ldw	r2,-24(fp)
   4d18c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4d190:	e0bffd17 	ldw	r2,-12(fp)
   4d194:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   4d198:	00bfffc4 	movi	r2,-1
   4d19c:	00000b06 	br	4d1cc <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   4d1a0:	d0a00c17 	ldw	r2,-32720(gp)
   4d1a4:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
   4d1a8:	d0e00c17 	ldw	r3,-32720(gp)
   4d1ac:	e0bfff17 	ldw	r2,-4(fp)
   4d1b0:	1885883a 	add	r2,r3,r2
   4d1b4:	d0a00c15 	stw	r2,-32720(gp)
   4d1b8:	e0bffa17 	ldw	r2,-24(fp)
   4d1bc:	e0bffe15 	stw	r2,-8(fp)
   4d1c0:	e0bffe17 	ldw	r2,-8(fp)
   4d1c4:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   4d1c8:	e0bffb17 	ldw	r2,-20(fp)
} 
   4d1cc:	e037883a 	mov	sp,fp
   4d1d0:	df000017 	ldw	fp,0(sp)
   4d1d4:	dec00104 	addi	sp,sp,4
   4d1d8:	f800283a 	ret

0004d1dc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4d1dc:	defffe04 	addi	sp,sp,-8
   4d1e0:	dfc00115 	stw	ra,4(sp)
   4d1e4:	df000015 	stw	fp,0(sp)
   4d1e8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4d1ec:	008001b4 	movhi	r2,6
   4d1f0:	10a62b04 	addi	r2,r2,-26452
   4d1f4:	10800017 	ldw	r2,0(r2)
   4d1f8:	10000526 	beq	r2,zero,4d210 <alt_get_errno+0x34>
   4d1fc:	008001b4 	movhi	r2,6
   4d200:	10a62b04 	addi	r2,r2,-26452
   4d204:	10800017 	ldw	r2,0(r2)
   4d208:	103ee83a 	callr	r2
   4d20c:	00000206 	br	4d218 <alt_get_errno+0x3c>
   4d210:	008001b4 	movhi	r2,6
   4d214:	10ad3804 	addi	r2,r2,-19232
}
   4d218:	e037883a 	mov	sp,fp
   4d21c:	dfc00117 	ldw	ra,4(sp)
   4d220:	df000017 	ldw	fp,0(sp)
   4d224:	dec00204 	addi	sp,sp,8
   4d228:	f800283a 	ret

0004d22c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   4d22c:	defff904 	addi	sp,sp,-28
   4d230:	dfc00615 	stw	ra,24(sp)
   4d234:	df000515 	stw	fp,20(sp)
   4d238:	df000504 	addi	fp,sp,20
   4d23c:	e13ffd15 	stw	r4,-12(fp)
   4d240:	e17ffe15 	stw	r5,-8(fp)
   4d244:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4d248:	e0bffd17 	ldw	r2,-12(fp)
   4d24c:	10000616 	blt	r2,zero,4d268 <write+0x3c>
   4d250:	e0bffd17 	ldw	r2,-12(fp)
   4d254:	10c00324 	muli	r3,r2,12
   4d258:	008001b4 	movhi	r2,6
   4d25c:	10a1a504 	addi	r2,r2,-31084
   4d260:	1885883a 	add	r2,r3,r2
   4d264:	00000106 	br	4d26c <write+0x40>
   4d268:	0005883a 	mov	r2,zero
   4d26c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   4d270:	e0bffb17 	ldw	r2,-20(fp)
   4d274:	10002126 	beq	r2,zero,4d2fc <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   4d278:	e0bffb17 	ldw	r2,-20(fp)
   4d27c:	10800217 	ldw	r2,8(r2)
   4d280:	108000cc 	andi	r2,r2,3
   4d284:	10001826 	beq	r2,zero,4d2e8 <write+0xbc>
   4d288:	e0bffb17 	ldw	r2,-20(fp)
   4d28c:	10800017 	ldw	r2,0(r2)
   4d290:	10800617 	ldw	r2,24(r2)
   4d294:	10001426 	beq	r2,zero,4d2e8 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   4d298:	e0bffb17 	ldw	r2,-20(fp)
   4d29c:	10800017 	ldw	r2,0(r2)
   4d2a0:	10800617 	ldw	r2,24(r2)
   4d2a4:	e0ffff17 	ldw	r3,-4(fp)
   4d2a8:	e13ffb17 	ldw	r4,-20(fp)
   4d2ac:	e17ffe17 	ldw	r5,-8(fp)
   4d2b0:	180d883a 	mov	r6,r3
   4d2b4:	103ee83a 	callr	r2
   4d2b8:	e0bffc15 	stw	r2,-16(fp)
   4d2bc:	e0bffc17 	ldw	r2,-16(fp)
   4d2c0:	1000070e 	bge	r2,zero,4d2e0 <write+0xb4>
      {
        ALT_ERRNO = -rval;
   4d2c4:	004d1dc0 	call	4d1dc <alt_get_errno>
   4d2c8:	1007883a 	mov	r3,r2
   4d2cc:	e0bffc17 	ldw	r2,-16(fp)
   4d2d0:	0085c83a 	sub	r2,zero,r2
   4d2d4:	18800015 	stw	r2,0(r3)
        return -1;
   4d2d8:	00bfffc4 	movi	r2,-1
   4d2dc:	00000c06 	br	4d310 <write+0xe4>
      }
      return rval;
   4d2e0:	e0bffc17 	ldw	r2,-16(fp)
   4d2e4:	00000a06 	br	4d310 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
   4d2e8:	004d1dc0 	call	4d1dc <alt_get_errno>
   4d2ec:	1007883a 	mov	r3,r2
   4d2f0:	00800344 	movi	r2,13
   4d2f4:	18800015 	stw	r2,0(r3)
   4d2f8:	00000406 	br	4d30c <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   4d2fc:	004d1dc0 	call	4d1dc <alt_get_errno>
   4d300:	1007883a 	mov	r3,r2
   4d304:	00801444 	movi	r2,81
   4d308:	18800015 	stw	r2,0(r3)
  }
  return -1;
   4d30c:	00bfffc4 	movi	r2,-1
}
   4d310:	e037883a 	mov	sp,fp
   4d314:	dfc00117 	ldw	ra,4(sp)
   4d318:	df000017 	ldw	fp,0(sp)
   4d31c:	dec00204 	addi	sp,sp,8
   4d320:	f800283a 	ret

0004d324 <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
   4d324:	defff704 	addi	sp,sp,-36
   4d328:	dfc00815 	stw	ra,32(sp)
   4d32c:	df000715 	stw	fp,28(sp)
   4d330:	df000704 	addi	fp,sp,28
   4d334:	e13ffc15 	stw	r4,-16(fp)
   4d338:	e17ffd15 	stw	r5,-12(fp)
   4d33c:	e1bffe15 	stw	r6,-8(fp)
   4d340:	3805883a 	mov	r2,r7
   4d344:	e0bfff0d 	sth	r2,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
   4d348:	e0fffe17 	ldw	r3,-8(fp)
   4d34c:	00bfff04 	movi	r2,-4
   4d350:	1884703a 	and	r2,r3,r2
   4d354:	10bef704 	addi	r2,r2,-1060
   4d358:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
   4d35c:	e0bff917 	ldw	r2,-28(fp)
   4d360:	10000015 	stw	zero,0(r2)
   4d364:	e0bff917 	ldw	r2,-28(fp)
   4d368:	10c0bb04 	addi	r3,r2,748
   4d36c:	e0bff917 	ldw	r2,-28(fp)
   4d370:	10c00115 	stw	r3,4(r2)
   4d374:	e0bff917 	ldw	r2,-28(fp)
   4d378:	10c0d504 	addi	r3,r2,852
   4d37c:	e0bff917 	ldw	r2,-28(fp)
   4d380:	10c00215 	stw	r3,8(r2)
   4d384:	e0bff917 	ldw	r2,-28(fp)
   4d388:	10c0ef04 	addi	r3,r2,956
   4d38c:	e0bff917 	ldw	r2,-28(fp)
   4d390:	10c00315 	stw	r3,12(r2)
   4d394:	e0bff917 	ldw	r2,-28(fp)
   4d398:	10000415 	stw	zero,16(r2)
   4d39c:	e0bff917 	ldw	r2,-28(fp)
   4d3a0:	10800504 	addi	r2,r2,20
   4d3a4:	1009883a 	mov	r4,r2
   4d3a8:	000b883a 	mov	r5,zero
   4d3ac:	01800644 	movi	r6,25
   4d3b0:	00461500 	call	46150 <memset>
   4d3b4:	e0bff917 	ldw	r2,-28(fp)
   4d3b8:	10000c15 	stw	zero,48(r2)
   4d3bc:	e0fff917 	ldw	r3,-28(fp)
   4d3c0:	00800174 	movhi	r2,5
   4d3c4:	109f2104 	addi	r2,r2,31876
   4d3c8:	18800d15 	stw	r2,52(r3)
   4d3cc:	e0bff917 	ldw	r2,-28(fp)
   4d3d0:	10000e15 	stw	zero,56(r2)
   4d3d4:	e0bff917 	ldw	r2,-28(fp)
   4d3d8:	10000f15 	stw	zero,60(r2)
   4d3dc:	e0bff917 	ldw	r2,-28(fp)
   4d3e0:	10001015 	stw	zero,64(r2)
   4d3e4:	e0bff917 	ldw	r2,-28(fp)
   4d3e8:	10001115 	stw	zero,68(r2)
   4d3ec:	e0bff917 	ldw	r2,-28(fp)
   4d3f0:	10001215 	stw	zero,72(r2)
   4d3f4:	e0bff917 	ldw	r2,-28(fp)
   4d3f8:	10001315 	stw	zero,76(r2)
   4d3fc:	e0bff917 	ldw	r2,-28(fp)
   4d400:	10001415 	stw	zero,80(r2)
   4d404:	e0bff917 	ldw	r2,-28(fp)
   4d408:	10001515 	stw	zero,84(r2)
   4d40c:	e0bff917 	ldw	r2,-28(fp)
   4d410:	10001615 	stw	zero,88(r2)
   4d414:	e0bff917 	ldw	r2,-28(fp)
   4d418:	10001715 	stw	zero,92(r2)
   4d41c:	e0bff917 	ldw	r2,-28(fp)
   4d420:	10001805 	stb	zero,96(r2)
   4d424:	e0bff917 	ldw	r2,-28(fp)
   4d428:	10801f04 	addi	r2,r2,124
   4d42c:	1009883a 	mov	r4,r2
   4d430:	000b883a 	mov	r5,zero
   4d434:	01800904 	movi	r6,36
   4d438:	00461500 	call	46150 <memset>
   4d43c:	e0bff917 	ldw	r2,-28(fp)
   4d440:	10002815 	stw	zero,160(r2)
   4d444:	e0bff917 	ldw	r2,-28(fp)
   4d448:	00c00044 	movi	r3,1
   4d44c:	10c02915 	stw	r3,164(r2)
   4d450:	10002a15 	stw	zero,168(r2)
   4d454:	e0bff917 	ldw	r2,-28(fp)
   4d458:	00ccc384 	movi	r3,13070
   4d45c:	10c02b0d 	sth	r3,172(r2)
   4d460:	e0bff917 	ldw	r2,-28(fp)
   4d464:	00eaf344 	movi	r3,-21555
   4d468:	10c02b8d 	sth	r3,174(r2)
   4d46c:	e0bff917 	ldw	r2,-28(fp)
   4d470:	00c48d04 	movi	r3,4660
   4d474:	10c02c0d 	sth	r3,176(r2)
   4d478:	e0bff917 	ldw	r2,-28(fp)
   4d47c:	00f99b44 	movi	r3,-6547
   4d480:	10c02c8d 	sth	r3,178(r2)
   4d484:	e0bff917 	ldw	r2,-28(fp)
   4d488:	00f7bb04 	movi	r3,-8468
   4d48c:	10c02d0d 	sth	r3,180(r2)
   4d490:	e0bff917 	ldw	r2,-28(fp)
   4d494:	00c00144 	movi	r3,5
   4d498:	10c02d8d 	sth	r3,182(r2)
   4d49c:	e0bff917 	ldw	r2,-28(fp)
   4d4a0:	00c002c4 	movi	r3,11
   4d4a4:	10c02e0d 	sth	r3,184(r2)
   4d4a8:	e0bff917 	ldw	r2,-28(fp)
   4d4ac:	10002f15 	stw	zero,188(r2)
   4d4b0:	e0bff917 	ldw	r2,-28(fp)
   4d4b4:	10003015 	stw	zero,192(r2)
   4d4b8:	e0bff917 	ldw	r2,-28(fp)
   4d4bc:	10003115 	stw	zero,196(r2)
   4d4c0:	e0bff917 	ldw	r2,-28(fp)
   4d4c4:	10003215 	stw	zero,200(r2)
   4d4c8:	e0bff917 	ldw	r2,-28(fp)
   4d4cc:	10003315 	stw	zero,204(r2)
   4d4d0:	e0bff917 	ldw	r2,-28(fp)
   4d4d4:	10003415 	stw	zero,208(r2)
   4d4d8:	e0bff917 	ldw	r2,-28(fp)
   4d4dc:	10003e15 	stw	zero,248(r2)
   4d4e0:	e0bff917 	ldw	r2,-28(fp)
   4d4e4:	10003f15 	stw	zero,252(r2)
   4d4e8:	e0bff917 	ldw	r2,-28(fp)
   4d4ec:	10004015 	stw	zero,256(r2)
   4d4f0:	e0bff917 	ldw	r2,-28(fp)
   4d4f4:	10004115 	stw	zero,260(r2)
   4d4f8:	e0bff917 	ldw	r2,-28(fp)
   4d4fc:	10004215 	stw	zero,264(r2)
   4d500:	e0bff917 	ldw	r2,-28(fp)
   4d504:	10004315 	stw	zero,268(r2)
   4d508:	e0bff917 	ldw	r2,-28(fp)
   4d50c:	10004415 	stw	zero,272(r2)
   4d510:	e0bff917 	ldw	r2,-28(fp)
   4d514:	10004515 	stw	zero,276(r2)
   4d518:	e0bff917 	ldw	r2,-28(fp)
   4d51c:	10004615 	stw	zero,280(r2)
   4d520:	e0bff917 	ldw	r2,-28(fp)
   4d524:	10004715 	stw	zero,284(r2)
   4d528:	e0bff917 	ldw	r2,-28(fp)
   4d52c:	10003505 	stb	zero,212(r2)
   4d530:	e0bff917 	ldw	r2,-28(fp)
   4d534:	10003705 	stb	zero,220(r2)
   4d538:	e0bff917 	ldw	r2,-28(fp)
   4d53c:	10003d15 	stw	zero,244(r2)
   4d540:	e0bff917 	ldw	r2,-28(fp)
   4d544:	10005215 	stw	zero,328(r2)
   4d548:	e0bff917 	ldw	r2,-28(fp)
   4d54c:	10005315 	stw	zero,332(r2)
   4d550:	e0bff917 	ldw	r2,-28(fp)
   4d554:	10005415 	stw	zero,336(r2)
   4d558:	e0bff917 	ldw	r2,-28(fp)
   4d55c:	10005515 	stw	zero,340(r2)
   4d560:	e0bff917 	ldw	r2,-28(fp)
   4d564:	1000b515 	stw	zero,724(r2)
   4d568:	e0bff917 	ldw	r2,-28(fp)
   4d56c:	10007515 	stw	zero,468(r2)
   4d570:	e0bff917 	ldw	r2,-28(fp)
   4d574:	1000b715 	stw	zero,732(r2)
   4d578:	e0bff917 	ldw	r2,-28(fp)
   4d57c:	1000b815 	stw	zero,736(r2)
   4d580:	e0bff917 	ldw	r2,-28(fp)
   4d584:	1000b915 	stw	zero,740(r2)
   4d588:	e0bff917 	ldw	r2,-28(fp)
   4d58c:	1000ba15 	stw	zero,744(r2)
   4d590:	e0bff917 	ldw	r2,-28(fp)
   4d594:	1080bb04 	addi	r2,r2,748
   4d598:	1009883a 	mov	r4,r2
   4d59c:	000b883a 	mov	r5,zero
   4d5a0:	01804e04 	movi	r6,312
   4d5a4:	00461500 	call	46150 <memset>
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
   4d5a8:	e0bff917 	ldw	r2,-28(fp)
   4d5ac:	e0bffa15 	stw	r2,-24(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
   4d5b0:	e0bffa17 	ldw	r2,-24(fp)
   4d5b4:	10bff304 	addi	r2,r2,-52
   4d5b8:	e0bffb15 	stw	r2,-20(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
   4d5bc:	e0bffb17 	ldw	r2,-20(fp)
   4d5c0:	10800c04 	addi	r2,r2,48
   4d5c4:	e0fffc17 	ldw	r3,-16(fp)
   4d5c8:	10c00015 	stw	r3,0(r2)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
   4d5cc:	e0bffb17 	ldw	r2,-20(fp)
   4d5d0:	10800b04 	addi	r2,r2,44
   4d5d4:	e0fffd17 	ldw	r3,-12(fp)
   4d5d8:	10c00015 	stw	r3,0(r2)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
   4d5dc:	e0bffb17 	ldw	r2,-20(fp)
   4d5e0:	10800a04 	addi	r2,r2,40
   4d5e4:	e0fff917 	ldw	r3,-28(fp)
   4d5e8:	10c00015 	stw	r3,0(r2)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
   4d5ec:	00800174 	movhi	r2,5
   4d5f0:	109c6504 	addi	r2,r2,29076
   4d5f4:	10c00104 	addi	r3,r2,4
   4d5f8:	e0bffb17 	ldw	r2,-20(fp)
   4d5fc:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
   4d600:	e0bffb17 	ldw	r2,-20(fp)
}
   4d604:	e037883a 	mov	sp,fp
   4d608:	dfc00117 	ldw	ra,4(sp)
   4d60c:	df000017 	ldw	fp,0(sp)
   4d610:	dec00204 	addi	sp,sp,8
   4d614:	f800283a 	ret

0004d618 <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
   4d618:	defffe04 	addi	sp,sp,-8
   4d61c:	df000115 	stw	fp,4(sp)
   4d620:	df000104 	addi	fp,sp,4
   4d624:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
   4d628:	e037883a 	mov	sp,fp
   4d62c:	df000017 	ldw	fp,0(sp)
   4d630:	dec00104 	addi	sp,sp,4
   4d634:	f800283a 	ret

0004d638 <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
   4d638:	defffe04 	addi	sp,sp,-8
   4d63c:	df000115 	stw	fp,4(sp)
   4d640:	df000104 	addi	fp,sp,4
   4d644:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
   4d648:	e037883a 	mov	sp,fp
   4d64c:	df000017 	ldw	fp,0(sp)
   4d650:	dec00104 	addi	sp,sp,4
   4d654:	f800283a 	ret

0004d658 <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
   4d658:	deffff04 	addi	sp,sp,-4
   4d65c:	df000015 	stw	fp,0(sp)
   4d660:	d839883a 	mov	fp,sp
}
   4d664:	e037883a 	mov	sp,fp
   4d668:	df000017 	ldw	fp,0(sp)
   4d66c:	dec00104 	addi	sp,sp,4
   4d670:	f800283a 	ret

0004d674 <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
   4d674:	deffff04 	addi	sp,sp,-4
   4d678:	df000015 	stw	fp,0(sp)
   4d67c:	d839883a 	mov	fp,sp
}
   4d680:	e037883a 	mov	sp,fp
   4d684:	df000017 	ldw	fp,0(sp)
   4d688:	dec00104 	addi	sp,sp,4
   4d68c:	f800283a 	ret

0004d690 <OSInitHookBegin>:
//     cticks_hook();
// #endif
// }

void OSInitHookBegin(void)
{
   4d690:	deffff04 	addi	sp,sp,-4
   4d694:	df000015 	stw	fp,0(sp)
   4d698:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
   4d69c:	e037883a 	mov	sp,fp
   4d6a0:	df000017 	ldw	fp,0(sp)
   4d6a4:	dec00104 	addi	sp,sp,4
   4d6a8:	f800283a 	ret

0004d6ac <OSInitHookEnd>:

void OSInitHookEnd(void)
{
   4d6ac:	deffff04 	addi	sp,sp,-4
   4d6b0:	df000015 	stw	fp,0(sp)
   4d6b4:	d839883a 	mov	fp,sp
}
   4d6b8:	e037883a 	mov	sp,fp
   4d6bc:	df000017 	ldw	fp,0(sp)
   4d6c0:	dec00104 	addi	sp,sp,4
   4d6c4:	f800283a 	ret

0004d6c8 <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
   4d6c8:	deffff04 	addi	sp,sp,-4
   4d6cc:	df000015 	stw	fp,0(sp)
   4d6d0:	d839883a 	mov	fp,sp
}
   4d6d4:	e037883a 	mov	sp,fp
   4d6d8:	df000017 	ldw	fp,0(sp)
   4d6dc:	dec00104 	addi	sp,sp,4
   4d6e0:	f800283a 	ret

0004d6e4 <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
   4d6e4:	defffe04 	addi	sp,sp,-8
   4d6e8:	df000115 	stw	fp,4(sp)
   4d6ec:	df000104 	addi	fp,sp,4
   4d6f0:	e13fff15 	stw	r4,-4(fp)
}
   4d6f4:	e037883a 	mov	sp,fp
   4d6f8:	df000017 	ldw	fp,0(sp)
   4d6fc:	dec00104 	addi	sp,sp,4
   4d700:	f800283a 	ret

0004d704 <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
   4d704:	deffdf04 	addi	sp,sp,-132
   4d708:	dfc02015 	stw	ra,128(sp)
   4d70c:	df001f15 	stw	fp,124(sp)
   4d710:	df001f04 	addi	fp,sp,124
   4d714:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
   4d718:	e0bfe204 	addi	r2,fp,-120
   4d71c:	01003fc4 	movi	r4,255
   4d720:	100b883a 	mov	r5,r2
   4d724:	0054f900 	call	54f90 <OSTaskQuery>
   4d728:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
   4d72c:	e0bffe83 	ldbu	r2,-6(fp)
   4d730:	10803fcc 	andi	r2,r2,255
   4d734:	10000126 	beq	r2,zero,4d73c <__env_lock+0x38>
    return;
   4d738:	00001d06 	br	4d7b0 <__env_lock+0xac>

  id = tcb.OSTCBPrio;
   4d73c:	e0bfee83 	ldbu	r2,-70(fp)
   4d740:	10803fcc 	andi	r2,r2,255
   4d744:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
   4d748:	d0e71e17 	ldw	r3,-25480(gp)
   4d74c:	e0bffd04 	addi	r2,fp,-12
   4d750:	1809883a 	mov	r4,r3
   4d754:	100b883a 	mov	r5,r2
   4d758:	00536280 	call	53628 <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
   4d75c:	e0bffe43 	ldbu	r2,-7(fp)
   4d760:	10803fcc 	andi	r2,r2,255
   4d764:	10000726 	beq	r2,zero,4d784 <__env_lock+0x80>
   4d768:	d0a00d17 	ldw	r2,-32716(gp)
   4d76c:	e0ffe117 	ldw	r3,-124(fp)
   4d770:	1880041e 	bne	r3,r2,4d784 <__env_lock+0x80>
  {
    /* we do; just count the recursion */

    locks++;
   4d774:	d0a71d17 	ldw	r2,-25484(gp)
   4d778:	10800044 	addi	r2,r2,1
   4d77c:	d0a71d15 	stw	r2,-25484(gp)
   4d780:	00000a06 	br	4d7ac <__env_lock+0xa8>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
   4d784:	d0e71e17 	ldw	r3,-25480(gp)
   4d788:	e0bffe84 	addi	r2,fp,-6
   4d78c:	1809883a 	mov	r4,r3
   4d790:	000b883a 	mov	r5,zero
   4d794:	100d883a 	mov	r6,r2
   4d798:	00531440 	call	53144 <OSSemPend>
    locks  = 1;
   4d79c:	00800044 	movi	r2,1
   4d7a0:	d0a71d15 	stw	r2,-25484(gp)
    lockid = id;
   4d7a4:	e0bfe117 	ldw	r2,-124(fp)
   4d7a8:	d0a00d15 	stw	r2,-32716(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
   4d7ac:	0001883a 	nop
}
   4d7b0:	e037883a 	mov	sp,fp
   4d7b4:	dfc00117 	ldw	ra,4(sp)
   4d7b8:	df000017 	ldw	fp,0(sp)
   4d7bc:	dec00204 	addi	sp,sp,8
   4d7c0:	f800283a 	ret

0004d7c4 <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
   4d7c4:	defffd04 	addi	sp,sp,-12
   4d7c8:	dfc00215 	stw	ra,8(sp)
   4d7cc:	df000115 	stw	fp,4(sp)
   4d7d0:	df000104 	addi	fp,sp,4
   4d7d4:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
   4d7d8:	d0a71d17 	ldw	r2,-25484(gp)
   4d7dc:	1000011e 	bne	r2,zero,4d7e4 <__env_unlock+0x20>
    return;
   4d7e0:	00000a06 	br	4d80c <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
   4d7e4:	d0a71d17 	ldw	r2,-25484(gp)
   4d7e8:	10bfffc4 	addi	r2,r2,-1
   4d7ec:	d0a71d15 	stw	r2,-25484(gp)
   4d7f0:	d0a71d17 	ldw	r2,-25484(gp)
   4d7f4:	1000051e 	bne	r2,zero,4d80c <__env_unlock+0x48>
  {
    lockid = -1;
   4d7f8:	00bfffc4 	movi	r2,-1
   4d7fc:	d0a00d15 	stw	r2,-32716(gp)
    OSSemPost( alt_envsem );
   4d800:	d0a71e17 	ldw	r2,-25480(gp)
   4d804:	1009883a 	mov	r4,r2
   4d808:	00535180 	call	53518 <OSSemPost>
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
   4d80c:	e037883a 	mov	sp,fp
   4d810:	dfc00117 	ldw	ra,4(sp)
   4d814:	df000017 	ldw	fp,0(sp)
   4d818:	dec00204 	addi	sp,sp,8
   4d81c:	f800283a 	ret

0004d820 <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
   4d820:	deffdb04 	addi	sp,sp,-148
   4d824:	dfc02415 	stw	ra,144(sp)
   4d828:	df002315 	stw	fp,140(sp)
   4d82c:	df002304 	addi	fp,sp,140
   4d830:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   4d834:	e03fdd15 	stw	zero,-140(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
   4d838:	008001b4 	movhi	r2,6
   4d83c:	10ad4144 	addi	r2,r2,-19195
   4d840:	10800003 	ldbu	r2,0(r2)
   4d844:	10803fcc 	andi	r2,r2,255
   4d848:	10800060 	cmpeqi	r2,r2,1
   4d84c:	1000011e 	bne	r2,zero,4d854 <__malloc_lock+0x34>
      return;
   4d850:	00003606 	br	4d92c <__malloc_lock+0x10c>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
   4d854:	e0bfe204 	addi	r2,fp,-120
   4d858:	01003fc4 	movi	r4,255
   4d85c:	100b883a 	mov	r5,r2
   4d860:	0054f900 	call	54f90 <OSTaskQuery>
   4d864:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
   4d868:	e0bffe83 	ldbu	r2,-6(fp)
   4d86c:	10803fcc 	andi	r2,r2,255
   4d870:	10000126 	beq	r2,zero,4d878 <__malloc_lock+0x58>
    return;
   4d874:	00002d06 	br	4d92c <__malloc_lock+0x10c>

  id = tcb.OSTCBPrio;
   4d878:	e0bfee83 	ldbu	r2,-70(fp)
   4d87c:	10803fcc 	andi	r2,r2,255
   4d880:	e0bfde15 	stw	r2,-136(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
   4d884:	d0e72017 	ldw	r3,-25472(gp)
   4d888:	e0bffd04 	addi	r2,fp,-12
   4d88c:	1809883a 	mov	r4,r3
   4d890:	100b883a 	mov	r5,r2
   4d894:	00536280 	call	53628 <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4d898:	0005303a 	rdctl	r2,status
   4d89c:	e0bfdf15 	stw	r2,-132(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4d8a0:	e0ffdf17 	ldw	r3,-132(fp)
   4d8a4:	00bfff84 	movi	r2,-2
   4d8a8:	1884703a 	and	r2,r3,r2
   4d8ac:	1001703a 	wrctl	status,r2
  
  return context;
   4d8b0:	e0bfdf17 	ldw	r2,-132(fp)
  
  OS_ENTER_CRITICAL();
   4d8b4:	e0bfdd15 	stw	r2,-140(fp)

  if( !semdata.OSCnt && id == lockid ) 
   4d8b8:	e0bffd0b 	ldhu	r2,-12(fp)
   4d8bc:	10bfffcc 	andi	r2,r2,65535
   4d8c0:	10000b1e 	bne	r2,zero,4d8f0 <__malloc_lock+0xd0>
   4d8c4:	d0a00e17 	ldw	r2,-32712(gp)
   4d8c8:	e0ffde17 	ldw	r3,-136(fp)
   4d8cc:	1880081e 	bne	r3,r2,4d8f0 <__malloc_lock+0xd0>
  {
    /* we do; just count the recursion */
    locks++;
   4d8d0:	d0a71f17 	ldw	r2,-25476(gp)
   4d8d4:	10800044 	addi	r2,r2,1
   4d8d8:	d0a71f15 	stw	r2,-25476(gp)
   4d8dc:	e0bfdd17 	ldw	r2,-140(fp)
   4d8e0:	e0bfe015 	stw	r2,-128(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4d8e4:	e0bfe017 	ldw	r2,-128(fp)
   4d8e8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
   4d8ec:	00000e06 	br	4d928 <__malloc_lock+0x108>
   4d8f0:	e0bfdd17 	ldw	r2,-140(fp)
   4d8f4:	e0bfe115 	stw	r2,-124(fp)
   4d8f8:	e0bfe117 	ldw	r2,-124(fp)
   4d8fc:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
   4d900:	d0e72017 	ldw	r3,-25472(gp)
   4d904:	e0bffe84 	addi	r2,fp,-6
   4d908:	1809883a 	mov	r4,r3
   4d90c:	000b883a 	mov	r5,zero
   4d910:	100d883a 	mov	r6,r2
   4d914:	00531440 	call	53144 <OSSemPend>
    locks  = 1;
   4d918:	00800044 	movi	r2,1
   4d91c:	d0a71f15 	stw	r2,-25476(gp)
    lockid = id;
   4d920:	e0bfde17 	ldw	r2,-136(fp)
   4d924:	d0a00e15 	stw	r2,-32712(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
   4d928:	0001883a 	nop
}
   4d92c:	e037883a 	mov	sp,fp
   4d930:	dfc00117 	ldw	ra,4(sp)
   4d934:	df000017 	ldw	fp,0(sp)
   4d938:	dec00204 	addi	sp,sp,8
   4d93c:	f800283a 	ret

0004d940 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   4d940:	defff804 	addi	sp,sp,-32
   4d944:	dfc00715 	stw	ra,28(sp)
   4d948:	df000615 	stw	fp,24(sp)
   4d94c:	df000604 	addi	fp,sp,24
   4d950:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   4d954:	e03ffa15 	stw	zero,-24(fp)
#endif 

  if (OSRunning != OS_TRUE)
   4d958:	008001b4 	movhi	r2,6
   4d95c:	10ad4144 	addi	r2,r2,-19195
   4d960:	10800003 	ldbu	r2,0(r2)
   4d964:	10803fcc 	andi	r2,r2,255
   4d968:	10800060 	cmpeqi	r2,r2,1
   4d96c:	1000011e 	bne	r2,zero,4d974 <__malloc_unlock+0x34>
      return;
   4d970:	00002206 	br	4d9fc <__malloc_unlock+0xbc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4d974:	0005303a 	rdctl	r2,status
   4d978:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4d97c:	e0fffb17 	ldw	r3,-20(fp)
   4d980:	00bfff84 	movi	r2,-2
   4d984:	1884703a 	and	r2,r3,r2
   4d988:	1001703a 	wrctl	status,r2
  
  return context;
   4d98c:	e0bffb17 	ldw	r2,-20(fp)

  OS_ENTER_CRITICAL();
   4d990:	e0bffa15 	stw	r2,-24(fp)
  if (locks == 0)
   4d994:	d0a71f17 	ldw	r2,-25476(gp)
   4d998:	1000051e 	bne	r2,zero,4d9b0 <__malloc_unlock+0x70>
   4d99c:	e0bffa17 	ldw	r2,-24(fp)
   4d9a0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4d9a4:	e0bffc17 	ldw	r2,-16(fp)
   4d9a8:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
   4d9ac:	00001306 	br	4d9fc <__malloc_unlock+0xbc>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
   4d9b0:	d0a71f17 	ldw	r2,-25476(gp)
   4d9b4:	10bfffc4 	addi	r2,r2,-1
   4d9b8:	d0a71f15 	stw	r2,-25476(gp)
   4d9bc:	d0a71f17 	ldw	r2,-25476(gp)
   4d9c0:	10000a1e 	bne	r2,zero,4d9ec <__malloc_unlock+0xac>
  {
    lockid = -1;
   4d9c4:	00bfffc4 	movi	r2,-1
   4d9c8:	d0a00e15 	stw	r2,-32712(gp)
   4d9cc:	e0bffa17 	ldw	r2,-24(fp)
   4d9d0:	e0bffd15 	stw	r2,-12(fp)
   4d9d4:	e0bffd17 	ldw	r2,-12(fp)
   4d9d8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
   4d9dc:	d0a72017 	ldw	r2,-25472(gp)
   4d9e0:	1009883a 	mov	r4,r2
   4d9e4:	00535180 	call	53518 <OSSemPost>
   4d9e8:	00000406 	br	4d9fc <__malloc_unlock+0xbc>
   4d9ec:	e0bffa17 	ldw	r2,-24(fp)
   4d9f0:	e0bffe15 	stw	r2,-8(fp)
   4d9f4:	e0bffe17 	ldw	r2,-8(fp)
   4d9f8:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
   4d9fc:	e037883a 	mov	sp,fp
   4da00:	dfc00117 	ldw	ra,4(sp)
   4da04:	df000017 	ldw	fp,0(sp)
   4da08:	dec00204 	addi	sp,sp,8
   4da0c:	f800283a 	ret

0004da10 <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
   4da10:	defff704 	addi	sp,sp,-36
   4da14:	dfc00815 	stw	ra,32(sp)
   4da18:	df000715 	stw	fp,28(sp)
   4da1c:	df000704 	addi	fp,sp,28
   4da20:	e13ffd15 	stw	r4,-12(fp)
   4da24:	e17ffe15 	stw	r5,-8(fp)
   4da28:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   4da2c:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   4da30:	e0bfff17 	ldw	r2,-4(fp)
   4da34:	1000021e 	bne	r2,zero,4da40 <OSEventNameGet+0x30>
        return (0);
   4da38:	0005883a 	mov	r2,zero
   4da3c:	00003706 	br	4db1c <OSEventNameGet+0x10c>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
   4da40:	e0bffd17 	ldw	r2,-12(fp)
   4da44:	1000051e 	bne	r2,zero,4da5c <OSEventNameGet+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
   4da48:	e0bfff17 	ldw	r2,-4(fp)
   4da4c:	00c00104 	movi	r3,4
   4da50:	10c00005 	stb	r3,0(r2)
        return (0);
   4da54:	0005883a 	mov	r2,zero
   4da58:	00003006 	br	4db1c <OSEventNameGet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   4da5c:	e0bffe17 	ldw	r2,-8(fp)
   4da60:	1000051e 	bne	r2,zero,4da78 <OSEventNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   4da64:	e0bfff17 	ldw	r2,-4(fp)
   4da68:	00c00304 	movi	r3,12
   4da6c:	10c00005 	stb	r3,0(r2)
        return (0);
   4da70:	0005883a 	mov	r2,zero
   4da74:	00002906 	br	4db1c <OSEventNameGet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   4da78:	d0a72f03 	ldbu	r2,-25412(gp)
   4da7c:	10803fcc 	andi	r2,r2,255
   4da80:	10000526 	beq	r2,zero,4da98 <OSEventNameGet+0x88>
        *perr  = OS_ERR_NAME_GET_ISR;
   4da84:	e0bfff17 	ldw	r2,-4(fp)
   4da88:	00c00444 	movi	r3,17
   4da8c:	10c00005 	stb	r3,0(r2)
        return (0);
   4da90:	0005883a 	mov	r2,zero
   4da94:	00002106 	br	4db1c <OSEventNameGet+0x10c>
    }
    switch (pevent->OSEventType) {
   4da98:	e0bffd17 	ldw	r2,-12(fp)
   4da9c:	10800003 	ldbu	r2,0(r2)
   4daa0:	10803fcc 	andi	r2,r2,255
   4daa4:	10bfffc4 	addi	r2,r2,-1
   4daa8:	10800128 	cmpgeui	r2,r2,4
   4daac:	10000526 	beq	r2,zero,4dac4 <OSEventNameGet+0xb4>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
   4dab0:	e0bfff17 	ldw	r2,-4(fp)
   4dab4:	00c00044 	movi	r3,1
   4dab8:	10c00005 	stb	r3,0(r2)
             return (0);
   4dabc:	0005883a 	mov	r2,zero
   4dac0:	00001606 	br	4db1c <OSEventNameGet+0x10c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
   4dac4:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4dac8:	0005303a 	rdctl	r2,status
   4dacc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4dad0:	e0fffb17 	ldw	r3,-20(fp)
   4dad4:	00bfff84 	movi	r2,-2
   4dad8:	1884703a 	and	r2,r3,r2
   4dadc:	1001703a 	wrctl	status,r2
  
  return context;
   4dae0:	e0bffb17 	ldw	r2,-20(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
   4dae4:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
   4dae8:	e0bffd17 	ldw	r2,-12(fp)
   4daec:	10800384 	addi	r2,r2,14
   4daf0:	e13ffe17 	ldw	r4,-8(fp)
   4daf4:	100b883a 	mov	r5,r2
   4daf8:	004f4640 	call	4f464 <OS_StrCopy>
   4dafc:	e0bffa05 	stb	r2,-24(fp)
   4db00:	e0bff917 	ldw	r2,-28(fp)
   4db04:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4db08:	e0bffc17 	ldw	r2,-16(fp)
   4db0c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   4db10:	e0bfff17 	ldw	r2,-4(fp)
   4db14:	10000005 	stb	zero,0(r2)
    return (len);
   4db18:	e0bffa03 	ldbu	r2,-24(fp)
}
   4db1c:	e037883a 	mov	sp,fp
   4db20:	dfc00117 	ldw	ra,4(sp)
   4db24:	df000017 	ldw	fp,0(sp)
   4db28:	dec00204 	addi	sp,sp,8
   4db2c:	f800283a 	ret

0004db30 <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
   4db30:	defff604 	addi	sp,sp,-40
   4db34:	dfc00915 	stw	ra,36(sp)
   4db38:	df000815 	stw	fp,32(sp)
   4db3c:	df000804 	addi	fp,sp,32
   4db40:	e13ffd15 	stw	r4,-12(fp)
   4db44:	e17ffe15 	stw	r5,-8(fp)
   4db48:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   4db4c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   4db50:	e0bfff17 	ldw	r2,-4(fp)
   4db54:	1000011e 	bne	r2,zero,4db5c <OSEventNameSet+0x2c>
        return;
   4db58:	00003f06 	br	4dc58 <OSEventNameSet+0x128>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
   4db5c:	e0bffd17 	ldw	r2,-12(fp)
   4db60:	1000041e 	bne	r2,zero,4db74 <OSEventNameSet+0x44>
        *perr = OS_ERR_PEVENT_NULL;
   4db64:	e0bfff17 	ldw	r2,-4(fp)
   4db68:	00c00104 	movi	r3,4
   4db6c:	10c00005 	stb	r3,0(r2)
        return;
   4db70:	00003906 	br	4dc58 <OSEventNameSet+0x128>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   4db74:	e0bffe17 	ldw	r2,-8(fp)
   4db78:	1000041e 	bne	r2,zero,4db8c <OSEventNameSet+0x5c>
        *perr = OS_ERR_PNAME_NULL;
   4db7c:	e0bfff17 	ldw	r2,-4(fp)
   4db80:	00c00304 	movi	r3,12
   4db84:	10c00005 	stb	r3,0(r2)
        return;
   4db88:	00003306 	br	4dc58 <OSEventNameSet+0x128>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   4db8c:	d0a72f03 	ldbu	r2,-25412(gp)
   4db90:	10803fcc 	andi	r2,r2,255
   4db94:	10000426 	beq	r2,zero,4dba8 <OSEventNameSet+0x78>
        *perr = OS_ERR_NAME_SET_ISR;
   4db98:	e0bfff17 	ldw	r2,-4(fp)
   4db9c:	00c00484 	movi	r3,18
   4dba0:	10c00005 	stb	r3,0(r2)
        return;
   4dba4:	00002c06 	br	4dc58 <OSEventNameSet+0x128>
    }
    switch (pevent->OSEventType) {
   4dba8:	e0bffd17 	ldw	r2,-12(fp)
   4dbac:	10800003 	ldbu	r2,0(r2)
   4dbb0:	10803fcc 	andi	r2,r2,255
   4dbb4:	10bfffc4 	addi	r2,r2,-1
   4dbb8:	10800128 	cmpgeui	r2,r2,4
   4dbbc:	10000426 	beq	r2,zero,4dbd0 <OSEventNameSet+0xa0>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
   4dbc0:	e0bfff17 	ldw	r2,-4(fp)
   4dbc4:	00c00044 	movi	r3,1
   4dbc8:	10c00005 	stb	r3,0(r2)
             return;
   4dbcc:	00002206 	br	4dc58 <OSEventNameSet+0x128>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
   4dbd0:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4dbd4:	0005303a 	rdctl	r2,status
   4dbd8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4dbdc:	e0fffa17 	ldw	r3,-24(fp)
   4dbe0:	00bfff84 	movi	r2,-2
   4dbe4:	1884703a 	and	r2,r3,r2
   4dbe8:	1001703a 	wrctl	status,r2
  
  return context;
   4dbec:	e0bffa17 	ldw	r2,-24(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
   4dbf0:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
   4dbf4:	e13ffe17 	ldw	r4,-8(fp)
   4dbf8:	004f4d80 	call	4f4d8 <OS_StrLen>
   4dbfc:	e0bff905 	stb	r2,-28(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
   4dc00:	e0bff903 	ldbu	r2,-28(fp)
   4dc04:	10800830 	cmpltui	r2,r2,32
   4dc08:	1000081e 	bne	r2,zero,4dc2c <OSEventNameSet+0xfc>
   4dc0c:	e0bff817 	ldw	r2,-32(fp)
   4dc10:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4dc14:	e0bffb17 	ldw	r2,-20(fp)
   4dc18:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
   4dc1c:	e0bfff17 	ldw	r2,-4(fp)
   4dc20:	00c002c4 	movi	r3,11
   4dc24:	10c00005 	stb	r3,0(r2)
        return;
   4dc28:	00000b06 	br	4dc58 <OSEventNameSet+0x128>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
   4dc2c:	e0bffd17 	ldw	r2,-12(fp)
   4dc30:	10800384 	addi	r2,r2,14
   4dc34:	1009883a 	mov	r4,r2
   4dc38:	e17ffe17 	ldw	r5,-8(fp)
   4dc3c:	004f4640 	call	4f464 <OS_StrCopy>
   4dc40:	e0bff817 	ldw	r2,-32(fp)
   4dc44:	e0bffc15 	stw	r2,-16(fp)
   4dc48:	e0bffc17 	ldw	r2,-16(fp)
   4dc4c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   4dc50:	e0bfff17 	ldw	r2,-4(fp)
   4dc54:	10000005 	stb	zero,0(r2)
}
   4dc58:	e037883a 	mov	sp,fp
   4dc5c:	dfc00117 	ldw	ra,4(sp)
   4dc60:	df000017 	ldw	fp,0(sp)
   4dc64:	dec00204 	addi	sp,sp,8
   4dc68:	f800283a 	ret

0004dc6c <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
   4dc6c:	deffed04 	addi	sp,sp,-76
   4dc70:	dfc01215 	stw	ra,72(sp)
   4dc74:	df001115 	stw	fp,68(sp)
   4dc78:	df001104 	addi	fp,sp,68
   4dc7c:	e13ffc15 	stw	r4,-16(fp)
   4dc80:	e17ffd15 	stw	r5,-12(fp)
   4dc84:	e1bffe15 	stw	r6,-8(fp)
   4dc88:	3805883a 	mov	r2,r7
   4dc8c:	e0bfff0d 	sth	r2,-4(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
   4dc90:	e03ff315 	stw	zero,-52(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
   4dc94:	e0800217 	ldw	r2,8(fp)
   4dc98:	1000021e 	bne	r2,zero,4dca4 <OSEventPendMulti+0x38>
        return (0);
   4dc9c:	0005883a 	mov	r2,zero
   4dca0:	00017106 	br	4e268 <OSEventPendMulti+0x5fc>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
   4dca4:	e0bffc17 	ldw	r2,-16(fp)
   4dca8:	1000051e 	bne	r2,zero,4dcc0 <OSEventPendMulti+0x54>
       *perr =  OS_ERR_PEVENT_NULL;
   4dcac:	e0800217 	ldw	r2,8(fp)
   4dcb0:	00c00104 	movi	r3,4
   4dcb4:	10c00005 	stb	r3,0(r2)
        return (0);
   4dcb8:	0005883a 	mov	r2,zero
   4dcbc:	00016a06 	br	4e268 <OSEventPendMulti+0x5fc>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
   4dcc0:	e0bffd17 	ldw	r2,-12(fp)
   4dcc4:	1000051e 	bne	r2,zero,4dcdc <OSEventPendMulti+0x70>
       *perr =  OS_ERR_PEVENT_NULL;
   4dcc8:	e0800217 	ldw	r2,8(fp)
   4dccc:	00c00104 	movi	r3,4
   4dcd0:	10c00005 	stb	r3,0(r2)
        return (0);
   4dcd4:	0005883a 	mov	r2,zero
   4dcd8:	00016306 	br	4e268 <OSEventPendMulti+0x5fc>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
   4dcdc:	e0bffe17 	ldw	r2,-8(fp)
   4dce0:	1000051e 	bne	r2,zero,4dcf8 <OSEventPendMulti+0x8c>
       *perr =  OS_ERR_PEVENT_NULL;
   4dce4:	e0800217 	ldw	r2,8(fp)
   4dce8:	00c00104 	movi	r3,4
   4dcec:	10c00005 	stb	r3,0(r2)
        return (0);
   4dcf0:	0005883a 	mov	r2,zero
   4dcf4:	00015c06 	br	4e268 <OSEventPendMulti+0x5fc>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
   4dcf8:	e0bffd17 	ldw	r2,-12(fp)
   4dcfc:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
   4dd00:	e0bffc17 	ldw	r2,-16(fp)
   4dd04:	e0bfef15 	stw	r2,-68(fp)
    pevent      = *pevents;
   4dd08:	e0bfef17 	ldw	r2,-68(fp)
   4dd0c:	10800017 	ldw	r2,0(r2)
   4dd10:	e0bff015 	stw	r2,-64(fp)
    while  (pevent != (OS_EVENT *)0) {
   4dd14:	00001906 	br	4dd7c <OSEventPendMulti+0x110>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
   4dd18:	e0bff017 	ldw	r2,-64(fp)
   4dd1c:	10800003 	ldbu	r2,0(r2)
   4dd20:	10803fcc 	andi	r2,r2,255
   4dd24:	10c000a0 	cmpeqi	r3,r2,2
   4dd28:	1800091e 	bne	r3,zero,4dd50 <OSEventPendMulti+0xe4>
   4dd2c:	10c000e0 	cmpeqi	r3,r2,3
   4dd30:	1800091e 	bne	r3,zero,4dd58 <OSEventPendMulti+0xec>
   4dd34:	10800060 	cmpeqi	r2,r2,1
   4dd38:	1000091e 	bne	r2,zero,4dd60 <OSEventPendMulti+0xf4>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
   4dd3c:	e0800217 	ldw	r2,8(fp)
   4dd40:	00c00044 	movi	r3,1
   4dd44:	10c00005 	stb	r3,0(r2)
                 return (0);
   4dd48:	0005883a 	mov	r2,zero
   4dd4c:	00014606 	br	4e268 <OSEventPendMulti+0x5fc>
            case OS_EVENT_TYPE_MBOX:
                 break;
#endif
#if ((OS_Q_EN   > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 break;
   4dd50:	0001883a 	nop
   4dd54:	00000306 	br	4dd64 <OSEventPendMulti+0xf8>
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
#if (OS_SEM_EN  > 0)
            case OS_EVENT_TYPE_SEM:
                 break;
   4dd58:	0001883a 	nop
   4dd5c:	00000106 	br	4dd64 <OSEventPendMulti+0xf8>
#endif
#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 break;
   4dd60:	0001883a 	nop
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
                 return (0);
        }
        pevents++;
   4dd64:	e0bfef17 	ldw	r2,-68(fp)
   4dd68:	10800104 	addi	r2,r2,4
   4dd6c:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
   4dd70:	e0bfef17 	ldw	r2,-68(fp)
   4dd74:	10800017 	ldw	r2,0(r2)
   4dd78:	e0bff015 	stw	r2,-64(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
   4dd7c:	e0bff017 	ldw	r2,-64(fp)
   4dd80:	103fe51e 	bne	r2,zero,4dd18 <__alt_data_end+0xfffdcfd8>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
   4dd84:	d0a72f03 	ldbu	r2,-25412(gp)
   4dd88:	10803fcc 	andi	r2,r2,255
   4dd8c:	10000526 	beq	r2,zero,4dda4 <OSEventPendMulti+0x138>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
   4dd90:	e0800217 	ldw	r2,8(fp)
   4dd94:	00c00084 	movi	r3,2
   4dd98:	10c00005 	stb	r3,0(r2)
        return (0);
   4dd9c:	0005883a 	mov	r2,zero
   4dda0:	00013106 	br	4e268 <OSEventPendMulti+0x5fc>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
   4dda4:	d0a72103 	ldbu	r2,-25468(gp)
   4dda8:	10803fcc 	andi	r2,r2,255
   4ddac:	10000526 	beq	r2,zero,4ddc4 <OSEventPendMulti+0x158>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
   4ddb0:	e0800217 	ldw	r2,8(fp)
   4ddb4:	00c00344 	movi	r3,13
   4ddb8:	10c00005 	stb	r3,0(r2)
        return (0);
   4ddbc:	0005883a 	mov	r2,zero
   4ddc0:	00012906 	br	4e268 <OSEventPendMulti+0x5fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4ddc4:	0005303a 	rdctl	r2,status
   4ddc8:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4ddcc:	e0fff517 	ldw	r3,-44(fp)
   4ddd0:	00bfff84 	movi	r2,-2
   4ddd4:	1884703a 	and	r2,r3,r2
   4ddd8:	1001703a 	wrctl	status,r2
  
  return context;
   4dddc:	e0bff517 	ldw	r2,-44(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
   4dde0:	e0bff315 	stw	r2,-52(fp)
    events_rdy     =  OS_FALSE;
   4dde4:	e03ff105 	stb	zero,-60(fp)
    events_rdy_nbr =  0;
   4dde8:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
   4ddec:	e03ff205 	stb	zero,-56(fp)
    pevents        =  pevents_pend;
   4ddf0:	e0bffc17 	ldw	r2,-16(fp)
   4ddf4:	e0bfef15 	stw	r2,-68(fp)
    pevent         = *pevents;
   4ddf8:	e0bfef17 	ldw	r2,-68(fp)
   4ddfc:	10800017 	ldw	r2,0(r2)
   4de00:	e0bff015 	stw	r2,-64(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
   4de04:	00008106 	br	4e00c <OSEventPendMulti+0x3a0>
        switch (pevent->OSEventType) {
   4de08:	e0bff017 	ldw	r2,-64(fp)
   4de0c:	10800003 	ldbu	r2,0(r2)
   4de10:	10803fcc 	andi	r2,r2,255
   4de14:	10c000a0 	cmpeqi	r3,r2,2
   4de18:	18003c1e 	bne	r3,zero,4df0c <OSEventPendMulti+0x2a0>
   4de1c:	10c000e0 	cmpeqi	r3,r2,3
   4de20:	1800031e 	bne	r3,zero,4de30 <OSEventPendMulti+0x1c4>
   4de24:	10800060 	cmpeqi	r2,r2,1
   4de28:	10001e1e 	bne	r2,zero,4dea4 <OSEventPendMulti+0x238>
   4de2c:	00006606 	br	4dfc8 <OSEventPendMulti+0x35c>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
   4de30:	e0bff017 	ldw	r2,-64(fp)
   4de34:	1080020b 	ldhu	r2,8(r2)
   4de38:	10bfffcc 	andi	r2,r2,65535
   4de3c:	10001526 	beq	r2,zero,4de94 <OSEventPendMulti+0x228>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
   4de40:	e0bff017 	ldw	r2,-64(fp)
   4de44:	1080020b 	ldhu	r2,8(r2)
   4de48:	10bfffc4 	addi	r2,r2,-1
   4de4c:	1007883a 	mov	r3,r2
   4de50:	e0bff017 	ldw	r2,-64(fp)
   4de54:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
   4de58:	e0bffd17 	ldw	r2,-12(fp)
   4de5c:	10c00104 	addi	r3,r2,4
   4de60:	e0fffd15 	stw	r3,-12(fp)
   4de64:	e0fff017 	ldw	r3,-64(fp)
   4de68:	10c00015 	stw	r3,0(r2)
                      events_rdy   =  OS_TRUE;
   4de6c:	00800044 	movi	r2,1
   4de70:	e0bff105 	stb	r2,-60(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
   4de74:	e0bffe17 	ldw	r2,-8(fp)
   4de78:	10c00104 	addi	r3,r2,4
   4de7c:	e0fffe15 	stw	r3,-8(fp)
   4de80:	10000015 	stw	zero,0(r2)
                      events_rdy_nbr++;
   4de84:	e0bff18b 	ldhu	r2,-58(fp)
   4de88:	10800044 	addi	r2,r2,1
   4de8c:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
                 }
                 break;
   4de90:	00005806 	br	4dff4 <OSEventPendMulti+0x388>
                      events_rdy   =  OS_TRUE;
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
                      events_rdy_nbr++;

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
   4de94:	e0bff203 	ldbu	r2,-56(fp)
   4de98:	10800054 	ori	r2,r2,1
   4de9c:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
   4dea0:	00005406 	br	4dff4 <OSEventPendMulti+0x388>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
   4dea4:	e0bff017 	ldw	r2,-64(fp)
   4dea8:	10800117 	ldw	r2,4(r2)
   4deac:	10001326 	beq	r2,zero,4defc <OSEventPendMulti+0x290>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
   4deb0:	e0bffe17 	ldw	r2,-8(fp)
   4deb4:	10c00104 	addi	r3,r2,4
   4deb8:	e0fffe15 	stw	r3,-8(fp)
   4debc:	e0fff017 	ldw	r3,-64(fp)
   4dec0:	18c00117 	ldw	r3,4(r3)
   4dec4:	10c00015 	stw	r3,0(r2)
                     pevent->OSEventPtr  = (void *)0;
   4dec8:	e0bff017 	ldw	r2,-64(fp)
   4decc:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
   4ded0:	e0bffd17 	ldw	r2,-12(fp)
   4ded4:	10c00104 	addi	r3,r2,4
   4ded8:	e0fffd15 	stw	r3,-12(fp)
   4dedc:	e0fff017 	ldw	r3,-64(fp)
   4dee0:	10c00015 	stw	r3,0(r2)
                      events_rdy         =  OS_TRUE;
   4dee4:	00800044 	movi	r2,1
   4dee8:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
   4deec:	e0bff18b 	ldhu	r2,-58(fp)
   4def0:	10800044 	addi	r2,r2,1
   4def4:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
                 }
                 break;
   4def8:	00003e06 	br	4dff4 <OSEventPendMulti+0x388>
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
                      events_rdy         =  OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
   4defc:	e0bff203 	ldbu	r2,-56(fp)
   4df00:	10800094 	ori	r2,r2,2
   4df04:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
   4df08:	00003a06 	br	4dff4 <OSEventPendMulti+0x388>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
   4df0c:	e0bff017 	ldw	r2,-64(fp)
   4df10:	10800117 	ldw	r2,4(r2)
   4df14:	e0bff415 	stw	r2,-48(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
   4df18:	e0bff417 	ldw	r2,-48(fp)
   4df1c:	1080058b 	ldhu	r2,22(r2)
   4df20:	10bfffcc 	andi	r2,r2,65535
   4df24:	10002426 	beq	r2,zero,4dfb8 <OSEventPendMulti+0x34c>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
   4df28:	e0bffe17 	ldw	r2,-8(fp)
   4df2c:	10c00104 	addi	r3,r2,4
   4df30:	e0fffe15 	stw	r3,-8(fp)
   4df34:	e0fff417 	ldw	r3,-48(fp)
   4df38:	18c00417 	ldw	r3,16(r3)
   4df3c:	19400104 	addi	r5,r3,4
   4df40:	e13ff417 	ldw	r4,-48(fp)
   4df44:	21400415 	stw	r5,16(r4)
   4df48:	18c00017 	ldw	r3,0(r3)
   4df4c:	10c00015 	stw	r3,0(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
   4df50:	e0bff417 	ldw	r2,-48(fp)
   4df54:	10c00417 	ldw	r3,16(r2)
   4df58:	e0bff417 	ldw	r2,-48(fp)
   4df5c:	10800217 	ldw	r2,8(r2)
   4df60:	1880041e 	bne	r3,r2,4df74 <OSEventPendMulti+0x308>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
   4df64:	e0bff417 	ldw	r2,-48(fp)
   4df68:	10c00117 	ldw	r3,4(r2)
   4df6c:	e0bff417 	ldw	r2,-48(fp)
   4df70:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
   4df74:	e0bff417 	ldw	r2,-48(fp)
   4df78:	1080058b 	ldhu	r2,22(r2)
   4df7c:	10bfffc4 	addi	r2,r2,-1
   4df80:	1007883a 	mov	r3,r2
   4df84:	e0bff417 	ldw	r2,-48(fp)
   4df88:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
   4df8c:	e0bffd17 	ldw	r2,-12(fp)
   4df90:	10c00104 	addi	r3,r2,4
   4df94:	e0fffd15 	stw	r3,-12(fp)
   4df98:	e0fff017 	ldw	r3,-64(fp)
   4df9c:	10c00015 	stw	r3,0(r2)
                      events_rdy   = OS_TRUE;
   4dfa0:	00800044 	movi	r2,1
   4dfa4:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
   4dfa8:	e0bff18b 	ldhu	r2,-58(fp)
   4dfac:	10800044 	addi	r2,r2,1
   4dfb0:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
                 }
                 break;
   4dfb4:	00000f06 	br	4dff4 <OSEventPendMulti+0x388>
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
                      events_rdy   = OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
   4dfb8:	e0bff203 	ldbu	r2,-56(fp)
   4dfbc:	10800114 	ori	r2,r2,4
   4dfc0:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
   4dfc4:	00000b06 	br	4dff4 <OSEventPendMulti+0x388>
   4dfc8:	e0bff317 	ldw	r2,-52(fp)
   4dfcc:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4dfd0:	e0bff617 	ldw	r2,-40(fp)
   4dfd4:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
   4dfd8:	e0bffd17 	ldw	r2,-12(fp)
   4dfdc:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
   4dfe0:	e0800217 	ldw	r2,8(fp)
   4dfe4:	00c00044 	movi	r3,1
   4dfe8:	10c00005 	stb	r3,0(r2)
                 return (events_rdy_nbr);
   4dfec:	e0bff18b 	ldhu	r2,-58(fp)
   4dff0:	00009d06 	br	4e268 <OSEventPendMulti+0x5fc>
        }
        pevents++;
   4dff4:	e0bfef17 	ldw	r2,-68(fp)
   4dff8:	10800104 	addi	r2,r2,4
   4dffc:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
   4e000:	e0bfef17 	ldw	r2,-68(fp)
   4e004:	10800017 	ldw	r2,0(r2)
   4e008:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
   4e00c:	e0bff017 	ldw	r2,-64(fp)
   4e010:	103f7d1e 	bne	r2,zero,4de08 <__alt_data_end+0xfffdd0c8>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
   4e014:	e0bff103 	ldbu	r2,-60(fp)
   4e018:	10800058 	cmpnei	r2,r2,1
   4e01c:	10000a1e 	bne	r2,zero,4e048 <OSEventPendMulti+0x3dc>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
   4e020:	e0bffd17 	ldw	r2,-12(fp)
   4e024:	10000015 	stw	zero,0(r2)
   4e028:	e0bff317 	ldw	r2,-52(fp)
   4e02c:	e0bff715 	stw	r2,-36(fp)
   4e030:	e0bff717 	ldw	r2,-36(fp)
   4e034:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
   4e038:	e0800217 	ldw	r2,8(fp)
   4e03c:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
   4e040:	e0bff18b 	ldhu	r2,-58(fp)
   4e044:	00008806 	br	4e268 <OSEventPendMulti+0x5fc>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
   4e048:	d0a73017 	ldw	r2,-25408(gp)
   4e04c:	d0e73017 	ldw	r3,-25408(gp)
   4e050:	19000c03 	ldbu	r4,48(r3)
   4e054:	e0fff203 	ldbu	r3,-56(fp)
   4e058:	20c6b03a 	or	r3,r4,r3
   4e05c:	1809883a 	mov	r4,r3
   4e060:	00ffe004 	movi	r3,-128
   4e064:	20c6b03a 	or	r3,r4,r3
   4e068:	10c00c05 	stb	r3,48(r2)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   4e06c:	d0a73017 	ldw	r2,-25408(gp)
   4e070:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
   4e074:	d0a73017 	ldw	r2,-25408(gp)
   4e078:	e0ffff0b 	ldhu	r3,-4(fp)
   4e07c:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
   4e080:	e13ffc17 	ldw	r4,-16(fp)
   4e084:	004ebb40 	call	4ebb4 <OS_EventTaskWaitMulti>
   4e088:	e0bff317 	ldw	r2,-52(fp)
   4e08c:	e0bff815 	stw	r2,-32(fp)
   4e090:	e0bff817 	ldw	r2,-32(fp)
   4e094:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
   4e098:	004f3280 	call	4f328 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4e09c:	0005303a 	rdctl	r2,status
   4e0a0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4e0a4:	e0fff917 	ldw	r3,-28(fp)
   4e0a8:	00bfff84 	movi	r2,-2
   4e0ac:	1884703a 	and	r2,r3,r2
   4e0b0:	1001703a 	wrctl	status,r2
  
  return context;
   4e0b4:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
   4e0b8:	e0bff315 	stw	r2,-52(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
   4e0bc:	d0a73017 	ldw	r2,-25408(gp)
   4e0c0:	10800c43 	ldbu	r2,49(r2)
   4e0c4:	10803fcc 	andi	r2,r2,255
   4e0c8:	10000226 	beq	r2,zero,4e0d4 <OSEventPendMulti+0x468>
   4e0cc:	108000a0 	cmpeqi	r2,r2,2
   4e0d0:	10001826 	beq	r2,zero,4e134 <OSEventPendMulti+0x4c8>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
   4e0d4:	d0a73017 	ldw	r2,-25408(gp)
   4e0d8:	10800717 	ldw	r2,28(r2)
   4e0dc:	e0bff015 	stw	r2,-64(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
   4e0e0:	e0bff017 	ldw	r2,-64(fp)
   4e0e4:	10000b26 	beq	r2,zero,4e114 <OSEventPendMulti+0x4a8>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
   4e0e8:	e0bffd17 	ldw	r2,-12(fp)
   4e0ec:	10c00104 	addi	r3,r2,4
   4e0f0:	e0fffd15 	stw	r3,-12(fp)
   4e0f4:	e0fff017 	ldw	r3,-64(fp)
   4e0f8:	10c00015 	stw	r3,0(r2)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
   4e0fc:	e0bffd17 	ldw	r2,-12(fp)
   4e100:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
   4e104:	e0bff18b 	ldhu	r2,-58(fp)
   4e108:	10800044 	addi	r2,r2,1
   4e10c:	e0bff18d 	sth	r2,-58(fp)

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
             }
			 break;
   4e110:	00000d06 	br	4e148 <OSEventPendMulti+0x4dc>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
                  events_rdy_nbr++;

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
   4e114:	d0a73017 	ldw	r2,-25408(gp)
   4e118:	00c00044 	movi	r3,1
   4e11c:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
   4e120:	d0a73017 	ldw	r2,-25408(gp)
   4e124:	1009883a 	mov	r4,r2
   4e128:	e17ffc17 	ldw	r5,-16(fp)
   4e12c:	004edb40 	call	4edb4 <OS_EventTaskRemoveMulti>
             }
			 break;
   4e130:	00000506 	br	4e148 <OSEventPendMulti+0x4dc>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
   4e134:	d0a73017 	ldw	r2,-25408(gp)
   4e138:	1009883a 	mov	r4,r2
   4e13c:	e17ffc17 	ldw	r5,-16(fp)
   4e140:	004edb40 	call	4edb4 <OS_EventTaskRemoveMulti>
             break;
   4e144:	0001883a 	nop
    }

    switch (OSTCBCur->OSTCBStatPend) {
   4e148:	d0a73017 	ldw	r2,-25408(gp)
   4e14c:	10800c43 	ldbu	r2,49(r2)
   4e150:	10803fcc 	andi	r2,r2,255
   4e154:	10000326 	beq	r2,zero,4e164 <OSEventPendMulti+0x4f8>
   4e158:	108000a0 	cmpeqi	r2,r2,2
   4e15c:	1000231e 	bne	r2,zero,4e1ec <OSEventPendMulti+0x580>
   4e160:	00002a06 	br	4e20c <OSEventPendMulti+0x5a0>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
   4e164:	e0bff017 	ldw	r2,-64(fp)
   4e168:	10800003 	ldbu	r2,0(r2)
   4e16c:	10803fcc 	andi	r2,r2,255
   4e170:	0080100e 	bge	zero,r2,4e1b4 <OSEventPendMulti+0x548>
   4e174:	10c000d0 	cmplti	r3,r2,3
   4e178:	1800071e 	bne	r3,zero,4e198 <OSEventPendMulti+0x52c>
   4e17c:	108000e0 	cmpeqi	r2,r2,3
   4e180:	10000c26 	beq	r2,zero,4e1b4 <OSEventPendMulti+0x548>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
   4e184:	e0bffe17 	ldw	r2,-8(fp)
   4e188:	10c00104 	addi	r3,r2,4
   4e18c:	e0fffe15 	stw	r3,-8(fp)
   4e190:	10000015 	stw	zero,0(r2)
                      break;
   4e194:	00001206 	br	4e1e0 <OSEventPendMulti+0x574>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
   4e198:	e0bffe17 	ldw	r2,-8(fp)
   4e19c:	10c00104 	addi	r3,r2,4
   4e1a0:	e0fffe15 	stw	r3,-8(fp)
   4e1a4:	d0e73017 	ldw	r3,-25408(gp)
   4e1a8:	18c00917 	ldw	r3,36(r3)
   4e1ac:	10c00015 	stw	r3,0(r2)
                      break;
   4e1b0:	00000b06 	br	4e1e0 <OSEventPendMulti+0x574>
   4e1b4:	e0bff317 	ldw	r2,-52(fp)
   4e1b8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4e1bc:	e0bffa17 	ldw	r2,-24(fp)
   4e1c0:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
   4e1c4:	e0bffd17 	ldw	r2,-12(fp)
   4e1c8:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
   4e1cc:	e0800217 	ldw	r2,8(fp)
   4e1d0:	00c00044 	movi	r3,1
   4e1d4:	10c00005 	stb	r3,0(r2)
                      return (events_rdy_nbr);
   4e1d8:	e0bff18b 	ldhu	r2,-58(fp)
   4e1dc:	00002206 	br	4e268 <OSEventPendMulti+0x5fc>
             }
            *perr = OS_ERR_NONE;
   4e1e0:	e0800217 	ldw	r2,8(fp)
   4e1e4:	10000005 	stb	zero,0(r2)
             break;
   4e1e8:	00001006 	br	4e22c <OSEventPendMulti+0x5c0>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
   4e1ec:	e0bffe17 	ldw	r2,-8(fp)
   4e1f0:	10c00104 	addi	r3,r2,4
   4e1f4:	e0fffe15 	stw	r3,-8(fp)
   4e1f8:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
   4e1fc:	e0800217 	ldw	r2,8(fp)
   4e200:	00c00384 	movi	r3,14
   4e204:	10c00005 	stb	r3,0(r2)
             break;
   4e208:	00000806 	br	4e22c <OSEventPendMulti+0x5c0>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
   4e20c:	e0bffe17 	ldw	r2,-8(fp)
   4e210:	10c00104 	addi	r3,r2,4
   4e214:	e0fffe15 	stw	r3,-8(fp)
   4e218:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
   4e21c:	e0800217 	ldw	r2,8(fp)
   4e220:	00c00284 	movi	r3,10
   4e224:	10c00005 	stb	r3,0(r2)
             break;
   4e228:	0001883a 	nop
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
   4e22c:	d0a73017 	ldw	r2,-25408(gp)
   4e230:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
   4e234:	d0a73017 	ldw	r2,-25408(gp)
   4e238:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
   4e23c:	d0a73017 	ldw	r2,-25408(gp)
   4e240:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   4e244:	d0a73017 	ldw	r2,-25408(gp)
   4e248:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
   4e24c:	d0a73017 	ldw	r2,-25408(gp)
   4e250:	10000915 	stw	zero,36(r2)
   4e254:	e0bff317 	ldw	r2,-52(fp)
   4e258:	e0bffb15 	stw	r2,-20(fp)
   4e25c:	e0bffb17 	ldw	r2,-20(fp)
   4e260:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
   4e264:	e0bff18b 	ldhu	r2,-58(fp)
}
   4e268:	e037883a 	mov	sp,fp
   4e26c:	dfc00117 	ldw	ra,4(sp)
   4e270:	df000017 	ldw	fp,0(sp)
   4e274:	dec00204 	addi	sp,sp,8
   4e278:	f800283a 	ret

0004e27c <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
   4e27c:	defffe04 	addi	sp,sp,-8
   4e280:	dfc00115 	stw	ra,4(sp)
   4e284:	df000015 	stw	fp,0(sp)
   4e288:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
   4e28c:	004d6900 	call	4d690 <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
   4e290:	004eff00 	call	4eff0 <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
   4e294:	004f0340 	call	4f034 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
   4e298:	004f1940 	call	4f194 <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
   4e29c:	004ef140 	call	4ef14 <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
   4e2a0:	00511040 	call	51104 <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
   4e2a4:	0051a4c0 	call	51a4c <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
   4e2a8:	0052c800 	call	52c80 <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
   4e2ac:	004f09c0 	call	4f09c <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
   4e2b0:	004f1180 	call	4f118 <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
   4e2b4:	004d6ac0 	call	4d6ac <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
   4e2b8:	004f9f00 	call	4f9f0 <OSDebugInit>
#endif
}
   4e2bc:	e037883a 	mov	sp,fp
   4e2c0:	dfc00117 	ldw	ra,4(sp)
   4e2c4:	df000017 	ldw	fp,0(sp)
   4e2c8:	dec00204 	addi	sp,sp,8
   4e2cc:	f800283a 	ret

0004e2d0 <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
   4e2d0:	defffc04 	addi	sp,sp,-16
   4e2d4:	df000315 	stw	fp,12(sp)
   4e2d8:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   4e2dc:	e03ffd15 	stw	zero,-12(fp)
#endif

    if (OSRunning == OS_TRUE) {
   4e2e0:	d0a72143 	ldbu	r2,-25467(gp)
   4e2e4:	10803fcc 	andi	r2,r2,255
   4e2e8:	10800058 	cmpnei	r2,r2,1
   4e2ec:	1000131e 	bne	r2,zero,4e33c <OSIntEnter+0x6c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4e2f0:	0005303a 	rdctl	r2,status
   4e2f4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4e2f8:	e0fffe17 	ldw	r3,-8(fp)
   4e2fc:	00bfff84 	movi	r2,-2
   4e300:	1884703a 	and	r2,r3,r2
   4e304:	1001703a 	wrctl	status,r2
  
  return context;
   4e308:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
   4e30c:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting < 255u) {
   4e310:	d0a72f03 	ldbu	r2,-25412(gp)
   4e314:	10803fcc 	andi	r2,r2,255
   4e318:	10803fe0 	cmpeqi	r2,r2,255
   4e31c:	1000031e 	bne	r2,zero,4e32c <OSIntEnter+0x5c>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
   4e320:	d0a72f03 	ldbu	r2,-25412(gp)
   4e324:	10800044 	addi	r2,r2,1
   4e328:	d0a72f05 	stb	r2,-25412(gp)
   4e32c:	e0bffd17 	ldw	r2,-12(fp)
   4e330:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4e334:	e0bfff17 	ldw	r2,-4(fp)
   4e338:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
    }
}
   4e33c:	e037883a 	mov	sp,fp
   4e340:	df000017 	ldw	fp,0(sp)
   4e344:	dec00104 	addi	sp,sp,4
   4e348:	f800283a 	ret

0004e34c <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
   4e34c:	defffb04 	addi	sp,sp,-20
   4e350:	dfc00415 	stw	ra,16(sp)
   4e354:	df000315 	stw	fp,12(sp)
   4e358:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   4e35c:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {
   4e360:	d0a72143 	ldbu	r2,-25467(gp)
   4e364:	10803fcc 	andi	r2,r2,255
   4e368:	10800058 	cmpnei	r2,r2,1
   4e36c:	10002f1e 	bne	r2,zero,4e42c <OSIntExit+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4e370:	0005303a 	rdctl	r2,status
   4e374:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4e378:	e0fffe17 	ldw	r3,-8(fp)
   4e37c:	00bfff84 	movi	r2,-2
   4e380:	1884703a 	and	r2,r3,r2
   4e384:	1001703a 	wrctl	status,r2
  
  return context;
   4e388:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
   4e38c:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
   4e390:	d0a72f03 	ldbu	r2,-25412(gp)
   4e394:	10803fcc 	andi	r2,r2,255
   4e398:	10000326 	beq	r2,zero,4e3a8 <OSIntExit+0x5c>
            OSIntNesting--;
   4e39c:	d0a72f03 	ldbu	r2,-25412(gp)
   4e3a0:	10bfffc4 	addi	r2,r2,-1
   4e3a4:	d0a72f05 	stb	r2,-25412(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
   4e3a8:	d0a72f03 	ldbu	r2,-25412(gp)
   4e3ac:	10803fcc 	andi	r2,r2,255
   4e3b0:	10001a1e 	bne	r2,zero,4e41c <OSIntExit+0xd0>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
   4e3b4:	d0a72103 	ldbu	r2,-25468(gp)
   4e3b8:	10803fcc 	andi	r2,r2,255
   4e3bc:	1000171e 	bne	r2,zero,4e41c <OSIntExit+0xd0>
                OS_SchedNew();
   4e3c0:	004f3f40 	call	4f3f4 <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
   4e3c4:	d0e72303 	ldbu	r3,-25460(gp)
   4e3c8:	d0a72343 	ldbu	r2,-25459(gp)
   4e3cc:	18c03fcc 	andi	r3,r3,255
   4e3d0:	10803fcc 	andi	r2,r2,255
   4e3d4:	18801126 	beq	r3,r2,4e41c <OSIntExit+0xd0>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
   4e3d8:	d0a72303 	ldbu	r2,-25460(gp)
   4e3dc:	10c03fcc 	andi	r3,r2,255
   4e3e0:	008001b4 	movhi	r2,6
   4e3e4:	1089d604 	addi	r2,r2,10072
   4e3e8:	18c7883a 	add	r3,r3,r3
   4e3ec:	18c7883a 	add	r3,r3,r3
   4e3f0:	10c5883a 	add	r2,r2,r3
   4e3f4:	10800017 	ldw	r2,0(r2)
   4e3f8:	d0a72b15 	stw	r2,-25428(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
   4e3fc:	d0a72b17 	ldw	r2,-25428(gp)
   4e400:	10c00e17 	ldw	r3,56(r2)
   4e404:	18c00044 	addi	r3,r3,1
   4e408:	10c00e15 	stw	r3,56(r2)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
   4e40c:	d0a72617 	ldw	r2,-25448(gp)
   4e410:	10800044 	addi	r2,r2,1
   4e414:	d0a72615 	stw	r2,-25448(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
   4e418:	00570e80 	call	570e8 <OSCtxSw>
   4e41c:	e0bffd17 	ldw	r2,-12(fp)
   4e420:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4e424:	e0bfff17 	ldw	r2,-4(fp)
   4e428:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
   4e42c:	e037883a 	mov	sp,fp
   4e430:	dfc00117 	ldw	ra,4(sp)
   4e434:	df000017 	ldw	fp,0(sp)
   4e438:	dec00204 	addi	sp,sp,8
   4e43c:	f800283a 	ret

0004e440 <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
   4e440:	defffc04 	addi	sp,sp,-16
   4e444:	df000315 	stw	fp,12(sp)
   4e448:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   4e44c:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
   4e450:	d0a72143 	ldbu	r2,-25467(gp)
   4e454:	10803fcc 	andi	r2,r2,255
   4e458:	10800058 	cmpnei	r2,r2,1
   4e45c:	1000161e 	bne	r2,zero,4e4b8 <OSSchedLock+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4e460:	0005303a 	rdctl	r2,status
   4e464:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4e468:	e0fffe17 	ldw	r3,-8(fp)
   4e46c:	00bfff84 	movi	r2,-2
   4e470:	1884703a 	and	r2,r3,r2
   4e474:	1001703a 	wrctl	status,r2
  
  return context;
   4e478:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
   4e47c:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
   4e480:	d0a72f03 	ldbu	r2,-25412(gp)
   4e484:	10803fcc 	andi	r2,r2,255
   4e488:	1000071e 	bne	r2,zero,4e4a8 <OSSchedLock+0x68>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
   4e48c:	d0a72103 	ldbu	r2,-25468(gp)
   4e490:	10803fcc 	andi	r2,r2,255
   4e494:	10803fe0 	cmpeqi	r2,r2,255
   4e498:	1000031e 	bne	r2,zero,4e4a8 <OSSchedLock+0x68>
                OSLockNesting++;                 /* Increment lock nesting level                       */
   4e49c:	d0a72103 	ldbu	r2,-25468(gp)
   4e4a0:	10800044 	addi	r2,r2,1
   4e4a4:	d0a72105 	stb	r2,-25468(gp)
   4e4a8:	e0bffd17 	ldw	r2,-12(fp)
   4e4ac:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4e4b0:	e0bfff17 	ldw	r2,-4(fp)
   4e4b4:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
   4e4b8:	e037883a 	mov	sp,fp
   4e4bc:	df000017 	ldw	fp,0(sp)
   4e4c0:	dec00104 	addi	sp,sp,4
   4e4c4:	f800283a 	ret

0004e4c8 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
   4e4c8:	defff804 	addi	sp,sp,-32
   4e4cc:	dfc00715 	stw	ra,28(sp)
   4e4d0:	df000615 	stw	fp,24(sp)
   4e4d4:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   4e4d8:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
   4e4dc:	d0a72143 	ldbu	r2,-25467(gp)
   4e4e0:	10803fcc 	andi	r2,r2,255
   4e4e4:	10800058 	cmpnei	r2,r2,1
   4e4e8:	1000281e 	bne	r2,zero,4e58c <OSSchedUnlock+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4e4ec:	0005303a 	rdctl	r2,status
   4e4f0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4e4f4:	e0fffb17 	ldw	r3,-20(fp)
   4e4f8:	00bfff84 	movi	r2,-2
   4e4fc:	1884703a 	and	r2,r3,r2
   4e500:	1001703a 	wrctl	status,r2
  
  return context;
   4e504:	e0bffb17 	ldw	r2,-20(fp)
        OS_ENTER_CRITICAL();
   4e508:	e0bffa15 	stw	r2,-24(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
   4e50c:	d0a72103 	ldbu	r2,-25468(gp)
   4e510:	10803fcc 	andi	r2,r2,255
   4e514:	10001926 	beq	r2,zero,4e57c <OSSchedUnlock+0xb4>
            OSLockNesting--;                               /* Decrement lock nesting level             */
   4e518:	d0a72103 	ldbu	r2,-25468(gp)
   4e51c:	10bfffc4 	addi	r2,r2,-1
   4e520:	d0a72105 	stb	r2,-25468(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
   4e524:	d0a72103 	ldbu	r2,-25468(gp)
   4e528:	10803fcc 	andi	r2,r2,255
   4e52c:	10000e1e 	bne	r2,zero,4e568 <OSSchedUnlock+0xa0>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
   4e530:	d0a72f03 	ldbu	r2,-25412(gp)
   4e534:	10803fcc 	andi	r2,r2,255
   4e538:	1000061e 	bne	r2,zero,4e554 <OSSchedUnlock+0x8c>
   4e53c:	e0bffa17 	ldw	r2,-24(fp)
   4e540:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4e544:	e0bffc17 	ldw	r2,-16(fp)
   4e548:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
   4e54c:	004f3280 	call	4f328 <OS_Sched>
   4e550:	00000e06 	br	4e58c <OSSchedUnlock+0xc4>
   4e554:	e0bffa17 	ldw	r2,-24(fp)
   4e558:	e0bffd15 	stw	r2,-12(fp)
   4e55c:	e0bffd17 	ldw	r2,-12(fp)
   4e560:	1001703a 	wrctl	status,r2
   4e564:	00000906 	br	4e58c <OSSchedUnlock+0xc4>
   4e568:	e0bffa17 	ldw	r2,-24(fp)
   4e56c:	e0bffe15 	stw	r2,-8(fp)
   4e570:	e0bffe17 	ldw	r2,-8(fp)
   4e574:	1001703a 	wrctl	status,r2
   4e578:	00000406 	br	4e58c <OSSchedUnlock+0xc4>
   4e57c:	e0bffa17 	ldw	r2,-24(fp)
   4e580:	e0bfff15 	stw	r2,-4(fp)
   4e584:	e0bfff17 	ldw	r2,-4(fp)
   4e588:	1001703a 	wrctl	status,r2
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
   4e58c:	e037883a 	mov	sp,fp
   4e590:	dfc00117 	ldw	ra,4(sp)
   4e594:	df000017 	ldw	fp,0(sp)
   4e598:	dec00204 	addi	sp,sp,8
   4e59c:	f800283a 	ret

0004e5a0 <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
   4e5a0:	defffe04 	addi	sp,sp,-8
   4e5a4:	dfc00115 	stw	ra,4(sp)
   4e5a8:	df000015 	stw	fp,0(sp)
   4e5ac:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
   4e5b0:	d0a72143 	ldbu	r2,-25467(gp)
   4e5b4:	10803fcc 	andi	r2,r2,255
   4e5b8:	10000f1e 	bne	r2,zero,4e5f8 <OSStart+0x58>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
   4e5bc:	004f3f40 	call	4f3f4 <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
   4e5c0:	d0a72303 	ldbu	r2,-25460(gp)
   4e5c4:	d0a72345 	stb	r2,-25459(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
   4e5c8:	d0a72303 	ldbu	r2,-25460(gp)
   4e5cc:	10c03fcc 	andi	r3,r2,255
   4e5d0:	008001b4 	movhi	r2,6
   4e5d4:	1089d604 	addi	r2,r2,10072
   4e5d8:	18c7883a 	add	r3,r3,r3
   4e5dc:	18c7883a 	add	r3,r3,r3
   4e5e0:	10c5883a 	add	r2,r2,r3
   4e5e4:	10800017 	ldw	r2,0(r2)
   4e5e8:	d0a72b15 	stw	r2,-25428(gp)
        OSTCBCur      = OSTCBHighRdy;
   4e5ec:	d0a72b17 	ldw	r2,-25428(gp)
   4e5f0:	d0a73015 	stw	r2,-25408(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
   4e5f4:	00571740 	call	57174 <OSStartHighRdy>
    }
}
   4e5f8:	e037883a 	mov	sp,fp
   4e5fc:	dfc00117 	ldw	ra,4(sp)
   4e600:	df000017 	ldw	fp,0(sp)
   4e604:	dec00204 	addi	sp,sp,8
   4e608:	f800283a 	ret

0004e60c <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
   4e60c:	defff904 	addi	sp,sp,-28
   4e610:	dfc00615 	stw	ra,24(sp)
   4e614:	df000515 	stw	fp,20(sp)
   4e618:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   4e61c:	e03ffb15 	stw	zero,-20(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
   4e620:	01000084 	movi	r4,2
   4e624:	00551280 	call	55128 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4e628:	0005303a 	rdctl	r2,status
   4e62c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4e630:	e0fffc17 	ldw	r3,-16(fp)
   4e634:	00bfff84 	movi	r2,-2
   4e638:	1884703a 	and	r2,r3,r2
   4e63c:	1001703a 	wrctl	status,r2
  
  return context;
   4e640:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
   4e644:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
   4e648:	d0272215 	stw	zero,-25464(gp)
   4e64c:	e0bffb17 	ldw	r2,-20(fp)
   4e650:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4e654:	e0bffd17 	ldw	r2,-12(fp)
   4e658:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
   4e65c:	01001904 	movi	r4,100
   4e660:	00551280 	call	55128 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4e664:	0005303a 	rdctl	r2,status
   4e668:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4e66c:	e0fffe17 	ldw	r3,-8(fp)
   4e670:	00bfff84 	movi	r2,-2
   4e674:	1884703a 	and	r2,r3,r2
   4e678:	1001703a 	wrctl	status,r2
  
  return context;
   4e67c:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
   4e680:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
   4e684:	d0a72217 	ldw	r2,-25464(gp)
   4e688:	d0a72715 	stw	r2,-25444(gp)
    OSStatRdy    = OS_TRUE;
   4e68c:	00800044 	movi	r2,1
   4e690:	d0a73305 	stb	r2,-25396(gp)
   4e694:	e0bffb17 	ldw	r2,-20(fp)
   4e698:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4e69c:	e0bfff17 	ldw	r2,-4(fp)
   4e6a0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
   4e6a4:	e037883a 	mov	sp,fp
   4e6a8:	dfc00117 	ldw	ra,4(sp)
   4e6ac:	df000017 	ldw	fp,0(sp)
   4e6b0:	dec00204 	addi	sp,sp,8
   4e6b4:	f800283a 	ret

0004e6b8 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
   4e6b8:	defff704 	addi	sp,sp,-36
   4e6bc:	dfc00815 	stw	ra,32(sp)
   4e6c0:	df000715 	stw	fp,28(sp)
   4e6c4:	df000704 	addi	fp,sp,28
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   4e6c8:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
   4e6cc:	00405b40 	call	405b4 <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4e6d0:	0005303a 	rdctl	r2,status
   4e6d4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4e6d8:	e0fffc17 	ldw	r3,-16(fp)
   4e6dc:	00bfff84 	movi	r2,-2
   4e6e0:	1884703a 	and	r2,r3,r2
   4e6e4:	1001703a 	wrctl	status,r2
  
  return context;
   4e6e8:	e0bffc17 	ldw	r2,-16(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
   4e6ec:	e0bffb15 	stw	r2,-20(fp)
    OSTime++;
   4e6f0:	d0a73117 	ldw	r2,-25404(gp)
   4e6f4:	10800044 	addi	r2,r2,1
   4e6f8:	d0a73115 	stw	r2,-25404(gp)
   4e6fc:	e0bffb17 	ldw	r2,-20(fp)
   4e700:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4e704:	e0bffd17 	ldw	r2,-12(fp)
   4e708:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
   4e70c:	d0a72143 	ldbu	r2,-25467(gp)
   4e710:	10803fcc 	andi	r2,r2,255
   4e714:	10800058 	cmpnei	r2,r2,1
   4e718:	1000691e 	bne	r2,zero,4e8c0 <OSTimeTick+0x208>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
   4e71c:	d0a72503 	ldbu	r2,-25452(gp)
   4e720:	10803fcc 	andi	r2,r2,255
   4e724:	10c00060 	cmpeqi	r3,r2,1
   4e728:	1800061e 	bne	r3,zero,4e744 <OSTimeTick+0x8c>
   4e72c:	10c000a0 	cmpeqi	r3,r2,2
   4e730:	1800061e 	bne	r3,zero,4e74c <OSTimeTick+0x94>
   4e734:	10000a1e 	bne	r2,zero,4e760 <OSTimeTick+0xa8>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
   4e738:	00800044 	movi	r2,1
   4e73c:	e0bffa05 	stb	r2,-24(fp)
                 break;
   4e740:	00000b06 	br	4e770 <OSTimeTick+0xb8>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
   4e744:	e03ffa05 	stb	zero,-24(fp)
                 break;
   4e748:	00000906 	br	4e770 <OSTimeTick+0xb8>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
   4e74c:	00800044 	movi	r2,1
   4e750:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
   4e754:	00800044 	movi	r2,1
   4e758:	d0a72505 	stb	r2,-25452(gp)
                 break;
   4e75c:	00000406 	br	4e770 <OSTimeTick+0xb8>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
   4e760:	00800044 	movi	r2,1
   4e764:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
   4e768:	d0272505 	stb	zero,-25452(gp)
                 break;
   4e76c:	0001883a 	nop
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
   4e770:	e0bffa03 	ldbu	r2,-24(fp)
   4e774:	1000011e 	bne	r2,zero,4e77c <OSTimeTick+0xc4>
            return;
   4e778:	00005106 	br	4e8c0 <OSTimeTick+0x208>
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
   4e77c:	d0a72417 	ldw	r2,-25456(gp)
   4e780:	e0bff915 	stw	r2,-28(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
   4e784:	00004906 	br	4e8ac <OSTimeTick+0x1f4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4e788:	0005303a 	rdctl	r2,status
   4e78c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4e790:	e0fffe17 	ldw	r3,-8(fp)
   4e794:	00bfff84 	movi	r2,-2
   4e798:	1884703a 	and	r2,r3,r2
   4e79c:	1001703a 	wrctl	status,r2
  
  return context;
   4e7a0:	e0bffe17 	ldw	r2,-8(fp)
            OS_ENTER_CRITICAL();
   4e7a4:	e0bffb15 	stw	r2,-20(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
   4e7a8:	e0bff917 	ldw	r2,-28(fp)
   4e7ac:	10800b8b 	ldhu	r2,46(r2)
   4e7b0:	10bfffcc 	andi	r2,r2,65535
   4e7b4:	10003626 	beq	r2,zero,4e890 <OSTimeTick+0x1d8>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
   4e7b8:	e0bff917 	ldw	r2,-28(fp)
   4e7bc:	10800b8b 	ldhu	r2,46(r2)
   4e7c0:	10bfffc4 	addi	r2,r2,-1
   4e7c4:	1007883a 	mov	r3,r2
   4e7c8:	e0bff917 	ldw	r2,-28(fp)
   4e7cc:	10c00b8d 	sth	r3,46(r2)
   4e7d0:	e0bff917 	ldw	r2,-28(fp)
   4e7d4:	10800b8b 	ldhu	r2,46(r2)
   4e7d8:	10bfffcc 	andi	r2,r2,65535
   4e7dc:	10002c1e 	bne	r2,zero,4e890 <OSTimeTick+0x1d8>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
   4e7e0:	e0bff917 	ldw	r2,-28(fp)
   4e7e4:	10800c03 	ldbu	r2,48(r2)
   4e7e8:	10803fcc 	andi	r2,r2,255
   4e7ec:	10800dcc 	andi	r2,r2,55
   4e7f0:	10000b26 	beq	r2,zero,4e820 <OSTimeTick+0x168>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
   4e7f4:	e0bff917 	ldw	r2,-28(fp)
   4e7f8:	10c00c03 	ldbu	r3,48(r2)
   4e7fc:	00bff204 	movi	r2,-56
   4e800:	1884703a 	and	r2,r3,r2
   4e804:	1007883a 	mov	r3,r2
   4e808:	e0bff917 	ldw	r2,-28(fp)
   4e80c:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
   4e810:	e0bff917 	ldw	r2,-28(fp)
   4e814:	00c00044 	movi	r3,1
   4e818:	10c00c45 	stb	r3,49(r2)
   4e81c:	00000206 	br	4e828 <OSTimeTick+0x170>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
   4e820:	e0bff917 	ldw	r2,-28(fp)
   4e824:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
   4e828:	e0bff917 	ldw	r2,-28(fp)
   4e82c:	10800c03 	ldbu	r2,48(r2)
   4e830:	10803fcc 	andi	r2,r2,255
   4e834:	1080020c 	andi	r2,r2,8
   4e838:	1000151e 	bne	r2,zero,4e890 <OSTimeTick+0x1d8>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
   4e83c:	e0bff917 	ldw	r2,-28(fp)
   4e840:	10c00d83 	ldbu	r3,54(r2)
   4e844:	d0a72d03 	ldbu	r2,-25420(gp)
   4e848:	1884b03a 	or	r2,r3,r2
   4e84c:	d0a72d05 	stb	r2,-25420(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   4e850:	e0bff917 	ldw	r2,-28(fp)
   4e854:	10800d03 	ldbu	r2,52(r2)
   4e858:	10c03fcc 	andi	r3,r2,255
   4e85c:	e0bff917 	ldw	r2,-28(fp)
   4e860:	10800d03 	ldbu	r2,52(r2)
   4e864:	11003fcc 	andi	r4,r2,255
   4e868:	d0a72d44 	addi	r2,gp,-25419
   4e86c:	2085883a 	add	r2,r4,r2
   4e870:	11000003 	ldbu	r4,0(r2)
   4e874:	e0bff917 	ldw	r2,-28(fp)
   4e878:	10800d43 	ldbu	r2,53(r2)
   4e87c:	2084b03a 	or	r2,r4,r2
   4e880:	1009883a 	mov	r4,r2
   4e884:	d0a72d44 	addi	r2,gp,-25419
   4e888:	1885883a 	add	r2,r3,r2
   4e88c:	11000005 	stb	r4,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
   4e890:	e0bff917 	ldw	r2,-28(fp)
   4e894:	10800517 	ldw	r2,20(r2)
   4e898:	e0bff915 	stw	r2,-28(fp)
   4e89c:	e0bffb17 	ldw	r2,-20(fp)
   4e8a0:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4e8a4:	e0bfff17 	ldw	r2,-4(fp)
   4e8a8:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
   4e8ac:	e0bff917 	ldw	r2,-28(fp)
   4e8b0:	10800c83 	ldbu	r2,50(r2)
   4e8b4:	10803fcc 	andi	r2,r2,255
   4e8b8:	10800518 	cmpnei	r2,r2,20
   4e8bc:	103fb21e 	bne	r2,zero,4e788 <__alt_data_end+0xfffdda48>
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
   4e8c0:	e037883a 	mov	sp,fp
   4e8c4:	dfc00117 	ldw	ra,4(sp)
   4e8c8:	df000017 	ldw	fp,0(sp)
   4e8cc:	dec00204 	addi	sp,sp,8
   4e8d0:	f800283a 	ret

0004e8d4 <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
   4e8d4:	deffff04 	addi	sp,sp,-4
   4e8d8:	df000015 	stw	fp,0(sp)
   4e8dc:	d839883a 	mov	fp,sp
    return (OS_VERSION);
   4e8e0:	00804784 	movi	r2,286
}
   4e8e4:	e037883a 	mov	sp,fp
   4e8e8:	df000017 	ldw	fp,0(sp)
   4e8ec:	dec00104 	addi	sp,sp,4
   4e8f0:	f800283a 	ret

0004e8f4 <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
   4e8f4:	deffff04 	addi	sp,sp,-4
   4e8f8:	df000015 	stw	fp,0(sp)
   4e8fc:	d839883a 	mov	fp,sp
}
   4e900:	e037883a 	mov	sp,fp
   4e904:	df000017 	ldw	fp,0(sp)
   4e908:	dec00104 	addi	sp,sp,4
   4e90c:	f800283a 	ret

0004e910 <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
   4e910:	defff804 	addi	sp,sp,-32
   4e914:	dfc00715 	stw	ra,28(sp)
   4e918:	df000615 	stw	fp,24(sp)
   4e91c:	df000604 	addi	fp,sp,24
   4e920:	e13ffc15 	stw	r4,-16(fp)
   4e924:	e17ffd15 	stw	r5,-12(fp)
   4e928:	3007883a 	mov	r3,r6
   4e92c:	3805883a 	mov	r2,r7
   4e930:	e0fffe05 	stb	r3,-8(fp)
   4e934:	e0bfff05 	stb	r2,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
   4e938:	e0bffc17 	ldw	r2,-16(fp)
   4e93c:	10800283 	ldbu	r2,10(r2)
   4e940:	10c03fcc 	andi	r3,r2,255
   4e944:	00800174 	movhi	r2,5
   4e948:	109f2204 	addi	r2,r2,31880
   4e94c:	10c5883a 	add	r2,r2,r3
   4e950:	10800003 	ldbu	r2,0(r2)
   4e954:	e0bffa05 	stb	r2,-24(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
   4e958:	e0bffa03 	ldbu	r2,-24(fp)
   4e95c:	e0fffc17 	ldw	r3,-16(fp)
   4e960:	1885883a 	add	r2,r3,r2
   4e964:	10800204 	addi	r2,r2,8
   4e968:	108000c3 	ldbu	r2,3(r2)
   4e96c:	10c03fcc 	andi	r3,r2,255
   4e970:	00800174 	movhi	r2,5
   4e974:	109f2204 	addi	r2,r2,31880
   4e978:	10c5883a 	add	r2,r2,r3
   4e97c:	10800003 	ldbu	r2,0(r2)
   4e980:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
   4e984:	e0bffa03 	ldbu	r2,-24(fp)
   4e988:	100490fa 	slli	r2,r2,3
   4e98c:	1007883a 	mov	r3,r2
   4e990:	e0bffa43 	ldbu	r2,-23(fp)
   4e994:	1885883a 	add	r2,r3,r2
   4e998:	e0bffa85 	stb	r2,-22(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
   4e99c:	e0fffa83 	ldbu	r3,-22(fp)
   4e9a0:	008001b4 	movhi	r2,6
   4e9a4:	1089d604 	addi	r2,r2,10072
   4e9a8:	18c7883a 	add	r3,r3,r3
   4e9ac:	18c7883a 	add	r3,r3,r3
   4e9b0:	10c5883a 	add	r2,r2,r3
   4e9b4:	10800017 	ldw	r2,0(r2)
   4e9b8:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
   4e9bc:	e0bffb17 	ldw	r2,-20(fp)
   4e9c0:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
   4e9c4:	e0bffb17 	ldw	r2,-20(fp)
   4e9c8:	e0fffd17 	ldw	r3,-12(fp)
   4e9cc:	10c00915 	stw	r3,36(r2)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
   4e9d0:	e0bffb17 	ldw	r2,-20(fp)
   4e9d4:	10800c03 	ldbu	r2,48(r2)
   4e9d8:	1007883a 	mov	r3,r2
   4e9dc:	e0bffe03 	ldbu	r2,-8(fp)
   4e9e0:	0084303a 	nor	r2,zero,r2
   4e9e4:	1884703a 	and	r2,r3,r2
   4e9e8:	1007883a 	mov	r3,r2
   4e9ec:	e0bffb17 	ldw	r2,-20(fp)
   4e9f0:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
   4e9f4:	e0bffb17 	ldw	r2,-20(fp)
   4e9f8:	e0ffff03 	ldbu	r3,-4(fp)
   4e9fc:	10c00c45 	stb	r3,49(r2)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
   4ea00:	e0bffb17 	ldw	r2,-20(fp)
   4ea04:	10800c03 	ldbu	r2,48(r2)
   4ea08:	10803fcc 	andi	r2,r2,255
   4ea0c:	1080020c 	andi	r2,r2,8
   4ea10:	1000111e 	bne	r2,zero,4ea58 <OS_EventTaskRdy+0x148>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
   4ea14:	e0bffb17 	ldw	r2,-20(fp)
   4ea18:	10c00d83 	ldbu	r3,54(r2)
   4ea1c:	d0a72d03 	ldbu	r2,-25420(gp)
   4ea20:	1884b03a 	or	r2,r3,r2
   4ea24:	d0a72d05 	stb	r2,-25420(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
   4ea28:	e0fffa03 	ldbu	r3,-24(fp)
   4ea2c:	e13ffa03 	ldbu	r4,-24(fp)
   4ea30:	d0a72d44 	addi	r2,gp,-25419
   4ea34:	2085883a 	add	r2,r4,r2
   4ea38:	11000003 	ldbu	r4,0(r2)
   4ea3c:	e0bffb17 	ldw	r2,-20(fp)
   4ea40:	10800d43 	ldbu	r2,53(r2)
   4ea44:	2084b03a 	or	r2,r4,r2
   4ea48:	1009883a 	mov	r4,r2
   4ea4c:	d0a72d44 	addi	r2,gp,-25419
   4ea50:	1885883a 	add	r2,r3,r2
   4ea54:	11000005 	stb	r4,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
   4ea58:	e13ffb17 	ldw	r4,-20(fp)
   4ea5c:	e17ffc17 	ldw	r5,-16(fp)
   4ea60:	004ed000 	call	4ed00 <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
   4ea64:	e0bffb17 	ldw	r2,-20(fp)
   4ea68:	10800817 	ldw	r2,32(r2)
   4ea6c:	10000826 	beq	r2,zero,4ea90 <OS_EventTaskRdy+0x180>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
   4ea70:	e0bffb17 	ldw	r2,-20(fp)
   4ea74:	10800817 	ldw	r2,32(r2)
   4ea78:	e13ffb17 	ldw	r4,-20(fp)
   4ea7c:	100b883a 	mov	r5,r2
   4ea80:	004edb40 	call	4edb4 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
   4ea84:	e0bffb17 	ldw	r2,-20(fp)
   4ea88:	e0fffc17 	ldw	r3,-16(fp)
   4ea8c:	10c00715 	stw	r3,28(r2)
    }
#endif

    return (prio);
   4ea90:	e0bffa83 	ldbu	r2,-22(fp)
}
   4ea94:	e037883a 	mov	sp,fp
   4ea98:	dfc00117 	ldw	ra,4(sp)
   4ea9c:	df000017 	ldw	fp,0(sp)
   4eaa0:	dec00204 	addi	sp,sp,8
   4eaa4:	f800283a 	ret

0004eaa8 <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
   4eaa8:	defffd04 	addi	sp,sp,-12
   4eaac:	df000215 	stw	fp,8(sp)
   4eab0:	df000204 	addi	fp,sp,8
   4eab4:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
   4eab8:	d0a73017 	ldw	r2,-25408(gp)
   4eabc:	e0ffff17 	ldw	r3,-4(fp)
   4eac0:	10c00715 	stw	r3,28(r2)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
   4eac4:	d0a73017 	ldw	r2,-25408(gp)
   4eac8:	10800d03 	ldbu	r2,52(r2)
   4eacc:	10803fcc 	andi	r2,r2,255
   4ead0:	d0e73017 	ldw	r3,-25408(gp)
   4ead4:	18c00d03 	ldbu	r3,52(r3)
   4ead8:	18c03fcc 	andi	r3,r3,255
   4eadc:	e13fff17 	ldw	r4,-4(fp)
   4eae0:	20c7883a 	add	r3,r4,r3
   4eae4:	18c00204 	addi	r3,r3,8
   4eae8:	190000c3 	ldbu	r4,3(r3)
   4eaec:	d0e73017 	ldw	r3,-25408(gp)
   4eaf0:	18c00d43 	ldbu	r3,53(r3)
   4eaf4:	20c6b03a 	or	r3,r4,r3
   4eaf8:	1809883a 	mov	r4,r3
   4eafc:	e0ffff17 	ldw	r3,-4(fp)
   4eb00:	1885883a 	add	r2,r3,r2
   4eb04:	10800204 	addi	r2,r2,8
   4eb08:	110000c5 	stb	r4,3(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
   4eb0c:	e0bfff17 	ldw	r2,-4(fp)
   4eb10:	10c00283 	ldbu	r3,10(r2)
   4eb14:	d0a73017 	ldw	r2,-25408(gp)
   4eb18:	10800d83 	ldbu	r2,54(r2)
   4eb1c:	1884b03a 	or	r2,r3,r2
   4eb20:	1007883a 	mov	r3,r2
   4eb24:	e0bfff17 	ldw	r2,-4(fp)
   4eb28:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
   4eb2c:	d0a73017 	ldw	r2,-25408(gp)
   4eb30:	10800d03 	ldbu	r2,52(r2)
   4eb34:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
   4eb38:	e0fffe03 	ldbu	r3,-8(fp)
   4eb3c:	e13ffe03 	ldbu	r4,-8(fp)
   4eb40:	d0a72d44 	addi	r2,gp,-25419
   4eb44:	2085883a 	add	r2,r4,r2
   4eb48:	10800003 	ldbu	r2,0(r2)
   4eb4c:	1009883a 	mov	r4,r2
   4eb50:	d0a73017 	ldw	r2,-25408(gp)
   4eb54:	10800d43 	ldbu	r2,53(r2)
   4eb58:	0084303a 	nor	r2,zero,r2
   4eb5c:	2084703a 	and	r2,r4,r2
   4eb60:	1009883a 	mov	r4,r2
   4eb64:	d0a72d44 	addi	r2,gp,-25419
   4eb68:	1885883a 	add	r2,r3,r2
   4eb6c:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
   4eb70:	e0fffe03 	ldbu	r3,-8(fp)
   4eb74:	d0a72d44 	addi	r2,gp,-25419
   4eb78:	1885883a 	add	r2,r3,r2
   4eb7c:	10800003 	ldbu	r2,0(r2)
   4eb80:	10803fcc 	andi	r2,r2,255
   4eb84:	1000071e 	bne	r2,zero,4eba4 <OS_EventTaskWait+0xfc>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
   4eb88:	d0a73017 	ldw	r2,-25408(gp)
   4eb8c:	10800d83 	ldbu	r2,54(r2)
   4eb90:	0084303a 	nor	r2,zero,r2
   4eb94:	1007883a 	mov	r3,r2
   4eb98:	d0a72d03 	ldbu	r2,-25420(gp)
   4eb9c:	1884703a 	and	r2,r3,r2
   4eba0:	d0a72d05 	stb	r2,-25420(gp)
    }
}
   4eba4:	e037883a 	mov	sp,fp
   4eba8:	df000017 	ldw	fp,0(sp)
   4ebac:	dec00104 	addi	sp,sp,4
   4ebb0:	f800283a 	ret

0004ebb4 <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
   4ebb4:	defffb04 	addi	sp,sp,-20
   4ebb8:	df000415 	stw	fp,16(sp)
   4ebbc:	df000404 	addi	fp,sp,16
   4ebc0:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
   4ebc4:	d0a73017 	ldw	r2,-25408(gp)
   4ebc8:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
   4ebcc:	d0a73017 	ldw	r2,-25408(gp)
   4ebd0:	e0ffff17 	ldw	r3,-4(fp)
   4ebd4:	10c00815 	stw	r3,32(r2)

    pevents =  pevents_wait;
   4ebd8:	e0bfff17 	ldw	r2,-4(fp)
   4ebdc:	e0bffc15 	stw	r2,-16(fp)
    pevent  = *pevents;
   4ebe0:	e0bffc17 	ldw	r2,-16(fp)
   4ebe4:	10800017 	ldw	r2,0(r2)
   4ebe8:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
   4ebec:	00002006 	br	4ec70 <OS_EventTaskWaitMulti+0xbc>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
   4ebf0:	d0a73017 	ldw	r2,-25408(gp)
   4ebf4:	10800d03 	ldbu	r2,52(r2)
   4ebf8:	10803fcc 	andi	r2,r2,255
   4ebfc:	d0e73017 	ldw	r3,-25408(gp)
   4ec00:	18c00d03 	ldbu	r3,52(r3)
   4ec04:	18c03fcc 	andi	r3,r3,255
   4ec08:	e13ffd17 	ldw	r4,-12(fp)
   4ec0c:	20c7883a 	add	r3,r4,r3
   4ec10:	18c00204 	addi	r3,r3,8
   4ec14:	190000c3 	ldbu	r4,3(r3)
   4ec18:	d0e73017 	ldw	r3,-25408(gp)
   4ec1c:	18c00d43 	ldbu	r3,53(r3)
   4ec20:	20c6b03a 	or	r3,r4,r3
   4ec24:	1809883a 	mov	r4,r3
   4ec28:	e0fffd17 	ldw	r3,-12(fp)
   4ec2c:	1885883a 	add	r2,r3,r2
   4ec30:	10800204 	addi	r2,r2,8
   4ec34:	110000c5 	stb	r4,3(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
   4ec38:	e0bffd17 	ldw	r2,-12(fp)
   4ec3c:	10c00283 	ldbu	r3,10(r2)
   4ec40:	d0a73017 	ldw	r2,-25408(gp)
   4ec44:	10800d83 	ldbu	r2,54(r2)
   4ec48:	1884b03a 	or	r2,r3,r2
   4ec4c:	1007883a 	mov	r3,r2
   4ec50:	e0bffd17 	ldw	r2,-12(fp)
   4ec54:	10c00285 	stb	r3,10(r2)
        pevents++;
   4ec58:	e0bffc17 	ldw	r2,-16(fp)
   4ec5c:	10800104 	addi	r2,r2,4
   4ec60:	e0bffc15 	stw	r2,-16(fp)
        pevent = *pevents;
   4ec64:	e0bffc17 	ldw	r2,-16(fp)
   4ec68:	10800017 	ldw	r2,0(r2)
   4ec6c:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
   4ec70:	e0bffd17 	ldw	r2,-12(fp)
   4ec74:	103fde1e 	bne	r2,zero,4ebf0 <__alt_data_end+0xfffddeb0>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
   4ec78:	d0a73017 	ldw	r2,-25408(gp)
   4ec7c:	10800d03 	ldbu	r2,52(r2)
   4ec80:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
   4ec84:	e0fffe03 	ldbu	r3,-8(fp)
   4ec88:	e13ffe03 	ldbu	r4,-8(fp)
   4ec8c:	d0a72d44 	addi	r2,gp,-25419
   4ec90:	2085883a 	add	r2,r4,r2
   4ec94:	10800003 	ldbu	r2,0(r2)
   4ec98:	1009883a 	mov	r4,r2
   4ec9c:	d0a73017 	ldw	r2,-25408(gp)
   4eca0:	10800d43 	ldbu	r2,53(r2)
   4eca4:	0084303a 	nor	r2,zero,r2
   4eca8:	2084703a 	and	r2,r4,r2
   4ecac:	1009883a 	mov	r4,r2
   4ecb0:	d0a72d44 	addi	r2,gp,-25419
   4ecb4:	1885883a 	add	r2,r3,r2
   4ecb8:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
   4ecbc:	e0fffe03 	ldbu	r3,-8(fp)
   4ecc0:	d0a72d44 	addi	r2,gp,-25419
   4ecc4:	1885883a 	add	r2,r3,r2
   4ecc8:	10800003 	ldbu	r2,0(r2)
   4eccc:	10803fcc 	andi	r2,r2,255
   4ecd0:	1000071e 	bne	r2,zero,4ecf0 <OS_EventTaskWaitMulti+0x13c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
   4ecd4:	d0a73017 	ldw	r2,-25408(gp)
   4ecd8:	10800d83 	ldbu	r2,54(r2)
   4ecdc:	0084303a 	nor	r2,zero,r2
   4ece0:	1007883a 	mov	r3,r2
   4ece4:	d0a72d03 	ldbu	r2,-25420(gp)
   4ece8:	1884703a 	and	r2,r3,r2
   4ecec:	d0a72d05 	stb	r2,-25420(gp)
    }
}
   4ecf0:	e037883a 	mov	sp,fp
   4ecf4:	df000017 	ldw	fp,0(sp)
   4ecf8:	dec00104 	addi	sp,sp,4
   4ecfc:	f800283a 	ret

0004ed00 <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
   4ed00:	defffc04 	addi	sp,sp,-16
   4ed04:	df000315 	stw	fp,12(sp)
   4ed08:	df000304 	addi	fp,sp,12
   4ed0c:	e13ffe15 	stw	r4,-8(fp)
   4ed10:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
   4ed14:	e0bffe17 	ldw	r2,-8(fp)
   4ed18:	10800d03 	ldbu	r2,52(r2)
   4ed1c:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
   4ed20:	e0bffd03 	ldbu	r2,-12(fp)
   4ed24:	e0fffd03 	ldbu	r3,-12(fp)
   4ed28:	e13fff17 	ldw	r4,-4(fp)
   4ed2c:	20c7883a 	add	r3,r4,r3
   4ed30:	18c00204 	addi	r3,r3,8
   4ed34:	18c000c3 	ldbu	r3,3(r3)
   4ed38:	1809883a 	mov	r4,r3
   4ed3c:	e0fffe17 	ldw	r3,-8(fp)
   4ed40:	18c00d43 	ldbu	r3,53(r3)
   4ed44:	00c6303a 	nor	r3,zero,r3
   4ed48:	20c6703a 	and	r3,r4,r3
   4ed4c:	1809883a 	mov	r4,r3
   4ed50:	e0ffff17 	ldw	r3,-4(fp)
   4ed54:	1885883a 	add	r2,r3,r2
   4ed58:	10800204 	addi	r2,r2,8
   4ed5c:	110000c5 	stb	r4,3(r2)
    if (pevent->OSEventTbl[y] == 0) {
   4ed60:	e0bffd03 	ldbu	r2,-12(fp)
   4ed64:	e0ffff17 	ldw	r3,-4(fp)
   4ed68:	1885883a 	add	r2,r3,r2
   4ed6c:	10800204 	addi	r2,r2,8
   4ed70:	108000c3 	ldbu	r2,3(r2)
   4ed74:	10803fcc 	andi	r2,r2,255
   4ed78:	10000a1e 	bne	r2,zero,4eda4 <OS_EventTaskRemove+0xa4>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
   4ed7c:	e0bfff17 	ldw	r2,-4(fp)
   4ed80:	10800283 	ldbu	r2,10(r2)
   4ed84:	1007883a 	mov	r3,r2
   4ed88:	e0bffe17 	ldw	r2,-8(fp)
   4ed8c:	10800d83 	ldbu	r2,54(r2)
   4ed90:	0084303a 	nor	r2,zero,r2
   4ed94:	1884703a 	and	r2,r3,r2
   4ed98:	1007883a 	mov	r3,r2
   4ed9c:	e0bfff17 	ldw	r2,-4(fp)
   4eda0:	10c00285 	stb	r3,10(r2)
    }
}
   4eda4:	e037883a 	mov	sp,fp
   4eda8:	df000017 	ldw	fp,0(sp)
   4edac:	dec00104 	addi	sp,sp,4
   4edb0:	f800283a 	ret

0004edb4 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
   4edb4:	defffa04 	addi	sp,sp,-24
   4edb8:	df000515 	stw	fp,20(sp)
   4edbc:	df000504 	addi	fp,sp,20
   4edc0:	e13ffe15 	stw	r4,-8(fp)
   4edc4:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
   4edc8:	e0bffe17 	ldw	r2,-8(fp)
   4edcc:	10800d03 	ldbu	r2,52(r2)
   4edd0:	e0bffd05 	stb	r2,-12(fp)
    bity    =  ptcb->OSTCBBitY;
   4edd4:	e0bffe17 	ldw	r2,-8(fp)
   4edd8:	10800d83 	ldbu	r2,54(r2)
   4eddc:	e0bffd45 	stb	r2,-11(fp)
    bitx    =  ptcb->OSTCBBitX;
   4ede0:	e0bffe17 	ldw	r2,-8(fp)
   4ede4:	10800d43 	ldbu	r2,53(r2)
   4ede8:	e0bffd85 	stb	r2,-10(fp)
    pevents =  pevents_multi;
   4edec:	e0bfff17 	ldw	r2,-4(fp)
   4edf0:	e0bffb15 	stw	r2,-20(fp)
    pevent  = *pevents;
   4edf4:	e0bffb17 	ldw	r2,-20(fp)
   4edf8:	10800017 	ldw	r2,0(r2)
   4edfc:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
   4ee00:	00002506 	br	4ee98 <OS_EventTaskRemoveMulti+0xe4>
        pevent->OSEventTbl[y]  &= ~bitx;
   4ee04:	e0bffd03 	ldbu	r2,-12(fp)
   4ee08:	e0fffd03 	ldbu	r3,-12(fp)
   4ee0c:	e13ffc17 	ldw	r4,-16(fp)
   4ee10:	20c7883a 	add	r3,r4,r3
   4ee14:	18c00204 	addi	r3,r3,8
   4ee18:	18c000c3 	ldbu	r3,3(r3)
   4ee1c:	1809883a 	mov	r4,r3
   4ee20:	e0fffd83 	ldbu	r3,-10(fp)
   4ee24:	00c6303a 	nor	r3,zero,r3
   4ee28:	20c6703a 	and	r3,r4,r3
   4ee2c:	1809883a 	mov	r4,r3
   4ee30:	e0fffc17 	ldw	r3,-16(fp)
   4ee34:	1885883a 	add	r2,r3,r2
   4ee38:	10800204 	addi	r2,r2,8
   4ee3c:	110000c5 	stb	r4,3(r2)
        if (pevent->OSEventTbl[y] == 0) {
   4ee40:	e0bffd03 	ldbu	r2,-12(fp)
   4ee44:	e0fffc17 	ldw	r3,-16(fp)
   4ee48:	1885883a 	add	r2,r3,r2
   4ee4c:	10800204 	addi	r2,r2,8
   4ee50:	108000c3 	ldbu	r2,3(r2)
   4ee54:	10803fcc 	andi	r2,r2,255
   4ee58:	1000091e 	bne	r2,zero,4ee80 <OS_EventTaskRemoveMulti+0xcc>
            pevent->OSEventGrp &= ~bity;
   4ee5c:	e0bffc17 	ldw	r2,-16(fp)
   4ee60:	10800283 	ldbu	r2,10(r2)
   4ee64:	1007883a 	mov	r3,r2
   4ee68:	e0bffd43 	ldbu	r2,-11(fp)
   4ee6c:	0084303a 	nor	r2,zero,r2
   4ee70:	1884703a 	and	r2,r3,r2
   4ee74:	1007883a 	mov	r3,r2
   4ee78:	e0bffc17 	ldw	r2,-16(fp)
   4ee7c:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
   4ee80:	e0bffb17 	ldw	r2,-20(fp)
   4ee84:	10800104 	addi	r2,r2,4
   4ee88:	e0bffb15 	stw	r2,-20(fp)
        pevent = *pevents;
   4ee8c:	e0bffb17 	ldw	r2,-20(fp)
   4ee90:	10800017 	ldw	r2,0(r2)
   4ee94:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
   4ee98:	e0bffc17 	ldw	r2,-16(fp)
   4ee9c:	103fd91e 	bne	r2,zero,4ee04 <__alt_data_end+0xfffde0c4>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
   4eea0:	e037883a 	mov	sp,fp
   4eea4:	df000017 	ldw	fp,0(sp)
   4eea8:	dec00104 	addi	sp,sp,4
   4eeac:	f800283a 	ret

0004eeb0 <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
   4eeb0:	defffc04 	addi	sp,sp,-16
   4eeb4:	df000315 	stw	fp,12(sp)
   4eeb8:	df000304 	addi	fp,sp,12
   4eebc:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
   4eec0:	e0bfff17 	ldw	r2,-4(fp)
   4eec4:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
   4eec8:	e0bfff17 	ldw	r2,-4(fp)
   4eecc:	108002c4 	addi	r2,r2,11
   4eed0:	e0bffd15 	stw	r2,-12(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   4eed4:	e03ffe05 	stb	zero,-8(fp)
   4eed8:	00000706 	br	4eef8 <OS_EventWaitListInit+0x48>
        *ptbl++ = 0;
   4eedc:	e0bffd17 	ldw	r2,-12(fp)
   4eee0:	10c00044 	addi	r3,r2,1
   4eee4:	e0fffd15 	stw	r3,-12(fp)
   4eee8:	10000005 	stb	zero,0(r2)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   4eeec:	e0bffe03 	ldbu	r2,-8(fp)
   4eef0:	10800044 	addi	r2,r2,1
   4eef4:	e0bffe05 	stb	r2,-8(fp)
   4eef8:	e0bffe03 	ldbu	r2,-8(fp)
   4eefc:	108000f0 	cmpltui	r2,r2,3
   4ef00:	103ff61e 	bne	r2,zero,4eedc <__alt_data_end+0xfffde19c>
        *ptbl++ = 0;
    }
}
   4ef04:	e037883a 	mov	sp,fp
   4ef08:	df000017 	ldw	fp,0(sp)
   4ef0c:	dec00104 	addi	sp,sp,4
   4ef10:	f800283a 	ret

0004ef14 <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
   4ef14:	defffb04 	addi	sp,sp,-20
   4ef18:	dfc00415 	stw	ra,16(sp)
   4ef1c:	df000315 	stw	fp,12(sp)
   4ef20:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
   4ef24:	010001b4 	movhi	r4,6
   4ef28:	2105c204 	addi	r4,r4,5896
   4ef2c:	0142d004 	movi	r5,2880
   4ef30:	004f2740 	call	4f274 <OS_MemClr>
    pevent1 = &OSEventTbl[0];
   4ef34:	008001b4 	movhi	r2,6
   4ef38:	1085c204 	addi	r2,r2,5896
   4ef3c:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
   4ef40:	008001b4 	movhi	r2,6
   4ef44:	1085ce04 	addi	r2,r2,5944
   4ef48:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
   4ef4c:	e03ffd0d 	sth	zero,-12(fp)
   4ef50:	00001306 	br	4efa0 <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
   4ef54:	e0bffe17 	ldw	r2,-8(fp)
   4ef58:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
   4ef5c:	e0bffe17 	ldw	r2,-8(fp)
   4ef60:	e0ffff17 	ldw	r3,-4(fp)
   4ef64:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
   4ef68:	e0bffe17 	ldw	r2,-8(fp)
   4ef6c:	00c00fc4 	movi	r3,63
   4ef70:	10c00385 	stb	r3,14(r2)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
   4ef74:	e0bffe17 	ldw	r2,-8(fp)
   4ef78:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
   4ef7c:	e0bffe17 	ldw	r2,-8(fp)
   4ef80:	10800c04 	addi	r2,r2,48
   4ef84:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
   4ef88:	e0bfff17 	ldw	r2,-4(fp)
   4ef8c:	10800c04 	addi	r2,r2,48
   4ef90:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
   4ef94:	e0bffd0b 	ldhu	r2,-12(fp)
   4ef98:	10800044 	addi	r2,r2,1
   4ef9c:	e0bffd0d 	sth	r2,-12(fp)
   4efa0:	e0bffd0b 	ldhu	r2,-12(fp)
   4efa4:	10800ef0 	cmpltui	r2,r2,59
   4efa8:	103fea1e 	bne	r2,zero,4ef54 <__alt_data_end+0xfffde214>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
   4efac:	e0bffe17 	ldw	r2,-8(fp)
   4efb0:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
   4efb4:	e0bffe17 	ldw	r2,-8(fp)
   4efb8:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
   4efbc:	e0bffe17 	ldw	r2,-8(fp)
   4efc0:	00c00fc4 	movi	r3,63
   4efc4:	10c00385 	stb	r3,14(r2)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
   4efc8:	e0bffe17 	ldw	r2,-8(fp)
   4efcc:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
   4efd0:	008001b4 	movhi	r2,6
   4efd4:	1085c204 	addi	r2,r2,5896
   4efd8:	d0a72e15 	stw	r2,-25416(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
   4efdc:	e037883a 	mov	sp,fp
   4efe0:	dfc00117 	ldw	ra,4(sp)
   4efe4:	df000017 	ldw	fp,0(sp)
   4efe8:	dec00204 	addi	sp,sp,8
   4efec:	f800283a 	ret

0004eff0 <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
   4eff0:	deffff04 	addi	sp,sp,-4
   4eff4:	df000015 	stw	fp,0(sp)
   4eff8:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
   4effc:	d0273115 	stw	zero,-25404(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
   4f000:	d0272f05 	stb	zero,-25412(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
   4f004:	d0272105 	stb	zero,-25468(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
   4f008:	d0272945 	stb	zero,-25435(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
   4f00c:	d0272145 	stb	zero,-25467(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
   4f010:	d0272615 	stw	zero,-25448(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
   4f014:	d0272215 	stw	zero,-25464(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
   4f018:	d0273415 	stw	zero,-25392(gp)
    OSIdleCtrMax  = 0L;
   4f01c:	d0272715 	stw	zero,-25444(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
   4f020:	d0273305 	stb	zero,-25396(gp)
#endif
}
   4f024:	e037883a 	mov	sp,fp
   4f028:	df000017 	ldw	fp,0(sp)
   4f02c:	dec00104 	addi	sp,sp,4
   4f030:	f800283a 	ret

0004f034 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
   4f034:	defffd04 	addi	sp,sp,-12
   4f038:	df000215 	stw	fp,8(sp)
   4f03c:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
   4f040:	d0272d05 	stb	zero,-25420(gp)
    prdytbl       = &OSRdyTbl[0];
   4f044:	d0a72d44 	addi	r2,gp,-25419
   4f048:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
   4f04c:	e03ffe05 	stb	zero,-8(fp)
   4f050:	00000706 	br	4f070 <OS_InitRdyList+0x3c>
        *prdytbl++ = 0;
   4f054:	e0bfff17 	ldw	r2,-4(fp)
   4f058:	10c00044 	addi	r3,r2,1
   4f05c:	e0ffff15 	stw	r3,-4(fp)
   4f060:	10000005 	stb	zero,0(r2)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
   4f064:	e0bffe03 	ldbu	r2,-8(fp)
   4f068:	10800044 	addi	r2,r2,1
   4f06c:	e0bffe05 	stb	r2,-8(fp)
   4f070:	e0bffe03 	ldbu	r2,-8(fp)
   4f074:	108000f0 	cmpltui	r2,r2,3
   4f078:	103ff61e 	bne	r2,zero,4f054 <__alt_data_end+0xfffde314>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
   4f07c:	d0272345 	stb	zero,-25459(gp)
    OSPrioHighRdy = 0;
   4f080:	d0272305 	stb	zero,-25460(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
   4f084:	d0272b15 	stw	zero,-25428(gp)
    OSTCBCur      = (OS_TCB *)0;
   4f088:	d0273015 	stw	zero,-25408(gp)
}
   4f08c:	e037883a 	mov	sp,fp
   4f090:	df000017 	ldw	fp,0(sp)
   4f094:	dec00104 	addi	sp,sp,4
   4f098:	f800283a 	ret

0004f09c <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
   4f09c:	defff804 	addi	sp,sp,-32
   4f0a0:	dfc00715 	stw	ra,28(sp)
   4f0a4:	df000615 	stw	fp,24(sp)
   4f0a8:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
   4f0ac:	00bfffd4 	movui	r2,65535
   4f0b0:	d8800015 	stw	r2,0(sp)
   4f0b4:	008001b4 	movhi	r2,6
   4f0b8:	1083c204 	addi	r2,r2,3848
   4f0bc:	d8800115 	stw	r2,4(sp)
   4f0c0:	00808004 	movi	r2,512
   4f0c4:	d8800215 	stw	r2,8(sp)
   4f0c8:	d8000315 	stw	zero,12(sp)
   4f0cc:	008000c4 	movi	r2,3
   4f0d0:	d8800415 	stw	r2,16(sp)
   4f0d4:	01000174 	movhi	r4,5
   4f0d8:	213d4b04 	addi	r4,r4,-2772
   4f0dc:	000b883a 	mov	r5,zero
   4f0e0:	018001b4 	movhi	r6,6
   4f0e4:	3185c104 	addi	r6,r6,5892
   4f0e8:	01c00504 	movi	r7,20
   4f0ec:	0053f300 	call	53f30 <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
   4f0f0:	01000504 	movi	r4,20
   4f0f4:	01400174 	movhi	r5,5
   4f0f8:	295f6204 	addi	r5,r5,32136
   4f0fc:	e1bfff04 	addi	r6,fp,-4
   4f100:	00547fc0 	call	547fc <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
   4f104:	e037883a 	mov	sp,fp
   4f108:	dfc00117 	ldw	ra,4(sp)
   4f10c:	df000017 	ldw	fp,0(sp)
   4f110:	dec00204 	addi	sp,sp,8
   4f114:	f800283a 	ret

0004f118 <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
   4f118:	defff804 	addi	sp,sp,-32
   4f11c:	dfc00715 	stw	ra,28(sp)
   4f120:	df000615 	stw	fp,24(sp)
   4f124:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
   4f128:	00bfff94 	movui	r2,65534
   4f12c:	d8800015 	stw	r2,0(sp)
   4f130:	008001b4 	movhi	r2,6
   4f134:	10814a04 	addi	r2,r2,1320
   4f138:	d8800115 	stw	r2,4(sp)
   4f13c:	00808004 	movi	r2,512
   4f140:	d8800215 	stw	r2,8(sp)
   4f144:	d8000315 	stw	zero,12(sp)
   4f148:	008000c4 	movi	r2,3
   4f14c:	d8800415 	stw	r2,16(sp)
   4f150:	01000174 	movhi	r4,5
   4f154:	213d6204 	addi	r4,r4,-2680
   4f158:	000b883a 	mov	r5,zero
   4f15c:	018001b4 	movhi	r6,6
   4f160:	31834904 	addi	r6,r6,3364
   4f164:	01c004c4 	movi	r7,19
   4f168:	0053f300 	call	53f30 <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
   4f16c:	010004c4 	movi	r4,19
   4f170:	01400174 	movhi	r5,5
   4f174:	295f6604 	addi	r5,r5,32152
   4f178:	e1bfff04 	addi	r6,fp,-4
   4f17c:	00547fc0 	call	547fc <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
   4f180:	e037883a 	mov	sp,fp
   4f184:	dfc00117 	ldw	ra,4(sp)
   4f188:	df000017 	ldw	fp,0(sp)
   4f18c:	dec00204 	addi	sp,sp,8
   4f190:	f800283a 	ret

0004f194 <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
   4f194:	defffb04 	addi	sp,sp,-20
   4f198:	dfc00415 	stw	ra,16(sp)
   4f19c:	df000315 	stw	fp,12(sp)
   4f1a0:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
   4f1a4:	010001b4 	movhi	r4,6
   4f1a8:	21089204 	addi	r4,r4,8776
   4f1ac:	01414404 	movi	r5,1296
   4f1b0:	004f2740 	call	4f274 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
   4f1b4:	010001b4 	movhi	r4,6
   4f1b8:	2109d604 	addi	r4,r4,10072
   4f1bc:	01401504 	movi	r5,84
   4f1c0:	004f2740 	call	4f274 <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
   4f1c4:	008001b4 	movhi	r2,6
   4f1c8:	10889204 	addi	r2,r2,8776
   4f1cc:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
   4f1d0:	008001b4 	movhi	r2,6
   4f1d4:	1088ad04 	addi	r2,r2,8884
   4f1d8:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
   4f1dc:	e03ffd05 	stb	zero,-12(fp)
   4f1e0:	00001106 	br	4f228 <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
   4f1e4:	e0bffe17 	ldw	r2,-8(fp)
   4f1e8:	e0ffff17 	ldw	r3,-4(fp)
   4f1ec:	10c00515 	stw	r3,20(r2)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
   4f1f0:	e0bffe17 	ldw	r2,-8(fp)
   4f1f4:	00c00fc4 	movi	r3,63
   4f1f8:	10c01305 	stb	r3,76(r2)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
   4f1fc:	e0bffe17 	ldw	r2,-8(fp)
   4f200:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
   4f204:	e0bffe17 	ldw	r2,-8(fp)
   4f208:	10801b04 	addi	r2,r2,108
   4f20c:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
   4f210:	e0bfff17 	ldw	r2,-4(fp)
   4f214:	10801b04 	addi	r2,r2,108
   4f218:	e0bfff15 	stw	r2,-4(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
   4f21c:	e0bffd03 	ldbu	r2,-12(fp)
   4f220:	10800044 	addi	r2,r2,1
   4f224:	e0bffd05 	stb	r2,-12(fp)
   4f228:	e0bffd03 	ldbu	r2,-12(fp)
   4f22c:	108002f0 	cmpltui	r2,r2,11
   4f230:	103fec1e 	bne	r2,zero,4f1e4 <__alt_data_end+0xfffde4a4>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
   4f234:	e0bffe17 	ldw	r2,-8(fp)
   4f238:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
   4f23c:	e0bffe17 	ldw	r2,-8(fp)
   4f240:	00c00fc4 	movi	r3,63
   4f244:	10c01305 	stb	r3,76(r2)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
   4f248:	e0bffe17 	ldw	r2,-8(fp)
   4f24c:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
   4f250:	d0272415 	stw	zero,-25456(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
   4f254:	008001b4 	movhi	r2,6
   4f258:	10889204 	addi	r2,r2,8776
   4f25c:	d0a72815 	stw	r2,-25440(gp)
}
   4f260:	e037883a 	mov	sp,fp
   4f264:	dfc00117 	ldw	ra,4(sp)
   4f268:	df000017 	ldw	fp,0(sp)
   4f26c:	dec00204 	addi	sp,sp,8
   4f270:	f800283a 	ret

0004f274 <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
   4f274:	defffd04 	addi	sp,sp,-12
   4f278:	df000215 	stw	fp,8(sp)
   4f27c:	df000204 	addi	fp,sp,8
   4f280:	e13ffe15 	stw	r4,-8(fp)
   4f284:	2805883a 	mov	r2,r5
   4f288:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
   4f28c:	00000706 	br	4f2ac <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
   4f290:	e0bffe17 	ldw	r2,-8(fp)
   4f294:	10c00044 	addi	r3,r2,1
   4f298:	e0fffe15 	stw	r3,-8(fp)
   4f29c:	10000005 	stb	zero,0(r2)
        size--;
   4f2a0:	e0bfff0b 	ldhu	r2,-4(fp)
   4f2a4:	10bfffc4 	addi	r2,r2,-1
   4f2a8:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
   4f2ac:	e0bfff0b 	ldhu	r2,-4(fp)
   4f2b0:	103ff71e 	bne	r2,zero,4f290 <__alt_data_end+0xfffde550>
        *pdest++ = (INT8U)0;
        size--;
    }
}
   4f2b4:	e037883a 	mov	sp,fp
   4f2b8:	df000017 	ldw	fp,0(sp)
   4f2bc:	dec00104 	addi	sp,sp,4
   4f2c0:	f800283a 	ret

0004f2c4 <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
   4f2c4:	defffc04 	addi	sp,sp,-16
   4f2c8:	df000315 	stw	fp,12(sp)
   4f2cc:	df000304 	addi	fp,sp,12
   4f2d0:	e13ffd15 	stw	r4,-12(fp)
   4f2d4:	e17ffe15 	stw	r5,-8(fp)
   4f2d8:	3005883a 	mov	r2,r6
   4f2dc:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
   4f2e0:	00000b06 	br	4f310 <OS_MemCopy+0x4c>
        *pdest++ = *psrc++;
   4f2e4:	e0bffd17 	ldw	r2,-12(fp)
   4f2e8:	10c00044 	addi	r3,r2,1
   4f2ec:	e0fffd15 	stw	r3,-12(fp)
   4f2f0:	e0fffe17 	ldw	r3,-8(fp)
   4f2f4:	19000044 	addi	r4,r3,1
   4f2f8:	e13ffe15 	stw	r4,-8(fp)
   4f2fc:	18c00003 	ldbu	r3,0(r3)
   4f300:	10c00005 	stb	r3,0(r2)
        size--;
   4f304:	e0bfff0b 	ldhu	r2,-4(fp)
   4f308:	10bfffc4 	addi	r2,r2,-1
   4f30c:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
   4f310:	e0bfff0b 	ldhu	r2,-4(fp)
   4f314:	103ff31e 	bne	r2,zero,4f2e4 <__alt_data_end+0xfffde5a4>
        *pdest++ = *psrc++;
        size--;
    }
}
   4f318:	e037883a 	mov	sp,fp
   4f31c:	df000017 	ldw	fp,0(sp)
   4f320:	dec00104 	addi	sp,sp,4
   4f324:	f800283a 	ret

0004f328 <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
   4f328:	defffb04 	addi	sp,sp,-20
   4f32c:	dfc00415 	stw	ra,16(sp)
   4f330:	df000315 	stw	fp,12(sp)
   4f334:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   4f338:	e03ffd15 	stw	zero,-12(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4f33c:	0005303a 	rdctl	r2,status
   4f340:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4f344:	e0fffe17 	ldw	r3,-8(fp)
   4f348:	00bfff84 	movi	r2,-2
   4f34c:	1884703a 	and	r2,r3,r2
   4f350:	1001703a 	wrctl	status,r2
  
  return context;
   4f354:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
   4f358:	e0bffd15 	stw	r2,-12(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
   4f35c:	d0a72f03 	ldbu	r2,-25412(gp)
   4f360:	10803fcc 	andi	r2,r2,255
   4f364:	10001a1e 	bne	r2,zero,4f3d0 <OS_Sched+0xa8>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
   4f368:	d0a72103 	ldbu	r2,-25468(gp)
   4f36c:	10803fcc 	andi	r2,r2,255
   4f370:	1000171e 	bne	r2,zero,4f3d0 <OS_Sched+0xa8>
            OS_SchedNew();
   4f374:	004f3f40 	call	4f3f4 <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
   4f378:	d0e72303 	ldbu	r3,-25460(gp)
   4f37c:	d0a72343 	ldbu	r2,-25459(gp)
   4f380:	18c03fcc 	andi	r3,r3,255
   4f384:	10803fcc 	andi	r2,r2,255
   4f388:	18801126 	beq	r3,r2,4f3d0 <OS_Sched+0xa8>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
   4f38c:	d0a72303 	ldbu	r2,-25460(gp)
   4f390:	10c03fcc 	andi	r3,r2,255
   4f394:	008001b4 	movhi	r2,6
   4f398:	1089d604 	addi	r2,r2,10072
   4f39c:	18c7883a 	add	r3,r3,r3
   4f3a0:	18c7883a 	add	r3,r3,r3
   4f3a4:	10c5883a 	add	r2,r2,r3
   4f3a8:	10800017 	ldw	r2,0(r2)
   4f3ac:	d0a72b15 	stw	r2,-25428(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
   4f3b0:	d0a72b17 	ldw	r2,-25428(gp)
   4f3b4:	10c00e17 	ldw	r3,56(r2)
   4f3b8:	18c00044 	addi	r3,r3,1
   4f3bc:	10c00e15 	stw	r3,56(r2)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
   4f3c0:	d0a72617 	ldw	r2,-25448(gp)
   4f3c4:	10800044 	addi	r2,r2,1
   4f3c8:	d0a72615 	stw	r2,-25448(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
   4f3cc:	00570e80 	call	570e8 <OSCtxSw>
   4f3d0:	e0bffd17 	ldw	r2,-12(fp)
   4f3d4:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4f3d8:	e0bfff17 	ldw	r2,-4(fp)
   4f3dc:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
   4f3e0:	e037883a 	mov	sp,fp
   4f3e4:	dfc00117 	ldw	ra,4(sp)
   4f3e8:	df000017 	ldw	fp,0(sp)
   4f3ec:	dec00204 	addi	sp,sp,8
   4f3f0:	f800283a 	ret

0004f3f4 <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
   4f3f4:	defffe04 	addi	sp,sp,-8
   4f3f8:	df000115 	stw	fp,4(sp)
   4f3fc:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
   4f400:	d0a72d03 	ldbu	r2,-25420(gp)
   4f404:	10c03fcc 	andi	r3,r2,255
   4f408:	00800174 	movhi	r2,5
   4f40c:	109f2204 	addi	r2,r2,31880
   4f410:	10c5883a 	add	r2,r2,r3
   4f414:	10800003 	ldbu	r2,0(r2)
   4f418:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
   4f41c:	e0bfff03 	ldbu	r2,-4(fp)
   4f420:	100490fa 	slli	r2,r2,3
   4f424:	1009883a 	mov	r4,r2
   4f428:	e0ffff03 	ldbu	r3,-4(fp)
   4f42c:	d0a72d44 	addi	r2,gp,-25419
   4f430:	1885883a 	add	r2,r3,r2
   4f434:	10800003 	ldbu	r2,0(r2)
   4f438:	10c03fcc 	andi	r3,r2,255
   4f43c:	00800174 	movhi	r2,5
   4f440:	109f2204 	addi	r2,r2,31880
   4f444:	10c5883a 	add	r2,r2,r3
   4f448:	10800003 	ldbu	r2,0(r2)
   4f44c:	2085883a 	add	r2,r4,r2
   4f450:	d0a72305 	stb	r2,-25460(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
   4f454:	e037883a 	mov	sp,fp
   4f458:	df000017 	ldw	fp,0(sp)
   4f45c:	dec00104 	addi	sp,sp,4
   4f460:	f800283a 	ret

0004f464 <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
   4f464:	defffc04 	addi	sp,sp,-16
   4f468:	df000315 	stw	fp,12(sp)
   4f46c:	df000304 	addi	fp,sp,12
   4f470:	e13ffe15 	stw	r4,-8(fp)
   4f474:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
   4f478:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
   4f47c:	00000b06 	br	4f4ac <OS_StrCopy+0x48>
        *pdest++ = *psrc++;
   4f480:	e0bffe17 	ldw	r2,-8(fp)
   4f484:	10c00044 	addi	r3,r2,1
   4f488:	e0fffe15 	stw	r3,-8(fp)
   4f48c:	e0ffff17 	ldw	r3,-4(fp)
   4f490:	19000044 	addi	r4,r3,1
   4f494:	e13fff15 	stw	r4,-4(fp)
   4f498:	18c00003 	ldbu	r3,0(r3)
   4f49c:	10c00005 	stb	r3,0(r2)
        len++;
   4f4a0:	e0bffd03 	ldbu	r2,-12(fp)
   4f4a4:	10800044 	addi	r2,r2,1
   4f4a8:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
   4f4ac:	e0bfff17 	ldw	r2,-4(fp)
   4f4b0:	10800003 	ldbu	r2,0(r2)
   4f4b4:	10803fcc 	andi	r2,r2,255
   4f4b8:	103ff11e 	bne	r2,zero,4f480 <__alt_data_end+0xfffde740>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
   4f4bc:	e0bffe17 	ldw	r2,-8(fp)
   4f4c0:	10000005 	stb	zero,0(r2)
    return (len);
   4f4c4:	e0bffd03 	ldbu	r2,-12(fp)
}
   4f4c8:	e037883a 	mov	sp,fp
   4f4cc:	df000017 	ldw	fp,0(sp)
   4f4d0:	dec00104 	addi	sp,sp,4
   4f4d4:	f800283a 	ret

0004f4d8 <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
   4f4d8:	defffd04 	addi	sp,sp,-12
   4f4dc:	df000215 	stw	fp,8(sp)
   4f4e0:	df000204 	addi	fp,sp,8
   4f4e4:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
   4f4e8:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
   4f4ec:	00000606 	br	4f508 <OS_StrLen+0x30>
        psrc++;
   4f4f0:	e0bfff17 	ldw	r2,-4(fp)
   4f4f4:	10800044 	addi	r2,r2,1
   4f4f8:	e0bfff15 	stw	r2,-4(fp)
        len++;
   4f4fc:	e0bffe03 	ldbu	r2,-8(fp)
   4f500:	10800044 	addi	r2,r2,1
   4f504:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
   4f508:	e0bfff17 	ldw	r2,-4(fp)
   4f50c:	10800003 	ldbu	r2,0(r2)
   4f510:	10803fcc 	andi	r2,r2,255
   4f514:	103ff61e 	bne	r2,zero,4f4f0 <__alt_data_end+0xfffde7b0>
        psrc++;
        len++;
    }
    return (len);
   4f518:	e0bffe03 	ldbu	r2,-8(fp)
}
   4f51c:	e037883a 	mov	sp,fp
   4f520:	df000017 	ldw	fp,0(sp)
   4f524:	dec00104 	addi	sp,sp,4
   4f528:	f800283a 	ret

0004f52c <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
   4f52c:	defffa04 	addi	sp,sp,-24
   4f530:	dfc00515 	stw	ra,20(sp)
   4f534:	df000415 	stw	fp,16(sp)
   4f538:	df000404 	addi	fp,sp,16
   4f53c:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   4f540:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4f544:	0005303a 	rdctl	r2,status
   4f548:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4f54c:	e0fffd17 	ldw	r3,-12(fp)
   4f550:	00bfff84 	movi	r2,-2
   4f554:	1884703a 	and	r2,r3,r2
   4f558:	1001703a 	wrctl	status,r2
  
  return context;
   4f55c:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
   4f560:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtr++;
   4f564:	d0a72217 	ldw	r2,-25464(gp)
   4f568:	10800044 	addi	r2,r2,1
   4f56c:	d0a72215 	stw	r2,-25464(gp)
   4f570:	e0bffc17 	ldw	r2,-16(fp)
   4f574:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4f578:	e0bffe17 	ldw	r2,-8(fp)
   4f57c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
   4f580:	004d6c80 	call	4d6c8 <OSTaskIdleHook>
    }
   4f584:	003fef06 	br	4f544 <__alt_data_end+0xfffde804>

0004f588 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
   4f588:	defffa04 	addi	sp,sp,-24
   4f58c:	dfc00515 	stw	ra,20(sp)
   4f590:	df000415 	stw	fp,16(sp)
   4f594:	df000404 	addi	fp,sp,16
   4f598:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   4f59c:	e03ffc15 	stw	zero,-16(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
   4f5a0:	00000206 	br	4f5ac <OS_TaskStat+0x24>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
   4f5a4:	01003204 	movi	r4,200
   4f5a8:	00551280 	call	55128 <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
   4f5ac:	d0a73303 	ldbu	r2,-25396(gp)
   4f5b0:	10803fcc 	andi	r2,r2,255
   4f5b4:	103ffb26 	beq	r2,zero,4f5a4 <__alt_data_end+0xfffde864>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
   4f5b8:	d0a72717 	ldw	r2,-25444(gp)
   4f5bc:	1009883a 	mov	r4,r2
   4f5c0:	01401904 	movi	r5,100
   4f5c4:	00407200 	call	40720 <__udivsi3>
   4f5c8:	d0a72715 	stw	r2,-25444(gp)
    if (OSIdleCtrMax == 0L) {
   4f5cc:	d0a72717 	ldw	r2,-25444(gp)
   4f5d0:	1000031e 	bne	r2,zero,4f5e0 <OS_TaskStat+0x58>
        OSCPUUsage = 0;
   4f5d4:	d0272905 	stb	zero,-25436(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
   4f5d8:	01003fc4 	movi	r4,255
   4f5dc:	0054d7c0 	call	54d7c <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4f5e0:	0005303a 	rdctl	r2,status
   4f5e4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4f5e8:	e0fffd17 	ldw	r3,-12(fp)
   4f5ec:	00bfff84 	movi	r2,-2
   4f5f0:	1884703a 	and	r2,r3,r2
   4f5f4:	1001703a 	wrctl	status,r2
  
  return context;
   4f5f8:	e0bffd17 	ldw	r2,-12(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
   4f5fc:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
   4f600:	d0a72217 	ldw	r2,-25464(gp)
   4f604:	d0a73415 	stw	r2,-25392(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
   4f608:	d0272215 	stw	zero,-25464(gp)
   4f60c:	e0bffc17 	ldw	r2,-16(fp)
   4f610:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4f614:	e0bffe17 	ldw	r2,-8(fp)
   4f618:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
   4f61c:	d0e73417 	ldw	r3,-25392(gp)
   4f620:	d0a72717 	ldw	r2,-25444(gp)
   4f624:	1809883a 	mov	r4,r3
   4f628:	100b883a 	mov	r5,r2
   4f62c:	00407200 	call	40720 <__udivsi3>
   4f630:	1007883a 	mov	r3,r2
   4f634:	00801904 	movi	r2,100
   4f638:	10c5c83a 	sub	r2,r2,r3
   4f63c:	d0a72905 	stb	r2,-25436(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
   4f640:	004d6740 	call	4d674 <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
   4f644:	004f6540 	call	4f654 <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
   4f648:	01001904 	movi	r4,100
   4f64c:	00551280 	call	55128 <OSTimeDly>
    }
   4f650:	003fe306 	br	4f5e0 <__alt_data_end+0xfffde8a0>

0004f654 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
   4f654:	defffa04 	addi	sp,sp,-24
   4f658:	dfc00515 	stw	ra,20(sp)
   4f65c:	df000415 	stw	fp,16(sp)
   4f660:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
   4f664:	e03ffc05 	stb	zero,-16(fp)
   4f668:	00002406 	br	4f6fc <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
   4f66c:	e0fffc03 	ldbu	r3,-16(fp)
   4f670:	e0bffe04 	addi	r2,fp,-8
   4f674:	1809883a 	mov	r4,r3
   4f678:	100b883a 	mov	r5,r2
   4f67c:	0054bb40 	call	54bb4 <OSTaskStkChk>
   4f680:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
   4f684:	e0bffc43 	ldbu	r2,-15(fp)
   4f688:	1000191e 	bne	r2,zero,4f6f0 <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
   4f68c:	e0fffc03 	ldbu	r3,-16(fp)
   4f690:	008001b4 	movhi	r2,6
   4f694:	1089d604 	addi	r2,r2,10072
   4f698:	18c7883a 	add	r3,r3,r3
   4f69c:	18c7883a 	add	r3,r3,r3
   4f6a0:	10c5883a 	add	r2,r2,r3
   4f6a4:	10800017 	ldw	r2,0(r2)
   4f6a8:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
   4f6ac:	e0bffd17 	ldw	r2,-12(fp)
   4f6b0:	10000f26 	beq	r2,zero,4f6f0 <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
   4f6b4:	e0bffd17 	ldw	r2,-12(fp)
   4f6b8:	10800060 	cmpeqi	r2,r2,1
   4f6bc:	10000c1e 	bne	r2,zero,4f6f0 <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
   4f6c0:	e0bffd17 	ldw	r2,-12(fp)
   4f6c4:	10c00217 	ldw	r3,8(r2)
   4f6c8:	e0bffd17 	ldw	r2,-12(fp)
   4f6cc:	10800317 	ldw	r2,12(r2)
   4f6d0:	1085883a 	add	r2,r2,r2
   4f6d4:	1085883a 	add	r2,r2,r2
   4f6d8:	1887883a 	add	r3,r3,r2
   4f6dc:	e0bffd17 	ldw	r2,-12(fp)
   4f6e0:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
   4f6e4:	e0ffff17 	ldw	r3,-4(fp)
   4f6e8:	e0bffd17 	ldw	r2,-12(fp)
   4f6ec:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
   4f6f0:	e0bffc03 	ldbu	r2,-16(fp)
   4f6f4:	10800044 	addi	r2,r2,1
   4f6f8:	e0bffc05 	stb	r2,-16(fp)
   4f6fc:	e0bffc03 	ldbu	r2,-16(fp)
   4f700:	10800570 	cmpltui	r2,r2,21
   4f704:	103fd91e 	bne	r2,zero,4f66c <__alt_data_end+0xfffde92c>
#endif
                }
            }
        }
    }
}
   4f708:	e037883a 	mov	sp,fp
   4f70c:	dfc00117 	ldw	ra,4(sp)
   4f710:	df000017 	ldw	fp,0(sp)
   4f714:	dec00204 	addi	sp,sp,8
   4f718:	f800283a 	ret

0004f71c <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
   4f71c:	defff204 	addi	sp,sp,-56
   4f720:	dfc00d15 	stw	ra,52(sp)
   4f724:	df000c15 	stw	fp,48(sp)
   4f728:	df000c04 	addi	fp,sp,48
   4f72c:	e17ffc15 	stw	r5,-16(fp)
   4f730:	e1bffd15 	stw	r6,-12(fp)
   4f734:	3807883a 	mov	r3,r7
   4f738:	e0800417 	ldw	r2,16(fp)
   4f73c:	e13ffb05 	stb	r4,-20(fp)
   4f740:	e0fffe0d 	sth	r3,-8(fp)
   4f744:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   4f748:	e03ff415 	stw	zero,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4f74c:	0005303a 	rdctl	r2,status
   4f750:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4f754:	e0fff617 	ldw	r3,-40(fp)
   4f758:	00bfff84 	movi	r2,-2
   4f75c:	1884703a 	and	r2,r3,r2
   4f760:	1001703a 	wrctl	status,r2
  
  return context;
   4f764:	e0bff617 	ldw	r2,-40(fp)
#endif



    OS_ENTER_CRITICAL();
   4f768:	e0bff415 	stw	r2,-48(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
   4f76c:	d0a72817 	ldw	r2,-25440(gp)
   4f770:	e0bff515 	stw	r2,-44(fp)
    if (ptcb != (OS_TCB *)0) {
   4f774:	e0bff517 	ldw	r2,-44(fp)
   4f778:	10009326 	beq	r2,zero,4f9c8 <OS_TCBInit+0x2ac>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
   4f77c:	e0bff517 	ldw	r2,-44(fp)
   4f780:	10800517 	ldw	r2,20(r2)
   4f784:	d0a72815 	stw	r2,-25440(gp)
   4f788:	e0bff417 	ldw	r2,-48(fp)
   4f78c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4f790:	e0bff717 	ldw	r2,-36(fp)
   4f794:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
   4f798:	e0bff517 	ldw	r2,-44(fp)
   4f79c:	e0fffc17 	ldw	r3,-16(fp)
   4f7a0:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
   4f7a4:	e0bff517 	ldw	r2,-44(fp)
   4f7a8:	e0fffb03 	ldbu	r3,-20(fp)
   4f7ac:	10c00c85 	stb	r3,50(r2)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
   4f7b0:	e0bff517 	ldw	r2,-44(fp)
   4f7b4:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
   4f7b8:	e0bff517 	ldw	r2,-44(fp)
   4f7bc:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
   4f7c0:	e0bff517 	ldw	r2,-44(fp)
   4f7c4:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
   4f7c8:	e0bff517 	ldw	r2,-44(fp)
   4f7cc:	e0c00317 	ldw	r3,12(fp)
   4f7d0:	10c00115 	stw	r3,4(r2)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
   4f7d4:	e0bff517 	ldw	r2,-44(fp)
   4f7d8:	e0c00217 	ldw	r3,8(fp)
   4f7dc:	10c00315 	stw	r3,12(r2)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
   4f7e0:	e0bff517 	ldw	r2,-44(fp)
   4f7e4:	e0fffd17 	ldw	r3,-12(fp)
   4f7e8:	10c00215 	stw	r3,8(r2)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
   4f7ec:	e0bff517 	ldw	r2,-44(fp)
   4f7f0:	e0ffff0b 	ldhu	r3,-4(fp)
   4f7f4:	10c0040d 	sth	r3,16(r2)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
   4f7f8:	e0bff517 	ldw	r2,-44(fp)
   4f7fc:	e0fffe0b 	ldhu	r3,-8(fp)
   4f800:	10c0048d 	sth	r3,18(r2)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
   4f804:	e0bff517 	ldw	r2,-44(fp)
   4f808:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
   4f80c:	e0bffb03 	ldbu	r2,-20(fp)
   4f810:	1004d0fa 	srli	r2,r2,3
   4f814:	1007883a 	mov	r3,r2
   4f818:	e0bff517 	ldw	r2,-44(fp)
   4f81c:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
   4f820:	e0bffb03 	ldbu	r2,-20(fp)
   4f824:	108001cc 	andi	r2,r2,7
   4f828:	1007883a 	mov	r3,r2
   4f82c:	e0bff517 	ldw	r2,-44(fp)
   4f830:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
   4f834:	e0bff517 	ldw	r2,-44(fp)
   4f838:	10800d03 	ldbu	r2,52(r2)
   4f83c:	10803fcc 	andi	r2,r2,255
   4f840:	00c00044 	movi	r3,1
   4f844:	1884983a 	sll	r2,r3,r2
   4f848:	1007883a 	mov	r3,r2
   4f84c:	e0bff517 	ldw	r2,-44(fp)
   4f850:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
   4f854:	e0bff517 	ldw	r2,-44(fp)
   4f858:	10800cc3 	ldbu	r2,51(r2)
   4f85c:	10803fcc 	andi	r2,r2,255
   4f860:	00c00044 	movi	r3,1
   4f864:	1884983a 	sll	r2,r3,r2
   4f868:	1007883a 	mov	r3,r2
   4f86c:	e0bff517 	ldw	r2,-44(fp)
   4f870:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
   4f874:	e0bff517 	ldw	r2,-44(fp)
   4f878:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
   4f87c:	e0bff517 	ldw	r2,-44(fp)
   4f880:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
   4f884:	e0bff517 	ldw	r2,-44(fp)
   4f888:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
   4f88c:	e0bff517 	ldw	r2,-44(fp)
   4f890:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
   4f894:	e0bff517 	ldw	r2,-44(fp)
   4f898:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
   4f89c:	e0bff517 	ldw	r2,-44(fp)
   4f8a0:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
   4f8a4:	e0bff517 	ldw	r2,-44(fp)
   4f8a8:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
   4f8ac:	e0bff517 	ldw	r2,-44(fp)
   4f8b0:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
   4f8b4:	e0bff517 	ldw	r2,-44(fp)
   4f8b8:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
   4f8bc:	e0bff517 	ldw	r2,-44(fp)
   4f8c0:	00c00fc4 	movi	r3,63
   4f8c4:	10c01305 	stb	r3,76(r2)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
   4f8c8:	e0bff517 	ldw	r2,-44(fp)
   4f8cc:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
   4f8d0:	e13ff517 	ldw	r4,-44(fp)
   4f8d4:	004d6e40 	call	4d6e4 <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
   4f8d8:	e13ff517 	ldw	r4,-44(fp)
   4f8dc:	004d6180 	call	4d618 <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4f8e0:	0005303a 	rdctl	r2,status
   4f8e4:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4f8e8:	e0fff817 	ldw	r3,-32(fp)
   4f8ec:	00bfff84 	movi	r2,-2
   4f8f0:	1884703a 	and	r2,r3,r2
   4f8f4:	1001703a 	wrctl	status,r2
  
  return context;
   4f8f8:	e0bff817 	ldw	r2,-32(fp)

        OS_ENTER_CRITICAL();
   4f8fc:	e0bff415 	stw	r2,-48(fp)
        OSTCBPrioTbl[prio] = ptcb;
   4f900:	e0fffb03 	ldbu	r3,-20(fp)
   4f904:	008001b4 	movhi	r2,6
   4f908:	1089d604 	addi	r2,r2,10072
   4f90c:	18c7883a 	add	r3,r3,r3
   4f910:	18c7883a 	add	r3,r3,r3
   4f914:	10c5883a 	add	r2,r2,r3
   4f918:	e0fff517 	ldw	r3,-44(fp)
   4f91c:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
   4f920:	d0e72417 	ldw	r3,-25456(gp)
   4f924:	e0bff517 	ldw	r2,-44(fp)
   4f928:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
   4f92c:	e0bff517 	ldw	r2,-44(fp)
   4f930:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
   4f934:	d0a72417 	ldw	r2,-25456(gp)
   4f938:	10000326 	beq	r2,zero,4f948 <OS_TCBInit+0x22c>
            OSTCBList->OSTCBPrev = ptcb;
   4f93c:	d0a72417 	ldw	r2,-25456(gp)
   4f940:	e0fff517 	ldw	r3,-44(fp)
   4f944:	10c00615 	stw	r3,24(r2)
        }
        OSTCBList               = ptcb;
   4f948:	e0bff517 	ldw	r2,-44(fp)
   4f94c:	d0a72415 	stw	r2,-25456(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
   4f950:	e0bff517 	ldw	r2,-44(fp)
   4f954:	10c00d83 	ldbu	r3,54(r2)
   4f958:	d0a72d03 	ldbu	r2,-25420(gp)
   4f95c:	1884b03a 	or	r2,r3,r2
   4f960:	d0a72d05 	stb	r2,-25420(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   4f964:	e0bff517 	ldw	r2,-44(fp)
   4f968:	10800d03 	ldbu	r2,52(r2)
   4f96c:	10c03fcc 	andi	r3,r2,255
   4f970:	e0bff517 	ldw	r2,-44(fp)
   4f974:	10800d03 	ldbu	r2,52(r2)
   4f978:	11003fcc 	andi	r4,r2,255
   4f97c:	d0a72d44 	addi	r2,gp,-25419
   4f980:	2085883a 	add	r2,r4,r2
   4f984:	11000003 	ldbu	r4,0(r2)
   4f988:	e0bff517 	ldw	r2,-44(fp)
   4f98c:	10800d43 	ldbu	r2,53(r2)
   4f990:	2084b03a 	or	r2,r4,r2
   4f994:	1009883a 	mov	r4,r2
   4f998:	d0a72d44 	addi	r2,gp,-25419
   4f99c:	1885883a 	add	r2,r3,r2
   4f9a0:	11000005 	stb	r4,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
   4f9a4:	d0a72943 	ldbu	r2,-25435(gp)
   4f9a8:	10800044 	addi	r2,r2,1
   4f9ac:	d0a72945 	stb	r2,-25435(gp)
   4f9b0:	e0bff417 	ldw	r2,-48(fp)
   4f9b4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4f9b8:	e0bff917 	ldw	r2,-28(fp)
   4f9bc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
   4f9c0:	0005883a 	mov	r2,zero
   4f9c4:	00000506 	br	4f9dc <OS_TCBInit+0x2c0>
   4f9c8:	e0bff417 	ldw	r2,-48(fp)
   4f9cc:	e0bffa15 	stw	r2,-24(fp)
   4f9d0:	e0bffa17 	ldw	r2,-24(fp)
   4f9d4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
   4f9d8:	00801084 	movi	r2,66
}
   4f9dc:	e037883a 	mov	sp,fp
   4f9e0:	dfc00117 	ldw	ra,4(sp)
   4f9e4:	df000017 	ldw	fp,0(sp)
   4f9e8:	dec00204 	addi	sp,sp,8
   4f9ec:	f800283a 	ret

0004f9f0 <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
   4f9f0:	defffe04 	addi	sp,sp,-8
   4f9f4:	df000115 	stw	fp,4(sp)
   4f9f8:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
   4f9fc:	d0a00f04 	addi	r2,gp,-32708
   4fa00:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
   4fa04:	d0a01004 	addi	r2,gp,-32704
   4fa08:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
   4fa0c:	d0a01184 	addi	r2,gp,-32698
   4fa10:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
   4fa14:	d0a01204 	addi	r2,gp,-32696
   4fa18:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
   4fa1c:	d0a01104 	addi	r2,gp,-32700
   4fa20:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
   4fa24:	d0a01284 	addi	r2,gp,-32694
   4fa28:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
   4fa2c:	d0a01304 	addi	r2,gp,-32692
   4fa30:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
   4fa34:	d0a01384 	addi	r2,gp,-32690
   4fa38:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
   4fa3c:	d0a01404 	addi	r2,gp,-32688
   4fa40:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
   4fa44:	d0a01484 	addi	r2,gp,-32686
   4fa48:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
   4fa4c:	d0a01504 	addi	r2,gp,-32684
   4fa50:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
   4fa54:	d0a01584 	addi	r2,gp,-32682
   4fa58:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
   4fa5c:	d0a01604 	addi	r2,gp,-32680
   4fa60:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
   4fa64:	d0a01684 	addi	r2,gp,-32678
   4fa68:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
   4fa6c:	d0a01704 	addi	r2,gp,-32676
   4fa70:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
   4fa74:	d0a01784 	addi	r2,gp,-32674
   4fa78:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
   4fa7c:	d0a01804 	addi	r2,gp,-32672
   4fa80:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
   4fa84:	d0a01884 	addi	r2,gp,-32670
   4fa88:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
   4fa8c:	d0a01904 	addi	r2,gp,-32668
   4fa90:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
   4fa94:	d0a01984 	addi	r2,gp,-32666
   4fa98:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
   4fa9c:	d0a01a04 	addi	r2,gp,-32664
   4faa0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
   4faa4:	d0a01a84 	addi	r2,gp,-32662
   4faa8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
   4faac:	d0a01b04 	addi	r2,gp,-32660
   4fab0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
   4fab4:	d0a01b84 	addi	r2,gp,-32658
   4fab8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
   4fabc:	d0a01c04 	addi	r2,gp,-32656
   4fac0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
   4fac4:	d0a01c84 	addi	r2,gp,-32654
   4fac8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
   4facc:	d0a01d04 	addi	r2,gp,-32652
   4fad0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
   4fad4:	d0a01d84 	addi	r2,gp,-32650
   4fad8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
   4fadc:	d0a01e04 	addi	r2,gp,-32648
   4fae0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
   4fae4:	d0a01e84 	addi	r2,gp,-32646
   4fae8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
   4faec:	d0a01f04 	addi	r2,gp,-32644
   4faf0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
   4faf4:	d0a01f84 	addi	r2,gp,-32642
   4faf8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
   4fafc:	d0a02004 	addi	r2,gp,-32640
   4fb00:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
   4fb04:	d0a02084 	addi	r2,gp,-32638
   4fb08:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
   4fb0c:	d0a02104 	addi	r2,gp,-32636
   4fb10:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
   4fb14:	d0a02184 	addi	r2,gp,-32634
   4fb18:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
   4fb1c:	d0a02204 	addi	r2,gp,-32632
   4fb20:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
   4fb24:	d0a02284 	addi	r2,gp,-32630
   4fb28:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
   4fb2c:	d0a02304 	addi	r2,gp,-32628
   4fb30:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
   4fb34:	d0a02384 	addi	r2,gp,-32626
   4fb38:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
   4fb3c:	d0a02404 	addi	r2,gp,-32624
   4fb40:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
   4fb44:	d0a02484 	addi	r2,gp,-32622
   4fb48:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
   4fb4c:	d0a02504 	addi	r2,gp,-32620
   4fb50:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
   4fb54:	d0a02584 	addi	r2,gp,-32618
   4fb58:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
   4fb5c:	d0a02604 	addi	r2,gp,-32616
   4fb60:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
   4fb64:	d0a02b04 	addi	r2,gp,-32596
   4fb68:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
   4fb6c:	e037883a 	mov	sp,fp
   4fb70:	df000017 	ldw	fp,0(sp)
   4fb74:	dec00104 	addi	sp,sp,4
   4fb78:	f800283a 	ret

0004fb7c <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
   4fb7c:	defff204 	addi	sp,sp,-56
   4fb80:	df000d15 	stw	fp,52(sp)
   4fb84:	df000d04 	addi	fp,sp,52
   4fb88:	e13ffc15 	stw	r4,-16(fp)
   4fb8c:	2807883a 	mov	r3,r5
   4fb90:	3005883a 	mov	r2,r6
   4fb94:	e1ffff15 	stw	r7,-4(fp)
   4fb98:	e0fffd0d 	sth	r3,-12(fp)
   4fb9c:	e0bffe05 	stb	r2,-8(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   4fba0:	e03ff415 	stw	zero,-48(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   4fba4:	e0bfff17 	ldw	r2,-4(fp)
   4fba8:	1000021e 	bne	r2,zero,4fbb4 <OSFlagAccept+0x38>
        return ((OS_FLAGS)0);
   4fbac:	0005883a 	mov	r2,zero
   4fbb0:	0000b006 	br	4fe74 <OSFlagAccept+0x2f8>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   4fbb4:	e0bffc17 	ldw	r2,-16(fp)
   4fbb8:	1000051e 	bne	r2,zero,4fbd0 <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   4fbbc:	e0bfff17 	ldw	r2,-4(fp)
   4fbc0:	00c01b84 	movi	r3,110
   4fbc4:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   4fbc8:	0005883a 	mov	r2,zero
   4fbcc:	0000a906 	br	4fe74 <OSFlagAccept+0x2f8>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
   4fbd0:	e0bffc17 	ldw	r2,-16(fp)
   4fbd4:	10800003 	ldbu	r2,0(r2)
   4fbd8:	10803fcc 	andi	r2,r2,255
   4fbdc:	10800160 	cmpeqi	r2,r2,5
   4fbe0:	1000051e 	bne	r2,zero,4fbf8 <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
   4fbe4:	e0bfff17 	ldw	r2,-4(fp)
   4fbe8:	00c00044 	movi	r3,1
   4fbec:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   4fbf0:	0005883a 	mov	r2,zero
   4fbf4:	00009f06 	br	4fe74 <OSFlagAccept+0x2f8>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
   4fbf8:	e0fffe03 	ldbu	r3,-8(fp)
   4fbfc:	00bfe004 	movi	r2,-128
   4fc00:	1884703a 	and	r2,r3,r2
   4fc04:	e0bff505 	stb	r2,-44(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
   4fc08:	e0bff503 	ldbu	r2,-44(fp)
   4fc0c:	10000626 	beq	r2,zero,4fc28 <OSFlagAccept+0xac>
        wait_type &= ~OS_FLAG_CONSUME;
   4fc10:	e0bffe03 	ldbu	r2,-8(fp)
   4fc14:	10801fcc 	andi	r2,r2,127
   4fc18:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
   4fc1c:	00800044 	movi	r2,1
   4fc20:	e0bff385 	stb	r2,-50(fp)
   4fc24:	00000106 	br	4fc2c <OSFlagAccept+0xb0>
    } else {
        consume    = OS_FALSE;
   4fc28:	e03ff385 	stb	zero,-50(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
   4fc2c:	e0bfff17 	ldw	r2,-4(fp)
   4fc30:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4fc34:	0005303a 	rdctl	r2,status
   4fc38:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4fc3c:	e0fff617 	ldw	r3,-40(fp)
   4fc40:	00bfff84 	movi	r2,-2
   4fc44:	1884703a 	and	r2,r3,r2
   4fc48:	1001703a 	wrctl	status,r2
  
  return context;
   4fc4c:	e0bff617 	ldw	r2,-40(fp)
    OS_ENTER_CRITICAL();
   4fc50:	e0bff415 	stw	r2,-48(fp)
    switch (wait_type) {
   4fc54:	e0bffe03 	ldbu	r2,-8(fp)
   4fc58:	10c00060 	cmpeqi	r3,r2,1
   4fc5c:	18005f1e 	bne	r3,zero,4fddc <OSFlagAccept+0x260>
   4fc60:	10c00088 	cmpgei	r3,r2,2
   4fc64:	1800021e 	bne	r3,zero,4fc70 <OSFlagAccept+0xf4>
   4fc68:	10003f26 	beq	r2,zero,4fd68 <OSFlagAccept+0x1ec>
   4fc6c:	00007706 	br	4fe4c <OSFlagAccept+0x2d0>
   4fc70:	10c000a0 	cmpeqi	r3,r2,2
   4fc74:	1800031e 	bne	r3,zero,4fc84 <OSFlagAccept+0x108>
   4fc78:	108000e0 	cmpeqi	r2,r2,3
   4fc7c:	10001e1e 	bne	r2,zero,4fcf8 <OSFlagAccept+0x17c>
   4fc80:	00007206 	br	4fe4c <OSFlagAccept+0x2d0>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
   4fc84:	e0bffc17 	ldw	r2,-16(fp)
   4fc88:	10c0020b 	ldhu	r3,8(r2)
   4fc8c:	e0bffd0b 	ldhu	r2,-12(fp)
   4fc90:	1884703a 	and	r2,r3,r2
   4fc94:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   4fc98:	e0fff30b 	ldhu	r3,-52(fp)
   4fc9c:	e0bffd0b 	ldhu	r2,-12(fp)
   4fca0:	18800d1e 	bne	r3,r2,4fcd8 <OSFlagAccept+0x15c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   4fca4:	e0bff383 	ldbu	r2,-50(fp)
   4fca8:	10800058 	cmpnei	r2,r2,1
   4fcac:	10000d1e 	bne	r2,zero,4fce4 <OSFlagAccept+0x168>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
   4fcb0:	e0bffc17 	ldw	r2,-16(fp)
   4fcb4:	1080020b 	ldhu	r2,8(r2)
   4fcb8:	1007883a 	mov	r3,r2
   4fcbc:	e0bff30b 	ldhu	r2,-52(fp)
   4fcc0:	0084303a 	nor	r2,zero,r2
   4fcc4:	1884703a 	and	r2,r3,r2
   4fcc8:	1007883a 	mov	r3,r2
   4fccc:	e0bffc17 	ldw	r2,-16(fp)
   4fcd0:	10c0020d 	sth	r3,8(r2)
   4fcd4:	00000306 	br	4fce4 <OSFlagAccept+0x168>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   4fcd8:	e0bfff17 	ldw	r2,-4(fp)
   4fcdc:	00c01c04 	movi	r3,112
   4fce0:	10c00005 	stb	r3,0(r2)
   4fce4:	e0bff417 	ldw	r2,-48(fp)
   4fce8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4fcec:	e0bff717 	ldw	r2,-36(fp)
   4fcf0:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   4fcf4:	00005e06 	br	4fe70 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
   4fcf8:	e0bffc17 	ldw	r2,-16(fp)
   4fcfc:	10c0020b 	ldhu	r3,8(r2)
   4fd00:	e0bffd0b 	ldhu	r2,-12(fp)
   4fd04:	1884703a 	and	r2,r3,r2
   4fd08:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
   4fd0c:	e0bff30b 	ldhu	r2,-52(fp)
   4fd10:	10000d26 	beq	r2,zero,4fd48 <OSFlagAccept+0x1cc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   4fd14:	e0bff383 	ldbu	r2,-50(fp)
   4fd18:	10800058 	cmpnei	r2,r2,1
   4fd1c:	10000d1e 	bne	r2,zero,4fd54 <OSFlagAccept+0x1d8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
   4fd20:	e0bffc17 	ldw	r2,-16(fp)
   4fd24:	1080020b 	ldhu	r2,8(r2)
   4fd28:	1007883a 	mov	r3,r2
   4fd2c:	e0bff30b 	ldhu	r2,-52(fp)
   4fd30:	0084303a 	nor	r2,zero,r2
   4fd34:	1884703a 	and	r2,r3,r2
   4fd38:	1007883a 	mov	r3,r2
   4fd3c:	e0bffc17 	ldw	r2,-16(fp)
   4fd40:	10c0020d 	sth	r3,8(r2)
   4fd44:	00000306 	br	4fd54 <OSFlagAccept+0x1d8>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   4fd48:	e0bfff17 	ldw	r2,-4(fp)
   4fd4c:	00c01c04 	movi	r3,112
   4fd50:	10c00005 	stb	r3,0(r2)
   4fd54:	e0bff417 	ldw	r2,-48(fp)
   4fd58:	e0bff815 	stw	r2,-32(fp)
   4fd5c:	e0bff817 	ldw	r2,-32(fp)
   4fd60:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   4fd64:	00004206 	br	4fe70 <OSFlagAccept+0x2f4>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
   4fd68:	e0bffc17 	ldw	r2,-16(fp)
   4fd6c:	1080020b 	ldhu	r2,8(r2)
   4fd70:	0084303a 	nor	r2,zero,r2
   4fd74:	1007883a 	mov	r3,r2
   4fd78:	e0bffd0b 	ldhu	r2,-12(fp)
   4fd7c:	1884703a 	and	r2,r3,r2
   4fd80:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   4fd84:	e0fff30b 	ldhu	r3,-52(fp)
   4fd88:	e0bffd0b 	ldhu	r2,-12(fp)
   4fd8c:	18800b1e 	bne	r3,r2,4fdbc <OSFlagAccept+0x240>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   4fd90:	e0bff383 	ldbu	r2,-50(fp)
   4fd94:	10800058 	cmpnei	r2,r2,1
   4fd98:	10000b1e 	bne	r2,zero,4fdc8 <OSFlagAccept+0x24c>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
   4fd9c:	e0bffc17 	ldw	r2,-16(fp)
   4fda0:	10c0020b 	ldhu	r3,8(r2)
   4fda4:	e0bff30b 	ldhu	r2,-52(fp)
   4fda8:	1884b03a 	or	r2,r3,r2
   4fdac:	1007883a 	mov	r3,r2
   4fdb0:	e0bffc17 	ldw	r2,-16(fp)
   4fdb4:	10c0020d 	sth	r3,8(r2)
   4fdb8:	00000306 	br	4fdc8 <OSFlagAccept+0x24c>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   4fdbc:	e0bfff17 	ldw	r2,-4(fp)
   4fdc0:	00c01c04 	movi	r3,112
   4fdc4:	10c00005 	stb	r3,0(r2)
   4fdc8:	e0bff417 	ldw	r2,-48(fp)
   4fdcc:	e0bff915 	stw	r2,-28(fp)
   4fdd0:	e0bff917 	ldw	r2,-28(fp)
   4fdd4:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   4fdd8:	00002506 	br	4fe70 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
   4fddc:	e0bffc17 	ldw	r2,-16(fp)
   4fde0:	1080020b 	ldhu	r2,8(r2)
   4fde4:	0084303a 	nor	r2,zero,r2
   4fde8:	1007883a 	mov	r3,r2
   4fdec:	e0bffd0b 	ldhu	r2,-12(fp)
   4fdf0:	1884703a 	and	r2,r3,r2
   4fdf4:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
   4fdf8:	e0bff30b 	ldhu	r2,-52(fp)
   4fdfc:	10000b26 	beq	r2,zero,4fe2c <OSFlagAccept+0x2b0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   4fe00:	e0bff383 	ldbu	r2,-50(fp)
   4fe04:	10800058 	cmpnei	r2,r2,1
   4fe08:	10000b1e 	bne	r2,zero,4fe38 <OSFlagAccept+0x2bc>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
   4fe0c:	e0bffc17 	ldw	r2,-16(fp)
   4fe10:	10c0020b 	ldhu	r3,8(r2)
   4fe14:	e0bff30b 	ldhu	r2,-52(fp)
   4fe18:	1884b03a 	or	r2,r3,r2
   4fe1c:	1007883a 	mov	r3,r2
   4fe20:	e0bffc17 	ldw	r2,-16(fp)
   4fe24:	10c0020d 	sth	r3,8(r2)
   4fe28:	00000306 	br	4fe38 <OSFlagAccept+0x2bc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   4fe2c:	e0bfff17 	ldw	r2,-4(fp)
   4fe30:	00c01c04 	movi	r3,112
   4fe34:	10c00005 	stb	r3,0(r2)
   4fe38:	e0bff417 	ldw	r2,-48(fp)
   4fe3c:	e0bffa15 	stw	r2,-24(fp)
   4fe40:	e0bffa17 	ldw	r2,-24(fp)
   4fe44:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   4fe48:	00000906 	br	4fe70 <OSFlagAccept+0x2f4>
   4fe4c:	e0bff417 	ldw	r2,-48(fp)
   4fe50:	e0bffb15 	stw	r2,-20(fp)
   4fe54:	e0bffb17 	ldw	r2,-20(fp)
   4fe58:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
   4fe5c:	e03ff30d 	sth	zero,-52(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
   4fe60:	e0bfff17 	ldw	r2,-4(fp)
   4fe64:	00c01bc4 	movi	r3,111
   4fe68:	10c00005 	stb	r3,0(r2)
             break;
   4fe6c:	0001883a 	nop
    }
    return (flags_rdy);
   4fe70:	e0bff30b 	ldhu	r2,-52(fp)
}
   4fe74:	e037883a 	mov	sp,fp
   4fe78:	df000017 	ldw	fp,0(sp)
   4fe7c:	dec00104 	addi	sp,sp,4
   4fe80:	f800283a 	ret

0004fe84 <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
   4fe84:	defff804 	addi	sp,sp,-32
   4fe88:	df000715 	stw	fp,28(sp)
   4fe8c:	df000704 	addi	fp,sp,28
   4fe90:	2005883a 	mov	r2,r4
   4fe94:	e17fff15 	stw	r5,-4(fp)
   4fe98:	e0bffe0d 	sth	r2,-8(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
   4fe9c:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
   4fea0:	e0bfff17 	ldw	r2,-4(fp)
   4fea4:	1000021e 	bne	r2,zero,4feb0 <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
   4fea8:	0005883a 	mov	r2,zero
   4feac:	00003b06 	br	4ff9c <OSFlagCreate+0x118>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
   4feb0:	008001b4 	movhi	r2,6
   4feb4:	10ad4f04 	addi	r2,r2,-19140
   4feb8:	10800003 	ldbu	r2,0(r2)
   4febc:	10803fcc 	andi	r2,r2,255
   4fec0:	10000526 	beq	r2,zero,4fed8 <OSFlagCreate+0x54>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
   4fec4:	e0bfff17 	ldw	r2,-4(fp)
   4fec8:	00c00404 	movi	r3,16
   4fecc:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAG_GRP *)0);
   4fed0:	0005883a 	mov	r2,zero
   4fed4:	00003106 	br	4ff9c <OSFlagCreate+0x118>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4fed8:	0005303a 	rdctl	r2,status
   4fedc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4fee0:	e0fffb17 	ldw	r3,-20(fp)
   4fee4:	00bfff84 	movi	r2,-2
   4fee8:	1884703a 	and	r2,r3,r2
   4feec:	1001703a 	wrctl	status,r2
  
  return context;
   4fef0:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   4fef4:	e0bff915 	stw	r2,-28(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
   4fef8:	008001b4 	movhi	r2,6
   4fefc:	10ad5204 	addi	r2,r2,-19128
   4ff00:	10800017 	ldw	r2,0(r2)
   4ff04:	e0bffa15 	stw	r2,-24(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
   4ff08:	e0bffa17 	ldw	r2,-24(fp)
   4ff0c:	10001b26 	beq	r2,zero,4ff7c <OSFlagCreate+0xf8>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
   4ff10:	008001b4 	movhi	r2,6
   4ff14:	10ad5204 	addi	r2,r2,-19128
   4ff18:	10800017 	ldw	r2,0(r2)
   4ff1c:	10c00117 	ldw	r3,4(r2)
   4ff20:	008001b4 	movhi	r2,6
   4ff24:	10ad5204 	addi	r2,r2,-19128
   4ff28:	10c00015 	stw	r3,0(r2)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
   4ff2c:	e0bffa17 	ldw	r2,-24(fp)
   4ff30:	00c00144 	movi	r3,5
   4ff34:	10c00005 	stb	r3,0(r2)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
   4ff38:	e0bffa17 	ldw	r2,-24(fp)
   4ff3c:	e0fffe0b 	ldhu	r3,-8(fp)
   4ff40:	10c0020d 	sth	r3,8(r2)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
   4ff44:	e0bffa17 	ldw	r2,-24(fp)
   4ff48:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
   4ff4c:	e0bffa17 	ldw	r2,-24(fp)
   4ff50:	00c00fc4 	movi	r3,63
   4ff54:	10c00285 	stb	r3,10(r2)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   4ff58:	e0bffa17 	ldw	r2,-24(fp)
   4ff5c:	100002c5 	stb	zero,11(r2)
   4ff60:	e0bff917 	ldw	r2,-28(fp)
   4ff64:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4ff68:	e0bffc17 	ldw	r2,-16(fp)
   4ff6c:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
   4ff70:	e0bfff17 	ldw	r2,-4(fp)
   4ff74:	10000005 	stb	zero,0(r2)
   4ff78:	00000706 	br	4ff98 <OSFlagCreate+0x114>
   4ff7c:	e0bff917 	ldw	r2,-28(fp)
   4ff80:	e0bffd15 	stw	r2,-12(fp)
   4ff84:	e0bffd17 	ldw	r2,-12(fp)
   4ff88:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
   4ff8c:	e0bfff17 	ldw	r2,-4(fp)
   4ff90:	00c01c84 	movi	r3,114
   4ff94:	10c00005 	stb	r3,0(r2)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
   4ff98:	e0bffa17 	ldw	r2,-24(fp)
}
   4ff9c:	e037883a 	mov	sp,fp
   4ffa0:	df000017 	ldw	fp,0(sp)
   4ffa4:	dec00104 	addi	sp,sp,4
   4ffa8:	f800283a 	ret

0004ffac <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
   4ffac:	defff204 	addi	sp,sp,-56
   4ffb0:	dfc00d15 	stw	ra,52(sp)
   4ffb4:	df000c15 	stw	fp,48(sp)
   4ffb8:	df000c04 	addi	fp,sp,48
   4ffbc:	e13ffd15 	stw	r4,-12(fp)
   4ffc0:	2805883a 	mov	r2,r5
   4ffc4:	e1bfff15 	stw	r6,-4(fp)
   4ffc8:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   4ffcc:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   4ffd0:	e0bfff17 	ldw	r2,-4(fp)
   4ffd4:	1000021e 	bne	r2,zero,4ffe0 <OSFlagDel+0x34>
        return (pgrp);
   4ffd8:	e0bffd17 	ldw	r2,-12(fp)
   4ffdc:	00008a06 	br	50208 <OSFlagDel+0x25c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   4ffe0:	e0bffd17 	ldw	r2,-12(fp)
   4ffe4:	1000051e 	bne	r2,zero,4fffc <OSFlagDel+0x50>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   4ffe8:	e0bfff17 	ldw	r2,-4(fp)
   4ffec:	00c01b84 	movi	r3,110
   4fff0:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   4fff4:	e0bffd17 	ldw	r2,-12(fp)
   4fff8:	00008306 	br	50208 <OSFlagDel+0x25c>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   4fffc:	008001b4 	movhi	r2,6
   50000:	10ad4f04 	addi	r2,r2,-19140
   50004:	10800003 	ldbu	r2,0(r2)
   50008:	10803fcc 	andi	r2,r2,255
   5000c:	10000526 	beq	r2,zero,50024 <OSFlagDel+0x78>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
   50010:	e0bfff17 	ldw	r2,-4(fp)
   50014:	00c003c4 	movi	r3,15
   50018:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   5001c:	e0bffd17 	ldw	r2,-12(fp)
   50020:	00007906 	br	50208 <OSFlagDel+0x25c>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
   50024:	e0bffd17 	ldw	r2,-12(fp)
   50028:	10800003 	ldbu	r2,0(r2)
   5002c:	10803fcc 	andi	r2,r2,255
   50030:	10800160 	cmpeqi	r2,r2,5
   50034:	1000051e 	bne	r2,zero,5004c <OSFlagDel+0xa0>
        *perr = OS_ERR_EVENT_TYPE;
   50038:	e0bfff17 	ldw	r2,-4(fp)
   5003c:	00c00044 	movi	r3,1
   50040:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   50044:	e0bffd17 	ldw	r2,-12(fp)
   50048:	00006f06 	br	50208 <OSFlagDel+0x25c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   5004c:	0005303a 	rdctl	r2,status
   50050:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   50054:	e0fff817 	ldw	r3,-32(fp)
   50058:	00bfff84 	movi	r2,-2
   5005c:	1884703a 	and	r2,r3,r2
   50060:	1001703a 	wrctl	status,r2
  
  return context;
   50064:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   50068:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
   5006c:	e0bffd17 	ldw	r2,-12(fp)
   50070:	10800117 	ldw	r2,4(r2)
   50074:	10000326 	beq	r2,zero,50084 <OSFlagDel+0xd8>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   50078:	00800044 	movi	r2,1
   5007c:	e0bff405 	stb	r2,-48(fp)
   50080:	00000106 	br	50088 <OSFlagDel+0xdc>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   50084:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
   50088:	e0bffe03 	ldbu	r2,-8(fp)
   5008c:	10000326 	beq	r2,zero,5009c <OSFlagDel+0xf0>
   50090:	10800060 	cmpeqi	r2,r2,1
   50094:	1000271e 	bne	r2,zero,50134 <OSFlagDel+0x188>
   50098:	00005006 	br	501dc <OSFlagDel+0x230>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
   5009c:	e0bff403 	ldbu	r2,-48(fp)
   500a0:	10001a1e 	bne	r2,zero,5010c <OSFlagDel+0x160>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
   500a4:	e0bffd17 	ldw	r2,-12(fp)
   500a8:	00c00fc4 	movi	r3,63
   500ac:	10c00285 	stb	r3,10(r2)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   500b0:	e0bffd17 	ldw	r2,-12(fp)
   500b4:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   500b8:	e0bffd17 	ldw	r2,-12(fp)
   500bc:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
   500c0:	008001b4 	movhi	r2,6
   500c4:	10ad5204 	addi	r2,r2,-19128
   500c8:	10c00017 	ldw	r3,0(r2)
   500cc:	e0bffd17 	ldw	r2,-12(fp)
   500d0:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
   500d4:	e0bffd17 	ldw	r2,-12(fp)
   500d8:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
   500dc:	008001b4 	movhi	r2,6
   500e0:	10ad5204 	addi	r2,r2,-19128
   500e4:	e0fffd17 	ldw	r3,-12(fp)
   500e8:	10c00015 	stw	r3,0(r2)
   500ec:	e0bff717 	ldw	r2,-36(fp)
   500f0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   500f4:	e0bff917 	ldw	r2,-28(fp)
   500f8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
   500fc:	e0bfff17 	ldw	r2,-4(fp)
   50100:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
   50104:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
                 pgrp_return          = pgrp;
             }
             break;
   50108:	00003e06 	br	50204 <OSFlagDel+0x258>
   5010c:	e0bff717 	ldw	r2,-36(fp)
   50110:	e0bffa15 	stw	r2,-24(fp)
   50114:	e0bffa17 	ldw	r2,-24(fp)
   50118:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
   5011c:	e0bfff17 	ldw	r2,-4(fp)
   50120:	00c01244 	movi	r3,73
   50124:	10c00005 	stb	r3,0(r2)
                 pgrp_return          = pgrp;
   50128:	e0bffd17 	ldw	r2,-12(fp)
   5012c:	e0bff615 	stw	r2,-40(fp)
             }
             break;
   50130:	00003406 	br	50204 <OSFlagDel+0x258>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   50134:	e0bffd17 	ldw	r2,-12(fp)
   50138:	10800117 	ldw	r2,4(r2)
   5013c:	e0bff515 	stw	r2,-44(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
   50140:	00000606 	br	5015c <OSFlagDel+0x1b0>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
   50144:	e13ff517 	ldw	r4,-44(fp)
   50148:	000b883a 	mov	r5,zero
   5014c:	00511e80 	call	511e8 <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
   50150:	e0bff517 	ldw	r2,-44(fp)
   50154:	10800017 	ldw	r2,0(r2)
   50158:	e0bff515 	stw	r2,-44(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
   5015c:	e0bff517 	ldw	r2,-44(fp)
   50160:	103ff81e 	bne	r2,zero,50144 <__alt_data_end+0xfffdf404>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
   50164:	e0bffd17 	ldw	r2,-12(fp)
   50168:	00c00fc4 	movi	r3,63
   5016c:	10c00285 	stb	r3,10(r2)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   50170:	e0bffd17 	ldw	r2,-12(fp)
   50174:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   50178:	e0bffd17 	ldw	r2,-12(fp)
   5017c:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
   50180:	008001b4 	movhi	r2,6
   50184:	10ad5204 	addi	r2,r2,-19128
   50188:	10c00017 	ldw	r3,0(r2)
   5018c:	e0bffd17 	ldw	r2,-12(fp)
   50190:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
   50194:	e0bffd17 	ldw	r2,-12(fp)
   50198:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
   5019c:	008001b4 	movhi	r2,6
   501a0:	10ad5204 	addi	r2,r2,-19128
   501a4:	e0fffd17 	ldw	r3,-12(fp)
   501a8:	10c00015 	stw	r3,0(r2)
   501ac:	e0bff717 	ldw	r2,-36(fp)
   501b0:	e0bffb15 	stw	r2,-20(fp)
   501b4:	e0bffb17 	ldw	r2,-20(fp)
   501b8:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   501bc:	e0bff403 	ldbu	r2,-48(fp)
   501c0:	10800058 	cmpnei	r2,r2,1
   501c4:	1000011e 	bne	r2,zero,501cc <OSFlagDel+0x220>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   501c8:	004f3280 	call	4f328 <OS_Sched>
             }
             *perr = OS_ERR_NONE;
   501cc:	e0bfff17 	ldw	r2,-4(fp)
   501d0:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
   501d4:	e03ff615 	stw	zero,-40(fp)
             break;
   501d8:	00000a06 	br	50204 <OSFlagDel+0x258>
   501dc:	e0bff717 	ldw	r2,-36(fp)
   501e0:	e0bffc15 	stw	r2,-16(fp)
   501e4:	e0bffc17 	ldw	r2,-16(fp)
   501e8:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
   501ec:	e0bfff17 	ldw	r2,-4(fp)
   501f0:	00c001c4 	movi	r3,7
   501f4:	10c00005 	stb	r3,0(r2)
             pgrp_return          = pgrp;
   501f8:	e0bffd17 	ldw	r2,-12(fp)
   501fc:	e0bff615 	stw	r2,-40(fp)
             break;
   50200:	0001883a 	nop
    }
    return (pgrp_return);
   50204:	e0bff617 	ldw	r2,-40(fp)
}
   50208:	e037883a 	mov	sp,fp
   5020c:	dfc00117 	ldw	ra,4(sp)
   50210:	df000017 	ldw	fp,0(sp)
   50214:	dec00204 	addi	sp,sp,8
   50218:	f800283a 	ret

0005021c <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
   5021c:	defff604 	addi	sp,sp,-40
   50220:	dfc00915 	stw	ra,36(sp)
   50224:	df000815 	stw	fp,32(sp)
   50228:	df000804 	addi	fp,sp,32
   5022c:	e13ffd15 	stw	r4,-12(fp)
   50230:	e17ffe15 	stw	r5,-8(fp)
   50234:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   50238:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   5023c:	e0bfff17 	ldw	r2,-4(fp)
   50240:	1000021e 	bne	r2,zero,5024c <OSFlagNameGet+0x30>
        return (0);
   50244:	0005883a 	mov	r2,zero
   50248:	00003b06 	br	50338 <OSFlagNameGet+0x11c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
   5024c:	e0bffd17 	ldw	r2,-12(fp)
   50250:	1000051e 	bne	r2,zero,50268 <OSFlagNameGet+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   50254:	e0bfff17 	ldw	r2,-4(fp)
   50258:	00c01b84 	movi	r3,110
   5025c:	10c00005 	stb	r3,0(r2)
        return (0);
   50260:	0005883a 	mov	r2,zero
   50264:	00003406 	br	50338 <OSFlagNameGet+0x11c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   50268:	e0bffe17 	ldw	r2,-8(fp)
   5026c:	1000051e 	bne	r2,zero,50284 <OSFlagNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   50270:	e0bfff17 	ldw	r2,-4(fp)
   50274:	00c00304 	movi	r3,12
   50278:	10c00005 	stb	r3,0(r2)
        return (0);
   5027c:	0005883a 	mov	r2,zero
   50280:	00002d06 	br	50338 <OSFlagNameGet+0x11c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   50284:	008001b4 	movhi	r2,6
   50288:	10ad4f04 	addi	r2,r2,-19140
   5028c:	10800003 	ldbu	r2,0(r2)
   50290:	10803fcc 	andi	r2,r2,255
   50294:	10000526 	beq	r2,zero,502ac <OSFlagNameGet+0x90>
        *perr = OS_ERR_NAME_GET_ISR;
   50298:	e0bfff17 	ldw	r2,-4(fp)
   5029c:	00c00444 	movi	r3,17
   502a0:	10c00005 	stb	r3,0(r2)
        return (0);
   502a4:	0005883a 	mov	r2,zero
   502a8:	00002306 	br	50338 <OSFlagNameGet+0x11c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   502ac:	0005303a 	rdctl	r2,status
   502b0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   502b4:	e0fffa17 	ldw	r3,-24(fp)
   502b8:	00bfff84 	movi	r2,-2
   502bc:	1884703a 	and	r2,r3,r2
   502c0:	1001703a 	wrctl	status,r2
  
  return context;
   502c4:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   502c8:	e0bff815 	stw	r2,-32(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
   502cc:	e0bffd17 	ldw	r2,-12(fp)
   502d0:	10800003 	ldbu	r2,0(r2)
   502d4:	10803fcc 	andi	r2,r2,255
   502d8:	10800160 	cmpeqi	r2,r2,5
   502dc:	1000091e 	bne	r2,zero,50304 <OSFlagNameGet+0xe8>
   502e0:	e0bff817 	ldw	r2,-32(fp)
   502e4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   502e8:	e0bffb17 	ldw	r2,-20(fp)
   502ec:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
   502f0:	e0bfff17 	ldw	r2,-4(fp)
   502f4:	00c00044 	movi	r3,1
   502f8:	10c00005 	stb	r3,0(r2)
        return (0);
   502fc:	0005883a 	mov	r2,zero
   50300:	00000d06 	br	50338 <OSFlagNameGet+0x11c>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
   50304:	e0bffd17 	ldw	r2,-12(fp)
   50308:	10800284 	addi	r2,r2,10
   5030c:	e13ffe17 	ldw	r4,-8(fp)
   50310:	100b883a 	mov	r5,r2
   50314:	004f4640 	call	4f464 <OS_StrCopy>
   50318:	e0bff905 	stb	r2,-28(fp)
   5031c:	e0bff817 	ldw	r2,-32(fp)
   50320:	e0bffc15 	stw	r2,-16(fp)
   50324:	e0bffc17 	ldw	r2,-16(fp)
   50328:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   5032c:	e0bfff17 	ldw	r2,-4(fp)
   50330:	10000005 	stb	zero,0(r2)
    return (len);
   50334:	e0bff903 	ldbu	r2,-28(fp)
}
   50338:	e037883a 	mov	sp,fp
   5033c:	dfc00117 	ldw	ra,4(sp)
   50340:	df000017 	ldw	fp,0(sp)
   50344:	dec00204 	addi	sp,sp,8
   50348:	f800283a 	ret

0005034c <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
   5034c:	defff504 	addi	sp,sp,-44
   50350:	dfc00a15 	stw	ra,40(sp)
   50354:	df000915 	stw	fp,36(sp)
   50358:	df000904 	addi	fp,sp,36
   5035c:	e13ffd15 	stw	r4,-12(fp)
   50360:	e17ffe15 	stw	r5,-8(fp)
   50364:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   50368:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   5036c:	e0bfff17 	ldw	r2,-4(fp)
   50370:	1000011e 	bne	r2,zero,50378 <OSFlagNameSet+0x2c>
        return;
   50374:	00004406 	br	50488 <OSFlagNameSet+0x13c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
   50378:	e0bffd17 	ldw	r2,-12(fp)
   5037c:	1000041e 	bne	r2,zero,50390 <OSFlagNameSet+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   50380:	e0bfff17 	ldw	r2,-4(fp)
   50384:	00c01b84 	movi	r3,110
   50388:	10c00005 	stb	r3,0(r2)
        return;
   5038c:	00003e06 	br	50488 <OSFlagNameSet+0x13c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   50390:	e0bffe17 	ldw	r2,-8(fp)
   50394:	1000041e 	bne	r2,zero,503a8 <OSFlagNameSet+0x5c>
        *perr = OS_ERR_PNAME_NULL;
   50398:	e0bfff17 	ldw	r2,-4(fp)
   5039c:	00c00304 	movi	r3,12
   503a0:	10c00005 	stb	r3,0(r2)
        return;
   503a4:	00003806 	br	50488 <OSFlagNameSet+0x13c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   503a8:	008001b4 	movhi	r2,6
   503ac:	10ad4f04 	addi	r2,r2,-19140
   503b0:	10800003 	ldbu	r2,0(r2)
   503b4:	10803fcc 	andi	r2,r2,255
   503b8:	10000426 	beq	r2,zero,503cc <OSFlagNameSet+0x80>
        *perr = OS_ERR_NAME_SET_ISR;
   503bc:	e0bfff17 	ldw	r2,-4(fp)
   503c0:	00c00484 	movi	r3,18
   503c4:	10c00005 	stb	r3,0(r2)
        return;
   503c8:	00002f06 	br	50488 <OSFlagNameSet+0x13c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   503cc:	0005303a 	rdctl	r2,status
   503d0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   503d4:	e0fff917 	ldw	r3,-28(fp)
   503d8:	00bfff84 	movi	r2,-2
   503dc:	1884703a 	and	r2,r3,r2
   503e0:	1001703a 	wrctl	status,r2
  
  return context;
   503e4:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   503e8:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
   503ec:	e0bffd17 	ldw	r2,-12(fp)
   503f0:	10800003 	ldbu	r2,0(r2)
   503f4:	10803fcc 	andi	r2,r2,255
   503f8:	10800160 	cmpeqi	r2,r2,5
   503fc:	1000081e 	bne	r2,zero,50420 <OSFlagNameSet+0xd4>
   50400:	e0bff717 	ldw	r2,-36(fp)
   50404:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   50408:	e0bffa17 	ldw	r2,-24(fp)
   5040c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
   50410:	e0bfff17 	ldw	r2,-4(fp)
   50414:	00c00044 	movi	r3,1
   50418:	10c00005 	stb	r3,0(r2)
        return;
   5041c:	00001a06 	br	50488 <OSFlagNameSet+0x13c>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
   50420:	e13ffe17 	ldw	r4,-8(fp)
   50424:	004f4d80 	call	4f4d8 <OS_StrLen>
   50428:	e0bff805 	stb	r2,-32(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
   5042c:	e0bff803 	ldbu	r2,-32(fp)
   50430:	10800830 	cmpltui	r2,r2,32
   50434:	1000081e 	bne	r2,zero,50458 <OSFlagNameSet+0x10c>
   50438:	e0bff717 	ldw	r2,-36(fp)
   5043c:	e0bffb15 	stw	r2,-20(fp)
   50440:	e0bffb17 	ldw	r2,-20(fp)
   50444:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
   50448:	e0bfff17 	ldw	r2,-4(fp)
   5044c:	00c01cc4 	movi	r3,115
   50450:	10c00005 	stb	r3,0(r2)
        return;
   50454:	00000c06 	br	50488 <OSFlagNameSet+0x13c>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
   50458:	e0bffd17 	ldw	r2,-12(fp)
   5045c:	10800284 	addi	r2,r2,10
   50460:	1009883a 	mov	r4,r2
   50464:	e17ffe17 	ldw	r5,-8(fp)
   50468:	004f4640 	call	4f464 <OS_StrCopy>
   5046c:	e0bff717 	ldw	r2,-36(fp)
   50470:	e0bffc15 	stw	r2,-16(fp)
   50474:	e0bffc17 	ldw	r2,-16(fp)
   50478:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   5047c:	e0bfff17 	ldw	r2,-4(fp)
   50480:	10000005 	stb	zero,0(r2)
    return;
   50484:	0001883a 	nop
}
   50488:	e037883a 	mov	sp,fp
   5048c:	dfc00117 	ldw	ra,4(sp)
   50490:	df000017 	ldw	fp,0(sp)
   50494:	dec00204 	addi	sp,sp,8
   50498:	f800283a 	ret

0005049c <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
   5049c:	deffe204 	addi	sp,sp,-120
   504a0:	dfc01d15 	stw	ra,116(sp)
   504a4:	df001c15 	stw	fp,112(sp)
   504a8:	df001c04 	addi	fp,sp,112
   504ac:	e13ffc15 	stw	r4,-16(fp)
   504b0:	2809883a 	mov	r4,r5
   504b4:	3007883a 	mov	r3,r6
   504b8:	3805883a 	mov	r2,r7
   504bc:	e13ffd0d 	sth	r4,-12(fp)
   504c0:	e0fffe05 	stb	r3,-8(fp)
   504c4:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   504c8:	e03fe615 	stw	zero,-104(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   504cc:	e0800217 	ldw	r2,8(fp)
   504d0:	1000021e 	bne	r2,zero,504dc <OSFlagPend+0x40>
        return ((OS_FLAGS)0);
   504d4:	0005883a 	mov	r2,zero
   504d8:	00016706 	br	50a78 <OSFlagPend+0x5dc>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   504dc:	e0bffc17 	ldw	r2,-16(fp)
   504e0:	1000051e 	bne	r2,zero,504f8 <OSFlagPend+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   504e4:	e0800217 	ldw	r2,8(fp)
   504e8:	00c01b84 	movi	r3,110
   504ec:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   504f0:	0005883a 	mov	r2,zero
   504f4:	00016006 	br	50a78 <OSFlagPend+0x5dc>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   504f8:	008001b4 	movhi	r2,6
   504fc:	10ad4f04 	addi	r2,r2,-19140
   50500:	10800003 	ldbu	r2,0(r2)
   50504:	10803fcc 	andi	r2,r2,255
   50508:	10000526 	beq	r2,zero,50520 <OSFlagPend+0x84>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
   5050c:	e0800217 	ldw	r2,8(fp)
   50510:	00c00084 	movi	r3,2
   50514:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   50518:	0005883a 	mov	r2,zero
   5051c:	00015606 	br	50a78 <OSFlagPend+0x5dc>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
   50520:	008001b4 	movhi	r2,6
   50524:	10ad4104 	addi	r2,r2,-19196
   50528:	10800003 	ldbu	r2,0(r2)
   5052c:	10803fcc 	andi	r2,r2,255
   50530:	10000526 	beq	r2,zero,50548 <OSFlagPend+0xac>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
   50534:	e0800217 	ldw	r2,8(fp)
   50538:	00c00344 	movi	r3,13
   5053c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   50540:	0005883a 	mov	r2,zero
   50544:	00014c06 	br	50a78 <OSFlagPend+0x5dc>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
   50548:	e0bffc17 	ldw	r2,-16(fp)
   5054c:	10800003 	ldbu	r2,0(r2)
   50550:	10803fcc 	andi	r2,r2,255
   50554:	10800160 	cmpeqi	r2,r2,5
   50558:	1000051e 	bne	r2,zero,50570 <OSFlagPend+0xd4>
        *perr = OS_ERR_EVENT_TYPE;
   5055c:	e0800217 	ldw	r2,8(fp)
   50560:	00c00044 	movi	r3,1
   50564:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   50568:	0005883a 	mov	r2,zero
   5056c:	00014206 	br	50a78 <OSFlagPend+0x5dc>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
   50570:	e0fffe03 	ldbu	r3,-8(fp)
   50574:	00bfe004 	movi	r2,-128
   50578:	1884703a 	and	r2,r3,r2
   5057c:	e0bfe705 	stb	r2,-100(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
   50580:	e0bfe703 	ldbu	r2,-100(fp)
   50584:	10000626 	beq	r2,zero,505a0 <OSFlagPend+0x104>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
   50588:	e0bffe03 	ldbu	r2,-8(fp)
   5058c:	10801fcc 	andi	r2,r2,127
   50590:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
   50594:	00800044 	movi	r2,1
   50598:	e0bfe505 	stb	r2,-108(fp)
   5059c:	00000106 	br	505a4 <OSFlagPend+0x108>
    } else {
        consume    = OS_FALSE;
   505a0:	e03fe505 	stb	zero,-108(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   505a4:	0005303a 	rdctl	r2,status
   505a8:	e0bfe915 	stw	r2,-92(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   505ac:	e0ffe917 	ldw	r3,-92(fp)
   505b0:	00bfff84 	movi	r2,-2
   505b4:	1884703a 	and	r2,r3,r2
   505b8:	1001703a 	wrctl	status,r2
  
  return context;
   505bc:	e0bfe917 	ldw	r2,-92(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
   505c0:	e0bfe615 	stw	r2,-104(fp)
    switch (wait_type) {
   505c4:	e0bffe03 	ldbu	r2,-8(fp)
   505c8:	10c00060 	cmpeqi	r3,r2,1
   505cc:	1800921e 	bne	r3,zero,50818 <OSFlagPend+0x37c>
   505d0:	10c00088 	cmpgei	r3,r2,2
   505d4:	1800021e 	bne	r3,zero,505e0 <OSFlagPend+0x144>
   505d8:	10006126 	beq	r2,zero,50760 <OSFlagPend+0x2c4>
   505dc:	0000bb06 	br	508cc <OSFlagPend+0x430>
   505e0:	10c000a0 	cmpeqi	r3,r2,2
   505e4:	1800031e 	bne	r3,zero,505f4 <OSFlagPend+0x158>
   505e8:	108000e0 	cmpeqi	r2,r2,3
   505ec:	10002f1e 	bne	r2,zero,506ac <OSFlagPend+0x210>
   505f0:	0000b606 	br	508cc <OSFlagPend+0x430>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
   505f4:	e0bffc17 	ldw	r2,-16(fp)
   505f8:	10c0020b 	ldhu	r3,8(r2)
   505fc:	e0bffd0b 	ldhu	r2,-12(fp)
   50600:	1884703a 	and	r2,r3,r2
   50604:	e0bfe78d 	sth	r2,-98(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   50608:	e0ffe78b 	ldhu	r3,-98(fp)
   5060c:	e0bffd0b 	ldhu	r2,-12(fp)
   50610:	1880191e 	bne	r3,r2,50678 <OSFlagPend+0x1dc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   50614:	e0bfe503 	ldbu	r2,-108(fp)
   50618:	10800058 	cmpnei	r2,r2,1
   5061c:	1000091e 	bne	r2,zero,50644 <OSFlagPend+0x1a8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
   50620:	e0bffc17 	ldw	r2,-16(fp)
   50624:	1080020b 	ldhu	r2,8(r2)
   50628:	1007883a 	mov	r3,r2
   5062c:	e0bfe78b 	ldhu	r2,-98(fp)
   50630:	0084303a 	nor	r2,zero,r2
   50634:	1884703a 	and	r2,r3,r2
   50638:	1007883a 	mov	r3,r2
   5063c:	e0bffc17 	ldw	r2,-16(fp)
   50640:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   50644:	008001b4 	movhi	r2,6
   50648:	10ad5004 	addi	r2,r2,-19136
   5064c:	10800017 	ldw	r2,0(r2)
   50650:	e0ffe78b 	ldhu	r3,-98(fp)
   50654:	10c00b0d 	sth	r3,44(r2)
   50658:	e0bfe617 	ldw	r2,-104(fp)
   5065c:	e0bfea15 	stw	r2,-88(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   50660:	e0bfea17 	ldw	r2,-88(fp)
   50664:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   50668:	e0800217 	ldw	r2,8(fp)
   5066c:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   50670:	e0bfe78b 	ldhu	r2,-98(fp)
   50674:	00010006 	br	50a78 <OSFlagPend+0x5dc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   50678:	e1bffd0b 	ldhu	r6,-12(fp)
   5067c:	e0fffe03 	ldbu	r3,-8(fp)
   50680:	e0bfff0b 	ldhu	r2,-4(fp)
   50684:	e17ff704 	addi	r5,fp,-36
   50688:	d8800015 	stw	r2,0(sp)
   5068c:	e13ffc17 	ldw	r4,-16(fp)
   50690:	180f883a 	mov	r7,r3
   50694:	0050f400 	call	50f40 <OS_FlagBlock>
   50698:	e0bfe617 	ldw	r2,-104(fp)
   5069c:	e0bfeb15 	stw	r2,-84(fp)
   506a0:	e0bfeb17 	ldw	r2,-84(fp)
   506a4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   506a8:	00009206 	br	508f4 <OSFlagPend+0x458>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
   506ac:	e0bffc17 	ldw	r2,-16(fp)
   506b0:	10c0020b 	ldhu	r3,8(r2)
   506b4:	e0bffd0b 	ldhu	r2,-12(fp)
   506b8:	1884703a 	and	r2,r3,r2
   506bc:	e0bfe78d 	sth	r2,-98(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
   506c0:	e0bfe78b 	ldhu	r2,-98(fp)
   506c4:	10001926 	beq	r2,zero,5072c <OSFlagPend+0x290>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   506c8:	e0bfe503 	ldbu	r2,-108(fp)
   506cc:	10800058 	cmpnei	r2,r2,1
   506d0:	1000091e 	bne	r2,zero,506f8 <OSFlagPend+0x25c>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
   506d4:	e0bffc17 	ldw	r2,-16(fp)
   506d8:	1080020b 	ldhu	r2,8(r2)
   506dc:	1007883a 	mov	r3,r2
   506e0:	e0bfe78b 	ldhu	r2,-98(fp)
   506e4:	0084303a 	nor	r2,zero,r2
   506e8:	1884703a 	and	r2,r3,r2
   506ec:	1007883a 	mov	r3,r2
   506f0:	e0bffc17 	ldw	r2,-16(fp)
   506f4:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   506f8:	008001b4 	movhi	r2,6
   506fc:	10ad5004 	addi	r2,r2,-19136
   50700:	10800017 	ldw	r2,0(r2)
   50704:	e0ffe78b 	ldhu	r3,-98(fp)
   50708:	10c00b0d 	sth	r3,44(r2)
   5070c:	e0bfe617 	ldw	r2,-104(fp)
   50710:	e0bfec15 	stw	r2,-80(fp)
   50714:	e0bfec17 	ldw	r2,-80(fp)
   50718:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   5071c:	e0800217 	ldw	r2,8(fp)
   50720:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   50724:	e0bfe78b 	ldhu	r2,-98(fp)
   50728:	0000d306 	br	50a78 <OSFlagPend+0x5dc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   5072c:	e1bffd0b 	ldhu	r6,-12(fp)
   50730:	e0fffe03 	ldbu	r3,-8(fp)
   50734:	e0bfff0b 	ldhu	r2,-4(fp)
   50738:	e17ff704 	addi	r5,fp,-36
   5073c:	d8800015 	stw	r2,0(sp)
   50740:	e13ffc17 	ldw	r4,-16(fp)
   50744:	180f883a 	mov	r7,r3
   50748:	0050f400 	call	50f40 <OS_FlagBlock>
   5074c:	e0bfe617 	ldw	r2,-104(fp)
   50750:	e0bfed15 	stw	r2,-76(fp)
   50754:	e0bfed17 	ldw	r2,-76(fp)
   50758:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   5075c:	00006506 	br	508f4 <OSFlagPend+0x458>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
   50760:	e0bffc17 	ldw	r2,-16(fp)
   50764:	1080020b 	ldhu	r2,8(r2)
   50768:	0084303a 	nor	r2,zero,r2
   5076c:	1007883a 	mov	r3,r2
   50770:	e0bffd0b 	ldhu	r2,-12(fp)
   50774:	1884703a 	and	r2,r3,r2
   50778:	e0bfe78d 	sth	r2,-98(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   5077c:	e0ffe78b 	ldhu	r3,-98(fp)
   50780:	e0bffd0b 	ldhu	r2,-12(fp)
   50784:	1880171e 	bne	r3,r2,507e4 <OSFlagPend+0x348>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   50788:	e0bfe503 	ldbu	r2,-108(fp)
   5078c:	10800058 	cmpnei	r2,r2,1
   50790:	1000071e 	bne	r2,zero,507b0 <OSFlagPend+0x314>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
   50794:	e0bffc17 	ldw	r2,-16(fp)
   50798:	10c0020b 	ldhu	r3,8(r2)
   5079c:	e0bfe78b 	ldhu	r2,-98(fp)
   507a0:	1884b03a 	or	r2,r3,r2
   507a4:	1007883a 	mov	r3,r2
   507a8:	e0bffc17 	ldw	r2,-16(fp)
   507ac:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   507b0:	008001b4 	movhi	r2,6
   507b4:	10ad5004 	addi	r2,r2,-19136
   507b8:	10800017 	ldw	r2,0(r2)
   507bc:	e0ffe78b 	ldhu	r3,-98(fp)
   507c0:	10c00b0d 	sth	r3,44(r2)
   507c4:	e0bfe617 	ldw	r2,-104(fp)
   507c8:	e0bfee15 	stw	r2,-72(fp)
   507cc:	e0bfee17 	ldw	r2,-72(fp)
   507d0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   507d4:	e0800217 	ldw	r2,8(fp)
   507d8:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   507dc:	e0bfe78b 	ldhu	r2,-98(fp)
   507e0:	0000a506 	br	50a78 <OSFlagPend+0x5dc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   507e4:	e1bffd0b 	ldhu	r6,-12(fp)
   507e8:	e0fffe03 	ldbu	r3,-8(fp)
   507ec:	e0bfff0b 	ldhu	r2,-4(fp)
   507f0:	e17ff704 	addi	r5,fp,-36
   507f4:	d8800015 	stw	r2,0(sp)
   507f8:	e13ffc17 	ldw	r4,-16(fp)
   507fc:	180f883a 	mov	r7,r3
   50800:	0050f400 	call	50f40 <OS_FlagBlock>
   50804:	e0bfe617 	ldw	r2,-104(fp)
   50808:	e0bfef15 	stw	r2,-68(fp)
   5080c:	e0bfef17 	ldw	r2,-68(fp)
   50810:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   50814:	00003706 	br	508f4 <OSFlagPend+0x458>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
   50818:	e0bffc17 	ldw	r2,-16(fp)
   5081c:	1080020b 	ldhu	r2,8(r2)
   50820:	0084303a 	nor	r2,zero,r2
   50824:	1007883a 	mov	r3,r2
   50828:	e0bffd0b 	ldhu	r2,-12(fp)
   5082c:	1884703a 	and	r2,r3,r2
   50830:	e0bfe78d 	sth	r2,-98(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
   50834:	e0bfe78b 	ldhu	r2,-98(fp)
   50838:	10001726 	beq	r2,zero,50898 <OSFlagPend+0x3fc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   5083c:	e0bfe503 	ldbu	r2,-108(fp)
   50840:	10800058 	cmpnei	r2,r2,1
   50844:	1000071e 	bne	r2,zero,50864 <OSFlagPend+0x3c8>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
   50848:	e0bffc17 	ldw	r2,-16(fp)
   5084c:	10c0020b 	ldhu	r3,8(r2)
   50850:	e0bfe78b 	ldhu	r2,-98(fp)
   50854:	1884b03a 	or	r2,r3,r2
   50858:	1007883a 	mov	r3,r2
   5085c:	e0bffc17 	ldw	r2,-16(fp)
   50860:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   50864:	008001b4 	movhi	r2,6
   50868:	10ad5004 	addi	r2,r2,-19136
   5086c:	10800017 	ldw	r2,0(r2)
   50870:	e0ffe78b 	ldhu	r3,-98(fp)
   50874:	10c00b0d 	sth	r3,44(r2)
   50878:	e0bfe617 	ldw	r2,-104(fp)
   5087c:	e0bff015 	stw	r2,-64(fp)
   50880:	e0bff017 	ldw	r2,-64(fp)
   50884:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   50888:	e0800217 	ldw	r2,8(fp)
   5088c:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   50890:	e0bfe78b 	ldhu	r2,-98(fp)
   50894:	00007806 	br	50a78 <OSFlagPend+0x5dc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   50898:	e1bffd0b 	ldhu	r6,-12(fp)
   5089c:	e0fffe03 	ldbu	r3,-8(fp)
   508a0:	e0bfff0b 	ldhu	r2,-4(fp)
   508a4:	e17ff704 	addi	r5,fp,-36
   508a8:	d8800015 	stw	r2,0(sp)
   508ac:	e13ffc17 	ldw	r4,-16(fp)
   508b0:	180f883a 	mov	r7,r3
   508b4:	0050f400 	call	50f40 <OS_FlagBlock>
   508b8:	e0bfe617 	ldw	r2,-104(fp)
   508bc:	e0bff115 	stw	r2,-60(fp)
   508c0:	e0bff117 	ldw	r2,-60(fp)
   508c4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   508c8:	00000a06 	br	508f4 <OSFlagPend+0x458>
   508cc:	e0bfe617 	ldw	r2,-104(fp)
   508d0:	e0bff215 	stw	r2,-56(fp)
   508d4:	e0bff217 	ldw	r2,-56(fp)
   508d8:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
   508dc:	e03fe78d 	sth	zero,-98(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
   508e0:	e0800217 	ldw	r2,8(fp)
   508e4:	00c01bc4 	movi	r3,111
   508e8:	10c00005 	stb	r3,0(r2)
             return (flags_rdy);
   508ec:	e0bfe78b 	ldhu	r2,-98(fp)
   508f0:	00006106 	br	50a78 <OSFlagPend+0x5dc>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
   508f4:	004f3280 	call	4f328 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   508f8:	0005303a 	rdctl	r2,status
   508fc:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   50900:	e0fff317 	ldw	r3,-52(fp)
   50904:	00bfff84 	movi	r2,-2
   50908:	1884703a 	and	r2,r3,r2
   5090c:	1001703a 	wrctl	status,r2
  
  return context;
   50910:	e0bff317 	ldw	r2,-52(fp)
    OS_ENTER_CRITICAL();
   50914:	e0bfe615 	stw	r2,-104(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
   50918:	008001b4 	movhi	r2,6
   5091c:	10ad5004 	addi	r2,r2,-19136
   50920:	10800017 	ldw	r2,0(r2)
   50924:	10800c43 	ldbu	r2,49(r2)
   50928:	10803fcc 	andi	r2,r2,255
   5092c:	10002226 	beq	r2,zero,509b8 <OSFlagPend+0x51c>
        pend_stat                = OSTCBCur->OSTCBStatPend;
   50930:	008001b4 	movhi	r2,6
   50934:	10ad5004 	addi	r2,r2,-19136
   50938:	10800017 	ldw	r2,0(r2)
   5093c:	10800c43 	ldbu	r2,49(r2)
   50940:	e0bfe805 	stb	r2,-96(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   50944:	008001b4 	movhi	r2,6
   50948:	10ad5004 	addi	r2,r2,-19136
   5094c:	10800017 	ldw	r2,0(r2)
   50950:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
   50954:	e0bff704 	addi	r2,fp,-36
   50958:	1009883a 	mov	r4,r2
   5095c:	00512f80 	call	512f8 <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
   50960:	008001b4 	movhi	r2,6
   50964:	10ad5004 	addi	r2,r2,-19136
   50968:	10800017 	ldw	r2,0(r2)
   5096c:	10000c05 	stb	zero,48(r2)
   50970:	e0bfe617 	ldw	r2,-104(fp)
   50974:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   50978:	e0bff417 	ldw	r2,-48(fp)
   5097c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
   50980:	e03fe78d 	sth	zero,-98(fp)
        switch (pend_stat) {
   50984:	e0bfe803 	ldbu	r2,-96(fp)
   50988:	108000a0 	cmpeqi	r2,r2,2
   5098c:	10000426 	beq	r2,zero,509a0 <OSFlagPend+0x504>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
   50990:	e0800217 	ldw	r2,8(fp)
   50994:	00c00384 	movi	r3,14
   50998:	10c00005 	stb	r3,0(r2)
                 break;
   5099c:	00000406 	br	509b0 <OSFlagPend+0x514>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
   509a0:	e0800217 	ldw	r2,8(fp)
   509a4:	00c00284 	movi	r3,10
   509a8:	10c00005 	stb	r3,0(r2)
                 break;
   509ac:	0001883a 	nop
        }
        return (flags_rdy);
   509b0:	e0bfe78b 	ldhu	r2,-98(fp)
   509b4:	00003006 	br	50a78 <OSFlagPend+0x5dc>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
   509b8:	008001b4 	movhi	r2,6
   509bc:	10ad5004 	addi	r2,r2,-19136
   509c0:	10800017 	ldw	r2,0(r2)
   509c4:	10800b0b 	ldhu	r2,44(r2)
   509c8:	e0bfe78d 	sth	r2,-98(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
   509cc:	e0bfe503 	ldbu	r2,-108(fp)
   509d0:	10800058 	cmpnei	r2,r2,1
   509d4:	1000211e 	bne	r2,zero,50a5c <OSFlagPend+0x5c0>
        switch (wait_type) {
   509d8:	e0bffe03 	ldbu	r2,-8(fp)
   509dc:	10001616 	blt	r2,zero,50a38 <OSFlagPend+0x59c>
   509e0:	10c00090 	cmplti	r3,r2,2
   509e4:	18000c1e 	bne	r3,zero,50a18 <OSFlagPend+0x57c>
   509e8:	10800108 	cmpgei	r2,r2,4
   509ec:	1000121e 	bne	r2,zero,50a38 <OSFlagPend+0x59c>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
   509f0:	e0bffc17 	ldw	r2,-16(fp)
   509f4:	1080020b 	ldhu	r2,8(r2)
   509f8:	1007883a 	mov	r3,r2
   509fc:	e0bfe78b 	ldhu	r2,-98(fp)
   50a00:	0084303a 	nor	r2,zero,r2
   50a04:	1884703a 	and	r2,r3,r2
   50a08:	1007883a 	mov	r3,r2
   50a0c:	e0bffc17 	ldw	r2,-16(fp)
   50a10:	10c0020d 	sth	r3,8(r2)
                 break;
   50a14:	00001106 	br	50a5c <OSFlagPend+0x5c0>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
   50a18:	e0bffc17 	ldw	r2,-16(fp)
   50a1c:	10c0020b 	ldhu	r3,8(r2)
   50a20:	e0bfe78b 	ldhu	r2,-98(fp)
   50a24:	1884b03a 	or	r2,r3,r2
   50a28:	1007883a 	mov	r3,r2
   50a2c:	e0bffc17 	ldw	r2,-16(fp)
   50a30:	10c0020d 	sth	r3,8(r2)
                 break;
   50a34:	00000906 	br	50a5c <OSFlagPend+0x5c0>
   50a38:	e0bfe617 	ldw	r2,-104(fp)
   50a3c:	e0bff515 	stw	r2,-44(fp)
   50a40:	e0bff517 	ldw	r2,-44(fp)
   50a44:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
   50a48:	e0800217 	ldw	r2,8(fp)
   50a4c:	00c01bc4 	movi	r3,111
   50a50:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
   50a54:	0005883a 	mov	r2,zero
   50a58:	00000706 	br	50a78 <OSFlagPend+0x5dc>
   50a5c:	e0bfe617 	ldw	r2,-104(fp)
   50a60:	e0bff615 	stw	r2,-40(fp)
   50a64:	e0bff617 	ldw	r2,-40(fp)
   50a68:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
   50a6c:	e0800217 	ldw	r2,8(fp)
   50a70:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
   50a74:	e0bfe78b 	ldhu	r2,-98(fp)
}
   50a78:	e037883a 	mov	sp,fp
   50a7c:	dfc00117 	ldw	ra,4(sp)
   50a80:	df000017 	ldw	fp,0(sp)
   50a84:	dec00204 	addi	sp,sp,8
   50a88:	f800283a 	ret

00050a8c <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
   50a8c:	defffb04 	addi	sp,sp,-20
   50a90:	df000415 	stw	fp,16(sp)
   50a94:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   50a98:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   50a9c:	0005303a 	rdctl	r2,status
   50aa0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   50aa4:	e0fffe17 	ldw	r3,-8(fp)
   50aa8:	00bfff84 	movi	r2,-2
   50aac:	1884703a 	and	r2,r3,r2
   50ab0:	1001703a 	wrctl	status,r2
  
  return context;
   50ab4:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
   50ab8:	e0bffc15 	stw	r2,-16(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
   50abc:	008001b4 	movhi	r2,6
   50ac0:	10ad5004 	addi	r2,r2,-19136
   50ac4:	10800017 	ldw	r2,0(r2)
   50ac8:	10800b0b 	ldhu	r2,44(r2)
   50acc:	e0bffd0d 	sth	r2,-12(fp)
   50ad0:	e0bffc17 	ldw	r2,-16(fp)
   50ad4:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   50ad8:	e0bfff17 	ldw	r2,-4(fp)
   50adc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
   50ae0:	e0bffd0b 	ldhu	r2,-12(fp)
}
   50ae4:	e037883a 	mov	sp,fp
   50ae8:	df000017 	ldw	fp,0(sp)
   50aec:	dec00104 	addi	sp,sp,4
   50af0:	f800283a 	ret

00050af4 <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
   50af4:	deffef04 	addi	sp,sp,-68
   50af8:	dfc01015 	stw	ra,64(sp)
   50afc:	df000f15 	stw	fp,60(sp)
   50b00:	df000f04 	addi	fp,sp,60
   50b04:	e13ffc15 	stw	r4,-16(fp)
   50b08:	2807883a 	mov	r3,r5
   50b0c:	3005883a 	mov	r2,r6
   50b10:	e1ffff15 	stw	r7,-4(fp)
   50b14:	e0fffd0d 	sth	r3,-12(fp)
   50b18:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
   50b1c:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
   50b20:	e0bfff17 	ldw	r2,-4(fp)
   50b24:	1000021e 	bne	r2,zero,50b30 <OSFlagPost+0x3c>
        return ((OS_FLAGS)0);
   50b28:	0005883a 	mov	r2,zero
   50b2c:	0000ce06 	br	50e68 <OSFlagPost+0x374>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
   50b30:	e0bffc17 	ldw	r2,-16(fp)
   50b34:	1000051e 	bne	r2,zero,50b4c <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   50b38:	e0bfff17 	ldw	r2,-4(fp)
   50b3c:	00c01b84 	movi	r3,110
   50b40:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   50b44:	0005883a 	mov	r2,zero
   50b48:	0000c706 	br	50e68 <OSFlagPost+0x374>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
   50b4c:	e0bffc17 	ldw	r2,-16(fp)
   50b50:	10800003 	ldbu	r2,0(r2)
   50b54:	10803fcc 	andi	r2,r2,255
   50b58:	10800160 	cmpeqi	r2,r2,5
   50b5c:	1000051e 	bne	r2,zero,50b74 <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
   50b60:	e0bfff17 	ldw	r2,-4(fp)
   50b64:	00c00044 	movi	r3,1
   50b68:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   50b6c:	0005883a 	mov	r2,zero
   50b70:	0000bd06 	br	50e68 <OSFlagPost+0x374>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   50b74:	0005303a 	rdctl	r2,status
   50b78:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   50b7c:	e0fff617 	ldw	r3,-40(fp)
   50b80:	00bfff84 	movi	r2,-2
   50b84:	1884703a 	and	r2,r3,r2
   50b88:	1001703a 	wrctl	status,r2
  
  return context;
   50b8c:	e0bff617 	ldw	r2,-40(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
   50b90:	e0bff315 	stw	r2,-52(fp)
    switch (opt) {
   50b94:	e0bffe03 	ldbu	r2,-8(fp)
   50b98:	10000326 	beq	r2,zero,50ba8 <OSFlagPost+0xb4>
   50b9c:	10800060 	cmpeqi	r2,r2,1
   50ba0:	10000b1e 	bne	r2,zero,50bd0 <OSFlagPost+0xdc>
   50ba4:	00001206 	br	50bf0 <OSFlagPost+0xfc>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
   50ba8:	e0bffc17 	ldw	r2,-16(fp)
   50bac:	1080020b 	ldhu	r2,8(r2)
   50bb0:	1007883a 	mov	r3,r2
   50bb4:	e0bffd0b 	ldhu	r2,-12(fp)
   50bb8:	0084303a 	nor	r2,zero,r2
   50bbc:	1884703a 	and	r2,r3,r2
   50bc0:	1007883a 	mov	r3,r2
   50bc4:	e0bffc17 	ldw	r2,-16(fp)
   50bc8:	10c0020d 	sth	r3,8(r2)
             break;
   50bcc:	00001106 	br	50c14 <OSFlagPost+0x120>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
   50bd0:	e0bffc17 	ldw	r2,-16(fp)
   50bd4:	10c0020b 	ldhu	r3,8(r2)
   50bd8:	e0bffd0b 	ldhu	r2,-12(fp)
   50bdc:	1884b03a 	or	r2,r3,r2
   50be0:	1007883a 	mov	r3,r2
   50be4:	e0bffc17 	ldw	r2,-16(fp)
   50be8:	10c0020d 	sth	r3,8(r2)
             break;
   50bec:	00000906 	br	50c14 <OSFlagPost+0x120>
   50bf0:	e0bff317 	ldw	r2,-52(fp)
   50bf4:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   50bf8:	e0bff717 	ldw	r2,-36(fp)
   50bfc:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
   50c00:	e0bfff17 	ldw	r2,-4(fp)
   50c04:	00c01c44 	movi	r3,113
   50c08:	10c00005 	stb	r3,0(r2)
             return ((OS_FLAGS)0);
   50c0c:	0005883a 	mov	r2,zero
   50c10:	00009506 	br	50e68 <OSFlagPost+0x374>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
   50c14:	e03ff205 	stb	zero,-56(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   50c18:	e0bffc17 	ldw	r2,-16(fp)
   50c1c:	10800117 	ldw	r2,4(r2)
   50c20:	e0bff115 	stw	r2,-60(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
   50c24:	00007406 	br	50df8 <OSFlagPost+0x304>
        switch (pnode->OSFlagNodeWaitType) {
   50c28:	e0bff117 	ldw	r2,-60(fp)
   50c2c:	10800483 	ldbu	r2,18(r2)
   50c30:	10803fcc 	andi	r2,r2,255
   50c34:	10c00060 	cmpeqi	r3,r2,1
   50c38:	18004d1e 	bne	r3,zero,50d70 <OSFlagPost+0x27c>
   50c3c:	10c00088 	cmpgei	r3,r2,2
   50c40:	1800021e 	bne	r3,zero,50c4c <OSFlagPost+0x158>
   50c44:	10003126 	beq	r2,zero,50d0c <OSFlagPost+0x218>
   50c48:	00005f06 	br	50dc8 <OSFlagPost+0x2d4>
   50c4c:	10c000a0 	cmpeqi	r3,r2,2
   50c50:	1800031e 	bne	r3,zero,50c60 <OSFlagPost+0x16c>
   50c54:	108000e0 	cmpeqi	r2,r2,3
   50c58:	1000181e 	bne	r2,zero,50cbc <OSFlagPost+0x1c8>
   50c5c:	00005a06 	br	50dc8 <OSFlagPost+0x2d4>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   50c60:	e0bffc17 	ldw	r2,-16(fp)
   50c64:	10c0020b 	ldhu	r3,8(r2)
   50c68:	e0bff117 	ldw	r2,-60(fp)
   50c6c:	1080040b 	ldhu	r2,16(r2)
   50c70:	1884703a 	and	r2,r3,r2
   50c74:	e0bff40d 	sth	r2,-48(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
   50c78:	e0bff117 	ldw	r2,-60(fp)
   50c7c:	1080040b 	ldhu	r2,16(r2)
   50c80:	10ffffcc 	andi	r3,r2,65535
   50c84:	e0bff40b 	ldhu	r2,-48(fp)
   50c88:	18800b1e 	bne	r3,r2,50cb8 <OSFlagPost+0x1c4>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   50c8c:	e0bff40b 	ldhu	r2,-48(fp)
   50c90:	e13ff117 	ldw	r4,-60(fp)
   50c94:	100b883a 	mov	r5,r2
   50c98:	00511e80 	call	511e8 <OS_FlagTaskRdy>
   50c9c:	e0bff485 	stb	r2,-46(fp)
                     if (rdy == OS_TRUE) {
   50ca0:	e0bff483 	ldbu	r2,-46(fp)
   50ca4:	10800058 	cmpnei	r2,r2,1
   50ca8:	1000031e 	bne	r2,zero,50cb8 <OSFlagPost+0x1c4>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   50cac:	00800044 	movi	r2,1
   50cb0:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   50cb4:	00004d06 	br	50dec <OSFlagPost+0x2f8>
   50cb8:	00004c06 	br	50dec <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   50cbc:	e0bffc17 	ldw	r2,-16(fp)
   50cc0:	10c0020b 	ldhu	r3,8(r2)
   50cc4:	e0bff117 	ldw	r2,-60(fp)
   50cc8:	1080040b 	ldhu	r2,16(r2)
   50ccc:	1884703a 	and	r2,r3,r2
   50cd0:	e0bff40d 	sth	r2,-48(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
   50cd4:	e0bff40b 	ldhu	r2,-48(fp)
   50cd8:	10000b26 	beq	r2,zero,50d08 <OSFlagPost+0x214>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   50cdc:	e0bff40b 	ldhu	r2,-48(fp)
   50ce0:	e13ff117 	ldw	r4,-60(fp)
   50ce4:	100b883a 	mov	r5,r2
   50ce8:	00511e80 	call	511e8 <OS_FlagTaskRdy>
   50cec:	e0bff485 	stb	r2,-46(fp)
                     if (rdy == OS_TRUE) {
   50cf0:	e0bff483 	ldbu	r2,-46(fp)
   50cf4:	10800058 	cmpnei	r2,r2,1
   50cf8:	1000031e 	bne	r2,zero,50d08 <OSFlagPost+0x214>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   50cfc:	00800044 	movi	r2,1
   50d00:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   50d04:	00003906 	br	50dec <OSFlagPost+0x2f8>
   50d08:	00003806 	br	50dec <OSFlagPost+0x2f8>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   50d0c:	e0bffc17 	ldw	r2,-16(fp)
   50d10:	1080020b 	ldhu	r2,8(r2)
   50d14:	0084303a 	nor	r2,zero,r2
   50d18:	1007883a 	mov	r3,r2
   50d1c:	e0bff117 	ldw	r2,-60(fp)
   50d20:	1080040b 	ldhu	r2,16(r2)
   50d24:	1884703a 	and	r2,r3,r2
   50d28:	e0bff40d 	sth	r2,-48(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
   50d2c:	e0bff117 	ldw	r2,-60(fp)
   50d30:	1080040b 	ldhu	r2,16(r2)
   50d34:	10ffffcc 	andi	r3,r2,65535
   50d38:	e0bff40b 	ldhu	r2,-48(fp)
   50d3c:	18800b1e 	bne	r3,r2,50d6c <OSFlagPost+0x278>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   50d40:	e0bff40b 	ldhu	r2,-48(fp)
   50d44:	e13ff117 	ldw	r4,-60(fp)
   50d48:	100b883a 	mov	r5,r2
   50d4c:	00511e80 	call	511e8 <OS_FlagTaskRdy>
   50d50:	e0bff485 	stb	r2,-46(fp)
                     if (rdy == OS_TRUE) {
   50d54:	e0bff483 	ldbu	r2,-46(fp)
   50d58:	10800058 	cmpnei	r2,r2,1
   50d5c:	1000031e 	bne	r2,zero,50d6c <OSFlagPost+0x278>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   50d60:	00800044 	movi	r2,1
   50d64:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   50d68:	00002006 	br	50dec <OSFlagPost+0x2f8>
   50d6c:	00001f06 	br	50dec <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   50d70:	e0bffc17 	ldw	r2,-16(fp)
   50d74:	1080020b 	ldhu	r2,8(r2)
   50d78:	0084303a 	nor	r2,zero,r2
   50d7c:	1007883a 	mov	r3,r2
   50d80:	e0bff117 	ldw	r2,-60(fp)
   50d84:	1080040b 	ldhu	r2,16(r2)
   50d88:	1884703a 	and	r2,r3,r2
   50d8c:	e0bff40d 	sth	r2,-48(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
   50d90:	e0bff40b 	ldhu	r2,-48(fp)
   50d94:	10000b26 	beq	r2,zero,50dc4 <OSFlagPost+0x2d0>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   50d98:	e0bff40b 	ldhu	r2,-48(fp)
   50d9c:	e13ff117 	ldw	r4,-60(fp)
   50da0:	100b883a 	mov	r5,r2
   50da4:	00511e80 	call	511e8 <OS_FlagTaskRdy>
   50da8:	e0bff485 	stb	r2,-46(fp)
                     if (rdy == OS_TRUE) {
   50dac:	e0bff483 	ldbu	r2,-46(fp)
   50db0:	10800058 	cmpnei	r2,r2,1
   50db4:	1000031e 	bne	r2,zero,50dc4 <OSFlagPost+0x2d0>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   50db8:	00800044 	movi	r2,1
   50dbc:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   50dc0:	00000a06 	br	50dec <OSFlagPost+0x2f8>
   50dc4:	00000906 	br	50dec <OSFlagPost+0x2f8>
   50dc8:	e0bff317 	ldw	r2,-52(fp)
   50dcc:	e0bff815 	stw	r2,-32(fp)
   50dd0:	e0bff817 	ldw	r2,-32(fp)
   50dd4:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
   50dd8:	e0bfff17 	ldw	r2,-4(fp)
   50ddc:	00c01bc4 	movi	r3,111
   50de0:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
   50de4:	0005883a 	mov	r2,zero
   50de8:	00001f06 	br	50e68 <OSFlagPost+0x374>
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
   50dec:	e0bff117 	ldw	r2,-60(fp)
   50df0:	10800017 	ldw	r2,0(r2)
   50df4:	e0bff115 	stw	r2,-60(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
   50df8:	e0bff117 	ldw	r2,-60(fp)
   50dfc:	103f8a1e 	bne	r2,zero,50c28 <__alt_data_end+0xfffdfee8>
   50e00:	e0bff317 	ldw	r2,-52(fp)
   50e04:	e0bff915 	stw	r2,-28(fp)
   50e08:	e0bff917 	ldw	r2,-28(fp)
   50e0c:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
   50e10:	e0bff203 	ldbu	r2,-56(fp)
   50e14:	10800058 	cmpnei	r2,r2,1
   50e18:	1000011e 	bne	r2,zero,50e20 <OSFlagPost+0x32c>
        OS_Sched();
   50e1c:	004f3280 	call	4f328 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   50e20:	0005303a 	rdctl	r2,status
   50e24:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   50e28:	e0fffa17 	ldw	r3,-24(fp)
   50e2c:	00bfff84 	movi	r2,-2
   50e30:	1884703a 	and	r2,r3,r2
   50e34:	1001703a 	wrctl	status,r2
  
  return context;
   50e38:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   50e3c:	e0bff315 	stw	r2,-52(fp)
    flags_cur = pgrp->OSFlagFlags;
   50e40:	e0bffc17 	ldw	r2,-16(fp)
   50e44:	1080020b 	ldhu	r2,8(r2)
   50e48:	e0bff50d 	sth	r2,-44(fp)
   50e4c:	e0bff317 	ldw	r2,-52(fp)
   50e50:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   50e54:	e0bffb17 	ldw	r2,-20(fp)
   50e58:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
   50e5c:	e0bfff17 	ldw	r2,-4(fp)
   50e60:	10000005 	stb	zero,0(r2)
    return (flags_cur);
   50e64:	e0bff50b 	ldhu	r2,-44(fp)
}
   50e68:	e037883a 	mov	sp,fp
   50e6c:	dfc00117 	ldw	ra,4(sp)
   50e70:	df000017 	ldw	fp,0(sp)
   50e74:	dec00204 	addi	sp,sp,8
   50e78:	f800283a 	ret

00050e7c <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
   50e7c:	defff904 	addi	sp,sp,-28
   50e80:	df000615 	stw	fp,24(sp)
   50e84:	df000604 	addi	fp,sp,24
   50e88:	e13ffe15 	stw	r4,-8(fp)
   50e8c:	e17fff15 	stw	r5,-4(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
   50e90:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
   50e94:	e0bfff17 	ldw	r2,-4(fp)
   50e98:	1000021e 	bne	r2,zero,50ea4 <OSFlagQuery+0x28>
        return ((OS_FLAGS)0);
   50e9c:	0005883a 	mov	r2,zero
   50ea0:	00002306 	br	50f30 <OSFlagQuery+0xb4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
   50ea4:	e0bffe17 	ldw	r2,-8(fp)
   50ea8:	1000051e 	bne	r2,zero,50ec0 <OSFlagQuery+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   50eac:	e0bfff17 	ldw	r2,-4(fp)
   50eb0:	00c01b84 	movi	r3,110
   50eb4:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   50eb8:	0005883a 	mov	r2,zero
   50ebc:	00001c06 	br	50f30 <OSFlagQuery+0xb4>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
   50ec0:	e0bffe17 	ldw	r2,-8(fp)
   50ec4:	10800003 	ldbu	r2,0(r2)
   50ec8:	10803fcc 	andi	r2,r2,255
   50ecc:	10800160 	cmpeqi	r2,r2,5
   50ed0:	1000051e 	bne	r2,zero,50ee8 <OSFlagQuery+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   50ed4:	e0bfff17 	ldw	r2,-4(fp)
   50ed8:	00c00044 	movi	r3,1
   50edc:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   50ee0:	0005883a 	mov	r2,zero
   50ee4:	00001206 	br	50f30 <OSFlagQuery+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   50ee8:	0005303a 	rdctl	r2,status
   50eec:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   50ef0:	e0fffc17 	ldw	r3,-16(fp)
   50ef4:	00bfff84 	movi	r2,-2
   50ef8:	1884703a 	and	r2,r3,r2
   50efc:	1001703a 	wrctl	status,r2
  
  return context;
   50f00:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   50f04:	e0bffa15 	stw	r2,-24(fp)
    flags = pgrp->OSFlagFlags;
   50f08:	e0bffe17 	ldw	r2,-8(fp)
   50f0c:	1080020b 	ldhu	r2,8(r2)
   50f10:	e0bffb0d 	sth	r2,-20(fp)
   50f14:	e0bffa17 	ldw	r2,-24(fp)
   50f18:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   50f1c:	e0bffd17 	ldw	r2,-12(fp)
   50f20:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   50f24:	e0bfff17 	ldw	r2,-4(fp)
   50f28:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
   50f2c:	e0bffb0b 	ldhu	r2,-20(fp)
}
   50f30:	e037883a 	mov	sp,fp
   50f34:	df000017 	ldw	fp,0(sp)
   50f38:	dec00104 	addi	sp,sp,4
   50f3c:	f800283a 	ret

00050f40 <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
   50f40:	defff804 	addi	sp,sp,-32
   50f44:	df000715 	stw	fp,28(sp)
   50f48:	df000704 	addi	fp,sp,28
   50f4c:	e13ffb15 	stw	r4,-20(fp)
   50f50:	e17ffc15 	stw	r5,-16(fp)
   50f54:	3009883a 	mov	r4,r6
   50f58:	3807883a 	mov	r3,r7
   50f5c:	e0800117 	ldw	r2,4(fp)
   50f60:	e13ffd0d 	sth	r4,-12(fp)
   50f64:	e0fffe05 	stb	r3,-8(fp)
   50f68:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
   50f6c:	008001b4 	movhi	r2,6
   50f70:	10ad5004 	addi	r2,r2,-19136
   50f74:	10c00017 	ldw	r3,0(r2)
   50f78:	008001b4 	movhi	r2,6
   50f7c:	10ad5004 	addi	r2,r2,-19136
   50f80:	10800017 	ldw	r2,0(r2)
   50f84:	10800c03 	ldbu	r2,48(r2)
   50f88:	10800814 	ori	r2,r2,32
   50f8c:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
   50f90:	008001b4 	movhi	r2,6
   50f94:	10ad5004 	addi	r2,r2,-19136
   50f98:	10800017 	ldw	r2,0(r2)
   50f9c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
   50fa0:	008001b4 	movhi	r2,6
   50fa4:	10ad5004 	addi	r2,r2,-19136
   50fa8:	10800017 	ldw	r2,0(r2)
   50fac:	e0ffff0b 	ldhu	r3,-4(fp)
   50fb0:	10c00b8d 	sth	r3,46(r2)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
   50fb4:	008001b4 	movhi	r2,6
   50fb8:	10ad5004 	addi	r2,r2,-19136
   50fbc:	10800017 	ldw	r2,0(r2)
   50fc0:	e0fffc17 	ldw	r3,-16(fp)
   50fc4:	10c00a15 	stw	r3,40(r2)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
   50fc8:	e0bffc17 	ldw	r2,-16(fp)
   50fcc:	e0fffd0b 	ldhu	r3,-12(fp)
   50fd0:	10c0040d 	sth	r3,16(r2)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
   50fd4:	e0bffc17 	ldw	r2,-16(fp)
   50fd8:	e0fffe03 	ldbu	r3,-8(fp)
   50fdc:	10c00485 	stb	r3,18(r2)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
   50fe0:	008001b4 	movhi	r2,6
   50fe4:	10ad5004 	addi	r2,r2,-19136
   50fe8:	10c00017 	ldw	r3,0(r2)
   50fec:	e0bffc17 	ldw	r2,-16(fp)
   50ff0:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
   50ff4:	e0bffb17 	ldw	r2,-20(fp)
   50ff8:	10c00117 	ldw	r3,4(r2)
   50ffc:	e0bffc17 	ldw	r2,-16(fp)
   51000:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
   51004:	e0bffc17 	ldw	r2,-16(fp)
   51008:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
   5100c:	e0bffc17 	ldw	r2,-16(fp)
   51010:	e0fffb17 	ldw	r3,-20(fp)
   51014:	10c00315 	stw	r3,12(r2)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   51018:	e0bffb17 	ldw	r2,-20(fp)
   5101c:	10800117 	ldw	r2,4(r2)
   51020:	e0bff915 	stw	r2,-28(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
   51024:	e0bff917 	ldw	r2,-28(fp)
   51028:	10000326 	beq	r2,zero,51038 <OS_FlagBlock+0xf8>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
   5102c:	e0bff917 	ldw	r2,-28(fp)
   51030:	e0fffc17 	ldw	r3,-16(fp)
   51034:	10c00115 	stw	r3,4(r2)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
   51038:	e0bffb17 	ldw	r2,-20(fp)
   5103c:	e0fffc17 	ldw	r3,-16(fp)
   51040:	10c00115 	stw	r3,4(r2)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
   51044:	008001b4 	movhi	r2,6
   51048:	10ad5004 	addi	r2,r2,-19136
   5104c:	10800017 	ldw	r2,0(r2)
   51050:	10800d03 	ldbu	r2,52(r2)
   51054:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
   51058:	e0fffa03 	ldbu	r3,-24(fp)
   5105c:	e13ffa03 	ldbu	r4,-24(fp)
   51060:	008001b4 	movhi	r2,6
   51064:	10ad4d44 	addi	r2,r2,-19147
   51068:	1105883a 	add	r2,r2,r4
   5106c:	10800003 	ldbu	r2,0(r2)
   51070:	1009883a 	mov	r4,r2
   51074:	008001b4 	movhi	r2,6
   51078:	10ad5004 	addi	r2,r2,-19136
   5107c:	10800017 	ldw	r2,0(r2)
   51080:	10800d43 	ldbu	r2,53(r2)
   51084:	0084303a 	nor	r2,zero,r2
   51088:	2084703a 	and	r2,r4,r2
   5108c:	1009883a 	mov	r4,r2
   51090:	008001b4 	movhi	r2,6
   51094:	10ad4d44 	addi	r2,r2,-19147
   51098:	10c5883a 	add	r2,r2,r3
   5109c:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0x00) {
   510a0:	e0fffa03 	ldbu	r3,-24(fp)
   510a4:	008001b4 	movhi	r2,6
   510a8:	10ad4d44 	addi	r2,r2,-19147
   510ac:	10c5883a 	add	r2,r2,r3
   510b0:	10800003 	ldbu	r2,0(r2)
   510b4:	10803fcc 	andi	r2,r2,255
   510b8:	10000e1e 	bne	r2,zero,510f4 <OS_FlagBlock+0x1b4>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
   510bc:	008001b4 	movhi	r2,6
   510c0:	10ad5004 	addi	r2,r2,-19136
   510c4:	10800017 	ldw	r2,0(r2)
   510c8:	10800d83 	ldbu	r2,54(r2)
   510cc:	0084303a 	nor	r2,zero,r2
   510d0:	1007883a 	mov	r3,r2
   510d4:	008001b4 	movhi	r2,6
   510d8:	10ad4d04 	addi	r2,r2,-19148
   510dc:	10800003 	ldbu	r2,0(r2)
   510e0:	1884703a 	and	r2,r3,r2
   510e4:	1007883a 	mov	r3,r2
   510e8:	008001b4 	movhi	r2,6
   510ec:	10ad4d04 	addi	r2,r2,-19148
   510f0:	10c00005 	stb	r3,0(r2)
    }
}
   510f4:	e037883a 	mov	sp,fp
   510f8:	df000017 	ldw	fp,0(sp)
   510fc:	dec00104 	addi	sp,sp,4
   51100:	f800283a 	ret

00051104 <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
   51104:	defffb04 	addi	sp,sp,-20
   51108:	dfc00415 	stw	ra,16(sp)
   5110c:	df000315 	stw	fp,12(sp)
   51110:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
   51114:	010001b4 	movhi	r4,6
   51118:	213d6204 	addi	r4,r4,-2680
   5111c:	0140dc04 	movi	r5,880
   51120:	004f2740 	call	4f274 <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
   51124:	008001b4 	movhi	r2,6
   51128:	10bd6204 	addi	r2,r2,-2680
   5112c:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
   51130:	008001b4 	movhi	r2,6
   51134:	10bd6d04 	addi	r2,r2,-2636
   51138:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
   5113c:	e03ffd0d 	sth	zero,-12(fp)
   51140:	00001306 	br	51190 <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   51144:	e0bffe17 	ldw	r2,-8(fp)
   51148:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
   5114c:	e0bffe17 	ldw	r2,-8(fp)
   51150:	e0ffff17 	ldw	r3,-4(fp)
   51154:	10c00115 	stw	r3,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
   51158:	e0bffe17 	ldw	r2,-8(fp)
   5115c:	00c00fc4 	movi	r3,63
   51160:	10c00285 	stb	r3,10(r2)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
   51164:	e0bffe17 	ldw	r2,-8(fp)
   51168:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
   5116c:	e0bffe17 	ldw	r2,-8(fp)
   51170:	10800b04 	addi	r2,r2,44
   51174:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
   51178:	e0bfff17 	ldw	r2,-4(fp)
   5117c:	10800b04 	addi	r2,r2,44
   51180:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
   51184:	e0bffd0b 	ldhu	r2,-12(fp)
   51188:	10800044 	addi	r2,r2,1
   5118c:	e0bffd0d 	sth	r2,-12(fp)
   51190:	e0bffd0b 	ldhu	r2,-12(fp)
   51194:	108004f0 	cmpltui	r2,r2,19
   51198:	103fea1e 	bne	r2,zero,51144 <__alt_data_end+0xfffe0404>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   5119c:	e0bffe17 	ldw	r2,-8(fp)
   511a0:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
   511a4:	e0bffe17 	ldw	r2,-8(fp)
   511a8:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
   511ac:	e0bffe17 	ldw	r2,-8(fp)
   511b0:	00c00fc4 	movi	r3,63
   511b4:	10c00285 	stb	r3,10(r2)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
   511b8:	e0bffe17 	ldw	r2,-8(fp)
   511bc:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
   511c0:	008001b4 	movhi	r2,6
   511c4:	10ad5204 	addi	r2,r2,-19128
   511c8:	00c001b4 	movhi	r3,6
   511cc:	18fd6204 	addi	r3,r3,-2680
   511d0:	10c00015 	stw	r3,0(r2)
#endif
}
   511d4:	e037883a 	mov	sp,fp
   511d8:	dfc00117 	ldw	ra,4(sp)
   511dc:	df000017 	ldw	fp,0(sp)
   511e0:	dec00204 	addi	sp,sp,8
   511e4:	f800283a 	ret

000511e8 <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
   511e8:	defffa04 	addi	sp,sp,-24
   511ec:	dfc00515 	stw	ra,20(sp)
   511f0:	df000415 	stw	fp,16(sp)
   511f4:	df000404 	addi	fp,sp,16
   511f8:	e13ffe15 	stw	r4,-8(fp)
   511fc:	2805883a 	mov	r2,r5
   51200:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
   51204:	e0bffe17 	ldw	r2,-8(fp)
   51208:	10800217 	ldw	r2,8(r2)
   5120c:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
   51210:	e0bffd17 	ldw	r2,-12(fp)
   51214:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
   51218:	e0bffd17 	ldw	r2,-12(fp)
   5121c:	e0ffff0b 	ldhu	r3,-4(fp)
   51220:	10c00b0d 	sth	r3,44(r2)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
   51224:	e0bffd17 	ldw	r2,-12(fp)
   51228:	10c00c03 	ldbu	r3,48(r2)
   5122c:	00bff7c4 	movi	r2,-33
   51230:	1884703a 	and	r2,r3,r2
   51234:	1007883a 	mov	r3,r2
   51238:	e0bffd17 	ldw	r2,-12(fp)
   5123c:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
   51240:	e0bffd17 	ldw	r2,-12(fp)
   51244:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
   51248:	e0bffd17 	ldw	r2,-12(fp)
   5124c:	10800c03 	ldbu	r2,48(r2)
   51250:	10803fcc 	andi	r2,r2,255
   51254:	10001f1e 	bne	r2,zero,512d4 <OS_FlagTaskRdy+0xec>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
   51258:	e0bffd17 	ldw	r2,-12(fp)
   5125c:	10c00d83 	ldbu	r3,54(r2)
   51260:	008001b4 	movhi	r2,6
   51264:	10ad4d04 	addi	r2,r2,-19148
   51268:	10800003 	ldbu	r2,0(r2)
   5126c:	1884b03a 	or	r2,r3,r2
   51270:	1007883a 	mov	r3,r2
   51274:	008001b4 	movhi	r2,6
   51278:	10ad4d04 	addi	r2,r2,-19148
   5127c:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   51280:	e0bffd17 	ldw	r2,-12(fp)
   51284:	10800d03 	ldbu	r2,52(r2)
   51288:	10c03fcc 	andi	r3,r2,255
   5128c:	e0bffd17 	ldw	r2,-12(fp)
   51290:	10800d03 	ldbu	r2,52(r2)
   51294:	11003fcc 	andi	r4,r2,255
   51298:	008001b4 	movhi	r2,6
   5129c:	10ad4d44 	addi	r2,r2,-19147
   512a0:	1105883a 	add	r2,r2,r4
   512a4:	11000003 	ldbu	r4,0(r2)
   512a8:	e0bffd17 	ldw	r2,-12(fp)
   512ac:	10800d43 	ldbu	r2,53(r2)
   512b0:	2084b03a 	or	r2,r4,r2
   512b4:	1009883a 	mov	r4,r2
   512b8:	008001b4 	movhi	r2,6
   512bc:	10ad4d44 	addi	r2,r2,-19147
   512c0:	10c5883a 	add	r2,r2,r3
   512c4:	11000005 	stb	r4,0(r2)
        sched                   = OS_TRUE;
   512c8:	00800044 	movi	r2,1
   512cc:	e0bffc05 	stb	r2,-16(fp)
   512d0:	00000106 	br	512d8 <OS_FlagTaskRdy+0xf0>
    } else {
        sched                   = OS_FALSE;
   512d4:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
   512d8:	e13ffe17 	ldw	r4,-8(fp)
   512dc:	00512f80 	call	512f8 <OS_FlagUnlink>
    return (sched);
   512e0:	e0bffc03 	ldbu	r2,-16(fp)
}
   512e4:	e037883a 	mov	sp,fp
   512e8:	dfc00117 	ldw	ra,4(sp)
   512ec:	df000017 	ldw	fp,0(sp)
   512f0:	dec00204 	addi	sp,sp,8
   512f4:	f800283a 	ret

000512f8 <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
   512f8:	defffa04 	addi	sp,sp,-24
   512fc:	df000515 	stw	fp,20(sp)
   51300:	df000504 	addi	fp,sp,20
   51304:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
   51308:	e0bfff17 	ldw	r2,-4(fp)
   5130c:	10800117 	ldw	r2,4(r2)
   51310:	e0bffb15 	stw	r2,-20(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
   51314:	e0bfff17 	ldw	r2,-4(fp)
   51318:	10800017 	ldw	r2,0(r2)
   5131c:	e0bffc15 	stw	r2,-16(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
   51320:	e0bffb17 	ldw	r2,-20(fp)
   51324:	10000b1e 	bne	r2,zero,51354 <OS_FlagUnlink+0x5c>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
   51328:	e0bfff17 	ldw	r2,-4(fp)
   5132c:	10800317 	ldw	r2,12(r2)
   51330:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
   51334:	e0bffd17 	ldw	r2,-12(fp)
   51338:	e0fffc17 	ldw	r3,-16(fp)
   5133c:	10c00115 	stw	r3,4(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {
   51340:	e0bffc17 	ldw	r2,-16(fp)
   51344:	10000b26 	beq	r2,zero,51374 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
   51348:	e0bffc17 	ldw	r2,-16(fp)
   5134c:	10000115 	stw	zero,4(r2)
   51350:	00000806 	br	51374 <OS_FlagUnlink+0x7c>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
   51354:	e0bffb17 	ldw	r2,-20(fp)
   51358:	e0fffc17 	ldw	r3,-16(fp)
   5135c:	10c00015 	stw	r3,0(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
   51360:	e0bffc17 	ldw	r2,-16(fp)
   51364:	10000326 	beq	r2,zero,51374 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
   51368:	e0bffc17 	ldw	r2,-16(fp)
   5136c:	e0fffb17 	ldw	r3,-20(fp)
   51370:	10c00115 	stw	r3,4(r2)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
   51374:	e0bfff17 	ldw	r2,-4(fp)
   51378:	10800217 	ldw	r2,8(r2)
   5137c:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
   51380:	e0bffe17 	ldw	r2,-8(fp)
   51384:	10000a15 	stw	zero,40(r2)
#endif
}
   51388:	e037883a 	mov	sp,fp
   5138c:	df000017 	ldw	fp,0(sp)
   51390:	dec00104 	addi	sp,sp,4
   51394:	f800283a 	ret

00051398 <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
   51398:	defff404 	addi	sp,sp,-48
   5139c:	df000b15 	stw	fp,44(sp)
   513a0:	df000b04 	addi	fp,sp,44
   513a4:	e13ffc15 	stw	r4,-16(fp)
   513a8:	e17ffd15 	stw	r5,-12(fp)
   513ac:	e1bffe15 	stw	r6,-8(fp)
   513b0:	e1ffff15 	stw	r7,-4(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   513b4:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   513b8:	e0bfff17 	ldw	r2,-4(fp)
   513bc:	1000021e 	bne	r2,zero,513c8 <OSMemCreate+0x30>
        return ((OS_MEM *)0);
   513c0:	0005883a 	mov	r2,zero
   513c4:	00006d06 	br	5157c <OSMemCreate+0x1e4>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
   513c8:	e0bffc17 	ldw	r2,-16(fp)
   513cc:	1000051e 	bne	r2,zero,513e4 <OSMemCreate+0x4c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
   513d0:	e0bfff17 	ldw	r2,-4(fp)
   513d4:	00c01884 	movi	r3,98
   513d8:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   513dc:	0005883a 	mov	r2,zero
   513e0:	00006606 	br	5157c <OSMemCreate+0x1e4>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
   513e4:	e0bffc17 	ldw	r2,-16(fp)
   513e8:	108000cc 	andi	r2,r2,3
   513ec:	10000526 	beq	r2,zero,51404 <OSMemCreate+0x6c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
   513f0:	e0bfff17 	ldw	r2,-4(fp)
   513f4:	00c01884 	movi	r3,98
   513f8:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   513fc:	0005883a 	mov	r2,zero
   51400:	00005e06 	br	5157c <OSMemCreate+0x1e4>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
   51404:	e0bffd17 	ldw	r2,-12(fp)
   51408:	108000a8 	cmpgeui	r2,r2,2
   5140c:	1000051e 	bne	r2,zero,51424 <OSMemCreate+0x8c>
        *perr = OS_ERR_MEM_INVALID_BLKS;
   51410:	e0bfff17 	ldw	r2,-4(fp)
   51414:	00c016c4 	movi	r3,91
   51418:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   5141c:	0005883a 	mov	r2,zero
   51420:	00005606 	br	5157c <OSMemCreate+0x1e4>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
   51424:	e0bffe17 	ldw	r2,-8(fp)
   51428:	10800128 	cmpgeui	r2,r2,4
   5142c:	1000051e 	bne	r2,zero,51444 <OSMemCreate+0xac>
        *perr = OS_ERR_MEM_INVALID_SIZE;
   51430:	e0bfff17 	ldw	r2,-4(fp)
   51434:	00c01704 	movi	r3,92
   51438:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   5143c:	0005883a 	mov	r2,zero
   51440:	00004e06 	br	5157c <OSMemCreate+0x1e4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   51444:	0005303a 	rdctl	r2,status
   51448:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   5144c:	e0fffa17 	ldw	r3,-24(fp)
   51450:	00bfff84 	movi	r2,-2
   51454:	1884703a 	and	r2,r3,r2
   51458:	1001703a 	wrctl	status,r2
  
  return context;
   5145c:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   51460:	e0bff815 	stw	r2,-32(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
   51464:	008001b4 	movhi	r2,6
   51468:	10ad4a04 	addi	r2,r2,-19160
   5146c:	10800017 	ldw	r2,0(r2)
   51470:	e0bff915 	stw	r2,-28(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
   51474:	008001b4 	movhi	r2,6
   51478:	10ad4a04 	addi	r2,r2,-19160
   5147c:	10800017 	ldw	r2,0(r2)
   51480:	10000726 	beq	r2,zero,514a0 <OSMemCreate+0x108>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
   51484:	008001b4 	movhi	r2,6
   51488:	10ad4a04 	addi	r2,r2,-19160
   5148c:	10800017 	ldw	r2,0(r2)
   51490:	10c00117 	ldw	r3,4(r2)
   51494:	008001b4 	movhi	r2,6
   51498:	10ad4a04 	addi	r2,r2,-19160
   5149c:	10c00015 	stw	r3,0(r2)
   514a0:	e0bff817 	ldw	r2,-32(fp)
   514a4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   514a8:	e0bffb17 	ldw	r2,-20(fp)
   514ac:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
   514b0:	e0bff917 	ldw	r2,-28(fp)
   514b4:	1000051e 	bne	r2,zero,514cc <OSMemCreate+0x134>
        *perr = OS_ERR_MEM_INVALID_PART;
   514b8:	e0bfff17 	ldw	r2,-4(fp)
   514bc:	00c01684 	movi	r3,90
   514c0:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   514c4:	0005883a 	mov	r2,zero
   514c8:	00002c06 	br	5157c <OSMemCreate+0x1e4>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
   514cc:	e0bffc17 	ldw	r2,-16(fp)
   514d0:	e0bff615 	stw	r2,-40(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
   514d4:	e0fffc17 	ldw	r3,-16(fp)
   514d8:	e0bffe17 	ldw	r2,-8(fp)
   514dc:	1885883a 	add	r2,r3,r2
   514e0:	e0bff515 	stw	r2,-44(fp)
    for (i = 0; i < (nblks - 1); i++) {
   514e4:	e03ff715 	stw	zero,-36(fp)
   514e8:	00000c06 	br	5151c <OSMemCreate+0x184>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
   514ec:	e0bff617 	ldw	r2,-40(fp)
   514f0:	e0fff517 	ldw	r3,-44(fp)
   514f4:	10c00015 	stw	r3,0(r2)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
   514f8:	e0bff517 	ldw	r2,-44(fp)
   514fc:	e0bff615 	stw	r2,-40(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
   51500:	e0fff517 	ldw	r3,-44(fp)
   51504:	e0bffe17 	ldw	r2,-8(fp)
   51508:	1885883a 	add	r2,r3,r2
   5150c:	e0bff515 	stw	r2,-44(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
   51510:	e0bff717 	ldw	r2,-36(fp)
   51514:	10800044 	addi	r2,r2,1
   51518:	e0bff715 	stw	r2,-36(fp)
   5151c:	e0bffd17 	ldw	r2,-12(fp)
   51520:	10bfffc4 	addi	r2,r2,-1
   51524:	e0fff717 	ldw	r3,-36(fp)
   51528:	18bff036 	bltu	r3,r2,514ec <__alt_data_end+0xfffe07ac>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
   5152c:	e0bff617 	ldw	r2,-40(fp)
   51530:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
   51534:	e0bff917 	ldw	r2,-28(fp)
   51538:	e0fffc17 	ldw	r3,-16(fp)
   5153c:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
   51540:	e0bff917 	ldw	r2,-28(fp)
   51544:	e0fffc17 	ldw	r3,-16(fp)
   51548:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
   5154c:	e0bff917 	ldw	r2,-28(fp)
   51550:	e0fffd17 	ldw	r3,-12(fp)
   51554:	10c00415 	stw	r3,16(r2)
    pmem->OSMemNBlks    = nblks;
   51558:	e0bff917 	ldw	r2,-28(fp)
   5155c:	e0fffd17 	ldw	r3,-12(fp)
   51560:	10c00315 	stw	r3,12(r2)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
   51564:	e0bff917 	ldw	r2,-28(fp)
   51568:	e0fffe17 	ldw	r3,-8(fp)
   5156c:	10c00215 	stw	r3,8(r2)
    *perr               = OS_ERR_NONE;
   51570:	e0bfff17 	ldw	r2,-4(fp)
   51574:	10000005 	stb	zero,0(r2)
    return (pmem);
   51578:	e0bff917 	ldw	r2,-28(fp)
}
   5157c:	e037883a 	mov	sp,fp
   51580:	df000017 	ldw	fp,0(sp)
   51584:	dec00104 	addi	sp,sp,4
   51588:	f800283a 	ret

0005158c <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
   5158c:	defff804 	addi	sp,sp,-32
   51590:	df000715 	stw	fp,28(sp)
   51594:	df000704 	addi	fp,sp,28
   51598:	e13ffe15 	stw	r4,-8(fp)
   5159c:	e17fff15 	stw	r5,-4(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   515a0:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   515a4:	e0bfff17 	ldw	r2,-4(fp)
   515a8:	1000021e 	bne	r2,zero,515b4 <OSMemGet+0x28>
        return ((void *)0);
   515ac:	0005883a 	mov	r2,zero
   515b0:	00002e06 	br	5166c <OSMemGet+0xe0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
   515b4:	e0bffe17 	ldw	r2,-8(fp)
   515b8:	1000051e 	bne	r2,zero,515d0 <OSMemGet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   515bc:	e0bfff17 	ldw	r2,-4(fp)
   515c0:	00c01804 	movi	r3,96
   515c4:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   515c8:	0005883a 	mov	r2,zero
   515cc:	00002706 	br	5166c <OSMemGet+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   515d0:	0005303a 	rdctl	r2,status
   515d4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   515d8:	e0fffb17 	ldw	r3,-20(fp)
   515dc:	00bfff84 	movi	r2,-2
   515e0:	1884703a 	and	r2,r3,r2
   515e4:	1001703a 	wrctl	status,r2
  
  return context;
   515e8:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   515ec:	e0bff915 	stw	r2,-28(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
   515f0:	e0bffe17 	ldw	r2,-8(fp)
   515f4:	10800417 	ldw	r2,16(r2)
   515f8:	10001426 	beq	r2,zero,5164c <OSMemGet+0xc0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
   515fc:	e0bffe17 	ldw	r2,-8(fp)
   51600:	10800117 	ldw	r2,4(r2)
   51604:	e0bffa15 	stw	r2,-24(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
   51608:	e0bffa17 	ldw	r2,-24(fp)
   5160c:	10c00017 	ldw	r3,0(r2)
   51610:	e0bffe17 	ldw	r2,-8(fp)
   51614:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
   51618:	e0bffe17 	ldw	r2,-8(fp)
   5161c:	10800417 	ldw	r2,16(r2)
   51620:	10ffffc4 	addi	r3,r2,-1
   51624:	e0bffe17 	ldw	r2,-8(fp)
   51628:	10c00415 	stw	r3,16(r2)
   5162c:	e0bff917 	ldw	r2,-28(fp)
   51630:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   51634:	e0bffc17 	ldw	r2,-16(fp)
   51638:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
   5163c:	e0bfff17 	ldw	r2,-4(fp)
   51640:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
   51644:	e0bffa17 	ldw	r2,-24(fp)
   51648:	00000806 	br	5166c <OSMemGet+0xe0>
   5164c:	e0bff917 	ldw	r2,-28(fp)
   51650:	e0bffd15 	stw	r2,-12(fp)
   51654:	e0bffd17 	ldw	r2,-12(fp)
   51658:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
   5165c:	e0bfff17 	ldw	r2,-4(fp)
   51660:	00c01744 	movi	r3,93
   51664:	10c00005 	stb	r3,0(r2)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
   51668:	0005883a 	mov	r2,zero
}
   5166c:	e037883a 	mov	sp,fp
   51670:	df000017 	ldw	fp,0(sp)
   51674:	dec00104 	addi	sp,sp,4
   51678:	f800283a 	ret

0005167c <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
   5167c:	defff704 	addi	sp,sp,-36
   51680:	dfc00815 	stw	ra,32(sp)
   51684:	df000715 	stw	fp,28(sp)
   51688:	df000704 	addi	fp,sp,28
   5168c:	e13ffd15 	stw	r4,-12(fp)
   51690:	e17ffe15 	stw	r5,-8(fp)
   51694:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   51698:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   5169c:	e0bfff17 	ldw	r2,-4(fp)
   516a0:	1000021e 	bne	r2,zero,516ac <OSMemNameGet+0x30>
        return (0);
   516a4:	0005883a 	mov	r2,zero
   516a8:	00002d06 	br	51760 <OSMemNameGet+0xe4>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
   516ac:	e0bffd17 	ldw	r2,-12(fp)
   516b0:	1000051e 	bne	r2,zero,516c8 <OSMemNameGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   516b4:	e0bfff17 	ldw	r2,-4(fp)
   516b8:	00c01804 	movi	r3,96
   516bc:	10c00005 	stb	r3,0(r2)
        return (0);
   516c0:	0005883a 	mov	r2,zero
   516c4:	00002606 	br	51760 <OSMemNameGet+0xe4>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   516c8:	e0bffe17 	ldw	r2,-8(fp)
   516cc:	1000051e 	bne	r2,zero,516e4 <OSMemNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   516d0:	e0bfff17 	ldw	r2,-4(fp)
   516d4:	00c00304 	movi	r3,12
   516d8:	10c00005 	stb	r3,0(r2)
        return (0);
   516dc:	0005883a 	mov	r2,zero
   516e0:	00001f06 	br	51760 <OSMemNameGet+0xe4>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   516e4:	008001b4 	movhi	r2,6
   516e8:	10ad4f04 	addi	r2,r2,-19140
   516ec:	10800003 	ldbu	r2,0(r2)
   516f0:	10803fcc 	andi	r2,r2,255
   516f4:	10000526 	beq	r2,zero,5170c <OSMemNameGet+0x90>
        *perr = OS_ERR_NAME_GET_ISR;
   516f8:	e0bfff17 	ldw	r2,-4(fp)
   516fc:	00c00444 	movi	r3,17
   51700:	10c00005 	stb	r3,0(r2)
        return (0);
   51704:	0005883a 	mov	r2,zero
   51708:	00001506 	br	51760 <OSMemNameGet+0xe4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   5170c:	0005303a 	rdctl	r2,status
   51710:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   51714:	e0fffb17 	ldw	r3,-20(fp)
   51718:	00bfff84 	movi	r2,-2
   5171c:	1884703a 	and	r2,r3,r2
   51720:	1001703a 	wrctl	status,r2
  
  return context;
   51724:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   51728:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
   5172c:	e0bffd17 	ldw	r2,-12(fp)
   51730:	10800504 	addi	r2,r2,20
   51734:	e13ffe17 	ldw	r4,-8(fp)
   51738:	100b883a 	mov	r5,r2
   5173c:	004f4640 	call	4f464 <OS_StrCopy>
   51740:	e0bffa05 	stb	r2,-24(fp)
   51744:	e0bff917 	ldw	r2,-28(fp)
   51748:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   5174c:	e0bffc17 	ldw	r2,-16(fp)
   51750:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   51754:	e0bfff17 	ldw	r2,-4(fp)
   51758:	10000005 	stb	zero,0(r2)
    return (len);
   5175c:	e0bffa03 	ldbu	r2,-24(fp)
}
   51760:	e037883a 	mov	sp,fp
   51764:	dfc00117 	ldw	ra,4(sp)
   51768:	df000017 	ldw	fp,0(sp)
   5176c:	dec00204 	addi	sp,sp,8
   51770:	f800283a 	ret

00051774 <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
   51774:	defff604 	addi	sp,sp,-40
   51778:	dfc00915 	stw	ra,36(sp)
   5177c:	df000815 	stw	fp,32(sp)
   51780:	df000804 	addi	fp,sp,32
   51784:	e13ffd15 	stw	r4,-12(fp)
   51788:	e17ffe15 	stw	r5,-8(fp)
   5178c:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   51790:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   51794:	e0bfff17 	ldw	r2,-4(fp)
   51798:	1000011e 	bne	r2,zero,517a0 <OSMemNameSet+0x2c>
        return;
   5179c:	00003606 	br	51878 <OSMemNameSet+0x104>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
   517a0:	e0bffd17 	ldw	r2,-12(fp)
   517a4:	1000041e 	bne	r2,zero,517b8 <OSMemNameSet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   517a8:	e0bfff17 	ldw	r2,-4(fp)
   517ac:	00c01804 	movi	r3,96
   517b0:	10c00005 	stb	r3,0(r2)
        return;
   517b4:	00003006 	br	51878 <OSMemNameSet+0x104>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   517b8:	e0bffe17 	ldw	r2,-8(fp)
   517bc:	1000041e 	bne	r2,zero,517d0 <OSMemNameSet+0x5c>
        *perr = OS_ERR_PNAME_NULL;
   517c0:	e0bfff17 	ldw	r2,-4(fp)
   517c4:	00c00304 	movi	r3,12
   517c8:	10c00005 	stb	r3,0(r2)
        return;
   517cc:	00002a06 	br	51878 <OSMemNameSet+0x104>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   517d0:	008001b4 	movhi	r2,6
   517d4:	10ad4f04 	addi	r2,r2,-19140
   517d8:	10800003 	ldbu	r2,0(r2)
   517dc:	10803fcc 	andi	r2,r2,255
   517e0:	10000426 	beq	r2,zero,517f4 <OSMemNameSet+0x80>
        *perr = OS_ERR_NAME_SET_ISR;
   517e4:	e0bfff17 	ldw	r2,-4(fp)
   517e8:	00c00484 	movi	r3,18
   517ec:	10c00005 	stb	r3,0(r2)
        return;
   517f0:	00002106 	br	51878 <OSMemNameSet+0x104>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   517f4:	0005303a 	rdctl	r2,status
   517f8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   517fc:	e0fffa17 	ldw	r3,-24(fp)
   51800:	00bfff84 	movi	r2,-2
   51804:	1884703a 	and	r2,r3,r2
   51808:	1001703a 	wrctl	status,r2
  
  return context;
   5180c:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   51810:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
   51814:	e13ffe17 	ldw	r4,-8(fp)
   51818:	004f4d80 	call	4f4d8 <OS_StrLen>
   5181c:	e0bff905 	stb	r2,-28(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
   51820:	e0bff903 	ldbu	r2,-28(fp)
   51824:	10800830 	cmpltui	r2,r2,32
   51828:	1000081e 	bne	r2,zero,5184c <OSMemNameSet+0xd8>
   5182c:	e0bff817 	ldw	r2,-32(fp)
   51830:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   51834:	e0bffb17 	ldw	r2,-20(fp)
   51838:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
   5183c:	e0bfff17 	ldw	r2,-4(fp)
   51840:	00c018c4 	movi	r3,99
   51844:	10c00005 	stb	r3,0(r2)
        return;
   51848:	00000b06 	br	51878 <OSMemNameSet+0x104>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
   5184c:	e0bffd17 	ldw	r2,-12(fp)
   51850:	10800504 	addi	r2,r2,20
   51854:	1009883a 	mov	r4,r2
   51858:	e17ffe17 	ldw	r5,-8(fp)
   5185c:	004f4640 	call	4f464 <OS_StrCopy>
   51860:	e0bff817 	ldw	r2,-32(fp)
   51864:	e0bffc15 	stw	r2,-16(fp)
   51868:	e0bffc17 	ldw	r2,-16(fp)
   5186c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   51870:	e0bfff17 	ldw	r2,-4(fp)
   51874:	10000005 	stb	zero,0(r2)
}
   51878:	e037883a 	mov	sp,fp
   5187c:	dfc00117 	ldw	ra,4(sp)
   51880:	df000017 	ldw	fp,0(sp)
   51884:	dec00204 	addi	sp,sp,8
   51888:	f800283a 	ret

0005188c <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
   5188c:	defff904 	addi	sp,sp,-28
   51890:	df000615 	stw	fp,24(sp)
   51894:	df000604 	addi	fp,sp,24
   51898:	e13ffe15 	stw	r4,-8(fp)
   5189c:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   518a0:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
   518a4:	e0bffe17 	ldw	r2,-8(fp)
   518a8:	1000021e 	bne	r2,zero,518b4 <OSMemPut+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
   518ac:	00801804 	movi	r2,96
   518b0:	00002806 	br	51954 <OSMemPut+0xc8>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
   518b4:	e0bfff17 	ldw	r2,-4(fp)
   518b8:	1000021e 	bne	r2,zero,518c4 <OSMemPut+0x38>
        return (OS_ERR_MEM_INVALID_PBLK);
   518bc:	008017c4 	movi	r2,95
   518c0:	00002406 	br	51954 <OSMemPut+0xc8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   518c4:	0005303a 	rdctl	r2,status
   518c8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   518cc:	e0fffb17 	ldw	r3,-20(fp)
   518d0:	00bfff84 	movi	r2,-2
   518d4:	1884703a 	and	r2,r3,r2
   518d8:	1001703a 	wrctl	status,r2
  
  return context;
   518dc:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   518e0:	e0bffa15 	stw	r2,-24(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
   518e4:	e0bffe17 	ldw	r2,-8(fp)
   518e8:	10c00417 	ldw	r3,16(r2)
   518ec:	e0bffe17 	ldw	r2,-8(fp)
   518f0:	10800317 	ldw	r2,12(r2)
   518f4:	18800636 	bltu	r3,r2,51910 <OSMemPut+0x84>
   518f8:	e0bffa17 	ldw	r2,-24(fp)
   518fc:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   51900:	e0bffc17 	ldw	r2,-16(fp)
   51904:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
   51908:	00801784 	movi	r2,94
   5190c:	00001106 	br	51954 <OSMemPut+0xc8>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
   51910:	e0bffe17 	ldw	r2,-8(fp)
   51914:	10c00117 	ldw	r3,4(r2)
   51918:	e0bfff17 	ldw	r2,-4(fp)
   5191c:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = pblk;
   51920:	e0bffe17 	ldw	r2,-8(fp)
   51924:	e0ffff17 	ldw	r3,-4(fp)
   51928:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
   5192c:	e0bffe17 	ldw	r2,-8(fp)
   51930:	10800417 	ldw	r2,16(r2)
   51934:	10c00044 	addi	r3,r2,1
   51938:	e0bffe17 	ldw	r2,-8(fp)
   5193c:	10c00415 	stw	r3,16(r2)
   51940:	e0bffa17 	ldw	r2,-24(fp)
   51944:	e0bffd15 	stw	r2,-12(fp)
   51948:	e0bffd17 	ldw	r2,-12(fp)
   5194c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
   51950:	0005883a 	mov	r2,zero
}
   51954:	e037883a 	mov	sp,fp
   51958:	df000017 	ldw	fp,0(sp)
   5195c:	dec00104 	addi	sp,sp,4
   51960:	f800283a 	ret

00051964 <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
   51964:	defffa04 	addi	sp,sp,-24
   51968:	df000515 	stw	fp,20(sp)
   5196c:	df000504 	addi	fp,sp,20
   51970:	e13ffe15 	stw	r4,-8(fp)
   51974:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   51978:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
   5197c:	e0bffe17 	ldw	r2,-8(fp)
   51980:	1000021e 	bne	r2,zero,5198c <OSMemQuery+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
   51984:	00801804 	movi	r2,96
   51988:	00002c06 	br	51a3c <OSMemQuery+0xd8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
   5198c:	e0bfff17 	ldw	r2,-4(fp)
   51990:	1000021e 	bne	r2,zero,5199c <OSMemQuery+0x38>
        return (OS_ERR_MEM_INVALID_PDATA);
   51994:	00801844 	movi	r2,97
   51998:	00002806 	br	51a3c <OSMemQuery+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   5199c:	0005303a 	rdctl	r2,status
   519a0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   519a4:	e0fffc17 	ldw	r3,-16(fp)
   519a8:	00bfff84 	movi	r2,-2
   519ac:	1884703a 	and	r2,r3,r2
   519b0:	1001703a 	wrctl	status,r2
  
  return context;
   519b4:	e0bffc17 	ldw	r2,-16(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   519b8:	e0bffb15 	stw	r2,-20(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
   519bc:	e0bffe17 	ldw	r2,-8(fp)
   519c0:	10c00017 	ldw	r3,0(r2)
   519c4:	e0bfff17 	ldw	r2,-4(fp)
   519c8:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
   519cc:	e0bffe17 	ldw	r2,-8(fp)
   519d0:	10c00117 	ldw	r3,4(r2)
   519d4:	e0bfff17 	ldw	r2,-4(fp)
   519d8:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
   519dc:	e0bffe17 	ldw	r2,-8(fp)
   519e0:	10c00217 	ldw	r3,8(r2)
   519e4:	e0bfff17 	ldw	r2,-4(fp)
   519e8:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
   519ec:	e0bffe17 	ldw	r2,-8(fp)
   519f0:	10c00317 	ldw	r3,12(r2)
   519f4:	e0bfff17 	ldw	r2,-4(fp)
   519f8:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
   519fc:	e0bffe17 	ldw	r2,-8(fp)
   51a00:	10c00417 	ldw	r3,16(r2)
   51a04:	e0bfff17 	ldw	r2,-4(fp)
   51a08:	10c00415 	stw	r3,16(r2)
   51a0c:	e0bffb17 	ldw	r2,-20(fp)
   51a10:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   51a14:	e0bffd17 	ldw	r2,-12(fp)
   51a18:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
   51a1c:	e0bfff17 	ldw	r2,-4(fp)
   51a20:	10c00317 	ldw	r3,12(r2)
   51a24:	e0bfff17 	ldw	r2,-4(fp)
   51a28:	10800417 	ldw	r2,16(r2)
   51a2c:	1887c83a 	sub	r3,r3,r2
   51a30:	e0bfff17 	ldw	r2,-4(fp)
   51a34:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
   51a38:	0005883a 	mov	r2,zero
}
   51a3c:	e037883a 	mov	sp,fp
   51a40:	df000017 	ldw	fp,0(sp)
   51a44:	dec00104 	addi	sp,sp,4
   51a48:	f800283a 	ret

00051a4c <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
   51a4c:	defffc04 	addi	sp,sp,-16
   51a50:	dfc00315 	stw	ra,12(sp)
   51a54:	df000215 	stw	fp,8(sp)
   51a58:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
   51a5c:	010001b4 	movhi	r4,6
   51a60:	213e3e04 	addi	r4,r4,-1800
   51a64:	01430c04 	movi	r5,3120
   51a68:	004f2740 	call	4f274 <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
   51a6c:	008001b4 	movhi	r2,6
   51a70:	10be3e04 	addi	r2,r2,-1800
   51a74:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
   51a78:	e03fff0d 	sth	zero,-4(fp)
   51a7c:	00001306 	br	51acc <OS_MemInit+0x80>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
   51a80:	e0bfff0b 	ldhu	r2,-4(fp)
   51a84:	10800044 	addi	r2,r2,1
   51a88:	10c00d24 	muli	r3,r2,52
   51a8c:	008001b4 	movhi	r2,6
   51a90:	10be3e04 	addi	r2,r2,-1800
   51a94:	1887883a 	add	r3,r3,r2
   51a98:	e0bffe17 	ldw	r2,-8(fp)
   51a9c:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
   51aa0:	e0bffe17 	ldw	r2,-8(fp)
   51aa4:	00c00fc4 	movi	r3,63
   51aa8:	10c00505 	stb	r3,20(r2)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
   51aac:	e0bffe17 	ldw	r2,-8(fp)
   51ab0:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
   51ab4:	e0bffe17 	ldw	r2,-8(fp)
   51ab8:	10800d04 	addi	r2,r2,52
   51abc:	e0bffe15 	stw	r2,-8(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
   51ac0:	e0bfff0b 	ldhu	r2,-4(fp)
   51ac4:	10800044 	addi	r2,r2,1
   51ac8:	e0bfff0d 	sth	r2,-4(fp)
   51acc:	e0bfff0b 	ldhu	r2,-4(fp)
   51ad0:	10800ef0 	cmpltui	r2,r2,59
   51ad4:	103fea1e 	bne	r2,zero,51a80 <__alt_data_end+0xfffe0d40>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
   51ad8:	e0bffe17 	ldw	r2,-8(fp)
   51adc:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
   51ae0:	e0bffe17 	ldw	r2,-8(fp)
   51ae4:	00c00fc4 	movi	r3,63
   51ae8:	10c00505 	stb	r3,20(r2)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
   51aec:	e0bffe17 	ldw	r2,-8(fp)
   51af0:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
   51af4:	008001b4 	movhi	r2,6
   51af8:	10ad4a04 	addi	r2,r2,-19160
   51afc:	00c001b4 	movhi	r3,6
   51b00:	18fe3e04 	addi	r3,r3,-1800
   51b04:	10c00015 	stw	r3,0(r2)
#endif
}
   51b08:	e037883a 	mov	sp,fp
   51b0c:	dfc00117 	ldw	ra,4(sp)
   51b10:	df000017 	ldw	fp,0(sp)
   51b14:	dec00204 	addi	sp,sp,8
   51b18:	f800283a 	ret

00051b1c <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
   51b1c:	defff804 	addi	sp,sp,-32
   51b20:	df000715 	stw	fp,28(sp)
   51b24:	df000704 	addi	fp,sp,28
   51b28:	e13ffe15 	stw	r4,-8(fp)
   51b2c:	e17fff15 	stw	r5,-4(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   51b30:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   51b34:	e0bfff17 	ldw	r2,-4(fp)
   51b38:	1000021e 	bne	r2,zero,51b44 <OSQAccept+0x28>
        return ((void *)0);
   51b3c:	0005883a 	mov	r2,zero
   51b40:	00004206 	br	51c4c <OSQAccept+0x130>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
   51b44:	e0bffe17 	ldw	r2,-8(fp)
   51b48:	1000051e 	bne	r2,zero,51b60 <OSQAccept+0x44>
        *perr = OS_ERR_PEVENT_NULL;
   51b4c:	e0bfff17 	ldw	r2,-4(fp)
   51b50:	00c00104 	movi	r3,4
   51b54:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   51b58:	0005883a 	mov	r2,zero
   51b5c:	00003b06 	br	51c4c <OSQAccept+0x130>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
   51b60:	e0bffe17 	ldw	r2,-8(fp)
   51b64:	10800003 	ldbu	r2,0(r2)
   51b68:	10803fcc 	andi	r2,r2,255
   51b6c:	108000a0 	cmpeqi	r2,r2,2
   51b70:	1000051e 	bne	r2,zero,51b88 <OSQAccept+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   51b74:	e0bfff17 	ldw	r2,-4(fp)
   51b78:	00c00044 	movi	r3,1
   51b7c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   51b80:	0005883a 	mov	r2,zero
   51b84:	00003106 	br	51c4c <OSQAccept+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   51b88:	0005303a 	rdctl	r2,status
   51b8c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   51b90:	e0fffc17 	ldw	r3,-16(fp)
   51b94:	00bfff84 	movi	r2,-2
   51b98:	1884703a 	and	r2,r3,r2
   51b9c:	1001703a 	wrctl	status,r2
  
  return context;
   51ba0:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   51ba4:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
   51ba8:	e0bffe17 	ldw	r2,-8(fp)
   51bac:	10800117 	ldw	r2,4(r2)
   51bb0:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
   51bb4:	e0bffb17 	ldw	r2,-20(fp)
   51bb8:	1080058b 	ldhu	r2,22(r2)
   51bbc:	10bfffcc 	andi	r2,r2,65535
   51bc0:	10001926 	beq	r2,zero,51c28 <OSQAccept+0x10c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
   51bc4:	e0bffb17 	ldw	r2,-20(fp)
   51bc8:	10800417 	ldw	r2,16(r2)
   51bcc:	11000104 	addi	r4,r2,4
   51bd0:	e0fffb17 	ldw	r3,-20(fp)
   51bd4:	19000415 	stw	r4,16(r3)
   51bd8:	10800017 	ldw	r2,0(r2)
   51bdc:	e0bff915 	stw	r2,-28(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
   51be0:	e0bffb17 	ldw	r2,-20(fp)
   51be4:	1080058b 	ldhu	r2,22(r2)
   51be8:	10bfffc4 	addi	r2,r2,-1
   51bec:	1007883a 	mov	r3,r2
   51bf0:	e0bffb17 	ldw	r2,-20(fp)
   51bf4:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
   51bf8:	e0bffb17 	ldw	r2,-20(fp)
   51bfc:	10c00417 	ldw	r3,16(r2)
   51c00:	e0bffb17 	ldw	r2,-20(fp)
   51c04:	10800217 	ldw	r2,8(r2)
   51c08:	1880041e 	bne	r3,r2,51c1c <OSQAccept+0x100>
            pq->OSQOut = pq->OSQStart;
   51c0c:	e0bffb17 	ldw	r2,-20(fp)
   51c10:	10c00117 	ldw	r3,4(r2)
   51c14:	e0bffb17 	ldw	r2,-20(fp)
   51c18:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
   51c1c:	e0bfff17 	ldw	r2,-4(fp)
   51c20:	10000005 	stb	zero,0(r2)
   51c24:	00000406 	br	51c38 <OSQAccept+0x11c>
    } else {
        *perr = OS_ERR_Q_EMPTY;
   51c28:	e0bfff17 	ldw	r2,-4(fp)
   51c2c:	00c007c4 	movi	r3,31
   51c30:	10c00005 	stb	r3,0(r2)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
   51c34:	e03ff915 	stw	zero,-28(fp)
   51c38:	e0bffa17 	ldw	r2,-24(fp)
   51c3c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   51c40:	e0bffd17 	ldw	r2,-12(fp)
   51c44:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
   51c48:	e0bff917 	ldw	r2,-28(fp)
}
   51c4c:	e037883a 	mov	sp,fp
   51c50:	df000017 	ldw	fp,0(sp)
   51c54:	dec00104 	addi	sp,sp,4
   51c58:	f800283a 	ret

00051c5c <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
   51c5c:	defff404 	addi	sp,sp,-48
   51c60:	dfc00b15 	stw	ra,44(sp)
   51c64:	df000a15 	stw	fp,40(sp)
   51c68:	df000a04 	addi	fp,sp,40
   51c6c:	e13ffe15 	stw	r4,-8(fp)
   51c70:	2805883a 	mov	r2,r5
   51c74:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   51c78:	e03ff715 	stw	zero,-36(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   51c7c:	008001b4 	movhi	r2,6
   51c80:	10ad4f04 	addi	r2,r2,-19140
   51c84:	10800003 	ldbu	r2,0(r2)
   51c88:	10803fcc 	andi	r2,r2,255
   51c8c:	10000226 	beq	r2,zero,51c98 <OSQCreate+0x3c>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
   51c90:	0005883a 	mov	r2,zero
   51c94:	00006b06 	br	51e44 <OSQCreate+0x1e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   51c98:	0005303a 	rdctl	r2,status
   51c9c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   51ca0:	e0fff917 	ldw	r3,-28(fp)
   51ca4:	00bfff84 	movi	r2,-2
   51ca8:	1884703a 	and	r2,r3,r2
   51cac:	1001703a 	wrctl	status,r2
  
  return context;
   51cb0:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   51cb4:	e0bff715 	stw	r2,-36(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
   51cb8:	008001b4 	movhi	r2,6
   51cbc:	10ad4e04 	addi	r2,r2,-19144
   51cc0:	10800017 	ldw	r2,0(r2)
   51cc4:	e0bff615 	stw	r2,-40(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
   51cc8:	008001b4 	movhi	r2,6
   51ccc:	10ad4e04 	addi	r2,r2,-19144
   51cd0:	10800017 	ldw	r2,0(r2)
   51cd4:	10000726 	beq	r2,zero,51cf4 <OSQCreate+0x98>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   51cd8:	008001b4 	movhi	r2,6
   51cdc:	10ad4e04 	addi	r2,r2,-19144
   51ce0:	10800017 	ldw	r2,0(r2)
   51ce4:	10c00117 	ldw	r3,4(r2)
   51ce8:	008001b4 	movhi	r2,6
   51cec:	10ad4e04 	addi	r2,r2,-19144
   51cf0:	10c00015 	stw	r3,0(r2)
   51cf4:	e0bff717 	ldw	r2,-36(fp)
   51cf8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   51cfc:	e0bffa17 	ldw	r2,-24(fp)
   51d00:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
   51d04:	e0bff617 	ldw	r2,-40(fp)
   51d08:	10004d26 	beq	r2,zero,51e40 <OSQCreate+0x1e4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   51d0c:	0005303a 	rdctl	r2,status
   51d10:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   51d14:	e0fffb17 	ldw	r3,-20(fp)
   51d18:	00bfff84 	movi	r2,-2
   51d1c:	1884703a 	and	r2,r3,r2
   51d20:	1001703a 	wrctl	status,r2
  
  return context;
   51d24:	e0bffb17 	ldw	r2,-20(fp)
        OS_ENTER_CRITICAL();
   51d28:	e0bff715 	stw	r2,-36(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
   51d2c:	008001b4 	movhi	r2,6
   51d30:	10ad4c04 	addi	r2,r2,-19152
   51d34:	10800017 	ldw	r2,0(r2)
   51d38:	e0bff815 	stw	r2,-32(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
   51d3c:	e0bff817 	ldw	r2,-32(fp)
   51d40:	10003126 	beq	r2,zero,51e08 <OSQCreate+0x1ac>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
   51d44:	008001b4 	movhi	r2,6
   51d48:	10ad4c04 	addi	r2,r2,-19152
   51d4c:	10800017 	ldw	r2,0(r2)
   51d50:	10c00017 	ldw	r3,0(r2)
   51d54:	008001b4 	movhi	r2,6
   51d58:	10ad4c04 	addi	r2,r2,-19152
   51d5c:	10c00015 	stw	r3,0(r2)
   51d60:	e0bff717 	ldw	r2,-36(fp)
   51d64:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   51d68:	e0bffc17 	ldw	r2,-16(fp)
   51d6c:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
   51d70:	e0bff817 	ldw	r2,-32(fp)
   51d74:	e0fffe17 	ldw	r3,-8(fp)
   51d78:	10c00115 	stw	r3,4(r2)
            pq->OSQEnd             = &start[size];
   51d7c:	e0bfff0b 	ldhu	r2,-4(fp)
   51d80:	1085883a 	add	r2,r2,r2
   51d84:	1085883a 	add	r2,r2,r2
   51d88:	1007883a 	mov	r3,r2
   51d8c:	e0bffe17 	ldw	r2,-8(fp)
   51d90:	10c7883a 	add	r3,r2,r3
   51d94:	e0bff817 	ldw	r2,-32(fp)
   51d98:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
   51d9c:	e0bff817 	ldw	r2,-32(fp)
   51da0:	e0fffe17 	ldw	r3,-8(fp)
   51da4:	10c00315 	stw	r3,12(r2)
            pq->OSQOut             = start;
   51da8:	e0bff817 	ldw	r2,-32(fp)
   51dac:	e0fffe17 	ldw	r3,-8(fp)
   51db0:	10c00415 	stw	r3,16(r2)
            pq->OSQSize            = size;
   51db4:	e0bff817 	ldw	r2,-32(fp)
   51db8:	e0ffff0b 	ldhu	r3,-4(fp)
   51dbc:	10c0050d 	sth	r3,20(r2)
            pq->OSQEntries         = 0;
   51dc0:	e0bff817 	ldw	r2,-32(fp)
   51dc4:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
   51dc8:	e0bff617 	ldw	r2,-40(fp)
   51dcc:	00c00084 	movi	r3,2
   51dd0:	10c00005 	stb	r3,0(r2)
            pevent->OSEventCnt     = 0;
   51dd4:	e0bff617 	ldw	r2,-40(fp)
   51dd8:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
   51ddc:	e0bff617 	ldw	r2,-40(fp)
   51de0:	e0fff817 	ldw	r3,-32(fp)
   51de4:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
   51de8:	e0bff617 	ldw	r2,-40(fp)
   51dec:	00c00fc4 	movi	r3,63
   51df0:	10c00385 	stb	r3,14(r2)
            pevent->OSEventName[1] = OS_ASCII_NUL;
   51df4:	e0bff617 	ldw	r2,-40(fp)
   51df8:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
   51dfc:	e13ff617 	ldw	r4,-40(fp)
   51e00:	004eeb00 	call	4eeb0 <OS_EventWaitListInit>
   51e04:	00000e06 	br	51e40 <OSQCreate+0x1e4>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
   51e08:	008001b4 	movhi	r2,6
   51e0c:	10ad4e04 	addi	r2,r2,-19144
   51e10:	10c00017 	ldw	r3,0(r2)
   51e14:	e0bff617 	ldw	r2,-40(fp)
   51e18:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
   51e1c:	008001b4 	movhi	r2,6
   51e20:	10ad4e04 	addi	r2,r2,-19144
   51e24:	e0fff617 	ldw	r3,-40(fp)
   51e28:	10c00015 	stw	r3,0(r2)
   51e2c:	e0bff717 	ldw	r2,-36(fp)
   51e30:	e0bffd15 	stw	r2,-12(fp)
   51e34:	e0bffd17 	ldw	r2,-12(fp)
   51e38:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
   51e3c:	e03ff615 	stw	zero,-40(fp)
        }
    }
    return (pevent);
   51e40:	e0bff617 	ldw	r2,-40(fp)
}
   51e44:	e037883a 	mov	sp,fp
   51e48:	dfc00117 	ldw	ra,4(sp)
   51e4c:	df000017 	ldw	fp,0(sp)
   51e50:	dec00204 	addi	sp,sp,8
   51e54:	f800283a 	ret

00051e58 <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   51e58:	defff204 	addi	sp,sp,-56
   51e5c:	dfc00d15 	stw	ra,52(sp)
   51e60:	df000c15 	stw	fp,48(sp)
   51e64:	df000c04 	addi	fp,sp,48
   51e68:	e13ffd15 	stw	r4,-12(fp)
   51e6c:	2805883a 	mov	r2,r5
   51e70:	e1bfff15 	stw	r6,-4(fp)
   51e74:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   51e78:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   51e7c:	e0bfff17 	ldw	r2,-4(fp)
   51e80:	1000021e 	bne	r2,zero,51e8c <OSQDel+0x34>
        return (pevent);
   51e84:	e0bffd17 	ldw	r2,-12(fp)
   51e88:	0000a006 	br	5210c <OSQDel+0x2b4>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   51e8c:	e0bffd17 	ldw	r2,-12(fp)
   51e90:	1000051e 	bne	r2,zero,51ea8 <OSQDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   51e94:	e0bfff17 	ldw	r2,-4(fp)
   51e98:	00c00104 	movi	r3,4
   51e9c:	10c00005 	stb	r3,0(r2)
        return (pevent);
   51ea0:	e0bffd17 	ldw	r2,-12(fp)
   51ea4:	00009906 	br	5210c <OSQDel+0x2b4>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
   51ea8:	e0bffd17 	ldw	r2,-12(fp)
   51eac:	10800003 	ldbu	r2,0(r2)
   51eb0:	10803fcc 	andi	r2,r2,255
   51eb4:	108000a0 	cmpeqi	r2,r2,2
   51eb8:	1000051e 	bne	r2,zero,51ed0 <OSQDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   51ebc:	e0bfff17 	ldw	r2,-4(fp)
   51ec0:	00c00044 	movi	r3,1
   51ec4:	10c00005 	stb	r3,0(r2)
        return (pevent);
   51ec8:	e0bffd17 	ldw	r2,-12(fp)
   51ecc:	00008f06 	br	5210c <OSQDel+0x2b4>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   51ed0:	008001b4 	movhi	r2,6
   51ed4:	10ad4f04 	addi	r2,r2,-19140
   51ed8:	10800003 	ldbu	r2,0(r2)
   51edc:	10803fcc 	andi	r2,r2,255
   51ee0:	10000526 	beq	r2,zero,51ef8 <OSQDel+0xa0>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
   51ee4:	e0bfff17 	ldw	r2,-4(fp)
   51ee8:	00c003c4 	movi	r3,15
   51eec:	10c00005 	stb	r3,0(r2)
        return (pevent);
   51ef0:	e0bffd17 	ldw	r2,-12(fp)
   51ef4:	00008506 	br	5210c <OSQDel+0x2b4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   51ef8:	0005303a 	rdctl	r2,status
   51efc:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   51f00:	e0fff817 	ldw	r3,-32(fp)
   51f04:	00bfff84 	movi	r2,-2
   51f08:	1884703a 	and	r2,r3,r2
   51f0c:	1001703a 	wrctl	status,r2
  
  return context;
   51f10:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   51f14:	e0bff615 	stw	r2,-40(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
   51f18:	e0bffd17 	ldw	r2,-12(fp)
   51f1c:	10800283 	ldbu	r2,10(r2)
   51f20:	10803fcc 	andi	r2,r2,255
   51f24:	10000326 	beq	r2,zero,51f34 <OSQDel+0xdc>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   51f28:	00800044 	movi	r2,1
   51f2c:	e0bff405 	stb	r2,-48(fp)
   51f30:	00000106 	br	51f38 <OSQDel+0xe0>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   51f34:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
   51f38:	e0bffe03 	ldbu	r2,-8(fp)
   51f3c:	10000326 	beq	r2,zero,51f4c <OSQDel+0xf4>
   51f40:	10800060 	cmpeqi	r2,r2,1
   51f44:	1000381e 	bne	r2,zero,52028 <OSQDel+0x1d0>
   51f48:	00006506 	br	520e0 <OSQDel+0x288>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
   51f4c:	e0bff403 	ldbu	r2,-48(fp)
   51f50:	1000261e 	bne	r2,zero,51fec <OSQDel+0x194>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   51f54:	e0bffd17 	ldw	r2,-12(fp)
   51f58:	00c00fc4 	movi	r3,63
   51f5c:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   51f60:	e0bffd17 	ldw	r2,-12(fp)
   51f64:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
   51f68:	e0bffd17 	ldw	r2,-12(fp)
   51f6c:	10800117 	ldw	r2,4(r2)
   51f70:	e0bff715 	stw	r2,-36(fp)
                 pq->OSQPtr             = OSQFreeList;
   51f74:	008001b4 	movhi	r2,6
   51f78:	10ad4c04 	addi	r2,r2,-19152
   51f7c:	10c00017 	ldw	r3,0(r2)
   51f80:	e0bff717 	ldw	r2,-36(fp)
   51f84:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
   51f88:	008001b4 	movhi	r2,6
   51f8c:	10ad4c04 	addi	r2,r2,-19152
   51f90:	e0fff717 	ldw	r3,-36(fp)
   51f94:	10c00015 	stw	r3,0(r2)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   51f98:	e0bffd17 	ldw	r2,-12(fp)
   51f9c:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
   51fa0:	008001b4 	movhi	r2,6
   51fa4:	10ad4e04 	addi	r2,r2,-19144
   51fa8:	10c00017 	ldw	r3,0(r2)
   51fac:	e0bffd17 	ldw	r2,-12(fp)
   51fb0:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
   51fb4:	e0bffd17 	ldw	r2,-12(fp)
   51fb8:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
   51fbc:	008001b4 	movhi	r2,6
   51fc0:	10ad4e04 	addi	r2,r2,-19144
   51fc4:	e0fffd17 	ldw	r3,-12(fp)
   51fc8:	10c00015 	stw	r3,0(r2)
   51fcc:	e0bff617 	ldw	r2,-40(fp)
   51fd0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   51fd4:	e0bff917 	ldw	r2,-28(fp)
   51fd8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
   51fdc:	e0bfff17 	ldw	r2,-4(fp)
   51fe0:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
   51fe4:	e03ff515 	stw	zero,-44(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
   51fe8:	00004706 	br	52108 <OSQDel+0x2b0>
   51fec:	e0bff617 	ldw	r2,-40(fp)
   51ff0:	e0bffa15 	stw	r2,-24(fp)
   51ff4:	e0bffa17 	ldw	r2,-24(fp)
   51ff8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
   51ffc:	e0bfff17 	ldw	r2,-4(fp)
   52000:	00c01244 	movi	r3,73
   52004:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
   52008:	e0bffd17 	ldw	r2,-12(fp)
   5200c:	e0bff515 	stw	r2,-44(fp)
             }
             break;
   52010:	00003d06 	br	52108 <OSQDel+0x2b0>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
   52014:	e13ffd17 	ldw	r4,-12(fp)
   52018:	000b883a 	mov	r5,zero
   5201c:	01800104 	movi	r6,4
   52020:	000f883a 	mov	r7,zero
   52024:	004e9100 	call	4e910 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
   52028:	e0bffd17 	ldw	r2,-12(fp)
   5202c:	10800283 	ldbu	r2,10(r2)
   52030:	10803fcc 	andi	r2,r2,255
   52034:	103ff71e 	bne	r2,zero,52014 <__alt_data_end+0xfffe12d4>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   52038:	e0bffd17 	ldw	r2,-12(fp)
   5203c:	00c00fc4 	movi	r3,63
   52040:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   52044:	e0bffd17 	ldw	r2,-12(fp)
   52048:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
   5204c:	e0bffd17 	ldw	r2,-12(fp)
   52050:	10800117 	ldw	r2,4(r2)
   52054:	e0bff715 	stw	r2,-36(fp)
             pq->OSQPtr             = OSQFreeList;
   52058:	008001b4 	movhi	r2,6
   5205c:	10ad4c04 	addi	r2,r2,-19152
   52060:	10c00017 	ldw	r3,0(r2)
   52064:	e0bff717 	ldw	r2,-36(fp)
   52068:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
   5206c:	008001b4 	movhi	r2,6
   52070:	10ad4c04 	addi	r2,r2,-19152
   52074:	e0fff717 	ldw	r3,-36(fp)
   52078:	10c00015 	stw	r3,0(r2)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   5207c:	e0bffd17 	ldw	r2,-12(fp)
   52080:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   52084:	008001b4 	movhi	r2,6
   52088:	10ad4e04 	addi	r2,r2,-19144
   5208c:	10c00017 	ldw	r3,0(r2)
   52090:	e0bffd17 	ldw	r2,-12(fp)
   52094:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
   52098:	e0bffd17 	ldw	r2,-12(fp)
   5209c:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
   520a0:	008001b4 	movhi	r2,6
   520a4:	10ad4e04 	addi	r2,r2,-19144
   520a8:	e0fffd17 	ldw	r3,-12(fp)
   520ac:	10c00015 	stw	r3,0(r2)
   520b0:	e0bff617 	ldw	r2,-40(fp)
   520b4:	e0bffb15 	stw	r2,-20(fp)
   520b8:	e0bffb17 	ldw	r2,-20(fp)
   520bc:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   520c0:	e0bff403 	ldbu	r2,-48(fp)
   520c4:	10800058 	cmpnei	r2,r2,1
   520c8:	1000011e 	bne	r2,zero,520d0 <OSQDel+0x278>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   520cc:	004f3280 	call	4f328 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
   520d0:	e0bfff17 	ldw	r2,-4(fp)
   520d4:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
   520d8:	e03ff515 	stw	zero,-44(fp)
             break;
   520dc:	00000a06 	br	52108 <OSQDel+0x2b0>
   520e0:	e0bff617 	ldw	r2,-40(fp)
   520e4:	e0bffc15 	stw	r2,-16(fp)
   520e8:	e0bffc17 	ldw	r2,-16(fp)
   520ec:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
   520f0:	e0bfff17 	ldw	r2,-4(fp)
   520f4:	00c001c4 	movi	r3,7
   520f8:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
   520fc:	e0bffd17 	ldw	r2,-12(fp)
   52100:	e0bff515 	stw	r2,-44(fp)
             break;
   52104:	0001883a 	nop
    }
    return (pevent_return);
   52108:	e0bff517 	ldw	r2,-44(fp)
}
   5210c:	e037883a 	mov	sp,fp
   52110:	dfc00117 	ldw	ra,4(sp)
   52114:	df000017 	ldw	fp,0(sp)
   52118:	dec00204 	addi	sp,sp,8
   5211c:	f800283a 	ret

00052120 <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
   52120:	defffa04 	addi	sp,sp,-24
   52124:	df000515 	stw	fp,20(sp)
   52128:	df000504 	addi	fp,sp,20
   5212c:	e13fff15 	stw	r4,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   52130:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   52134:	e0bfff17 	ldw	r2,-4(fp)
   52138:	1000021e 	bne	r2,zero,52144 <OSQFlush+0x24>
        return (OS_ERR_PEVENT_NULL);
   5213c:	00800104 	movi	r2,4
   52140:	00002106 	br	521c8 <OSQFlush+0xa8>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   52144:	e0bfff17 	ldw	r2,-4(fp)
   52148:	10800003 	ldbu	r2,0(r2)
   5214c:	10803fcc 	andi	r2,r2,255
   52150:	108000a0 	cmpeqi	r2,r2,2
   52154:	1000021e 	bne	r2,zero,52160 <OSQFlush+0x40>
        return (OS_ERR_EVENT_TYPE);
   52158:	00800044 	movi	r2,1
   5215c:	00001a06 	br	521c8 <OSQFlush+0xa8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   52160:	0005303a 	rdctl	r2,status
   52164:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   52168:	e0fffd17 	ldw	r3,-12(fp)
   5216c:	00bfff84 	movi	r2,-2
   52170:	1884703a 	and	r2,r3,r2
   52174:	1001703a 	wrctl	status,r2
  
  return context;
   52178:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   5217c:	e0bffb15 	stw	r2,-20(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
   52180:	e0bfff17 	ldw	r2,-4(fp)
   52184:	10800117 	ldw	r2,4(r2)
   52188:	e0bffc15 	stw	r2,-16(fp)
    pq->OSQIn      = pq->OSQStart;
   5218c:	e0bffc17 	ldw	r2,-16(fp)
   52190:	10c00117 	ldw	r3,4(r2)
   52194:	e0bffc17 	ldw	r2,-16(fp)
   52198:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
   5219c:	e0bffc17 	ldw	r2,-16(fp)
   521a0:	10c00117 	ldw	r3,4(r2)
   521a4:	e0bffc17 	ldw	r2,-16(fp)
   521a8:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
   521ac:	e0bffc17 	ldw	r2,-16(fp)
   521b0:	1000058d 	sth	zero,22(r2)
   521b4:	e0bffb17 	ldw	r2,-20(fp)
   521b8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   521bc:	e0bffe17 	ldw	r2,-8(fp)
   521c0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   521c4:	0005883a 	mov	r2,zero
}
   521c8:	e037883a 	mov	sp,fp
   521cc:	df000017 	ldw	fp,0(sp)
   521d0:	dec00104 	addi	sp,sp,4
   521d4:	f800283a 	ret

000521d8 <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   521d8:	defff304 	addi	sp,sp,-52
   521dc:	dfc00c15 	stw	ra,48(sp)
   521e0:	df000b15 	stw	fp,44(sp)
   521e4:	df000b04 	addi	fp,sp,44
   521e8:	e13ffd15 	stw	r4,-12(fp)
   521ec:	2805883a 	mov	r2,r5
   521f0:	e1bfff15 	stw	r6,-4(fp)
   521f4:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   521f8:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   521fc:	e0bfff17 	ldw	r2,-4(fp)
   52200:	1000021e 	bne	r2,zero,5220c <OSQPend+0x34>
        return ((void *)0);
   52204:	0005883a 	mov	r2,zero
   52208:	0000ad06 	br	524c0 <OSQPend+0x2e8>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
   5220c:	e0bffd17 	ldw	r2,-12(fp)
   52210:	1000051e 	bne	r2,zero,52228 <OSQPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   52214:	e0bfff17 	ldw	r2,-4(fp)
   52218:	00c00104 	movi	r3,4
   5221c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   52220:	0005883a 	mov	r2,zero
   52224:	0000a606 	br	524c0 <OSQPend+0x2e8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
   52228:	e0bffd17 	ldw	r2,-12(fp)
   5222c:	10800003 	ldbu	r2,0(r2)
   52230:	10803fcc 	andi	r2,r2,255
   52234:	108000a0 	cmpeqi	r2,r2,2
   52238:	1000051e 	bne	r2,zero,52250 <OSQPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   5223c:	e0bfff17 	ldw	r2,-4(fp)
   52240:	00c00044 	movi	r3,1
   52244:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   52248:	0005883a 	mov	r2,zero
   5224c:	00009c06 	br	524c0 <OSQPend+0x2e8>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   52250:	008001b4 	movhi	r2,6
   52254:	10ad4f04 	addi	r2,r2,-19140
   52258:	10800003 	ldbu	r2,0(r2)
   5225c:	10803fcc 	andi	r2,r2,255
   52260:	10000526 	beq	r2,zero,52278 <OSQPend+0xa0>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
   52264:	e0bfff17 	ldw	r2,-4(fp)
   52268:	00c00084 	movi	r3,2
   5226c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   52270:	0005883a 	mov	r2,zero
   52274:	00009206 	br	524c0 <OSQPend+0x2e8>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
   52278:	008001b4 	movhi	r2,6
   5227c:	10ad4104 	addi	r2,r2,-19196
   52280:	10800003 	ldbu	r2,0(r2)
   52284:	10803fcc 	andi	r2,r2,255
   52288:	10000526 	beq	r2,zero,522a0 <OSQPend+0xc8>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
   5228c:	e0bfff17 	ldw	r2,-4(fp)
   52290:	00c00344 	movi	r3,13
   52294:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   52298:	0005883a 	mov	r2,zero
   5229c:	00008806 	br	524c0 <OSQPend+0x2e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   522a0:	0005303a 	rdctl	r2,status
   522a4:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   522a8:	e0fff817 	ldw	r3,-32(fp)
   522ac:	00bfff84 	movi	r2,-2
   522b0:	1884703a 	and	r2,r3,r2
   522b4:	1001703a 	wrctl	status,r2
  
  return context;
   522b8:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   522bc:	e0bff615 	stw	r2,-40(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
   522c0:	e0bffd17 	ldw	r2,-12(fp)
   522c4:	10800117 	ldw	r2,4(r2)
   522c8:	e0bff715 	stw	r2,-36(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
   522cc:	e0bff717 	ldw	r2,-36(fp)
   522d0:	1080058b 	ldhu	r2,22(r2)
   522d4:	10bfffcc 	andi	r2,r2,65535
   522d8:	10001e26 	beq	r2,zero,52354 <OSQPend+0x17c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
   522dc:	e0bff717 	ldw	r2,-36(fp)
   522e0:	10800417 	ldw	r2,16(r2)
   522e4:	11000104 	addi	r4,r2,4
   522e8:	e0fff717 	ldw	r3,-36(fp)
   522ec:	19000415 	stw	r4,16(r3)
   522f0:	10800017 	ldw	r2,0(r2)
   522f4:	e0bff515 	stw	r2,-44(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
   522f8:	e0bff717 	ldw	r2,-36(fp)
   522fc:	1080058b 	ldhu	r2,22(r2)
   52300:	10bfffc4 	addi	r2,r2,-1
   52304:	1007883a 	mov	r3,r2
   52308:	e0bff717 	ldw	r2,-36(fp)
   5230c:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
   52310:	e0bff717 	ldw	r2,-36(fp)
   52314:	10c00417 	ldw	r3,16(r2)
   52318:	e0bff717 	ldw	r2,-36(fp)
   5231c:	10800217 	ldw	r2,8(r2)
   52320:	1880041e 	bne	r3,r2,52334 <OSQPend+0x15c>
            pq->OSQOut = pq->OSQStart;
   52324:	e0bff717 	ldw	r2,-36(fp)
   52328:	10c00117 	ldw	r3,4(r2)
   5232c:	e0bff717 	ldw	r2,-36(fp)
   52330:	10c00415 	stw	r3,16(r2)
   52334:	e0bff617 	ldw	r2,-40(fp)
   52338:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   5233c:	e0bff917 	ldw	r2,-28(fp)
   52340:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
   52344:	e0bfff17 	ldw	r2,-4(fp)
   52348:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
   5234c:	e0bff517 	ldw	r2,-44(fp)
   52350:	00005b06 	br	524c0 <OSQPend+0x2e8>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
   52354:	008001b4 	movhi	r2,6
   52358:	10ad5004 	addi	r2,r2,-19136
   5235c:	10c00017 	ldw	r3,0(r2)
   52360:	008001b4 	movhi	r2,6
   52364:	10ad5004 	addi	r2,r2,-19136
   52368:	10800017 	ldw	r2,0(r2)
   5236c:	10800c03 	ldbu	r2,48(r2)
   52370:	10800114 	ori	r2,r2,4
   52374:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   52378:	008001b4 	movhi	r2,6
   5237c:	10ad5004 	addi	r2,r2,-19136
   52380:	10800017 	ldw	r2,0(r2)
   52384:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
   52388:	008001b4 	movhi	r2,6
   5238c:	10ad5004 	addi	r2,r2,-19136
   52390:	10800017 	ldw	r2,0(r2)
   52394:	e0fffe0b 	ldhu	r3,-8(fp)
   52398:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
   5239c:	e13ffd17 	ldw	r4,-12(fp)
   523a0:	004eaa80 	call	4eaa8 <OS_EventTaskWait>
   523a4:	e0bff617 	ldw	r2,-40(fp)
   523a8:	e0bffa15 	stw	r2,-24(fp)
   523ac:	e0bffa17 	ldw	r2,-24(fp)
   523b0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
   523b4:	004f3280 	call	4f328 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   523b8:	0005303a 	rdctl	r2,status
   523bc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   523c0:	e0fffb17 	ldw	r3,-20(fp)
   523c4:	00bfff84 	movi	r2,-2
   523c8:	1884703a 	and	r2,r3,r2
   523cc:	1001703a 	wrctl	status,r2
  
  return context;
   523d0:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
   523d4:	e0bff615 	stw	r2,-40(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   523d8:	008001b4 	movhi	r2,6
   523dc:	10ad5004 	addi	r2,r2,-19136
   523e0:	10800017 	ldw	r2,0(r2)
   523e4:	10800c43 	ldbu	r2,49(r2)
   523e8:	10803fcc 	andi	r2,r2,255
   523ec:	10000326 	beq	r2,zero,523fc <OSQPend+0x224>
   523f0:	108000a0 	cmpeqi	r2,r2,2
   523f4:	1000091e 	bne	r2,zero,5241c <OSQPend+0x244>
   523f8:	00000d06 	br	52430 <OSQPend+0x258>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
   523fc:	008001b4 	movhi	r2,6
   52400:	10ad5004 	addi	r2,r2,-19136
   52404:	10800017 	ldw	r2,0(r2)
   52408:	10800917 	ldw	r2,36(r2)
   5240c:	e0bff515 	stw	r2,-44(fp)
            *perr =  OS_ERR_NONE;
   52410:	e0bfff17 	ldw	r2,-4(fp)
   52414:	10000005 	stb	zero,0(r2)
             break;
   52418:	00001006 	br	5245c <OSQPend+0x284>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
   5241c:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   52420:	e0bfff17 	ldw	r2,-4(fp)
   52424:	00c00384 	movi	r3,14
   52428:	10c00005 	stb	r3,0(r2)
             break;
   5242c:	00000b06 	br	5245c <OSQPend+0x284>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
   52430:	008001b4 	movhi	r2,6
   52434:	10ad5004 	addi	r2,r2,-19136
   52438:	10800017 	ldw	r2,0(r2)
   5243c:	1009883a 	mov	r4,r2
   52440:	e17ffd17 	ldw	r5,-12(fp)
   52444:	004ed000 	call	4ed00 <OS_EventTaskRemove>
             pmsg = (void *)0;
   52448:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   5244c:	e0bfff17 	ldw	r2,-4(fp)
   52450:	00c00284 	movi	r3,10
   52454:	10c00005 	stb	r3,0(r2)
             break;
   52458:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   5245c:	008001b4 	movhi	r2,6
   52460:	10ad5004 	addi	r2,r2,-19136
   52464:	10800017 	ldw	r2,0(r2)
   52468:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   5246c:	008001b4 	movhi	r2,6
   52470:	10ad5004 	addi	r2,r2,-19136
   52474:	10800017 	ldw	r2,0(r2)
   52478:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   5247c:	008001b4 	movhi	r2,6
   52480:	10ad5004 	addi	r2,r2,-19136
   52484:	10800017 	ldw	r2,0(r2)
   52488:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   5248c:	008001b4 	movhi	r2,6
   52490:	10ad5004 	addi	r2,r2,-19136
   52494:	10800017 	ldw	r2,0(r2)
   52498:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
   5249c:	008001b4 	movhi	r2,6
   524a0:	10ad5004 	addi	r2,r2,-19136
   524a4:	10800017 	ldw	r2,0(r2)
   524a8:	10000915 	stw	zero,36(r2)
   524ac:	e0bff617 	ldw	r2,-40(fp)
   524b0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   524b4:	e0bffc17 	ldw	r2,-16(fp)
   524b8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
   524bc:	e0bff517 	ldw	r2,-44(fp)
}
   524c0:	e037883a 	mov	sp,fp
   524c4:	dfc00117 	ldw	ra,4(sp)
   524c8:	df000017 	ldw	fp,0(sp)
   524cc:	dec00204 	addi	sp,sp,8
   524d0:	f800283a 	ret

000524d4 <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   524d4:	defff604 	addi	sp,sp,-40
   524d8:	dfc00915 	stw	ra,36(sp)
   524dc:	df000815 	stw	fp,32(sp)
   524e0:	df000804 	addi	fp,sp,32
   524e4:	e13ffd15 	stw	r4,-12(fp)
   524e8:	2805883a 	mov	r2,r5
   524ec:	e1bfff15 	stw	r6,-4(fp)
   524f0:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   524f4:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   524f8:	e0bfff17 	ldw	r2,-4(fp)
   524fc:	1000021e 	bne	r2,zero,52508 <OSQPendAbort+0x34>
        return (0);
   52500:	0005883a 	mov	r2,zero
   52504:	00004906 	br	5262c <OSQPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   52508:	e0bffd17 	ldw	r2,-12(fp)
   5250c:	1000051e 	bne	r2,zero,52524 <OSQPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   52510:	e0bfff17 	ldw	r2,-4(fp)
   52514:	00c00104 	movi	r3,4
   52518:	10c00005 	stb	r3,0(r2)
        return (0);
   5251c:	0005883a 	mov	r2,zero
   52520:	00004206 	br	5262c <OSQPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
   52524:	e0bffd17 	ldw	r2,-12(fp)
   52528:	10800003 	ldbu	r2,0(r2)
   5252c:	10803fcc 	andi	r2,r2,255
   52530:	108000a0 	cmpeqi	r2,r2,2
   52534:	1000051e 	bne	r2,zero,5254c <OSQPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   52538:	e0bfff17 	ldw	r2,-4(fp)
   5253c:	00c00044 	movi	r3,1
   52540:	10c00005 	stb	r3,0(r2)
        return (0);
   52544:	0005883a 	mov	r2,zero
   52548:	00003806 	br	5262c <OSQPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   5254c:	0005303a 	rdctl	r2,status
   52550:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   52554:	e0fffa17 	ldw	r3,-24(fp)
   52558:	00bfff84 	movi	r2,-2
   5255c:	1884703a 	and	r2,r3,r2
   52560:	1001703a 	wrctl	status,r2
  
  return context;
   52564:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   52568:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
   5256c:	e0bffd17 	ldw	r2,-12(fp)
   52570:	10800283 	ldbu	r2,10(r2)
   52574:	10803fcc 	andi	r2,r2,255
   52578:	10002526 	beq	r2,zero,52610 <OSQPendAbort+0x13c>
        nbr_tasks = 0;
   5257c:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
   52580:	e0bffe03 	ldbu	r2,-8(fp)
   52584:	10800060 	cmpeqi	r2,r2,1
   52588:	10000e26 	beq	r2,zero,525c4 <OSQPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
   5258c:	00000806 	br	525b0 <OSQPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
   52590:	e13ffd17 	ldw	r4,-12(fp)
   52594:	000b883a 	mov	r5,zero
   52598:	01800104 	movi	r6,4
   5259c:	01c00084 	movi	r7,2
   525a0:	004e9100 	call	4e910 <OS_EventTaskRdy>
                     nbr_tasks++;
   525a4:	e0bff803 	ldbu	r2,-32(fp)
   525a8:	10800044 	addi	r2,r2,1
   525ac:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
   525b0:	e0bffd17 	ldw	r2,-12(fp)
   525b4:	10800283 	ldbu	r2,10(r2)
   525b8:	10803fcc 	andi	r2,r2,255
   525bc:	103ff41e 	bne	r2,zero,52590 <__alt_data_end+0xfffe1850>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
   525c0:	00000906 	br	525e8 <OSQPendAbort+0x114>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
   525c4:	e13ffd17 	ldw	r4,-12(fp)
   525c8:	000b883a 	mov	r5,zero
   525cc:	01800104 	movi	r6,4
   525d0:	01c00084 	movi	r7,2
   525d4:	004e9100 	call	4e910 <OS_EventTaskRdy>
                 nbr_tasks++;
   525d8:	e0bff803 	ldbu	r2,-32(fp)
   525dc:	10800044 	addi	r2,r2,1
   525e0:	e0bff805 	stb	r2,-32(fp)
                 break;
   525e4:	0001883a 	nop
   525e8:	e0bff917 	ldw	r2,-28(fp)
   525ec:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   525f0:	e0bffb17 	ldw	r2,-20(fp)
   525f4:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
   525f8:	004f3280 	call	4f328 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
   525fc:	e0bfff17 	ldw	r2,-4(fp)
   52600:	00c00384 	movi	r3,14
   52604:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
   52608:	e0bff803 	ldbu	r2,-32(fp)
   5260c:	00000706 	br	5262c <OSQPendAbort+0x158>
   52610:	e0bff917 	ldw	r2,-28(fp)
   52614:	e0bffc15 	stw	r2,-16(fp)
   52618:	e0bffc17 	ldw	r2,-16(fp)
   5261c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   52620:	e0bfff17 	ldw	r2,-4(fp)
   52624:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
   52628:	0005883a 	mov	r2,zero
}
   5262c:	e037883a 	mov	sp,fp
   52630:	dfc00117 	ldw	ra,4(sp)
   52634:	df000017 	ldw	fp,0(sp)
   52638:	dec00204 	addi	sp,sp,8
   5263c:	f800283a 	ret

00052640 <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
   52640:	defff604 	addi	sp,sp,-40
   52644:	dfc00915 	stw	ra,36(sp)
   52648:	df000815 	stw	fp,32(sp)
   5264c:	df000804 	addi	fp,sp,32
   52650:	e13ffe15 	stw	r4,-8(fp)
   52654:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   52658:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
   5265c:	e0bffe17 	ldw	r2,-8(fp)
   52660:	1000021e 	bne	r2,zero,5266c <OSQPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
   52664:	00800104 	movi	r2,4
   52668:	00004a06 	br	52794 <OSQPost+0x154>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
   5266c:	e0bffe17 	ldw	r2,-8(fp)
   52670:	10800003 	ldbu	r2,0(r2)
   52674:	10803fcc 	andi	r2,r2,255
   52678:	108000a0 	cmpeqi	r2,r2,2
   5267c:	1000021e 	bne	r2,zero,52688 <OSQPost+0x48>
        return (OS_ERR_EVENT_TYPE);
   52680:	00800044 	movi	r2,1
   52684:	00004306 	br	52794 <OSQPost+0x154>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   52688:	0005303a 	rdctl	r2,status
   5268c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   52690:	e0fffa17 	ldw	r3,-24(fp)
   52694:	00bfff84 	movi	r2,-2
   52698:	1884703a 	and	r2,r3,r2
   5269c:	1001703a 	wrctl	status,r2
  
  return context;
   526a0:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   526a4:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
   526a8:	e0bffe17 	ldw	r2,-8(fp)
   526ac:	10800283 	ldbu	r2,10(r2)
   526b0:	10803fcc 	andi	r2,r2,255
   526b4:	10000c26 	beq	r2,zero,526e8 <OSQPost+0xa8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   526b8:	e13ffe17 	ldw	r4,-8(fp)
   526bc:	e17fff17 	ldw	r5,-4(fp)
   526c0:	01800104 	movi	r6,4
   526c4:	000f883a 	mov	r7,zero
   526c8:	004e9100 	call	4e910 <OS_EventTaskRdy>
   526cc:	e0bff817 	ldw	r2,-32(fp)
   526d0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   526d4:	e0bffb17 	ldw	r2,-20(fp)
   526d8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
   526dc:	004f3280 	call	4f328 <OS_Sched>
        return (OS_ERR_NONE);
   526e0:	0005883a 	mov	r2,zero
   526e4:	00002b06 	br	52794 <OSQPost+0x154>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
   526e8:	e0bffe17 	ldw	r2,-8(fp)
   526ec:	10800117 	ldw	r2,4(r2)
   526f0:	e0bff915 	stw	r2,-28(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
   526f4:	e0bff917 	ldw	r2,-28(fp)
   526f8:	10c0058b 	ldhu	r3,22(r2)
   526fc:	e0bff917 	ldw	r2,-28(fp)
   52700:	1080050b 	ldhu	r2,20(r2)
   52704:	18ffffcc 	andi	r3,r3,65535
   52708:	10bfffcc 	andi	r2,r2,65535
   5270c:	18800636 	bltu	r3,r2,52728 <OSQPost+0xe8>
   52710:	e0bff817 	ldw	r2,-32(fp)
   52714:	e0bffc15 	stw	r2,-16(fp)
   52718:	e0bffc17 	ldw	r2,-16(fp)
   5271c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   52720:	00800784 	movi	r2,30
   52724:	00001b06 	br	52794 <OSQPost+0x154>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
   52728:	e0bff917 	ldw	r2,-28(fp)
   5272c:	10800317 	ldw	r2,12(r2)
   52730:	11000104 	addi	r4,r2,4
   52734:	e0fff917 	ldw	r3,-28(fp)
   52738:	19000315 	stw	r4,12(r3)
   5273c:	e0ffff17 	ldw	r3,-4(fp)
   52740:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
   52744:	e0bff917 	ldw	r2,-28(fp)
   52748:	1080058b 	ldhu	r2,22(r2)
   5274c:	10800044 	addi	r2,r2,1
   52750:	1007883a 	mov	r3,r2
   52754:	e0bff917 	ldw	r2,-28(fp)
   52758:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
   5275c:	e0bff917 	ldw	r2,-28(fp)
   52760:	10c00317 	ldw	r3,12(r2)
   52764:	e0bff917 	ldw	r2,-28(fp)
   52768:	10800217 	ldw	r2,8(r2)
   5276c:	1880041e 	bne	r3,r2,52780 <OSQPost+0x140>
        pq->OSQIn = pq->OSQStart;
   52770:	e0bff917 	ldw	r2,-28(fp)
   52774:	10c00117 	ldw	r3,4(r2)
   52778:	e0bff917 	ldw	r2,-28(fp)
   5277c:	10c00315 	stw	r3,12(r2)
   52780:	e0bff817 	ldw	r2,-32(fp)
   52784:	e0bffd15 	stw	r2,-12(fp)
   52788:	e0bffd17 	ldw	r2,-12(fp)
   5278c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   52790:	0005883a 	mov	r2,zero
}
   52794:	e037883a 	mov	sp,fp
   52798:	dfc00117 	ldw	ra,4(sp)
   5279c:	df000017 	ldw	fp,0(sp)
   527a0:	dec00204 	addi	sp,sp,8
   527a4:	f800283a 	ret

000527a8 <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
   527a8:	defff604 	addi	sp,sp,-40
   527ac:	dfc00915 	stw	ra,36(sp)
   527b0:	df000815 	stw	fp,32(sp)
   527b4:	df000804 	addi	fp,sp,32
   527b8:	e13ffe15 	stw	r4,-8(fp)
   527bc:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   527c0:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   527c4:	e0bffe17 	ldw	r2,-8(fp)
   527c8:	1000021e 	bne	r2,zero,527d4 <OSQPostFront+0x2c>
        return (OS_ERR_PEVENT_NULL);
   527cc:	00800104 	movi	r2,4
   527d0:	00004c06 	br	52904 <OSQPostFront+0x15c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   527d4:	e0bffe17 	ldw	r2,-8(fp)
   527d8:	10800003 	ldbu	r2,0(r2)
   527dc:	10803fcc 	andi	r2,r2,255
   527e0:	108000a0 	cmpeqi	r2,r2,2
   527e4:	1000021e 	bne	r2,zero,527f0 <OSQPostFront+0x48>
        return (OS_ERR_EVENT_TYPE);
   527e8:	00800044 	movi	r2,1
   527ec:	00004506 	br	52904 <OSQPostFront+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   527f0:	0005303a 	rdctl	r2,status
   527f4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   527f8:	e0fffa17 	ldw	r3,-24(fp)
   527fc:	00bfff84 	movi	r2,-2
   52800:	1884703a 	and	r2,r3,r2
   52804:	1001703a 	wrctl	status,r2
  
  return context;
   52808:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   5280c:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
   52810:	e0bffe17 	ldw	r2,-8(fp)
   52814:	10800283 	ldbu	r2,10(r2)
   52818:	10803fcc 	andi	r2,r2,255
   5281c:	10000c26 	beq	r2,zero,52850 <OSQPostFront+0xa8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   52820:	e13ffe17 	ldw	r4,-8(fp)
   52824:	e17fff17 	ldw	r5,-4(fp)
   52828:	01800104 	movi	r6,4
   5282c:	000f883a 	mov	r7,zero
   52830:	004e9100 	call	4e910 <OS_EventTaskRdy>
   52834:	e0bff817 	ldw	r2,-32(fp)
   52838:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   5283c:	e0bffb17 	ldw	r2,-20(fp)
   52840:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
   52844:	004f3280 	call	4f328 <OS_Sched>
        return (OS_ERR_NONE);
   52848:	0005883a 	mov	r2,zero
   5284c:	00002d06 	br	52904 <OSQPostFront+0x15c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
   52850:	e0bffe17 	ldw	r2,-8(fp)
   52854:	10800117 	ldw	r2,4(r2)
   52858:	e0bff915 	stw	r2,-28(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
   5285c:	e0bff917 	ldw	r2,-28(fp)
   52860:	10c0058b 	ldhu	r3,22(r2)
   52864:	e0bff917 	ldw	r2,-28(fp)
   52868:	1080050b 	ldhu	r2,20(r2)
   5286c:	18ffffcc 	andi	r3,r3,65535
   52870:	10bfffcc 	andi	r2,r2,65535
   52874:	18800636 	bltu	r3,r2,52890 <OSQPostFront+0xe8>
   52878:	e0bff817 	ldw	r2,-32(fp)
   5287c:	e0bffc15 	stw	r2,-16(fp)
   52880:	e0bffc17 	ldw	r2,-16(fp)
   52884:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   52888:	00800784 	movi	r2,30
   5288c:	00001d06 	br	52904 <OSQPostFront+0x15c>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
   52890:	e0bff917 	ldw	r2,-28(fp)
   52894:	10c00417 	ldw	r3,16(r2)
   52898:	e0bff917 	ldw	r2,-28(fp)
   5289c:	10800117 	ldw	r2,4(r2)
   528a0:	1880041e 	bne	r3,r2,528b4 <OSQPostFront+0x10c>
        pq->OSQOut = pq->OSQEnd;
   528a4:	e0bff917 	ldw	r2,-28(fp)
   528a8:	10c00217 	ldw	r3,8(r2)
   528ac:	e0bff917 	ldw	r2,-28(fp)
   528b0:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
   528b4:	e0bff917 	ldw	r2,-28(fp)
   528b8:	10800417 	ldw	r2,16(r2)
   528bc:	10ffff04 	addi	r3,r2,-4
   528c0:	e0bff917 	ldw	r2,-28(fp)
   528c4:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
   528c8:	e0bff917 	ldw	r2,-28(fp)
   528cc:	10800417 	ldw	r2,16(r2)
   528d0:	e0ffff17 	ldw	r3,-4(fp)
   528d4:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
   528d8:	e0bff917 	ldw	r2,-28(fp)
   528dc:	1080058b 	ldhu	r2,22(r2)
   528e0:	10800044 	addi	r2,r2,1
   528e4:	1007883a 	mov	r3,r2
   528e8:	e0bff917 	ldw	r2,-28(fp)
   528ec:	10c0058d 	sth	r3,22(r2)
   528f0:	e0bff817 	ldw	r2,-32(fp)
   528f4:	e0bffd15 	stw	r2,-12(fp)
   528f8:	e0bffd17 	ldw	r2,-12(fp)
   528fc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   52900:	0005883a 	mov	r2,zero
}
   52904:	e037883a 	mov	sp,fp
   52908:	dfc00117 	ldw	ra,4(sp)
   5290c:	df000017 	ldw	fp,0(sp)
   52910:	dec00204 	addi	sp,sp,8
   52914:	f800283a 	ret

00052918 <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
   52918:	defff504 	addi	sp,sp,-44
   5291c:	dfc00a15 	stw	ra,40(sp)
   52920:	df000915 	stw	fp,36(sp)
   52924:	df000904 	addi	fp,sp,36
   52928:	e13ffd15 	stw	r4,-12(fp)
   5292c:	e17ffe15 	stw	r5,-8(fp)
   52930:	3005883a 	mov	r2,r6
   52934:	e0bfff05 	stb	r2,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   52938:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   5293c:	e0bffd17 	ldw	r2,-12(fp)
   52940:	1000021e 	bne	r2,zero,5294c <OSQPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
   52944:	00800104 	movi	r2,4
   52948:	00007106 	br	52b10 <OSQPostOpt+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   5294c:	e0bffd17 	ldw	r2,-12(fp)
   52950:	10800003 	ldbu	r2,0(r2)
   52954:	10803fcc 	andi	r2,r2,255
   52958:	108000a0 	cmpeqi	r2,r2,2
   5295c:	1000021e 	bne	r2,zero,52968 <OSQPostOpt+0x50>
        return (OS_ERR_EVENT_TYPE);
   52960:	00800044 	movi	r2,1
   52964:	00006a06 	br	52b10 <OSQPostOpt+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   52968:	0005303a 	rdctl	r2,status
   5296c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   52970:	e0fff917 	ldw	r3,-28(fp)
   52974:	00bfff84 	movi	r2,-2
   52978:	1884703a 	and	r2,r3,r2
   5297c:	1001703a 	wrctl	status,r2
  
  return context;
   52980:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   52984:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
   52988:	e0bffd17 	ldw	r2,-12(fp)
   5298c:	10800283 	ldbu	r2,10(r2)
   52990:	10803fcc 	andi	r2,r2,255
   52994:	10001d26 	beq	r2,zero,52a0c <OSQPostOpt+0xf4>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
   52998:	e0bfff03 	ldbu	r2,-4(fp)
   5299c:	1080004c 	andi	r2,r2,1
   529a0:	10000b26 	beq	r2,zero,529d0 <OSQPostOpt+0xb8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
   529a4:	00000506 	br	529bc <OSQPostOpt+0xa4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   529a8:	e13ffd17 	ldw	r4,-12(fp)
   529ac:	e17ffe17 	ldw	r5,-8(fp)
   529b0:	01800104 	movi	r6,4
   529b4:	000f883a 	mov	r7,zero
   529b8:	004e9100 	call	4e910 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
   529bc:	e0bffd17 	ldw	r2,-12(fp)
   529c0:	10800283 	ldbu	r2,10(r2)
   529c4:	10803fcc 	andi	r2,r2,255
   529c8:	103ff71e 	bne	r2,zero,529a8 <__alt_data_end+0xfffe1c68>
   529cc:	00000506 	br	529e4 <OSQPostOpt+0xcc>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   529d0:	e13ffd17 	ldw	r4,-12(fp)
   529d4:	e17ffe17 	ldw	r5,-8(fp)
   529d8:	01800104 	movi	r6,4
   529dc:	000f883a 	mov	r7,zero
   529e0:	004e9100 	call	4e910 <OS_EventTaskRdy>
   529e4:	e0bff717 	ldw	r2,-36(fp)
   529e8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   529ec:	e0bffa17 	ldw	r2,-24(fp)
   529f0:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
   529f4:	e0bfff03 	ldbu	r2,-4(fp)
   529f8:	1080010c 	andi	r2,r2,4
   529fc:	1000011e 	bne	r2,zero,52a04 <OSQPostOpt+0xec>
            OS_Sched();                               /* Find highest priority task ready to run       */
   52a00:	004f3280 	call	4f328 <OS_Sched>
        }
        return (OS_ERR_NONE);
   52a04:	0005883a 	mov	r2,zero
   52a08:	00004106 	br	52b10 <OSQPostOpt+0x1f8>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
   52a0c:	e0bffd17 	ldw	r2,-12(fp)
   52a10:	10800117 	ldw	r2,4(r2)
   52a14:	e0bff815 	stw	r2,-32(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
   52a18:	e0bff817 	ldw	r2,-32(fp)
   52a1c:	10c0058b 	ldhu	r3,22(r2)
   52a20:	e0bff817 	ldw	r2,-32(fp)
   52a24:	1080050b 	ldhu	r2,20(r2)
   52a28:	18ffffcc 	andi	r3,r3,65535
   52a2c:	10bfffcc 	andi	r2,r2,65535
   52a30:	18800636 	bltu	r3,r2,52a4c <OSQPostOpt+0x134>
   52a34:	e0bff717 	ldw	r2,-36(fp)
   52a38:	e0bffb15 	stw	r2,-20(fp)
   52a3c:	e0bffb17 	ldw	r2,-20(fp)
   52a40:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   52a44:	00800784 	movi	r2,30
   52a48:	00003106 	br	52b10 <OSQPostOpt+0x1f8>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
   52a4c:	e0bfff03 	ldbu	r2,-4(fp)
   52a50:	1080008c 	andi	r2,r2,2
   52a54:	10001326 	beq	r2,zero,52aa4 <OSQPostOpt+0x18c>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
   52a58:	e0bff817 	ldw	r2,-32(fp)
   52a5c:	10c00417 	ldw	r3,16(r2)
   52a60:	e0bff817 	ldw	r2,-32(fp)
   52a64:	10800117 	ldw	r2,4(r2)
   52a68:	1880041e 	bne	r3,r2,52a7c <OSQPostOpt+0x164>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
   52a6c:	e0bff817 	ldw	r2,-32(fp)
   52a70:	10c00217 	ldw	r3,8(r2)
   52a74:	e0bff817 	ldw	r2,-32(fp)
   52a78:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
   52a7c:	e0bff817 	ldw	r2,-32(fp)
   52a80:	10800417 	ldw	r2,16(r2)
   52a84:	10ffff04 	addi	r3,r2,-4
   52a88:	e0bff817 	ldw	r2,-32(fp)
   52a8c:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
   52a90:	e0bff817 	ldw	r2,-32(fp)
   52a94:	10800417 	ldw	r2,16(r2)
   52a98:	e0fffe17 	ldw	r3,-8(fp)
   52a9c:	10c00015 	stw	r3,0(r2)
   52aa0:	00001006 	br	52ae4 <OSQPostOpt+0x1cc>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
   52aa4:	e0bff817 	ldw	r2,-32(fp)
   52aa8:	10800317 	ldw	r2,12(r2)
   52aac:	11000104 	addi	r4,r2,4
   52ab0:	e0fff817 	ldw	r3,-32(fp)
   52ab4:	19000315 	stw	r4,12(r3)
   52ab8:	e0fffe17 	ldw	r3,-8(fp)
   52abc:	10c00015 	stw	r3,0(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
   52ac0:	e0bff817 	ldw	r2,-32(fp)
   52ac4:	10c00317 	ldw	r3,12(r2)
   52ac8:	e0bff817 	ldw	r2,-32(fp)
   52acc:	10800217 	ldw	r2,8(r2)
   52ad0:	1880041e 	bne	r3,r2,52ae4 <OSQPostOpt+0x1cc>
            pq->OSQIn = pq->OSQStart;
   52ad4:	e0bff817 	ldw	r2,-32(fp)
   52ad8:	10c00117 	ldw	r3,4(r2)
   52adc:	e0bff817 	ldw	r2,-32(fp)
   52ae0:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
   52ae4:	e0bff817 	ldw	r2,-32(fp)
   52ae8:	1080058b 	ldhu	r2,22(r2)
   52aec:	10800044 	addi	r2,r2,1
   52af0:	1007883a 	mov	r3,r2
   52af4:	e0bff817 	ldw	r2,-32(fp)
   52af8:	10c0058d 	sth	r3,22(r2)
   52afc:	e0bff717 	ldw	r2,-36(fp)
   52b00:	e0bffc15 	stw	r2,-16(fp)
   52b04:	e0bffc17 	ldw	r2,-16(fp)
   52b08:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   52b0c:	0005883a 	mov	r2,zero
}
   52b10:	e037883a 	mov	sp,fp
   52b14:	dfc00117 	ldw	ra,4(sp)
   52b18:	df000017 	ldw	fp,0(sp)
   52b1c:	dec00204 	addi	sp,sp,8
   52b20:	f800283a 	ret

00052b24 <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
   52b24:	defff604 	addi	sp,sp,-40
   52b28:	df000915 	stw	fp,36(sp)
   52b2c:	df000904 	addi	fp,sp,36
   52b30:	e13ffe15 	stw	r4,-8(fp)
   52b34:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   52b38:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
   52b3c:	e0bffe17 	ldw	r2,-8(fp)
   52b40:	1000021e 	bne	r2,zero,52b4c <OSQQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
   52b44:	00800104 	movi	r2,4
   52b48:	00004906 	br	52c70 <OSQQuery+0x14c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
   52b4c:	e0bfff17 	ldw	r2,-4(fp)
   52b50:	1000021e 	bne	r2,zero,52b5c <OSQQuery+0x38>
        return (OS_ERR_PDATA_NULL);
   52b54:	00800244 	movi	r2,9
   52b58:	00004506 	br	52c70 <OSQQuery+0x14c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
   52b5c:	e0bffe17 	ldw	r2,-8(fp)
   52b60:	10800003 	ldbu	r2,0(r2)
   52b64:	10803fcc 	andi	r2,r2,255
   52b68:	108000a0 	cmpeqi	r2,r2,2
   52b6c:	1000021e 	bne	r2,zero,52b78 <OSQQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
   52b70:	00800044 	movi	r2,1
   52b74:	00003e06 	br	52c70 <OSQQuery+0x14c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   52b78:	0005303a 	rdctl	r2,status
   52b7c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   52b80:	e0fffc17 	ldw	r3,-16(fp)
   52b84:	00bfff84 	movi	r2,-2
   52b88:	1884703a 	and	r2,r3,r2
   52b8c:	1001703a 	wrctl	status,r2
  
  return context;
   52b90:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   52b94:	e0bffa15 	stw	r2,-24(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
   52b98:	e0bffe17 	ldw	r2,-8(fp)
   52b9c:	10c00283 	ldbu	r3,10(r2)
   52ba0:	e0bfff17 	ldw	r2,-4(fp)
   52ba4:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
   52ba8:	e0bffe17 	ldw	r2,-8(fp)
   52bac:	108002c4 	addi	r2,r2,11
   52bb0:	e0bff815 	stw	r2,-32(fp)
    pdest                = &p_q_data->OSEventTbl[0];
   52bb4:	e0bfff17 	ldw	r2,-4(fp)
   52bb8:	10800204 	addi	r2,r2,8
   52bbc:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   52bc0:	e03ff705 	stb	zero,-36(fp)
   52bc4:	00000b06 	br	52bf4 <OSQQuery+0xd0>
        *pdest++ = *psrc++;
   52bc8:	e0bff917 	ldw	r2,-28(fp)
   52bcc:	10c00044 	addi	r3,r2,1
   52bd0:	e0fff915 	stw	r3,-28(fp)
   52bd4:	e0fff817 	ldw	r3,-32(fp)
   52bd8:	19000044 	addi	r4,r3,1
   52bdc:	e13ff815 	stw	r4,-32(fp)
   52be0:	18c00003 	ldbu	r3,0(r3)
   52be4:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   52be8:	e0bff703 	ldbu	r2,-36(fp)
   52bec:	10800044 	addi	r2,r2,1
   52bf0:	e0bff705 	stb	r2,-36(fp)
   52bf4:	e0bff703 	ldbu	r2,-36(fp)
   52bf8:	108000f0 	cmpltui	r2,r2,3
   52bfc:	103ff21e 	bne	r2,zero,52bc8 <__alt_data_end+0xfffe1e88>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
   52c00:	e0bffe17 	ldw	r2,-8(fp)
   52c04:	10800117 	ldw	r2,4(r2)
   52c08:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries > 0) {
   52c0c:	e0bffb17 	ldw	r2,-20(fp)
   52c10:	1080058b 	ldhu	r2,22(r2)
   52c14:	10bfffcc 	andi	r2,r2,65535
   52c18:	10000626 	beq	r2,zero,52c34 <OSQQuery+0x110>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
   52c1c:	e0bffb17 	ldw	r2,-20(fp)
   52c20:	10800417 	ldw	r2,16(r2)
   52c24:	10c00017 	ldw	r3,0(r2)
   52c28:	e0bfff17 	ldw	r2,-4(fp)
   52c2c:	10c00015 	stw	r3,0(r2)
   52c30:	00000206 	br	52c3c <OSQQuery+0x118>
    } else {
        p_q_data->OSMsg = (void *)0;
   52c34:	e0bfff17 	ldw	r2,-4(fp)
   52c38:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
   52c3c:	e0bffb17 	ldw	r2,-20(fp)
   52c40:	10c0058b 	ldhu	r3,22(r2)
   52c44:	e0bfff17 	ldw	r2,-4(fp)
   52c48:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
   52c4c:	e0bffb17 	ldw	r2,-20(fp)
   52c50:	10c0050b 	ldhu	r3,20(r2)
   52c54:	e0bfff17 	ldw	r2,-4(fp)
   52c58:	10c0018d 	sth	r3,6(r2)
   52c5c:	e0bffa17 	ldw	r2,-24(fp)
   52c60:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   52c64:	e0bffd17 	ldw	r2,-12(fp)
   52c68:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   52c6c:	0005883a 	mov	r2,zero
}
   52c70:	e037883a 	mov	sp,fp
   52c74:	df000017 	ldw	fp,0(sp)
   52c78:	dec00104 	addi	sp,sp,4
   52c7c:	f800283a 	ret

00052c80 <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
   52c80:	defffb04 	addi	sp,sp,-20
   52c84:	dfc00415 	stw	ra,16(sp)
   52c88:	df000315 	stw	fp,12(sp)
   52c8c:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
   52c90:	010001b4 	movhi	r4,6
   52c94:	21034a04 	addi	r4,r4,3368
   52c98:	01407804 	movi	r5,480
   52c9c:	004f2740 	call	4f274 <OS_MemClr>
    pq1 = &OSQTbl[0];
   52ca0:	008001b4 	movhi	r2,6
   52ca4:	10834a04 	addi	r2,r2,3368
   52ca8:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
   52cac:	008001b4 	movhi	r2,6
   52cb0:	10835004 	addi	r2,r2,3392
   52cb4:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
   52cb8:	e03ffd0d 	sth	zero,-12(fp)
   52cbc:	00000c06 	br	52cf0 <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
   52cc0:	e0bffe17 	ldw	r2,-8(fp)
   52cc4:	e0ffff17 	ldw	r3,-4(fp)
   52cc8:	10c00015 	stw	r3,0(r2)
        pq1++;
   52ccc:	e0bffe17 	ldw	r2,-8(fp)
   52cd0:	10800604 	addi	r2,r2,24
   52cd4:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
   52cd8:	e0bfff17 	ldw	r2,-4(fp)
   52cdc:	10800604 	addi	r2,r2,24
   52ce0:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
   52ce4:	e0bffd0b 	ldhu	r2,-12(fp)
   52ce8:	10800044 	addi	r2,r2,1
   52cec:	e0bffd0d 	sth	r2,-12(fp)
   52cf0:	e0bffd0b 	ldhu	r2,-12(fp)
   52cf4:	108004f0 	cmpltui	r2,r2,19
   52cf8:	103ff11e 	bne	r2,zero,52cc0 <__alt_data_end+0xfffe1f80>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
   52cfc:	e0bffe17 	ldw	r2,-8(fp)
   52d00:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
   52d04:	008001b4 	movhi	r2,6
   52d08:	10ad4c04 	addi	r2,r2,-19152
   52d0c:	00c001b4 	movhi	r3,6
   52d10:	18c34a04 	addi	r3,r3,3368
   52d14:	10c00015 	stw	r3,0(r2)
#endif
}
   52d18:	e037883a 	mov	sp,fp
   52d1c:	dfc00117 	ldw	ra,4(sp)
   52d20:	df000017 	ldw	fp,0(sp)
   52d24:	dec00204 	addi	sp,sp,8
   52d28:	f800283a 	ret

00052d2c <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
   52d2c:	defffa04 	addi	sp,sp,-24
   52d30:	df000515 	stw	fp,20(sp)
   52d34:	df000504 	addi	fp,sp,20
   52d38:	e13fff15 	stw	r4,-4(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   52d3c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   52d40:	e0bfff17 	ldw	r2,-4(fp)
   52d44:	1000021e 	bne	r2,zero,52d50 <OSSemAccept+0x24>
        return (0);
   52d48:	0005883a 	mov	r2,zero
   52d4c:	00001f06 	br	52dcc <OSSemAccept+0xa0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   52d50:	e0bfff17 	ldw	r2,-4(fp)
   52d54:	10800003 	ldbu	r2,0(r2)
   52d58:	10803fcc 	andi	r2,r2,255
   52d5c:	108000e0 	cmpeqi	r2,r2,3
   52d60:	1000021e 	bne	r2,zero,52d6c <OSSemAccept+0x40>
        return (0);
   52d64:	0005883a 	mov	r2,zero
   52d68:	00001806 	br	52dcc <OSSemAccept+0xa0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   52d6c:	0005303a 	rdctl	r2,status
   52d70:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   52d74:	e0fffd17 	ldw	r3,-12(fp)
   52d78:	00bfff84 	movi	r2,-2
   52d7c:	1884703a 	and	r2,r3,r2
   52d80:	1001703a 	wrctl	status,r2
  
  return context;
   52d84:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   52d88:	e0bffb15 	stw	r2,-20(fp)
    cnt = pevent->OSEventCnt;
   52d8c:	e0bfff17 	ldw	r2,-4(fp)
   52d90:	1080020b 	ldhu	r2,8(r2)
   52d94:	e0bffc0d 	sth	r2,-16(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
   52d98:	e0bffc0b 	ldhu	r2,-16(fp)
   52d9c:	10000626 	beq	r2,zero,52db8 <OSSemAccept+0x8c>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
   52da0:	e0bfff17 	ldw	r2,-4(fp)
   52da4:	1080020b 	ldhu	r2,8(r2)
   52da8:	10bfffc4 	addi	r2,r2,-1
   52dac:	1007883a 	mov	r3,r2
   52db0:	e0bfff17 	ldw	r2,-4(fp)
   52db4:	10c0020d 	sth	r3,8(r2)
   52db8:	e0bffb17 	ldw	r2,-20(fp)
   52dbc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   52dc0:	e0bffe17 	ldw	r2,-8(fp)
   52dc4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
   52dc8:	e0bffc0b 	ldhu	r2,-16(fp)
}
   52dcc:	e037883a 	mov	sp,fp
   52dd0:	df000017 	ldw	fp,0(sp)
   52dd4:	dec00104 	addi	sp,sp,4
   52dd8:	f800283a 	ret

00052ddc <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
   52ddc:	defff904 	addi	sp,sp,-28
   52de0:	dfc00615 	stw	ra,24(sp)
   52de4:	df000515 	stw	fp,20(sp)
   52de8:	df000504 	addi	fp,sp,20
   52dec:	2005883a 	mov	r2,r4
   52df0:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   52df4:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   52df8:	008001b4 	movhi	r2,6
   52dfc:	10ad4f04 	addi	r2,r2,-19140
   52e00:	10800003 	ldbu	r2,0(r2)
   52e04:	10803fcc 	andi	r2,r2,255
   52e08:	10000226 	beq	r2,zero,52e14 <OSSemCreate+0x38>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
   52e0c:	0005883a 	mov	r2,zero
   52e10:	00002d06 	br	52ec8 <OSSemCreate+0xec>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   52e14:	0005303a 	rdctl	r2,status
   52e18:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   52e1c:	e0fffd17 	ldw	r3,-12(fp)
   52e20:	00bfff84 	movi	r2,-2
   52e24:	1884703a 	and	r2,r3,r2
   52e28:	1001703a 	wrctl	status,r2
  
  return context;
   52e2c:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   52e30:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
   52e34:	008001b4 	movhi	r2,6
   52e38:	10ad4e04 	addi	r2,r2,-19144
   52e3c:	10800017 	ldw	r2,0(r2)
   52e40:	e0bffc15 	stw	r2,-16(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
   52e44:	008001b4 	movhi	r2,6
   52e48:	10ad4e04 	addi	r2,r2,-19144
   52e4c:	10800017 	ldw	r2,0(r2)
   52e50:	10000726 	beq	r2,zero,52e70 <OSSemCreate+0x94>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   52e54:	008001b4 	movhi	r2,6
   52e58:	10ad4e04 	addi	r2,r2,-19144
   52e5c:	10800017 	ldw	r2,0(r2)
   52e60:	10c00117 	ldw	r3,4(r2)
   52e64:	008001b4 	movhi	r2,6
   52e68:	10ad4e04 	addi	r2,r2,-19144
   52e6c:	10c00015 	stw	r3,0(r2)
   52e70:	e0bffb17 	ldw	r2,-20(fp)
   52e74:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   52e78:	e0bffe17 	ldw	r2,-8(fp)
   52e7c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
   52e80:	e0bffc17 	ldw	r2,-16(fp)
   52e84:	10000f26 	beq	r2,zero,52ec4 <OSSemCreate+0xe8>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
   52e88:	e0bffc17 	ldw	r2,-16(fp)
   52e8c:	00c000c4 	movi	r3,3
   52e90:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
   52e94:	e0bffc17 	ldw	r2,-16(fp)
   52e98:	e0ffff0b 	ldhu	r3,-4(fp)
   52e9c:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
   52ea0:	e0bffc17 	ldw	r2,-16(fp)
   52ea4:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
   52ea8:	e0bffc17 	ldw	r2,-16(fp)
   52eac:	00c00fc4 	movi	r3,63
   52eb0:	10c00385 	stb	r3,14(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
   52eb4:	e0bffc17 	ldw	r2,-16(fp)
   52eb8:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
   52ebc:	e13ffc17 	ldw	r4,-16(fp)
   52ec0:	004eeb00 	call	4eeb0 <OS_EventWaitListInit>
    }
    return (pevent);
   52ec4:	e0bffc17 	ldw	r2,-16(fp)
}
   52ec8:	e037883a 	mov	sp,fp
   52ecc:	dfc00117 	ldw	ra,4(sp)
   52ed0:	df000017 	ldw	fp,0(sp)
   52ed4:	dec00204 	addi	sp,sp,8
   52ed8:	f800283a 	ret

00052edc <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   52edc:	defff304 	addi	sp,sp,-52
   52ee0:	dfc00c15 	stw	ra,48(sp)
   52ee4:	df000b15 	stw	fp,44(sp)
   52ee8:	df000b04 	addi	fp,sp,44
   52eec:	e13ffd15 	stw	r4,-12(fp)
   52ef0:	2805883a 	mov	r2,r5
   52ef4:	e1bfff15 	stw	r6,-4(fp)
   52ef8:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   52efc:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   52f00:	e0bfff17 	ldw	r2,-4(fp)
   52f04:	1000021e 	bne	r2,zero,52f10 <OSSemDel+0x34>
        return (pevent);
   52f08:	e0bffd17 	ldw	r2,-12(fp)
   52f0c:	00008806 	br	53130 <OSSemDel+0x254>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   52f10:	e0bffd17 	ldw	r2,-12(fp)
   52f14:	1000051e 	bne	r2,zero,52f2c <OSSemDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   52f18:	e0bfff17 	ldw	r2,-4(fp)
   52f1c:	00c00104 	movi	r3,4
   52f20:	10c00005 	stb	r3,0(r2)
        return (pevent);
   52f24:	e0bffd17 	ldw	r2,-12(fp)
   52f28:	00008106 	br	53130 <OSSemDel+0x254>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
   52f2c:	e0bffd17 	ldw	r2,-12(fp)
   52f30:	10800003 	ldbu	r2,0(r2)
   52f34:	10803fcc 	andi	r2,r2,255
   52f38:	108000e0 	cmpeqi	r2,r2,3
   52f3c:	1000051e 	bne	r2,zero,52f54 <OSSemDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   52f40:	e0bfff17 	ldw	r2,-4(fp)
   52f44:	00c00044 	movi	r3,1
   52f48:	10c00005 	stb	r3,0(r2)
        return (pevent);
   52f4c:	e0bffd17 	ldw	r2,-12(fp)
   52f50:	00007706 	br	53130 <OSSemDel+0x254>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   52f54:	008001b4 	movhi	r2,6
   52f58:	10ad4f04 	addi	r2,r2,-19140
   52f5c:	10800003 	ldbu	r2,0(r2)
   52f60:	10803fcc 	andi	r2,r2,255
   52f64:	10000526 	beq	r2,zero,52f7c <OSSemDel+0xa0>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
   52f68:	e0bfff17 	ldw	r2,-4(fp)
   52f6c:	00c003c4 	movi	r3,15
   52f70:	10c00005 	stb	r3,0(r2)
        return (pevent);
   52f74:	e0bffd17 	ldw	r2,-12(fp)
   52f78:	00006d06 	br	53130 <OSSemDel+0x254>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   52f7c:	0005303a 	rdctl	r2,status
   52f80:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   52f84:	e0fff817 	ldw	r3,-32(fp)
   52f88:	00bfff84 	movi	r2,-2
   52f8c:	1884703a 	and	r2,r3,r2
   52f90:	1001703a 	wrctl	status,r2
  
  return context;
   52f94:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   52f98:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
   52f9c:	e0bffd17 	ldw	r2,-12(fp)
   52fa0:	10800283 	ldbu	r2,10(r2)
   52fa4:	10803fcc 	andi	r2,r2,255
   52fa8:	10000326 	beq	r2,zero,52fb8 <OSSemDel+0xdc>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   52fac:	00800044 	movi	r2,1
   52fb0:	e0bff505 	stb	r2,-44(fp)
   52fb4:	00000106 	br	52fbc <OSSemDel+0xe0>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   52fb8:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
   52fbc:	e0bffe03 	ldbu	r2,-8(fp)
   52fc0:	10000326 	beq	r2,zero,52fd0 <OSSemDel+0xf4>
   52fc4:	10800060 	cmpeqi	r2,r2,1
   52fc8:	10002c1e 	bne	r2,zero,5307c <OSSemDel+0x1a0>
   52fcc:	00004d06 	br	53104 <OSSemDel+0x228>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
   52fd0:	e0bff503 	ldbu	r2,-44(fp)
   52fd4:	10001a1e 	bne	r2,zero,53040 <OSSemDel+0x164>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   52fd8:	e0bffd17 	ldw	r2,-12(fp)
   52fdc:	00c00fc4 	movi	r3,63
   52fe0:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   52fe4:	e0bffd17 	ldw	r2,-12(fp)
   52fe8:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   52fec:	e0bffd17 	ldw	r2,-12(fp)
   52ff0:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
   52ff4:	008001b4 	movhi	r2,6
   52ff8:	10ad4e04 	addi	r2,r2,-19144
   52ffc:	10c00017 	ldw	r3,0(r2)
   53000:	e0bffd17 	ldw	r2,-12(fp)
   53004:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
   53008:	e0bffd17 	ldw	r2,-12(fp)
   5300c:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
   53010:	008001b4 	movhi	r2,6
   53014:	10ad4e04 	addi	r2,r2,-19144
   53018:	e0fffd17 	ldw	r3,-12(fp)
   5301c:	10c00015 	stw	r3,0(r2)
   53020:	e0bff717 	ldw	r2,-36(fp)
   53024:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   53028:	e0bff917 	ldw	r2,-28(fp)
   5302c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
   53030:	e0bfff17 	ldw	r2,-4(fp)
   53034:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
   53038:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
   5303c:	00003b06 	br	5312c <OSSemDel+0x250>
   53040:	e0bff717 	ldw	r2,-36(fp)
   53044:	e0bffa15 	stw	r2,-24(fp)
   53048:	e0bffa17 	ldw	r2,-24(fp)
   5304c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
   53050:	e0bfff17 	ldw	r2,-4(fp)
   53054:	00c01244 	movi	r3,73
   53058:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
   5305c:	e0bffd17 	ldw	r2,-12(fp)
   53060:	e0bff615 	stw	r2,-40(fp)
             }
             break;
   53064:	00003106 	br	5312c <OSSemDel+0x250>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
   53068:	e13ffd17 	ldw	r4,-12(fp)
   5306c:	000b883a 	mov	r5,zero
   53070:	01800044 	movi	r6,1
   53074:	000f883a 	mov	r7,zero
   53078:	004e9100 	call	4e910 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
   5307c:	e0bffd17 	ldw	r2,-12(fp)
   53080:	10800283 	ldbu	r2,10(r2)
   53084:	10803fcc 	andi	r2,r2,255
   53088:	103ff71e 	bne	r2,zero,53068 <__alt_data_end+0xfffe2328>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   5308c:	e0bffd17 	ldw	r2,-12(fp)
   53090:	00c00fc4 	movi	r3,63
   53094:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   53098:	e0bffd17 	ldw	r2,-12(fp)
   5309c:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   530a0:	e0bffd17 	ldw	r2,-12(fp)
   530a4:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   530a8:	008001b4 	movhi	r2,6
   530ac:	10ad4e04 	addi	r2,r2,-19144
   530b0:	10c00017 	ldw	r3,0(r2)
   530b4:	e0bffd17 	ldw	r2,-12(fp)
   530b8:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
   530bc:	e0bffd17 	ldw	r2,-12(fp)
   530c0:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
   530c4:	008001b4 	movhi	r2,6
   530c8:	10ad4e04 	addi	r2,r2,-19144
   530cc:	e0fffd17 	ldw	r3,-12(fp)
   530d0:	10c00015 	stw	r3,0(r2)
   530d4:	e0bff717 	ldw	r2,-36(fp)
   530d8:	e0bffb15 	stw	r2,-20(fp)
   530dc:	e0bffb17 	ldw	r2,-20(fp)
   530e0:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   530e4:	e0bff503 	ldbu	r2,-44(fp)
   530e8:	10800058 	cmpnei	r2,r2,1
   530ec:	1000011e 	bne	r2,zero,530f4 <OSSemDel+0x218>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   530f0:	004f3280 	call	4f328 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
   530f4:	e0bfff17 	ldw	r2,-4(fp)
   530f8:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
   530fc:	e03ff615 	stw	zero,-40(fp)
             break;
   53100:	00000a06 	br	5312c <OSSemDel+0x250>
   53104:	e0bff717 	ldw	r2,-36(fp)
   53108:	e0bffc15 	stw	r2,-16(fp)
   5310c:	e0bffc17 	ldw	r2,-16(fp)
   53110:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
   53114:	e0bfff17 	ldw	r2,-4(fp)
   53118:	00c001c4 	movi	r3,7
   5311c:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
   53120:	e0bffd17 	ldw	r2,-12(fp)
   53124:	e0bff615 	stw	r2,-40(fp)
             break;
   53128:	0001883a 	nop
    }
    return (pevent_return);
   5312c:	e0bff617 	ldw	r2,-40(fp)
}
   53130:	e037883a 	mov	sp,fp
   53134:	dfc00117 	ldw	ra,4(sp)
   53138:	df000017 	ldw	fp,0(sp)
   5313c:	dec00204 	addi	sp,sp,8
   53140:	f800283a 	ret

00053144 <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   53144:	defff504 	addi	sp,sp,-44
   53148:	dfc00a15 	stw	ra,40(sp)
   5314c:	df000915 	stw	fp,36(sp)
   53150:	df000904 	addi	fp,sp,36
   53154:	e13ffd15 	stw	r4,-12(fp)
   53158:	2805883a 	mov	r2,r5
   5315c:	e1bfff15 	stw	r6,-4(fp)
   53160:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   53164:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   53168:	e0bfff17 	ldw	r2,-4(fp)
   5316c:	1000011e 	bne	r2,zero,53174 <OSSemPend+0x30>
        return;
   53170:	00008906 	br	53398 <OSSemPend+0x254>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   53174:	e0bffd17 	ldw	r2,-12(fp)
   53178:	1000041e 	bne	r2,zero,5318c <OSSemPend+0x48>
        *perr = OS_ERR_PEVENT_NULL;
   5317c:	e0bfff17 	ldw	r2,-4(fp)
   53180:	00c00104 	movi	r3,4
   53184:	10c00005 	stb	r3,0(r2)
        return;
   53188:	00008306 	br	53398 <OSSemPend+0x254>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   5318c:	e0bffd17 	ldw	r2,-12(fp)
   53190:	10800003 	ldbu	r2,0(r2)
   53194:	10803fcc 	andi	r2,r2,255
   53198:	108000e0 	cmpeqi	r2,r2,3
   5319c:	1000041e 	bne	r2,zero,531b0 <OSSemPend+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   531a0:	e0bfff17 	ldw	r2,-4(fp)
   531a4:	00c00044 	movi	r3,1
   531a8:	10c00005 	stb	r3,0(r2)
        return;
   531ac:	00007a06 	br	53398 <OSSemPend+0x254>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
   531b0:	008001b4 	movhi	r2,6
   531b4:	10ad4f04 	addi	r2,r2,-19140
   531b8:	10800003 	ldbu	r2,0(r2)
   531bc:	10803fcc 	andi	r2,r2,255
   531c0:	10000426 	beq	r2,zero,531d4 <OSSemPend+0x90>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
   531c4:	e0bfff17 	ldw	r2,-4(fp)
   531c8:	00c00084 	movi	r3,2
   531cc:	10c00005 	stb	r3,0(r2)
        return;
   531d0:	00007106 	br	53398 <OSSemPend+0x254>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
   531d4:	008001b4 	movhi	r2,6
   531d8:	10ad4104 	addi	r2,r2,-19196
   531dc:	10800003 	ldbu	r2,0(r2)
   531e0:	10803fcc 	andi	r2,r2,255
   531e4:	10000426 	beq	r2,zero,531f8 <OSSemPend+0xb4>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
   531e8:	e0bfff17 	ldw	r2,-4(fp)
   531ec:	00c00344 	movi	r3,13
   531f0:	10c00005 	stb	r3,0(r2)
        return;
   531f4:	00006806 	br	53398 <OSSemPend+0x254>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   531f8:	0005303a 	rdctl	r2,status
   531fc:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   53200:	e0fff817 	ldw	r3,-32(fp)
   53204:	00bfff84 	movi	r2,-2
   53208:	1884703a 	and	r2,r3,r2
   5320c:	1001703a 	wrctl	status,r2
  
  return context;
   53210:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   53214:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
   53218:	e0bffd17 	ldw	r2,-12(fp)
   5321c:	1080020b 	ldhu	r2,8(r2)
   53220:	10bfffcc 	andi	r2,r2,65535
   53224:	10000d26 	beq	r2,zero,5325c <OSSemPend+0x118>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
   53228:	e0bffd17 	ldw	r2,-12(fp)
   5322c:	1080020b 	ldhu	r2,8(r2)
   53230:	10bfffc4 	addi	r2,r2,-1
   53234:	1007883a 	mov	r3,r2
   53238:	e0bffd17 	ldw	r2,-12(fp)
   5323c:	10c0020d 	sth	r3,8(r2)
   53240:	e0bff717 	ldw	r2,-36(fp)
   53244:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   53248:	e0bff917 	ldw	r2,-28(fp)
   5324c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
   53250:	e0bfff17 	ldw	r2,-4(fp)
   53254:	10000005 	stb	zero,0(r2)
        return;
   53258:	00004f06 	br	53398 <OSSemPend+0x254>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
   5325c:	008001b4 	movhi	r2,6
   53260:	10ad5004 	addi	r2,r2,-19136
   53264:	10c00017 	ldw	r3,0(r2)
   53268:	008001b4 	movhi	r2,6
   5326c:	10ad5004 	addi	r2,r2,-19136
   53270:	10800017 	ldw	r2,0(r2)
   53274:	10800c03 	ldbu	r2,48(r2)
   53278:	10800054 	ori	r2,r2,1
   5327c:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   53280:	008001b4 	movhi	r2,6
   53284:	10ad5004 	addi	r2,r2,-19136
   53288:	10800017 	ldw	r2,0(r2)
   5328c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
   53290:	008001b4 	movhi	r2,6
   53294:	10ad5004 	addi	r2,r2,-19136
   53298:	10800017 	ldw	r2,0(r2)
   5329c:	e0fffe0b 	ldhu	r3,-8(fp)
   532a0:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
   532a4:	e13ffd17 	ldw	r4,-12(fp)
   532a8:	004eaa80 	call	4eaa8 <OS_EventTaskWait>
   532ac:	e0bff717 	ldw	r2,-36(fp)
   532b0:	e0bffa15 	stw	r2,-24(fp)
   532b4:	e0bffa17 	ldw	r2,-24(fp)
   532b8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
   532bc:	004f3280 	call	4f328 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   532c0:	0005303a 	rdctl	r2,status
   532c4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   532c8:	e0fffb17 	ldw	r3,-20(fp)
   532cc:	00bfff84 	movi	r2,-2
   532d0:	1884703a 	and	r2,r3,r2
   532d4:	1001703a 	wrctl	status,r2
  
  return context;
   532d8:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
   532dc:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   532e0:	008001b4 	movhi	r2,6
   532e4:	10ad5004 	addi	r2,r2,-19136
   532e8:	10800017 	ldw	r2,0(r2)
   532ec:	10800c43 	ldbu	r2,49(r2)
   532f0:	10803fcc 	andi	r2,r2,255
   532f4:	10000326 	beq	r2,zero,53304 <OSSemPend+0x1c0>
   532f8:	108000a0 	cmpeqi	r2,r2,2
   532fc:	1000041e 	bne	r2,zero,53310 <OSSemPend+0x1cc>
   53300:	00000706 	br	53320 <OSSemPend+0x1dc>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
   53304:	e0bfff17 	ldw	r2,-4(fp)
   53308:	10000005 	stb	zero,0(r2)
             break;
   5330c:	00000e06 	br	53348 <OSSemPend+0x204>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   53310:	e0bfff17 	ldw	r2,-4(fp)
   53314:	00c00384 	movi	r3,14
   53318:	10c00005 	stb	r3,0(r2)
             break;
   5331c:	00000a06 	br	53348 <OSSemPend+0x204>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
   53320:	008001b4 	movhi	r2,6
   53324:	10ad5004 	addi	r2,r2,-19136
   53328:	10800017 	ldw	r2,0(r2)
   5332c:	1009883a 	mov	r4,r2
   53330:	e17ffd17 	ldw	r5,-12(fp)
   53334:	004ed000 	call	4ed00 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   53338:	e0bfff17 	ldw	r2,-4(fp)
   5333c:	00c00284 	movi	r3,10
   53340:	10c00005 	stb	r3,0(r2)
             break;
   53344:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   53348:	008001b4 	movhi	r2,6
   5334c:	10ad5004 	addi	r2,r2,-19136
   53350:	10800017 	ldw	r2,0(r2)
   53354:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   53358:	008001b4 	movhi	r2,6
   5335c:	10ad5004 	addi	r2,r2,-19136
   53360:	10800017 	ldw	r2,0(r2)
   53364:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   53368:	008001b4 	movhi	r2,6
   5336c:	10ad5004 	addi	r2,r2,-19136
   53370:	10800017 	ldw	r2,0(r2)
   53374:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   53378:	008001b4 	movhi	r2,6
   5337c:	10ad5004 	addi	r2,r2,-19136
   53380:	10800017 	ldw	r2,0(r2)
   53384:	10000815 	stw	zero,32(r2)
   53388:	e0bff717 	ldw	r2,-36(fp)
   5338c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   53390:	e0bffc17 	ldw	r2,-16(fp)
   53394:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
}
   53398:	e037883a 	mov	sp,fp
   5339c:	dfc00117 	ldw	ra,4(sp)
   533a0:	df000017 	ldw	fp,0(sp)
   533a4:	dec00204 	addi	sp,sp,8
   533a8:	f800283a 	ret

000533ac <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   533ac:	defff604 	addi	sp,sp,-40
   533b0:	dfc00915 	stw	ra,36(sp)
   533b4:	df000815 	stw	fp,32(sp)
   533b8:	df000804 	addi	fp,sp,32
   533bc:	e13ffd15 	stw	r4,-12(fp)
   533c0:	2805883a 	mov	r2,r5
   533c4:	e1bfff15 	stw	r6,-4(fp)
   533c8:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   533cc:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   533d0:	e0bfff17 	ldw	r2,-4(fp)
   533d4:	1000021e 	bne	r2,zero,533e0 <OSSemPendAbort+0x34>
        return (0);
   533d8:	0005883a 	mov	r2,zero
   533dc:	00004906 	br	53504 <OSSemPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   533e0:	e0bffd17 	ldw	r2,-12(fp)
   533e4:	1000051e 	bne	r2,zero,533fc <OSSemPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   533e8:	e0bfff17 	ldw	r2,-4(fp)
   533ec:	00c00104 	movi	r3,4
   533f0:	10c00005 	stb	r3,0(r2)
        return (0);
   533f4:	0005883a 	mov	r2,zero
   533f8:	00004206 	br	53504 <OSSemPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   533fc:	e0bffd17 	ldw	r2,-12(fp)
   53400:	10800003 	ldbu	r2,0(r2)
   53404:	10803fcc 	andi	r2,r2,255
   53408:	108000e0 	cmpeqi	r2,r2,3
   5340c:	1000051e 	bne	r2,zero,53424 <OSSemPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   53410:	e0bfff17 	ldw	r2,-4(fp)
   53414:	00c00044 	movi	r3,1
   53418:	10c00005 	stb	r3,0(r2)
        return (0);
   5341c:	0005883a 	mov	r2,zero
   53420:	00003806 	br	53504 <OSSemPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   53424:	0005303a 	rdctl	r2,status
   53428:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   5342c:	e0fffa17 	ldw	r3,-24(fp)
   53430:	00bfff84 	movi	r2,-2
   53434:	1884703a 	and	r2,r3,r2
   53438:	1001703a 	wrctl	status,r2
  
  return context;
   5343c:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   53440:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
   53444:	e0bffd17 	ldw	r2,-12(fp)
   53448:	10800283 	ldbu	r2,10(r2)
   5344c:	10803fcc 	andi	r2,r2,255
   53450:	10002526 	beq	r2,zero,534e8 <OSSemPendAbort+0x13c>
        nbr_tasks = 0;
   53454:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
   53458:	e0bffe03 	ldbu	r2,-8(fp)
   5345c:	10800060 	cmpeqi	r2,r2,1
   53460:	10000e26 	beq	r2,zero,5349c <OSSemPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
   53464:	00000806 	br	53488 <OSSemPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
   53468:	e13ffd17 	ldw	r4,-12(fp)
   5346c:	000b883a 	mov	r5,zero
   53470:	01800044 	movi	r6,1
   53474:	01c00084 	movi	r7,2
   53478:	004e9100 	call	4e910 <OS_EventTaskRdy>
                     nbr_tasks++;
   5347c:	e0bff803 	ldbu	r2,-32(fp)
   53480:	10800044 	addi	r2,r2,1
   53484:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
   53488:	e0bffd17 	ldw	r2,-12(fp)
   5348c:	10800283 	ldbu	r2,10(r2)
   53490:	10803fcc 	andi	r2,r2,255
   53494:	103ff41e 	bne	r2,zero,53468 <__alt_data_end+0xfffe2728>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
   53498:	00000906 	br	534c0 <OSSemPendAbort+0x114>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
   5349c:	e13ffd17 	ldw	r4,-12(fp)
   534a0:	000b883a 	mov	r5,zero
   534a4:	01800044 	movi	r6,1
   534a8:	01c00084 	movi	r7,2
   534ac:	004e9100 	call	4e910 <OS_EventTaskRdy>
                 nbr_tasks++;
   534b0:	e0bff803 	ldbu	r2,-32(fp)
   534b4:	10800044 	addi	r2,r2,1
   534b8:	e0bff805 	stb	r2,-32(fp)
                 break;
   534bc:	0001883a 	nop
   534c0:	e0bff917 	ldw	r2,-28(fp)
   534c4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   534c8:	e0bffb17 	ldw	r2,-20(fp)
   534cc:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
   534d0:	004f3280 	call	4f328 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
   534d4:	e0bfff17 	ldw	r2,-4(fp)
   534d8:	00c00384 	movi	r3,14
   534dc:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
   534e0:	e0bff803 	ldbu	r2,-32(fp)
   534e4:	00000706 	br	53504 <OSSemPendAbort+0x158>
   534e8:	e0bff917 	ldw	r2,-28(fp)
   534ec:	e0bffc15 	stw	r2,-16(fp)
   534f0:	e0bffc17 	ldw	r2,-16(fp)
   534f4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   534f8:	e0bfff17 	ldw	r2,-4(fp)
   534fc:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
   53500:	0005883a 	mov	r2,zero
}
   53504:	e037883a 	mov	sp,fp
   53508:	dfc00117 	ldw	ra,4(sp)
   5350c:	df000017 	ldw	fp,0(sp)
   53510:	dec00204 	addi	sp,sp,8
   53514:	f800283a 	ret

00053518 <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
   53518:	defff804 	addi	sp,sp,-32
   5351c:	dfc00715 	stw	ra,28(sp)
   53520:	df000615 	stw	fp,24(sp)
   53524:	df000604 	addi	fp,sp,24
   53528:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   5352c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   53530:	e0bfff17 	ldw	r2,-4(fp)
   53534:	1000021e 	bne	r2,zero,53540 <OSSemPost+0x28>
        return (OS_ERR_PEVENT_NULL);
   53538:	00800104 	movi	r2,4
   5353c:	00003506 	br	53614 <OSSemPost+0xfc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   53540:	e0bfff17 	ldw	r2,-4(fp)
   53544:	10800003 	ldbu	r2,0(r2)
   53548:	10803fcc 	andi	r2,r2,255
   5354c:	108000e0 	cmpeqi	r2,r2,3
   53550:	1000021e 	bne	r2,zero,5355c <OSSemPost+0x44>
        return (OS_ERR_EVENT_TYPE);
   53554:	00800044 	movi	r2,1
   53558:	00002e06 	br	53614 <OSSemPost+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   5355c:	0005303a 	rdctl	r2,status
   53560:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   53564:	e0fffb17 	ldw	r3,-20(fp)
   53568:	00bfff84 	movi	r2,-2
   5356c:	1884703a 	and	r2,r3,r2
   53570:	1001703a 	wrctl	status,r2
  
  return context;
   53574:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   53578:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
   5357c:	e0bfff17 	ldw	r2,-4(fp)
   53580:	10800283 	ldbu	r2,10(r2)
   53584:	10803fcc 	andi	r2,r2,255
   53588:	10000c26 	beq	r2,zero,535bc <OSSemPost+0xa4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
   5358c:	e13fff17 	ldw	r4,-4(fp)
   53590:	000b883a 	mov	r5,zero
   53594:	01800044 	movi	r6,1
   53598:	000f883a 	mov	r7,zero
   5359c:	004e9100 	call	4e910 <OS_EventTaskRdy>
   535a0:	e0bffa17 	ldw	r2,-24(fp)
   535a4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   535a8:	e0bffc17 	ldw	r2,-16(fp)
   535ac:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
   535b0:	004f3280 	call	4f328 <OS_Sched>
        return (OS_ERR_NONE);
   535b4:	0005883a 	mov	r2,zero
   535b8:	00001606 	br	53614 <OSSemPost+0xfc>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
   535bc:	e0bfff17 	ldw	r2,-4(fp)
   535c0:	1080020b 	ldhu	r2,8(r2)
   535c4:	10ffffcc 	andi	r3,r2,65535
   535c8:	00bfffd4 	movui	r2,65535
   535cc:	18800c26 	beq	r3,r2,53600 <OSSemPost+0xe8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
   535d0:	e0bfff17 	ldw	r2,-4(fp)
   535d4:	1080020b 	ldhu	r2,8(r2)
   535d8:	10800044 	addi	r2,r2,1
   535dc:	1007883a 	mov	r3,r2
   535e0:	e0bfff17 	ldw	r2,-4(fp)
   535e4:	10c0020d 	sth	r3,8(r2)
   535e8:	e0bffa17 	ldw	r2,-24(fp)
   535ec:	e0bffd15 	stw	r2,-12(fp)
   535f0:	e0bffd17 	ldw	r2,-12(fp)
   535f4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
   535f8:	0005883a 	mov	r2,zero
   535fc:	00000506 	br	53614 <OSSemPost+0xfc>
   53600:	e0bffa17 	ldw	r2,-24(fp)
   53604:	e0bffe15 	stw	r2,-8(fp)
   53608:	e0bffe17 	ldw	r2,-8(fp)
   5360c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
   53610:	00800c84 	movi	r2,50
}
   53614:	e037883a 	mov	sp,fp
   53618:	dfc00117 	ldw	ra,4(sp)
   5361c:	df000017 	ldw	fp,0(sp)
   53620:	dec00204 	addi	sp,sp,8
   53624:	f800283a 	ret

00053628 <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
   53628:	defff704 	addi	sp,sp,-36
   5362c:	df000815 	stw	fp,32(sp)
   53630:	df000804 	addi	fp,sp,32
   53634:	e13ffe15 	stw	r4,-8(fp)
   53638:	e17fff15 	stw	r5,-4(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   5363c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   53640:	e0bffe17 	ldw	r2,-8(fp)
   53644:	1000021e 	bne	r2,zero,53650 <OSSemQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
   53648:	00800104 	movi	r2,4
   5364c:	00003606 	br	53728 <OSSemQuery+0x100>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
   53650:	e0bfff17 	ldw	r2,-4(fp)
   53654:	1000021e 	bne	r2,zero,53660 <OSSemQuery+0x38>
        return (OS_ERR_PDATA_NULL);
   53658:	00800244 	movi	r2,9
   5365c:	00003206 	br	53728 <OSSemQuery+0x100>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
   53660:	e0bffe17 	ldw	r2,-8(fp)
   53664:	10800003 	ldbu	r2,0(r2)
   53668:	10803fcc 	andi	r2,r2,255
   5366c:	108000e0 	cmpeqi	r2,r2,3
   53670:	1000021e 	bne	r2,zero,5367c <OSSemQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
   53674:	00800044 	movi	r2,1
   53678:	00002b06 	br	53728 <OSSemQuery+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   5367c:	0005303a 	rdctl	r2,status
   53680:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   53684:	e0fffc17 	ldw	r3,-16(fp)
   53688:	00bfff84 	movi	r2,-2
   5368c:	1884703a 	and	r2,r3,r2
   53690:	1001703a 	wrctl	status,r2
  
  return context;
   53694:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   53698:	e0bffb15 	stw	r2,-20(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
   5369c:	e0bffe17 	ldw	r2,-8(fp)
   536a0:	10c00283 	ldbu	r3,10(r2)
   536a4:	e0bfff17 	ldw	r2,-4(fp)
   536a8:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
   536ac:	e0bffe17 	ldw	r2,-8(fp)
   536b0:	108002c4 	addi	r2,r2,11
   536b4:	e0bff815 	stw	r2,-32(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
   536b8:	e0bfff17 	ldw	r2,-4(fp)
   536bc:	10800084 	addi	r2,r2,2
   536c0:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   536c4:	e03ffa05 	stb	zero,-24(fp)
   536c8:	00000b06 	br	536f8 <OSSemQuery+0xd0>
        *pdest++ = *psrc++;
   536cc:	e0bff917 	ldw	r2,-28(fp)
   536d0:	10c00044 	addi	r3,r2,1
   536d4:	e0fff915 	stw	r3,-28(fp)
   536d8:	e0fff817 	ldw	r3,-32(fp)
   536dc:	19000044 	addi	r4,r3,1
   536e0:	e13ff815 	stw	r4,-32(fp)
   536e4:	18c00003 	ldbu	r3,0(r3)
   536e8:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   536ec:	e0bffa03 	ldbu	r2,-24(fp)
   536f0:	10800044 	addi	r2,r2,1
   536f4:	e0bffa05 	stb	r2,-24(fp)
   536f8:	e0bffa03 	ldbu	r2,-24(fp)
   536fc:	108000f0 	cmpltui	r2,r2,3
   53700:	103ff21e 	bne	r2,zero,536cc <__alt_data_end+0xfffe298c>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
   53704:	e0bffe17 	ldw	r2,-8(fp)
   53708:	10c0020b 	ldhu	r3,8(r2)
   5370c:	e0bfff17 	ldw	r2,-4(fp)
   53710:	10c0000d 	sth	r3,0(r2)
   53714:	e0bffb17 	ldw	r2,-20(fp)
   53718:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   5371c:	e0bffd17 	ldw	r2,-12(fp)
   53720:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   53724:	0005883a 	mov	r2,zero
}
   53728:	e037883a 	mov	sp,fp
   5372c:	df000017 	ldw	fp,0(sp)
   53730:	dec00104 	addi	sp,sp,4
   53734:	f800283a 	ret

00053738 <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
   53738:	defff904 	addi	sp,sp,-28
   5373c:	df000615 	stw	fp,24(sp)
   53740:	df000604 	addi	fp,sp,24
   53744:	e13ffd15 	stw	r4,-12(fp)
   53748:	2805883a 	mov	r2,r5
   5374c:	e1bfff15 	stw	r6,-4(fp)
   53750:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   53754:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   53758:	e0bfff17 	ldw	r2,-4(fp)
   5375c:	1000011e 	bne	r2,zero,53764 <OSSemSet+0x2c>
        return;
   53760:	00003006 	br	53824 <OSSemSet+0xec>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   53764:	e0bffd17 	ldw	r2,-12(fp)
   53768:	1000041e 	bne	r2,zero,5377c <OSSemSet+0x44>
        *perr = OS_ERR_PEVENT_NULL;
   5376c:	e0bfff17 	ldw	r2,-4(fp)
   53770:	00c00104 	movi	r3,4
   53774:	10c00005 	stb	r3,0(r2)
        return;
   53778:	00002a06 	br	53824 <OSSemSet+0xec>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   5377c:	e0bffd17 	ldw	r2,-12(fp)
   53780:	10800003 	ldbu	r2,0(r2)
   53784:	10803fcc 	andi	r2,r2,255
   53788:	108000e0 	cmpeqi	r2,r2,3
   5378c:	1000041e 	bne	r2,zero,537a0 <OSSemSet+0x68>
        *perr = OS_ERR_EVENT_TYPE;
   53790:	e0bfff17 	ldw	r2,-4(fp)
   53794:	00c00044 	movi	r3,1
   53798:	10c00005 	stb	r3,0(r2)
        return;
   5379c:	00002106 	br	53824 <OSSemSet+0xec>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   537a0:	0005303a 	rdctl	r2,status
   537a4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   537a8:	e0fffb17 	ldw	r3,-20(fp)
   537ac:	00bfff84 	movi	r2,-2
   537b0:	1884703a 	and	r2,r3,r2
   537b4:	1001703a 	wrctl	status,r2
  
  return context;
   537b8:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   537bc:	e0bffa15 	stw	r2,-24(fp)
    *perr = OS_ERR_NONE;
   537c0:	e0bfff17 	ldw	r2,-4(fp)
   537c4:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
   537c8:	e0bffd17 	ldw	r2,-12(fp)
   537cc:	1080020b 	ldhu	r2,8(r2)
   537d0:	10bfffcc 	andi	r2,r2,65535
   537d4:	10000426 	beq	r2,zero,537e8 <OSSemSet+0xb0>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
   537d8:	e0bffd17 	ldw	r2,-12(fp)
   537dc:	e0fffe0b 	ldhu	r3,-8(fp)
   537e0:	10c0020d 	sth	r3,8(r2)
   537e4:	00000b06 	br	53814 <OSSemSet+0xdc>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
   537e8:	e0bffd17 	ldw	r2,-12(fp)
   537ec:	10800283 	ldbu	r2,10(r2)
   537f0:	10803fcc 	andi	r2,r2,255
   537f4:	1000041e 	bne	r2,zero,53808 <OSSemSet+0xd0>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
   537f8:	e0bffd17 	ldw	r2,-12(fp)
   537fc:	e0fffe0b 	ldhu	r3,-8(fp)
   53800:	10c0020d 	sth	r3,8(r2)
   53804:	00000306 	br	53814 <OSSemSet+0xdc>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
   53808:	e0bfff17 	ldw	r2,-4(fp)
   5380c:	00c01244 	movi	r3,73
   53810:	10c00005 	stb	r3,0(r2)
   53814:	e0bffa17 	ldw	r2,-24(fp)
   53818:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   5381c:	e0bffc17 	ldw	r2,-16(fp)
   53820:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
}
   53824:	e037883a 	mov	sp,fp
   53828:	df000017 	ldw	fp,0(sp)
   5382c:	dec00104 	addi	sp,sp,4
   53830:	f800283a 	ret

00053834 <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
   53834:	defff104 	addi	sp,sp,-60
   53838:	dfc00e15 	stw	ra,56(sp)
   5383c:	df000d15 	stw	fp,52(sp)
   53840:	df000d04 	addi	fp,sp,52
   53844:	2007883a 	mov	r3,r4
   53848:	2805883a 	mov	r2,r5
   5384c:	e0fffe05 	stb	r3,-8(fp)
   53850:	e0bfff05 	stb	r2,-4(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
   53854:	e03ff515 	stw	zero,-44(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
   53858:	e0bffe03 	ldbu	r2,-8(fp)
   5385c:	10800530 	cmpltui	r2,r2,20
   53860:	1000051e 	bne	r2,zero,53878 <OSTaskChangePrio+0x44>
        if (oldprio != OS_PRIO_SELF) {
   53864:	e0bffe03 	ldbu	r2,-8(fp)
   53868:	10803fe0 	cmpeqi	r2,r2,255
   5386c:	1000021e 	bne	r2,zero,53878 <OSTaskChangePrio+0x44>
            return (OS_ERR_PRIO_INVALID);
   53870:	00800a84 	movi	r2,42
   53874:	00013a06 	br	53d60 <OSTaskChangePrio+0x52c>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
   53878:	e0bfff03 	ldbu	r2,-4(fp)
   5387c:	10800530 	cmpltui	r2,r2,20
   53880:	1000021e 	bne	r2,zero,5388c <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
   53884:	00800a84 	movi	r2,42
   53888:	00013506 	br	53d60 <OSTaskChangePrio+0x52c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   5388c:	0005303a 	rdctl	r2,status
   53890:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   53894:	e0fff917 	ldw	r3,-28(fp)
   53898:	00bfff84 	movi	r2,-2
   5389c:	1884703a 	and	r2,r3,r2
   538a0:	1001703a 	wrctl	status,r2
  
  return context;
   538a4:	e0bff917 	ldw	r2,-28(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   538a8:	e0bff515 	stw	r2,-44(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
   538ac:	e0ffff03 	ldbu	r3,-4(fp)
   538b0:	008001b4 	movhi	r2,6
   538b4:	1089d604 	addi	r2,r2,10072
   538b8:	18c7883a 	add	r3,r3,r3
   538bc:	18c7883a 	add	r3,r3,r3
   538c0:	10c5883a 	add	r2,r2,r3
   538c4:	10800017 	ldw	r2,0(r2)
   538c8:	10000626 	beq	r2,zero,538e4 <OSTaskChangePrio+0xb0>
   538cc:	e0bff517 	ldw	r2,-44(fp)
   538d0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   538d4:	e0bffa17 	ldw	r2,-24(fp)
   538d8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
   538dc:	00800a04 	movi	r2,40
   538e0:	00011f06 	br	53d60 <OSTaskChangePrio+0x52c>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
   538e4:	e0bffe03 	ldbu	r2,-8(fp)
   538e8:	10803fd8 	cmpnei	r2,r2,255
   538ec:	1000051e 	bne	r2,zero,53904 <OSTaskChangePrio+0xd0>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
   538f0:	008001b4 	movhi	r2,6
   538f4:	10ad5004 	addi	r2,r2,-19136
   538f8:	10800017 	ldw	r2,0(r2)
   538fc:	10800c83 	ldbu	r2,50(r2)
   53900:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
   53904:	e0fffe03 	ldbu	r3,-8(fp)
   53908:	008001b4 	movhi	r2,6
   5390c:	1089d604 	addi	r2,r2,10072
   53910:	18c7883a 	add	r3,r3,r3
   53914:	18c7883a 	add	r3,r3,r3
   53918:	10c5883a 	add	r2,r2,r3
   5391c:	10800017 	ldw	r2,0(r2)
   53920:	e0bff615 	stw	r2,-40(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
   53924:	e0bff617 	ldw	r2,-40(fp)
   53928:	1000061e 	bne	r2,zero,53944 <OSTaskChangePrio+0x110>
   5392c:	e0bff517 	ldw	r2,-44(fp)
   53930:	e0bffb15 	stw	r2,-20(fp)
   53934:	e0bffb17 	ldw	r2,-20(fp)
   53938:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
   5393c:	00800a44 	movi	r2,41
   53940:	00010706 	br	53d60 <OSTaskChangePrio+0x52c>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
   53944:	e0bff617 	ldw	r2,-40(fp)
   53948:	10800058 	cmpnei	r2,r2,1
   5394c:	1000061e 	bne	r2,zero,53968 <OSTaskChangePrio+0x134>
   53950:	e0bff517 	ldw	r2,-44(fp)
   53954:	e0bffc15 	stw	r2,-16(fp)
   53958:	e0bffc17 	ldw	r2,-16(fp)
   5395c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
   53960:	008010c4 	movi	r2,67
   53964:	0000fe06 	br	53d60 <OSTaskChangePrio+0x52c>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
   53968:	e0bfff03 	ldbu	r2,-4(fp)
   5396c:	1004d0fa 	srli	r2,r2,3
   53970:	e0bff705 	stb	r2,-36(fp)
    x_new                 = (INT8U)(newprio & 0x07);
   53974:	e0bfff03 	ldbu	r2,-4(fp)
   53978:	108001cc 	andi	r2,r2,7
   5397c:	e0bff745 	stb	r2,-35(fp)
    bity_new              = (INT8U)(1 << y_new);
   53980:	e0bff703 	ldbu	r2,-36(fp)
   53984:	00c00044 	movi	r3,1
   53988:	1884983a 	sll	r2,r3,r2
   5398c:	e0bff785 	stb	r2,-34(fp)
    bitx_new              = (INT8U)(1 << x_new);
   53990:	e0bff743 	ldbu	r2,-35(fp)
   53994:	00c00044 	movi	r3,1
   53998:	1884983a 	sll	r2,r3,r2
   5399c:	e0bff7c5 	stb	r2,-33(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
   539a0:	e0fffe03 	ldbu	r3,-8(fp)
   539a4:	008001b4 	movhi	r2,6
   539a8:	1089d604 	addi	r2,r2,10072
   539ac:	18c7883a 	add	r3,r3,r3
   539b0:	18c7883a 	add	r3,r3,r3
   539b4:	10c5883a 	add	r2,r2,r3
   539b8:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
   539bc:	e0ffff03 	ldbu	r3,-4(fp)
   539c0:	008001b4 	movhi	r2,6
   539c4:	1089d604 	addi	r2,r2,10072
   539c8:	18c7883a 	add	r3,r3,r3
   539cc:	18c7883a 	add	r3,r3,r3
   539d0:	10c5883a 	add	r2,r2,r3
   539d4:	e0fff617 	ldw	r3,-40(fp)
   539d8:	10c00015 	stw	r3,0(r2)
    y_old                 =  ptcb->OSTCBY;
   539dc:	e0bff617 	ldw	r2,-40(fp)
   539e0:	10800d03 	ldbu	r2,52(r2)
   539e4:	e0bff805 	stb	r2,-32(fp)
    bity_old              =  ptcb->OSTCBBitY;
   539e8:	e0bff617 	ldw	r2,-40(fp)
   539ec:	10800d83 	ldbu	r2,54(r2)
   539f0:	e0bff845 	stb	r2,-31(fp)
    bitx_old              =  ptcb->OSTCBBitX;
   539f4:	e0bff617 	ldw	r2,-40(fp)
   539f8:	10800d43 	ldbu	r2,53(r2)
   539fc:	e0bff885 	stb	r2,-30(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
   53a00:	e0fff803 	ldbu	r3,-32(fp)
   53a04:	008001b4 	movhi	r2,6
   53a08:	10ad4d44 	addi	r2,r2,-19147
   53a0c:	10c5883a 	add	r2,r2,r3
   53a10:	10c00003 	ldbu	r3,0(r2)
   53a14:	e0bff883 	ldbu	r2,-30(fp)
   53a18:	1884703a 	and	r2,r3,r2
   53a1c:	10803fcc 	andi	r2,r2,255
   53a20:	10003726 	beq	r2,zero,53b00 <OSTaskChangePrio+0x2cc>
         OSRdyTbl[y_old] &= ~bitx_old;
   53a24:	e0fff803 	ldbu	r3,-32(fp)
   53a28:	e13ff803 	ldbu	r4,-32(fp)
   53a2c:	008001b4 	movhi	r2,6
   53a30:	10ad4d44 	addi	r2,r2,-19147
   53a34:	1105883a 	add	r2,r2,r4
   53a38:	10800003 	ldbu	r2,0(r2)
   53a3c:	1009883a 	mov	r4,r2
   53a40:	e0bff883 	ldbu	r2,-30(fp)
   53a44:	0084303a 	nor	r2,zero,r2
   53a48:	2084703a 	and	r2,r4,r2
   53a4c:	1009883a 	mov	r4,r2
   53a50:	008001b4 	movhi	r2,6
   53a54:	10ad4d44 	addi	r2,r2,-19147
   53a58:	10c5883a 	add	r2,r2,r3
   53a5c:	11000005 	stb	r4,0(r2)
         if (OSRdyTbl[y_old] == 0) {
   53a60:	e0fff803 	ldbu	r3,-32(fp)
   53a64:	008001b4 	movhi	r2,6
   53a68:	10ad4d44 	addi	r2,r2,-19147
   53a6c:	10c5883a 	add	r2,r2,r3
   53a70:	10800003 	ldbu	r2,0(r2)
   53a74:	10803fcc 	andi	r2,r2,255
   53a78:	10000b1e 	bne	r2,zero,53aa8 <OSTaskChangePrio+0x274>
             OSRdyGrp &= ~bity_old;
   53a7c:	e0bff843 	ldbu	r2,-31(fp)
   53a80:	0084303a 	nor	r2,zero,r2
   53a84:	1007883a 	mov	r3,r2
   53a88:	008001b4 	movhi	r2,6
   53a8c:	10ad4d04 	addi	r2,r2,-19148
   53a90:	10800003 	ldbu	r2,0(r2)
   53a94:	1884703a 	and	r2,r3,r2
   53a98:	1007883a 	mov	r3,r2
   53a9c:	008001b4 	movhi	r2,6
   53aa0:	10ad4d04 	addi	r2,r2,-19148
   53aa4:	10c00005 	stb	r3,0(r2)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
   53aa8:	008001b4 	movhi	r2,6
   53aac:	10ad4d04 	addi	r2,r2,-19148
   53ab0:	10c00003 	ldbu	r3,0(r2)
   53ab4:	e0bff783 	ldbu	r2,-34(fp)
   53ab8:	1884b03a 	or	r2,r3,r2
   53abc:	1007883a 	mov	r3,r2
   53ac0:	008001b4 	movhi	r2,6
   53ac4:	10ad4d04 	addi	r2,r2,-19148
   53ac8:	10c00005 	stb	r3,0(r2)
         OSRdyTbl[y_new] |= bitx_new;
   53acc:	e0fff703 	ldbu	r3,-36(fp)
   53ad0:	e13ff703 	ldbu	r4,-36(fp)
   53ad4:	008001b4 	movhi	r2,6
   53ad8:	10ad4d44 	addi	r2,r2,-19147
   53adc:	1105883a 	add	r2,r2,r4
   53ae0:	11000003 	ldbu	r4,0(r2)
   53ae4:	e0bff7c3 	ldbu	r2,-33(fp)
   53ae8:	2084b03a 	or	r2,r4,r2
   53aec:	1009883a 	mov	r4,r2
   53af0:	008001b4 	movhi	r2,6
   53af4:	10ad4d44 	addi	r2,r2,-19147
   53af8:	10c5883a 	add	r2,r2,r3
   53afc:	11000005 	stb	r4,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
   53b00:	e0bff617 	ldw	r2,-40(fp)
   53b04:	10800717 	ldw	r2,28(r2)
   53b08:	e0bff315 	stw	r2,-52(fp)
    if (pevent != (OS_EVENT *)0) {
   53b0c:	e0bff317 	ldw	r2,-52(fp)
   53b10:	10003326 	beq	r2,zero,53be0 <OSTaskChangePrio+0x3ac>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
   53b14:	e0bff803 	ldbu	r2,-32(fp)
   53b18:	e0fff803 	ldbu	r3,-32(fp)
   53b1c:	e13ff317 	ldw	r4,-52(fp)
   53b20:	20c7883a 	add	r3,r4,r3
   53b24:	18c00204 	addi	r3,r3,8
   53b28:	18c000c3 	ldbu	r3,3(r3)
   53b2c:	1809883a 	mov	r4,r3
   53b30:	e0fff883 	ldbu	r3,-30(fp)
   53b34:	00c6303a 	nor	r3,zero,r3
   53b38:	20c6703a 	and	r3,r4,r3
   53b3c:	1809883a 	mov	r4,r3
   53b40:	e0fff317 	ldw	r3,-52(fp)
   53b44:	1885883a 	add	r2,r3,r2
   53b48:	10800204 	addi	r2,r2,8
   53b4c:	110000c5 	stb	r4,3(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
   53b50:	e0bff803 	ldbu	r2,-32(fp)
   53b54:	e0fff317 	ldw	r3,-52(fp)
   53b58:	1885883a 	add	r2,r3,r2
   53b5c:	10800204 	addi	r2,r2,8
   53b60:	108000c3 	ldbu	r2,3(r2)
   53b64:	10803fcc 	andi	r2,r2,255
   53b68:	1000091e 	bne	r2,zero,53b90 <OSTaskChangePrio+0x35c>
            pevent->OSEventGrp    &= ~bity_old;
   53b6c:	e0bff317 	ldw	r2,-52(fp)
   53b70:	10800283 	ldbu	r2,10(r2)
   53b74:	1007883a 	mov	r3,r2
   53b78:	e0bff843 	ldbu	r2,-31(fp)
   53b7c:	0084303a 	nor	r2,zero,r2
   53b80:	1884703a 	and	r2,r3,r2
   53b84:	1007883a 	mov	r3,r2
   53b88:	e0bff317 	ldw	r2,-52(fp)
   53b8c:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
   53b90:	e0bff317 	ldw	r2,-52(fp)
   53b94:	10c00283 	ldbu	r3,10(r2)
   53b98:	e0bff783 	ldbu	r2,-34(fp)
   53b9c:	1884b03a 	or	r2,r3,r2
   53ba0:	1007883a 	mov	r3,r2
   53ba4:	e0bff317 	ldw	r2,-52(fp)
   53ba8:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
   53bac:	e0bff703 	ldbu	r2,-36(fp)
   53bb0:	e0fff703 	ldbu	r3,-36(fp)
   53bb4:	e13ff317 	ldw	r4,-52(fp)
   53bb8:	20c7883a 	add	r3,r4,r3
   53bbc:	18c00204 	addi	r3,r3,8
   53bc0:	190000c3 	ldbu	r4,3(r3)
   53bc4:	e0fff7c3 	ldbu	r3,-33(fp)
   53bc8:	20c6b03a 	or	r3,r4,r3
   53bcc:	1809883a 	mov	r4,r3
   53bd0:	e0fff317 	ldw	r3,-52(fp)
   53bd4:	1885883a 	add	r2,r3,r2
   53bd8:	10800204 	addi	r2,r2,8
   53bdc:	110000c5 	stb	r4,3(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
   53be0:	e0bff617 	ldw	r2,-40(fp)
   53be4:	10800817 	ldw	r2,32(r2)
   53be8:	10004226 	beq	r2,zero,53cf4 <OSTaskChangePrio+0x4c0>
        pevents =  ptcb->OSTCBEventMultiPtr;
   53bec:	e0bff617 	ldw	r2,-40(fp)
   53bf0:	10800817 	ldw	r2,32(r2)
   53bf4:	e0bff415 	stw	r2,-48(fp)
        pevent  = *pevents;
   53bf8:	e0bff417 	ldw	r2,-48(fp)
   53bfc:	10800017 	ldw	r2,0(r2)
   53c00:	e0bff315 	stw	r2,-52(fp)
        while (pevent != (OS_EVENT *)0) {
   53c04:	00003906 	br	53cec <OSTaskChangePrio+0x4b8>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
   53c08:	e0bff803 	ldbu	r2,-32(fp)
   53c0c:	e0fff803 	ldbu	r3,-32(fp)
   53c10:	e13ff317 	ldw	r4,-52(fp)
   53c14:	20c7883a 	add	r3,r4,r3
   53c18:	18c00204 	addi	r3,r3,8
   53c1c:	18c000c3 	ldbu	r3,3(r3)
   53c20:	1809883a 	mov	r4,r3
   53c24:	e0fff883 	ldbu	r3,-30(fp)
   53c28:	00c6303a 	nor	r3,zero,r3
   53c2c:	20c6703a 	and	r3,r4,r3
   53c30:	1809883a 	mov	r4,r3
   53c34:	e0fff317 	ldw	r3,-52(fp)
   53c38:	1885883a 	add	r2,r3,r2
   53c3c:	10800204 	addi	r2,r2,8
   53c40:	110000c5 	stb	r4,3(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
   53c44:	e0bff803 	ldbu	r2,-32(fp)
   53c48:	e0fff317 	ldw	r3,-52(fp)
   53c4c:	1885883a 	add	r2,r3,r2
   53c50:	10800204 	addi	r2,r2,8
   53c54:	108000c3 	ldbu	r2,3(r2)
   53c58:	10803fcc 	andi	r2,r2,255
   53c5c:	1000091e 	bne	r2,zero,53c84 <OSTaskChangePrio+0x450>
                pevent->OSEventGrp    &= ~bity_old;
   53c60:	e0bff317 	ldw	r2,-52(fp)
   53c64:	10800283 	ldbu	r2,10(r2)
   53c68:	1007883a 	mov	r3,r2
   53c6c:	e0bff843 	ldbu	r2,-31(fp)
   53c70:	0084303a 	nor	r2,zero,r2
   53c74:	1884703a 	and	r2,r3,r2
   53c78:	1007883a 	mov	r3,r2
   53c7c:	e0bff317 	ldw	r2,-52(fp)
   53c80:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
   53c84:	e0bff317 	ldw	r2,-52(fp)
   53c88:	10c00283 	ldbu	r3,10(r2)
   53c8c:	e0bff783 	ldbu	r2,-34(fp)
   53c90:	1884b03a 	or	r2,r3,r2
   53c94:	1007883a 	mov	r3,r2
   53c98:	e0bff317 	ldw	r2,-52(fp)
   53c9c:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
   53ca0:	e0bff703 	ldbu	r2,-36(fp)
   53ca4:	e0fff703 	ldbu	r3,-36(fp)
   53ca8:	e13ff317 	ldw	r4,-52(fp)
   53cac:	20c7883a 	add	r3,r4,r3
   53cb0:	18c00204 	addi	r3,r3,8
   53cb4:	190000c3 	ldbu	r4,3(r3)
   53cb8:	e0fff7c3 	ldbu	r3,-33(fp)
   53cbc:	20c6b03a 	or	r3,r4,r3
   53cc0:	1809883a 	mov	r4,r3
   53cc4:	e0fff317 	ldw	r3,-52(fp)
   53cc8:	1885883a 	add	r2,r3,r2
   53ccc:	10800204 	addi	r2,r2,8
   53cd0:	110000c5 	stb	r4,3(r2)
            pevents++;
   53cd4:	e0bff417 	ldw	r2,-48(fp)
   53cd8:	10800104 	addi	r2,r2,4
   53cdc:	e0bff415 	stw	r2,-48(fp)
            pevent                     = *pevents;
   53ce0:	e0bff417 	ldw	r2,-48(fp)
   53ce4:	10800017 	ldw	r2,0(r2)
   53ce8:	e0bff315 	stw	r2,-52(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
   53cec:	e0bff317 	ldw	r2,-52(fp)
   53cf0:	103fc51e 	bne	r2,zero,53c08 <__alt_data_end+0xfffe2ec8>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
   53cf4:	e0bff617 	ldw	r2,-40(fp)
   53cf8:	e0ffff03 	ldbu	r3,-4(fp)
   53cfc:	10c00c85 	stb	r3,50(r2)
    ptcb->OSTCBY    = y_new;
   53d00:	e0bff617 	ldw	r2,-40(fp)
   53d04:	e0fff703 	ldbu	r3,-36(fp)
   53d08:	10c00d05 	stb	r3,52(r2)
    ptcb->OSTCBX    = x_new;
   53d0c:	e0bff617 	ldw	r2,-40(fp)
   53d10:	e0fff743 	ldbu	r3,-35(fp)
   53d14:	10c00cc5 	stb	r3,51(r2)
    ptcb->OSTCBBitY = bity_new;
   53d18:	e0bff617 	ldw	r2,-40(fp)
   53d1c:	e0fff783 	ldbu	r3,-34(fp)
   53d20:	10c00d85 	stb	r3,54(r2)
    ptcb->OSTCBBitX = bitx_new;
   53d24:	e0bff617 	ldw	r2,-40(fp)
   53d28:	e0fff7c3 	ldbu	r3,-33(fp)
   53d2c:	10c00d45 	stb	r3,53(r2)
   53d30:	e0bff517 	ldw	r2,-44(fp)
   53d34:	e0bffd15 	stw	r2,-12(fp)
   53d38:	e0bffd17 	ldw	r2,-12(fp)
   53d3c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
   53d40:	008001b4 	movhi	r2,6
   53d44:	10ad4144 	addi	r2,r2,-19195
   53d48:	10800003 	ldbu	r2,0(r2)
   53d4c:	10803fcc 	andi	r2,r2,255
   53d50:	10800058 	cmpnei	r2,r2,1
   53d54:	1000011e 	bne	r2,zero,53d5c <OSTaskChangePrio+0x528>
        OS_Sched();                                         /* Find new highest priority task          */
   53d58:	004f3280 	call	4f328 <OS_Sched>
    }
    return (OS_ERR_NONE);
   53d5c:	0005883a 	mov	r2,zero
}
   53d60:	e037883a 	mov	sp,fp
   53d64:	dfc00117 	ldw	ra,4(sp)
   53d68:	df000017 	ldw	fp,0(sp)
   53d6c:	dec00204 	addi	sp,sp,8
   53d70:	f800283a 	ret

00053d74 <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
   53d74:	deffee04 	addi	sp,sp,-72
   53d78:	dfc01115 	stw	ra,68(sp)
   53d7c:	df001015 	stw	fp,64(sp)
   53d80:	df001004 	addi	fp,sp,64
   53d84:	e13ffc15 	stw	r4,-16(fp)
   53d88:	e17ffd15 	stw	r5,-12(fp)
   53d8c:	e1bffe15 	stw	r6,-8(fp)
   53d90:	3805883a 	mov	r2,r7
   53d94:	e0bfff05 	stb	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
   53d98:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
   53d9c:	e0bfff03 	ldbu	r2,-4(fp)
   53da0:	10800570 	cmpltui	r2,r2,21
   53da4:	1000021e 	bne	r2,zero,53db0 <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
   53da8:	00800a84 	movi	r2,42
   53dac:	00005b06 	br	53f1c <OSTaskCreate+0x1a8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   53db0:	0005303a 	rdctl	r2,status
   53db4:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   53db8:	e0fff617 	ldw	r3,-40(fp)
   53dbc:	00bfff84 	movi	r2,-2
   53dc0:	1884703a 	and	r2,r3,r2
   53dc4:	1001703a 	wrctl	status,r2
  
  return context;
   53dc8:	e0bff617 	ldw	r2,-40(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   53dcc:	e0bff315 	stw	r2,-52(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
   53dd0:	008001b4 	movhi	r2,6
   53dd4:	10ad4f04 	addi	r2,r2,-19140
   53dd8:	10800003 	ldbu	r2,0(r2)
   53ddc:	10803fcc 	andi	r2,r2,255
   53de0:	10000626 	beq	r2,zero,53dfc <OSTaskCreate+0x88>
   53de4:	e0bff317 	ldw	r2,-52(fp)
   53de8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   53dec:	e0bff717 	ldw	r2,-36(fp)
   53df0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
   53df4:	00800f04 	movi	r2,60
   53df8:	00004806 	br	53f1c <OSTaskCreate+0x1a8>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
   53dfc:	e0ffff03 	ldbu	r3,-4(fp)
   53e00:	008001b4 	movhi	r2,6
   53e04:	1089d604 	addi	r2,r2,10072
   53e08:	18c7883a 	add	r3,r3,r3
   53e0c:	18c7883a 	add	r3,r3,r3
   53e10:	10c5883a 	add	r2,r2,r3
   53e14:	10800017 	ldw	r2,0(r2)
   53e18:	10003b1e 	bne	r2,zero,53f08 <OSTaskCreate+0x194>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
   53e1c:	e0ffff03 	ldbu	r3,-4(fp)
   53e20:	008001b4 	movhi	r2,6
   53e24:	1089d604 	addi	r2,r2,10072
   53e28:	18c7883a 	add	r3,r3,r3
   53e2c:	18c7883a 	add	r3,r3,r3
   53e30:	10c5883a 	add	r2,r2,r3
   53e34:	00c00044 	movi	r3,1
   53e38:	10c00015 	stw	r3,0(r2)
   53e3c:	e0bff317 	ldw	r2,-52(fp)
   53e40:	e0bff815 	stw	r2,-32(fp)
   53e44:	e0bff817 	ldw	r2,-32(fp)
   53e48:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
   53e4c:	e13ffc17 	ldw	r4,-16(fp)
   53e50:	e17ffd17 	ldw	r5,-12(fp)
   53e54:	e1bffe17 	ldw	r6,-8(fp)
   53e58:	000f883a 	mov	r7,zero
   53e5c:	004d3240 	call	4d324 <OSTaskStkInit>
   53e60:	e0bff415 	stw	r2,-48(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
   53e64:	e0bfff03 	ldbu	r2,-4(fp)
   53e68:	d8000015 	stw	zero,0(sp)
   53e6c:	d8000115 	stw	zero,4(sp)
   53e70:	d8000215 	stw	zero,8(sp)
   53e74:	1009883a 	mov	r4,r2
   53e78:	e17ff417 	ldw	r5,-48(fp)
   53e7c:	000d883a 	mov	r6,zero
   53e80:	000f883a 	mov	r7,zero
   53e84:	004f71c0 	call	4f71c <OS_TCBInit>
   53e88:	e0bff505 	stb	r2,-44(fp)
        if (err == OS_ERR_NONE) {
   53e8c:	e0bff503 	ldbu	r2,-44(fp)
   53e90:	1000081e 	bne	r2,zero,53eb4 <OSTaskCreate+0x140>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
   53e94:	008001b4 	movhi	r2,6
   53e98:	10ad4144 	addi	r2,r2,-19195
   53e9c:	10800003 	ldbu	r2,0(r2)
   53ea0:	10803fcc 	andi	r2,r2,255
   53ea4:	10800058 	cmpnei	r2,r2,1
   53ea8:	1000151e 	bne	r2,zero,53f00 <OSTaskCreate+0x18c>
                OS_Sched();
   53eac:	004f3280 	call	4f328 <OS_Sched>
   53eb0:	00001306 	br	53f00 <OSTaskCreate+0x18c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   53eb4:	0005303a 	rdctl	r2,status
   53eb8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   53ebc:	e0fff917 	ldw	r3,-28(fp)
   53ec0:	00bfff84 	movi	r2,-2
   53ec4:	1884703a 	and	r2,r3,r2
   53ec8:	1001703a 	wrctl	status,r2
  
  return context;
   53ecc:	e0bff917 	ldw	r2,-28(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
   53ed0:	e0bff315 	stw	r2,-52(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
   53ed4:	e0ffff03 	ldbu	r3,-4(fp)
   53ed8:	008001b4 	movhi	r2,6
   53edc:	1089d604 	addi	r2,r2,10072
   53ee0:	18c7883a 	add	r3,r3,r3
   53ee4:	18c7883a 	add	r3,r3,r3
   53ee8:	10c5883a 	add	r2,r2,r3
   53eec:	10000015 	stw	zero,0(r2)
   53ef0:	e0bff317 	ldw	r2,-52(fp)
   53ef4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   53ef8:	e0bffa17 	ldw	r2,-24(fp)
   53efc:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
   53f00:	e0bff503 	ldbu	r2,-44(fp)
   53f04:	00000506 	br	53f1c <OSTaskCreate+0x1a8>
   53f08:	e0bff317 	ldw	r2,-52(fp)
   53f0c:	e0bffb15 	stw	r2,-20(fp)
   53f10:	e0bffb17 	ldw	r2,-20(fp)
   53f14:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
   53f18:	00800a04 	movi	r2,40
}
   53f1c:	e037883a 	mov	sp,fp
   53f20:	dfc00117 	ldw	ra,4(sp)
   53f24:	df000017 	ldw	fp,0(sp)
   53f28:	dec00204 	addi	sp,sp,8
   53f2c:	f800283a 	ret

00053f30 <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
   53f30:	deffec04 	addi	sp,sp,-80
   53f34:	dfc01315 	stw	ra,76(sp)
   53f38:	df001215 	stw	fp,72(sp)
   53f3c:	df001204 	addi	fp,sp,72
   53f40:	e13ffa15 	stw	r4,-24(fp)
   53f44:	e17ffb15 	stw	r5,-20(fp)
   53f48:	e1bffc15 	stw	r6,-16(fp)
   53f4c:	3809883a 	mov	r4,r7
   53f50:	e0c00217 	ldw	r3,8(fp)
   53f54:	e0800617 	ldw	r2,24(fp)
   53f58:	e13ffd05 	stb	r4,-12(fp)
   53f5c:	e0fffe0d 	sth	r3,-8(fp)
   53f60:	e0bfff0d 	sth	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
   53f64:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
   53f68:	e0bffd03 	ldbu	r2,-12(fp)
   53f6c:	10800570 	cmpltui	r2,r2,21
   53f70:	1000021e 	bne	r2,zero,53f7c <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
   53f74:	00800a84 	movi	r2,42
   53f78:	00006306 	br	54108 <OSTaskCreateExt+0x1d8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   53f7c:	0005303a 	rdctl	r2,status
   53f80:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   53f84:	e0fff417 	ldw	r3,-48(fp)
   53f88:	00bfff84 	movi	r2,-2
   53f8c:	1884703a 	and	r2,r3,r2
   53f90:	1001703a 	wrctl	status,r2
  
  return context;
   53f94:	e0bff417 	ldw	r2,-48(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   53f98:	e0bff115 	stw	r2,-60(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
   53f9c:	008001b4 	movhi	r2,6
   53fa0:	10ad4f04 	addi	r2,r2,-19140
   53fa4:	10800003 	ldbu	r2,0(r2)
   53fa8:	10803fcc 	andi	r2,r2,255
   53fac:	10000626 	beq	r2,zero,53fc8 <OSTaskCreateExt+0x98>
   53fb0:	e0bff117 	ldw	r2,-60(fp)
   53fb4:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   53fb8:	e0bff517 	ldw	r2,-44(fp)
   53fbc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
   53fc0:	00800f04 	movi	r2,60
   53fc4:	00005006 	br	54108 <OSTaskCreateExt+0x1d8>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
   53fc8:	e0fffd03 	ldbu	r3,-12(fp)
   53fcc:	008001b4 	movhi	r2,6
   53fd0:	1089d604 	addi	r2,r2,10072
   53fd4:	18c7883a 	add	r3,r3,r3
   53fd8:	18c7883a 	add	r3,r3,r3
   53fdc:	10c5883a 	add	r2,r2,r3
   53fe0:	10800017 	ldw	r2,0(r2)
   53fe4:	1000431e 	bne	r2,zero,540f4 <OSTaskCreateExt+0x1c4>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
   53fe8:	e0fffd03 	ldbu	r3,-12(fp)
   53fec:	008001b4 	movhi	r2,6
   53ff0:	1089d604 	addi	r2,r2,10072
   53ff4:	18c7883a 	add	r3,r3,r3
   53ff8:	18c7883a 	add	r3,r3,r3
   53ffc:	10c5883a 	add	r2,r2,r3
   54000:	00c00044 	movi	r3,1
   54004:	10c00015 	stw	r3,0(r2)
   54008:	e0bff117 	ldw	r2,-60(fp)
   5400c:	e0bff615 	stw	r2,-40(fp)
   54010:	e0bff617 	ldw	r2,-40(fp)
   54014:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
   54018:	e0bfff0b 	ldhu	r2,-4(fp)
   5401c:	e1000317 	ldw	r4,12(fp)
   54020:	e1400417 	ldw	r5,16(fp)
   54024:	100d883a 	mov	r6,r2
   54028:	00550bc0 	call	550bc <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
   5402c:	e0bfff0b 	ldhu	r2,-4(fp)
   54030:	e13ffa17 	ldw	r4,-24(fp)
   54034:	e17ffb17 	ldw	r5,-20(fp)
   54038:	e1bffc17 	ldw	r6,-16(fp)
   5403c:	100f883a 	mov	r7,r2
   54040:	004d3240 	call	4d324 <OSTaskStkInit>
   54044:	e0bff215 	stw	r2,-56(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
   54048:	e13ffd03 	ldbu	r4,-12(fp)
   5404c:	e1fffe0b 	ldhu	r7,-8(fp)
   54050:	e0bfff0b 	ldhu	r2,-4(fp)
   54054:	e0c00417 	ldw	r3,16(fp)
   54058:	d8c00015 	stw	r3,0(sp)
   5405c:	e0c00517 	ldw	r3,20(fp)
   54060:	d8c00115 	stw	r3,4(sp)
   54064:	d8800215 	stw	r2,8(sp)
   54068:	e17ff217 	ldw	r5,-56(fp)
   5406c:	e1800317 	ldw	r6,12(fp)
   54070:	004f71c0 	call	4f71c <OS_TCBInit>
   54074:	e0bff305 	stb	r2,-52(fp)
        if (err == OS_ERR_NONE) {
   54078:	e0bff303 	ldbu	r2,-52(fp)
   5407c:	1000081e 	bne	r2,zero,540a0 <OSTaskCreateExt+0x170>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
   54080:	008001b4 	movhi	r2,6
   54084:	10ad4144 	addi	r2,r2,-19195
   54088:	10800003 	ldbu	r2,0(r2)
   5408c:	10803fcc 	andi	r2,r2,255
   54090:	10800058 	cmpnei	r2,r2,1
   54094:	1000151e 	bne	r2,zero,540ec <OSTaskCreateExt+0x1bc>
                OS_Sched();
   54098:	004f3280 	call	4f328 <OS_Sched>
   5409c:	00001306 	br	540ec <OSTaskCreateExt+0x1bc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   540a0:	0005303a 	rdctl	r2,status
   540a4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   540a8:	e0fff717 	ldw	r3,-36(fp)
   540ac:	00bfff84 	movi	r2,-2
   540b0:	1884703a 	and	r2,r3,r2
   540b4:	1001703a 	wrctl	status,r2
  
  return context;
   540b8:	e0bff717 	ldw	r2,-36(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
   540bc:	e0bff115 	stw	r2,-60(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
   540c0:	e0fffd03 	ldbu	r3,-12(fp)
   540c4:	008001b4 	movhi	r2,6
   540c8:	1089d604 	addi	r2,r2,10072
   540cc:	18c7883a 	add	r3,r3,r3
   540d0:	18c7883a 	add	r3,r3,r3
   540d4:	10c5883a 	add	r2,r2,r3
   540d8:	10000015 	stw	zero,0(r2)
   540dc:	e0bff117 	ldw	r2,-60(fp)
   540e0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   540e4:	e0bff817 	ldw	r2,-32(fp)
   540e8:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
   540ec:	e0bff303 	ldbu	r2,-52(fp)
   540f0:	00000506 	br	54108 <OSTaskCreateExt+0x1d8>
   540f4:	e0bff117 	ldw	r2,-60(fp)
   540f8:	e0bff915 	stw	r2,-28(fp)
   540fc:	e0bff917 	ldw	r2,-28(fp)
   54100:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
   54104:	00800a04 	movi	r2,40
}
   54108:	e037883a 	mov	sp,fp
   5410c:	dfc00117 	ldw	ra,4(sp)
   54110:	df000017 	ldw	fp,0(sp)
   54114:	dec00204 	addi	sp,sp,8
   54118:	f800283a 	ret

0005411c <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
   5411c:	defff404 	addi	sp,sp,-48
   54120:	dfc00b15 	stw	ra,44(sp)
   54124:	df000a15 	stw	fp,40(sp)
   54128:	df000a04 	addi	fp,sp,40
   5412c:	2005883a 	mov	r2,r4
   54130:	e0bfff05 	stb	r2,-4(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
   54134:	e03ff615 	stw	zero,-40(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
   54138:	008001b4 	movhi	r2,6
   5413c:	10ad4f04 	addi	r2,r2,-19140
   54140:	10800003 	ldbu	r2,0(r2)
   54144:	10803fcc 	andi	r2,r2,255
   54148:	10000226 	beq	r2,zero,54154 <OSTaskDel+0x38>
        return (OS_ERR_TASK_DEL_ISR);
   5414c:	00801004 	movi	r2,64
   54150:	0000e506 	br	544e8 <OSTaskDel+0x3cc>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
   54154:	e0bfff03 	ldbu	r2,-4(fp)
   54158:	10800518 	cmpnei	r2,r2,20
   5415c:	1000021e 	bne	r2,zero,54168 <OSTaskDel+0x4c>
        return (OS_ERR_TASK_DEL_IDLE);
   54160:	00800f84 	movi	r2,62
   54164:	0000e006 	br	544e8 <OSTaskDel+0x3cc>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
   54168:	e0bfff03 	ldbu	r2,-4(fp)
   5416c:	10800530 	cmpltui	r2,r2,20
   54170:	1000051e 	bne	r2,zero,54188 <OSTaskDel+0x6c>
        if (prio != OS_PRIO_SELF) {
   54174:	e0bfff03 	ldbu	r2,-4(fp)
   54178:	10803fe0 	cmpeqi	r2,r2,255
   5417c:	1000021e 	bne	r2,zero,54188 <OSTaskDel+0x6c>
            return (OS_ERR_PRIO_INVALID);
   54180:	00800a84 	movi	r2,42
   54184:	0000d806 	br	544e8 <OSTaskDel+0x3cc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   54188:	0005303a 	rdctl	r2,status
   5418c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   54190:	e0fff917 	ldw	r3,-28(fp)
   54194:	00bfff84 	movi	r2,-2
   54198:	1884703a 	and	r2,r3,r2
   5419c:	1001703a 	wrctl	status,r2
  
  return context;
   541a0:	e0bff917 	ldw	r2,-28(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
   541a4:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
   541a8:	e0bfff03 	ldbu	r2,-4(fp)
   541ac:	10803fd8 	cmpnei	r2,r2,255
   541b0:	1000051e 	bne	r2,zero,541c8 <OSTaskDel+0xac>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
   541b4:	008001b4 	movhi	r2,6
   541b8:	10ad5004 	addi	r2,r2,-19136
   541bc:	10800017 	ldw	r2,0(r2)
   541c0:	10800c83 	ldbu	r2,50(r2)
   541c4:	e0bfff05 	stb	r2,-4(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   541c8:	e0ffff03 	ldbu	r3,-4(fp)
   541cc:	008001b4 	movhi	r2,6
   541d0:	1089d604 	addi	r2,r2,10072
   541d4:	18c7883a 	add	r3,r3,r3
   541d8:	18c7883a 	add	r3,r3,r3
   541dc:	10c5883a 	add	r2,r2,r3
   541e0:	10800017 	ldw	r2,0(r2)
   541e4:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
   541e8:	e0bff717 	ldw	r2,-36(fp)
   541ec:	1000061e 	bne	r2,zero,54208 <OSTaskDel+0xec>
   541f0:	e0bff617 	ldw	r2,-40(fp)
   541f4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   541f8:	e0bffa17 	ldw	r2,-24(fp)
   541fc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   54200:	008010c4 	movi	r2,67
   54204:	0000b806 	br	544e8 <OSTaskDel+0x3cc>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
   54208:	e0bff717 	ldw	r2,-36(fp)
   5420c:	10800058 	cmpnei	r2,r2,1
   54210:	1000061e 	bne	r2,zero,5422c <OSTaskDel+0x110>
   54214:	e0bff617 	ldw	r2,-40(fp)
   54218:	e0bffb15 	stw	r2,-20(fp)
   5421c:	e0bffb17 	ldw	r2,-20(fp)
   54220:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
   54224:	00800f44 	movi	r2,61
   54228:	0000af06 	br	544e8 <OSTaskDel+0x3cc>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
   5422c:	e0bff717 	ldw	r2,-36(fp)
   54230:	10800d03 	ldbu	r2,52(r2)
   54234:	10c03fcc 	andi	r3,r2,255
   54238:	e0bff717 	ldw	r2,-36(fp)
   5423c:	10800d03 	ldbu	r2,52(r2)
   54240:	11003fcc 	andi	r4,r2,255
   54244:	008001b4 	movhi	r2,6
   54248:	10ad4d44 	addi	r2,r2,-19147
   5424c:	1105883a 	add	r2,r2,r4
   54250:	10800003 	ldbu	r2,0(r2)
   54254:	1009883a 	mov	r4,r2
   54258:	e0bff717 	ldw	r2,-36(fp)
   5425c:	10800d43 	ldbu	r2,53(r2)
   54260:	0084303a 	nor	r2,zero,r2
   54264:	2084703a 	and	r2,r4,r2
   54268:	1009883a 	mov	r4,r2
   5426c:	008001b4 	movhi	r2,6
   54270:	10ad4d44 	addi	r2,r2,-19147
   54274:	10c5883a 	add	r2,r2,r3
   54278:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
   5427c:	e0bff717 	ldw	r2,-36(fp)
   54280:	10800d03 	ldbu	r2,52(r2)
   54284:	10c03fcc 	andi	r3,r2,255
   54288:	008001b4 	movhi	r2,6
   5428c:	10ad4d44 	addi	r2,r2,-19147
   54290:	10c5883a 	add	r2,r2,r3
   54294:	10800003 	ldbu	r2,0(r2)
   54298:	10803fcc 	andi	r2,r2,255
   5429c:	10000c1e 	bne	r2,zero,542d0 <OSTaskDel+0x1b4>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
   542a0:	e0bff717 	ldw	r2,-36(fp)
   542a4:	10800d83 	ldbu	r2,54(r2)
   542a8:	0084303a 	nor	r2,zero,r2
   542ac:	1007883a 	mov	r3,r2
   542b0:	008001b4 	movhi	r2,6
   542b4:	10ad4d04 	addi	r2,r2,-19148
   542b8:	10800003 	ldbu	r2,0(r2)
   542bc:	1884703a 	and	r2,r3,r2
   542c0:	1007883a 	mov	r3,r2
   542c4:	008001b4 	movhi	r2,6
   542c8:	10ad4d04 	addi	r2,r2,-19148
   542cc:	10c00005 	stb	r3,0(r2)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
   542d0:	e0bff717 	ldw	r2,-36(fp)
   542d4:	10800717 	ldw	r2,28(r2)
   542d8:	10000526 	beq	r2,zero,542f0 <OSTaskDel+0x1d4>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
   542dc:	e0bff717 	ldw	r2,-36(fp)
   542e0:	10800717 	ldw	r2,28(r2)
   542e4:	e13ff717 	ldw	r4,-36(fp)
   542e8:	100b883a 	mov	r5,r2
   542ec:	004ed000 	call	4ed00 <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
   542f0:	e0bff717 	ldw	r2,-36(fp)
   542f4:	10800817 	ldw	r2,32(r2)
   542f8:	10000526 	beq	r2,zero,54310 <OSTaskDel+0x1f4>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
   542fc:	e0bff717 	ldw	r2,-36(fp)
   54300:	10800817 	ldw	r2,32(r2)
   54304:	e13ff717 	ldw	r4,-36(fp)
   54308:	100b883a 	mov	r5,r2
   5430c:	004edb40 	call	4edb4 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
   54310:	e0bff717 	ldw	r2,-36(fp)
   54314:	10800a17 	ldw	r2,40(r2)
   54318:	e0bff815 	stw	r2,-32(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
   5431c:	e0bff817 	ldw	r2,-32(fp)
   54320:	10000226 	beq	r2,zero,5432c <OSTaskDel+0x210>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
   54324:	e13ff817 	ldw	r4,-32(fp)
   54328:	00512f80 	call	512f8 <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
   5432c:	e0bff717 	ldw	r2,-36(fp)
   54330:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
   54334:	e0bff717 	ldw	r2,-36(fp)
   54338:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
   5433c:	e0bff717 	ldw	r2,-36(fp)
   54340:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
   54344:	008001b4 	movhi	r2,6
   54348:	10ad4104 	addi	r2,r2,-19196
   5434c:	10800003 	ldbu	r2,0(r2)
   54350:	10803fcc 	andi	r2,r2,255
   54354:	10803fe0 	cmpeqi	r2,r2,255
   54358:	1000081e 	bne	r2,zero,5437c <OSTaskDel+0x260>
        OSLockNesting++;
   5435c:	008001b4 	movhi	r2,6
   54360:	10ad4104 	addi	r2,r2,-19196
   54364:	10800003 	ldbu	r2,0(r2)
   54368:	10800044 	addi	r2,r2,1
   5436c:	1007883a 	mov	r3,r2
   54370:	008001b4 	movhi	r2,6
   54374:	10ad4104 	addi	r2,r2,-19196
   54378:	10c00005 	stb	r3,0(r2)
   5437c:	e0bff617 	ldw	r2,-40(fp)
   54380:	e0bffc15 	stw	r2,-16(fp)
   54384:	e0bffc17 	ldw	r2,-16(fp)
   54388:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
   5438c:	004e8f40 	call	4e8f4 <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   54390:	0005303a 	rdctl	r2,status
   54394:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   54398:	e0fffd17 	ldw	r3,-12(fp)
   5439c:	00bfff84 	movi	r2,-2
   543a0:	1884703a 	and	r2,r3,r2
   543a4:	1001703a 	wrctl	status,r2
  
  return context;
   543a8:	e0bffd17 	ldw	r2,-12(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
   543ac:	e0bff615 	stw	r2,-40(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
   543b0:	008001b4 	movhi	r2,6
   543b4:	10ad4104 	addi	r2,r2,-19196
   543b8:	10800003 	ldbu	r2,0(r2)
   543bc:	10803fcc 	andi	r2,r2,255
   543c0:	10000826 	beq	r2,zero,543e4 <OSTaskDel+0x2c8>
        OSLockNesting--;
   543c4:	008001b4 	movhi	r2,6
   543c8:	10ad4104 	addi	r2,r2,-19196
   543cc:	10800003 	ldbu	r2,0(r2)
   543d0:	10bfffc4 	addi	r2,r2,-1
   543d4:	1007883a 	mov	r3,r2
   543d8:	008001b4 	movhi	r2,6
   543dc:	10ad4104 	addi	r2,r2,-19196
   543e0:	10c00005 	stb	r3,0(r2)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
   543e4:	e13ff717 	ldw	r4,-36(fp)
   543e8:	004d6380 	call	4d638 <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
   543ec:	008001b4 	movhi	r2,6
   543f0:	10ad4944 	addi	r2,r2,-19163
   543f4:	10800003 	ldbu	r2,0(r2)
   543f8:	10bfffc4 	addi	r2,r2,-1
   543fc:	1007883a 	mov	r3,r2
   54400:	008001b4 	movhi	r2,6
   54404:	10ad4944 	addi	r2,r2,-19163
   54408:	10c00005 	stb	r3,0(r2)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
   5440c:	e0ffff03 	ldbu	r3,-4(fp)
   54410:	008001b4 	movhi	r2,6
   54414:	1089d604 	addi	r2,r2,10072
   54418:	18c7883a 	add	r3,r3,r3
   5441c:	18c7883a 	add	r3,r3,r3
   54420:	10c5883a 	add	r2,r2,r3
   54424:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
   54428:	e0bff717 	ldw	r2,-36(fp)
   5442c:	10800617 	ldw	r2,24(r2)
   54430:	1000091e 	bne	r2,zero,54458 <OSTaskDel+0x33c>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
   54434:	e0bff717 	ldw	r2,-36(fp)
   54438:	10800517 	ldw	r2,20(r2)
   5443c:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
   54440:	e0bff717 	ldw	r2,-36(fp)
   54444:	10c00517 	ldw	r3,20(r2)
   54448:	008001b4 	movhi	r2,6
   5444c:	10ad4404 	addi	r2,r2,-19184
   54450:	10c00015 	stw	r3,0(r2)
   54454:	00000a06 	br	54480 <OSTaskDel+0x364>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
   54458:	e0bff717 	ldw	r2,-36(fp)
   5445c:	10800617 	ldw	r2,24(r2)
   54460:	e0fff717 	ldw	r3,-36(fp)
   54464:	18c00517 	ldw	r3,20(r3)
   54468:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
   5446c:	e0bff717 	ldw	r2,-36(fp)
   54470:	10800517 	ldw	r2,20(r2)
   54474:	e0fff717 	ldw	r3,-36(fp)
   54478:	18c00617 	ldw	r3,24(r3)
   5447c:	10c00615 	stw	r3,24(r2)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
   54480:	008001b4 	movhi	r2,6
   54484:	10ad4804 	addi	r2,r2,-19168
   54488:	10c00017 	ldw	r3,0(r2)
   5448c:	e0bff717 	ldw	r2,-36(fp)
   54490:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
   54494:	008001b4 	movhi	r2,6
   54498:	10ad4804 	addi	r2,r2,-19168
   5449c:	e0fff717 	ldw	r3,-36(fp)
   544a0:	10c00015 	stw	r3,0(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
   544a4:	e0bff717 	ldw	r2,-36(fp)
   544a8:	00c00fc4 	movi	r3,63
   544ac:	10c01305 	stb	r3,76(r2)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
   544b0:	e0bff717 	ldw	r2,-36(fp)
   544b4:	10001345 	stb	zero,77(r2)
   544b8:	e0bff617 	ldw	r2,-40(fp)
   544bc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   544c0:	e0bffe17 	ldw	r2,-8(fp)
   544c4:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
   544c8:	008001b4 	movhi	r2,6
   544cc:	10ad4144 	addi	r2,r2,-19195
   544d0:	10800003 	ldbu	r2,0(r2)
   544d4:	10803fcc 	andi	r2,r2,255
   544d8:	10800058 	cmpnei	r2,r2,1
   544dc:	1000011e 	bne	r2,zero,544e4 <OSTaskDel+0x3c8>
        OS_Sched();                                     /* Find new highest priority task              */
   544e0:	004f3280 	call	4f328 <OS_Sched>
    }
    return (OS_ERR_NONE);
   544e4:	0005883a 	mov	r2,zero
}
   544e8:	e037883a 	mov	sp,fp
   544ec:	dfc00117 	ldw	ra,4(sp)
   544f0:	df000017 	ldw	fp,0(sp)
   544f4:	dec00204 	addi	sp,sp,8
   544f8:	f800283a 	ret

000544fc <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
   544fc:	defff504 	addi	sp,sp,-44
   54500:	df000a15 	stw	fp,40(sp)
   54504:	df000a04 	addi	fp,sp,40
   54508:	2005883a 	mov	r2,r4
   5450c:	e0bfff05 	stb	r2,-4(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   54510:	e03ff615 	stw	zero,-40(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
   54514:	e0bfff03 	ldbu	r2,-4(fp)
   54518:	10800518 	cmpnei	r2,r2,20
   5451c:	1000021e 	bne	r2,zero,54528 <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
   54520:	00800f84 	movi	r2,62
   54524:	00004706 	br	54644 <OSTaskDelReq+0x148>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
   54528:	e0bfff03 	ldbu	r2,-4(fp)
   5452c:	10800530 	cmpltui	r2,r2,20
   54530:	1000051e 	bne	r2,zero,54548 <OSTaskDelReq+0x4c>
        if (prio != OS_PRIO_SELF) {
   54534:	e0bfff03 	ldbu	r2,-4(fp)
   54538:	10803fe0 	cmpeqi	r2,r2,255
   5453c:	1000021e 	bne	r2,zero,54548 <OSTaskDelReq+0x4c>
            return (OS_ERR_PRIO_INVALID);
   54540:	00800a84 	movi	r2,42
   54544:	00003f06 	br	54644 <OSTaskDelReq+0x148>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
   54548:	e0bfff03 	ldbu	r2,-4(fp)
   5454c:	10803fd8 	cmpnei	r2,r2,255
   54550:	1000131e 	bne	r2,zero,545a0 <OSTaskDelReq+0xa4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   54554:	0005303a 	rdctl	r2,status
   54558:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   5455c:	e0fff917 	ldw	r3,-28(fp)
   54560:	00bfff84 	movi	r2,-2
   54564:	1884703a 	and	r2,r3,r2
   54568:	1001703a 	wrctl	status,r2
  
  return context;
   5456c:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
   54570:	e0bff615 	stw	r2,-40(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
   54574:	008001b4 	movhi	r2,6
   54578:	10ad5004 	addi	r2,r2,-19136
   5457c:	10800017 	ldw	r2,0(r2)
   54580:	10800dc3 	ldbu	r2,55(r2)
   54584:	e0bff705 	stb	r2,-36(fp)
   54588:	e0bff617 	ldw	r2,-40(fp)
   5458c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   54590:	e0bffa17 	ldw	r2,-24(fp)
   54594:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
   54598:	e0bff703 	ldbu	r2,-36(fp)
   5459c:	00002906 	br	54644 <OSTaskDelReq+0x148>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   545a0:	0005303a 	rdctl	r2,status
   545a4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   545a8:	e0fffb17 	ldw	r3,-20(fp)
   545ac:	00bfff84 	movi	r2,-2
   545b0:	1884703a 	and	r2,r3,r2
   545b4:	1001703a 	wrctl	status,r2
  
  return context;
   545b8:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   545bc:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
   545c0:	e0ffff03 	ldbu	r3,-4(fp)
   545c4:	008001b4 	movhi	r2,6
   545c8:	1089d604 	addi	r2,r2,10072
   545cc:	18c7883a 	add	r3,r3,r3
   545d0:	18c7883a 	add	r3,r3,r3
   545d4:	10c5883a 	add	r2,r2,r3
   545d8:	10800017 	ldw	r2,0(r2)
   545dc:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
   545e0:	e0bff817 	ldw	r2,-32(fp)
   545e4:	1000061e 	bne	r2,zero,54600 <OSTaskDelReq+0x104>
   545e8:	e0bff617 	ldw	r2,-40(fp)
   545ec:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   545f0:	e0bffc17 	ldw	r2,-16(fp)
   545f4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
   545f8:	008010c4 	movi	r2,67
   545fc:	00001106 	br	54644 <OSTaskDelReq+0x148>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
   54600:	e0bff817 	ldw	r2,-32(fp)
   54604:	10800058 	cmpnei	r2,r2,1
   54608:	1000061e 	bne	r2,zero,54624 <OSTaskDelReq+0x128>
   5460c:	e0bff617 	ldw	r2,-40(fp)
   54610:	e0bffd15 	stw	r2,-12(fp)
   54614:	e0bffd17 	ldw	r2,-12(fp)
   54618:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
   5461c:	00800f44 	movi	r2,61
   54620:	00000806 	br	54644 <OSTaskDelReq+0x148>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
   54624:	e0bff817 	ldw	r2,-32(fp)
   54628:	00c00fc4 	movi	r3,63
   5462c:	10c00dc5 	stb	r3,55(r2)
   54630:	e0bff617 	ldw	r2,-40(fp)
   54634:	e0bffe15 	stw	r2,-8(fp)
   54638:	e0bffe17 	ldw	r2,-8(fp)
   5463c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   54640:	0005883a 	mov	r2,zero
}
   54644:	e037883a 	mov	sp,fp
   54648:	df000017 	ldw	fp,0(sp)
   5464c:	dec00104 	addi	sp,sp,4
   54650:	f800283a 	ret

00054654 <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
   54654:	defff404 	addi	sp,sp,-48
   54658:	dfc00b15 	stw	ra,44(sp)
   5465c:	df000a15 	stw	fp,40(sp)
   54660:	df000a04 	addi	fp,sp,40
   54664:	2005883a 	mov	r2,r4
   54668:	e17ffe15 	stw	r5,-8(fp)
   5466c:	e1bfff15 	stw	r6,-4(fp)
   54670:	e0bffd05 	stb	r2,-12(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
   54674:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
   54678:	e0bfff17 	ldw	r2,-4(fp)
   5467c:	1000021e 	bne	r2,zero,54688 <OSTaskNameGet+0x34>
        return (0);
   54680:	0005883a 	mov	r2,zero
   54684:	00005806 	br	547e8 <OSTaskNameGet+0x194>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
   54688:	e0bffd03 	ldbu	r2,-12(fp)
   5468c:	10800570 	cmpltui	r2,r2,21
   54690:	1000081e 	bne	r2,zero,546b4 <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
   54694:	e0bffd03 	ldbu	r2,-12(fp)
   54698:	10803fe0 	cmpeqi	r2,r2,255
   5469c:	1000051e 	bne	r2,zero,546b4 <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
   546a0:	e0bfff17 	ldw	r2,-4(fp)
   546a4:	00c00a84 	movi	r3,42
   546a8:	10c00005 	stb	r3,0(r2)
            return (0);
   546ac:	0005883a 	mov	r2,zero
   546b0:	00004d06 	br	547e8 <OSTaskNameGet+0x194>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
   546b4:	e0bffe17 	ldw	r2,-8(fp)
   546b8:	1000051e 	bne	r2,zero,546d0 <OSTaskNameGet+0x7c>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
   546bc:	e0bfff17 	ldw	r2,-4(fp)
   546c0:	00c00304 	movi	r3,12
   546c4:	10c00005 	stb	r3,0(r2)
        return (0);
   546c8:	0005883a 	mov	r2,zero
   546cc:	00004606 	br	547e8 <OSTaskNameGet+0x194>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
   546d0:	008001b4 	movhi	r2,6
   546d4:	10ad4f04 	addi	r2,r2,-19140
   546d8:	10800003 	ldbu	r2,0(r2)
   546dc:	10803fcc 	andi	r2,r2,255
   546e0:	10000526 	beq	r2,zero,546f8 <OSTaskNameGet+0xa4>
        *perr = OS_ERR_NAME_GET_ISR;
   546e4:	e0bfff17 	ldw	r2,-4(fp)
   546e8:	00c00444 	movi	r3,17
   546ec:	10c00005 	stb	r3,0(r2)
        return (0);
   546f0:	0005883a 	mov	r2,zero
   546f4:	00003c06 	br	547e8 <OSTaskNameGet+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   546f8:	0005303a 	rdctl	r2,status
   546fc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   54700:	e0fff917 	ldw	r3,-28(fp)
   54704:	00bfff84 	movi	r2,-2
   54708:	1884703a 	and	r2,r3,r2
   5470c:	1001703a 	wrctl	status,r2
  
  return context;
   54710:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   54714:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
   54718:	e0bffd03 	ldbu	r2,-12(fp)
   5471c:	10803fd8 	cmpnei	r2,r2,255
   54720:	1000051e 	bne	r2,zero,54738 <OSTaskNameGet+0xe4>
        prio = OSTCBCur->OSTCBPrio;
   54724:	008001b4 	movhi	r2,6
   54728:	10ad5004 	addi	r2,r2,-19136
   5472c:	10800017 	ldw	r2,0(r2)
   54730:	10800c83 	ldbu	r2,50(r2)
   54734:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   54738:	e0fffd03 	ldbu	r3,-12(fp)
   5473c:	008001b4 	movhi	r2,6
   54740:	1089d604 	addi	r2,r2,10072
   54744:	18c7883a 	add	r3,r3,r3
   54748:	18c7883a 	add	r3,r3,r3
   5474c:	10c5883a 	add	r2,r2,r3
   54750:	10800017 	ldw	r2,0(r2)
   54754:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
   54758:	e0bff717 	ldw	r2,-36(fp)
   5475c:	1000091e 	bne	r2,zero,54784 <OSTaskNameGet+0x130>
   54760:	e0bff617 	ldw	r2,-40(fp)
   54764:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   54768:	e0bffa17 	ldw	r2,-24(fp)
   5476c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
   54770:	e0bfff17 	ldw	r2,-4(fp)
   54774:	00c010c4 	movi	r3,67
   54778:	10c00005 	stb	r3,0(r2)
        return (0);
   5477c:	0005883a 	mov	r2,zero
   54780:	00001906 	br	547e8 <OSTaskNameGet+0x194>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
   54784:	e0bff717 	ldw	r2,-36(fp)
   54788:	10800058 	cmpnei	r2,r2,1
   5478c:	1000091e 	bne	r2,zero,547b4 <OSTaskNameGet+0x160>
   54790:	e0bff617 	ldw	r2,-40(fp)
   54794:	e0bffb15 	stw	r2,-20(fp)
   54798:	e0bffb17 	ldw	r2,-20(fp)
   5479c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
   547a0:	e0bfff17 	ldw	r2,-4(fp)
   547a4:	00c010c4 	movi	r3,67
   547a8:	10c00005 	stb	r3,0(r2)
        return (0);
   547ac:	0005883a 	mov	r2,zero
   547b0:	00000d06 	br	547e8 <OSTaskNameGet+0x194>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
   547b4:	e0bff717 	ldw	r2,-36(fp)
   547b8:	10801304 	addi	r2,r2,76
   547bc:	e13ffe17 	ldw	r4,-8(fp)
   547c0:	100b883a 	mov	r5,r2
   547c4:	004f4640 	call	4f464 <OS_StrCopy>
   547c8:	e0bff805 	stb	r2,-32(fp)
   547cc:	e0bff617 	ldw	r2,-40(fp)
   547d0:	e0bffc15 	stw	r2,-16(fp)
   547d4:	e0bffc17 	ldw	r2,-16(fp)
   547d8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   547dc:	e0bfff17 	ldw	r2,-4(fp)
   547e0:	10000005 	stb	zero,0(r2)
    return (len);
   547e4:	e0bff803 	ldbu	r2,-32(fp)
}
   547e8:	e037883a 	mov	sp,fp
   547ec:	dfc00117 	ldw	ra,4(sp)
   547f0:	df000017 	ldw	fp,0(sp)
   547f4:	dec00204 	addi	sp,sp,8
   547f8:	f800283a 	ret

000547fc <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
   547fc:	defff304 	addi	sp,sp,-52
   54800:	dfc00c15 	stw	ra,48(sp)
   54804:	df000b15 	stw	fp,44(sp)
   54808:	df000b04 	addi	fp,sp,44
   5480c:	2005883a 	mov	r2,r4
   54810:	e17ffe15 	stw	r5,-8(fp)
   54814:	e1bfff15 	stw	r6,-4(fp)
   54818:	e0bffd05 	stb	r2,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
   5481c:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
   54820:	e0bfff17 	ldw	r2,-4(fp)
   54824:	1000011e 	bne	r2,zero,5482c <OSTaskNameSet+0x30>
        return;
   54828:	00005f06 	br	549a8 <OSTaskNameSet+0x1ac>
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
   5482c:	e0bffd03 	ldbu	r2,-12(fp)
   54830:	10800570 	cmpltui	r2,r2,21
   54834:	1000071e 	bne	r2,zero,54854 <OSTaskNameSet+0x58>
        if (prio != OS_PRIO_SELF) {
   54838:	e0bffd03 	ldbu	r2,-12(fp)
   5483c:	10803fe0 	cmpeqi	r2,r2,255
   54840:	1000041e 	bne	r2,zero,54854 <OSTaskNameSet+0x58>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
   54844:	e0bfff17 	ldw	r2,-4(fp)
   54848:	00c00a84 	movi	r3,42
   5484c:	10c00005 	stb	r3,0(r2)
            return;
   54850:	00005506 	br	549a8 <OSTaskNameSet+0x1ac>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
   54854:	e0bffe17 	ldw	r2,-8(fp)
   54858:	1000041e 	bne	r2,zero,5486c <OSTaskNameSet+0x70>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
   5485c:	e0bfff17 	ldw	r2,-4(fp)
   54860:	00c00304 	movi	r3,12
   54864:	10c00005 	stb	r3,0(r2)
        return;
   54868:	00004f06 	br	549a8 <OSTaskNameSet+0x1ac>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
   5486c:	008001b4 	movhi	r2,6
   54870:	10ad4f04 	addi	r2,r2,-19140
   54874:	10800003 	ldbu	r2,0(r2)
   54878:	10803fcc 	andi	r2,r2,255
   5487c:	10000426 	beq	r2,zero,54890 <OSTaskNameSet+0x94>
        *perr = OS_ERR_NAME_SET_ISR;
   54880:	e0bfff17 	ldw	r2,-4(fp)
   54884:	00c00484 	movi	r3,18
   54888:	10c00005 	stb	r3,0(r2)
        return;
   5488c:	00004606 	br	549a8 <OSTaskNameSet+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   54890:	0005303a 	rdctl	r2,status
   54894:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   54898:	e0fff817 	ldw	r3,-32(fp)
   5489c:	00bfff84 	movi	r2,-2
   548a0:	1884703a 	and	r2,r3,r2
   548a4:	1001703a 	wrctl	status,r2
  
  return context;
   548a8:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   548ac:	e0bff515 	stw	r2,-44(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
   548b0:	e0bffd03 	ldbu	r2,-12(fp)
   548b4:	10803fd8 	cmpnei	r2,r2,255
   548b8:	1000051e 	bne	r2,zero,548d0 <OSTaskNameSet+0xd4>
        prio = OSTCBCur->OSTCBPrio;
   548bc:	008001b4 	movhi	r2,6
   548c0:	10ad5004 	addi	r2,r2,-19136
   548c4:	10800017 	ldw	r2,0(r2)
   548c8:	10800c83 	ldbu	r2,50(r2)
   548cc:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   548d0:	e0fffd03 	ldbu	r3,-12(fp)
   548d4:	008001b4 	movhi	r2,6
   548d8:	1089d604 	addi	r2,r2,10072
   548dc:	18c7883a 	add	r3,r3,r3
   548e0:	18c7883a 	add	r3,r3,r3
   548e4:	10c5883a 	add	r2,r2,r3
   548e8:	10800017 	ldw	r2,0(r2)
   548ec:	e0bff615 	stw	r2,-40(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
   548f0:	e0bff617 	ldw	r2,-40(fp)
   548f4:	1000081e 	bne	r2,zero,54918 <OSTaskNameSet+0x11c>
   548f8:	e0bff517 	ldw	r2,-44(fp)
   548fc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   54900:	e0bff917 	ldw	r2,-28(fp)
   54904:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
   54908:	e0bfff17 	ldw	r2,-4(fp)
   5490c:	00c010c4 	movi	r3,67
   54910:	10c00005 	stb	r3,0(r2)
        return;
   54914:	00002406 	br	549a8 <OSTaskNameSet+0x1ac>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
   54918:	e0bff617 	ldw	r2,-40(fp)
   5491c:	10800058 	cmpnei	r2,r2,1
   54920:	1000081e 	bne	r2,zero,54944 <OSTaskNameSet+0x148>
   54924:	e0bff517 	ldw	r2,-44(fp)
   54928:	e0bffa15 	stw	r2,-24(fp)
   5492c:	e0bffa17 	ldw	r2,-24(fp)
   54930:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
   54934:	e0bfff17 	ldw	r2,-4(fp)
   54938:	00c010c4 	movi	r3,67
   5493c:	10c00005 	stb	r3,0(r2)
        return;
   54940:	00001906 	br	549a8 <OSTaskNameSet+0x1ac>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
   54944:	e13ffe17 	ldw	r4,-8(fp)
   54948:	004f4d80 	call	4f4d8 <OS_StrLen>
   5494c:	e0bff705 	stb	r2,-36(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
   54950:	e0bff703 	ldbu	r2,-36(fp)
   54954:	10800830 	cmpltui	r2,r2,32
   54958:	1000081e 	bne	r2,zero,5497c <OSTaskNameSet+0x180>
   5495c:	e0bff517 	ldw	r2,-44(fp)
   54960:	e0bffb15 	stw	r2,-20(fp)
   54964:	e0bffb17 	ldw	r2,-20(fp)
   54968:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
   5496c:	e0bfff17 	ldw	r2,-4(fp)
   54970:	00c01044 	movi	r3,65
   54974:	10c00005 	stb	r3,0(r2)
        return;
   54978:	00000b06 	br	549a8 <OSTaskNameSet+0x1ac>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
   5497c:	e0bff617 	ldw	r2,-40(fp)
   54980:	10801304 	addi	r2,r2,76
   54984:	1009883a 	mov	r4,r2
   54988:	e17ffe17 	ldw	r5,-8(fp)
   5498c:	004f4640 	call	4f464 <OS_StrCopy>
   54990:	e0bff517 	ldw	r2,-44(fp)
   54994:	e0bffc15 	stw	r2,-16(fp)
   54998:	e0bffc17 	ldw	r2,-16(fp)
   5499c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   549a0:	e0bfff17 	ldw	r2,-4(fp)
   549a4:	10000005 	stb	zero,0(r2)
}
   549a8:	e037883a 	mov	sp,fp
   549ac:	dfc00117 	ldw	ra,4(sp)
   549b0:	df000017 	ldw	fp,0(sp)
   549b4:	dec00204 	addi	sp,sp,8
   549b8:	f800283a 	ret

000549bc <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
   549bc:	defff404 	addi	sp,sp,-48
   549c0:	dfc00b15 	stw	ra,44(sp)
   549c4:	df000a15 	stw	fp,40(sp)
   549c8:	df000a04 	addi	fp,sp,40
   549cc:	2005883a 	mov	r2,r4
   549d0:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
   549d4:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
   549d8:	e0bfff03 	ldbu	r2,-4(fp)
   549dc:	10800530 	cmpltui	r2,r2,20
   549e0:	1000021e 	bne	r2,zero,549ec <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
   549e4:	00800a84 	movi	r2,42
   549e8:	00006d06 	br	54ba0 <OSTaskResume+0x1e4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   549ec:	0005303a 	rdctl	r2,status
   549f0:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   549f4:	e0fff817 	ldw	r3,-32(fp)
   549f8:	00bfff84 	movi	r2,-2
   549fc:	1884703a 	and	r2,r3,r2
   54a00:	1001703a 	wrctl	status,r2
  
  return context;
   54a04:	e0bff817 	ldw	r2,-32(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   54a08:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
   54a0c:	e0ffff03 	ldbu	r3,-4(fp)
   54a10:	008001b4 	movhi	r2,6
   54a14:	1089d604 	addi	r2,r2,10072
   54a18:	18c7883a 	add	r3,r3,r3
   54a1c:	18c7883a 	add	r3,r3,r3
   54a20:	10c5883a 	add	r2,r2,r3
   54a24:	10800017 	ldw	r2,0(r2)
   54a28:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
   54a2c:	e0bff717 	ldw	r2,-36(fp)
   54a30:	1000061e 	bne	r2,zero,54a4c <OSTaskResume+0x90>
   54a34:	e0bff617 	ldw	r2,-40(fp)
   54a38:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   54a3c:	e0bff917 	ldw	r2,-28(fp)
   54a40:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
   54a44:	00801184 	movi	r2,70
   54a48:	00005506 	br	54ba0 <OSTaskResume+0x1e4>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
   54a4c:	e0bff717 	ldw	r2,-36(fp)
   54a50:	10800058 	cmpnei	r2,r2,1
   54a54:	1000061e 	bne	r2,zero,54a70 <OSTaskResume+0xb4>
   54a58:	e0bff617 	ldw	r2,-40(fp)
   54a5c:	e0bffa15 	stw	r2,-24(fp)
   54a60:	e0bffa17 	ldw	r2,-24(fp)
   54a64:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   54a68:	008010c4 	movi	r2,67
   54a6c:	00004c06 	br	54ba0 <OSTaskResume+0x1e4>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
   54a70:	e0bff717 	ldw	r2,-36(fp)
   54a74:	10800c03 	ldbu	r2,48(r2)
   54a78:	10803fcc 	andi	r2,r2,255
   54a7c:	1080020c 	andi	r2,r2,8
   54a80:	10004226 	beq	r2,zero,54b8c <OSTaskResume+0x1d0>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
   54a84:	e0bff717 	ldw	r2,-36(fp)
   54a88:	10c00c03 	ldbu	r3,48(r2)
   54a8c:	00bffdc4 	movi	r2,-9
   54a90:	1884703a 	and	r2,r3,r2
   54a94:	1007883a 	mov	r3,r2
   54a98:	e0bff717 	ldw	r2,-36(fp)
   54a9c:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
   54aa0:	e0bff717 	ldw	r2,-36(fp)
   54aa4:	10800c03 	ldbu	r2,48(r2)
   54aa8:	10803fcc 	andi	r2,r2,255
   54aac:	1000311e 	bne	r2,zero,54b74 <OSTaskResume+0x1b8>
            if (ptcb->OSTCBDly == 0) {
   54ab0:	e0bff717 	ldw	r2,-36(fp)
   54ab4:	10800b8b 	ldhu	r2,46(r2)
   54ab8:	10bfffcc 	andi	r2,r2,65535
   54abc:	1000281e 	bne	r2,zero,54b60 <OSTaskResume+0x1a4>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
   54ac0:	e0bff717 	ldw	r2,-36(fp)
   54ac4:	10c00d83 	ldbu	r3,54(r2)
   54ac8:	008001b4 	movhi	r2,6
   54acc:	10ad4d04 	addi	r2,r2,-19148
   54ad0:	10800003 	ldbu	r2,0(r2)
   54ad4:	1884b03a 	or	r2,r3,r2
   54ad8:	1007883a 	mov	r3,r2
   54adc:	008001b4 	movhi	r2,6
   54ae0:	10ad4d04 	addi	r2,r2,-19148
   54ae4:	10c00005 	stb	r3,0(r2)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   54ae8:	e0bff717 	ldw	r2,-36(fp)
   54aec:	10800d03 	ldbu	r2,52(r2)
   54af0:	10c03fcc 	andi	r3,r2,255
   54af4:	e0bff717 	ldw	r2,-36(fp)
   54af8:	10800d03 	ldbu	r2,52(r2)
   54afc:	11003fcc 	andi	r4,r2,255
   54b00:	008001b4 	movhi	r2,6
   54b04:	10ad4d44 	addi	r2,r2,-19147
   54b08:	1105883a 	add	r2,r2,r4
   54b0c:	11000003 	ldbu	r4,0(r2)
   54b10:	e0bff717 	ldw	r2,-36(fp)
   54b14:	10800d43 	ldbu	r2,53(r2)
   54b18:	2084b03a 	or	r2,r4,r2
   54b1c:	1009883a 	mov	r4,r2
   54b20:	008001b4 	movhi	r2,6
   54b24:	10ad4d44 	addi	r2,r2,-19147
   54b28:	10c5883a 	add	r2,r2,r3
   54b2c:	11000005 	stb	r4,0(r2)
   54b30:	e0bff617 	ldw	r2,-40(fp)
   54b34:	e0bffb15 	stw	r2,-20(fp)
   54b38:	e0bffb17 	ldw	r2,-20(fp)
   54b3c:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
   54b40:	008001b4 	movhi	r2,6
   54b44:	10ad4144 	addi	r2,r2,-19195
   54b48:	10800003 	ldbu	r2,0(r2)
   54b4c:	10803fcc 	andi	r2,r2,255
   54b50:	10800058 	cmpnei	r2,r2,1
   54b54:	10000b1e 	bne	r2,zero,54b84 <OSTaskResume+0x1c8>
                    OS_Sched();                               /* Find new highest priority task        */
   54b58:	004f3280 	call	4f328 <OS_Sched>
   54b5c:	00000906 	br	54b84 <OSTaskResume+0x1c8>
   54b60:	e0bff617 	ldw	r2,-40(fp)
   54b64:	e0bffc15 	stw	r2,-16(fp)
   54b68:	e0bffc17 	ldw	r2,-16(fp)
   54b6c:	1001703a 	wrctl	status,r2
   54b70:	00000406 	br	54b84 <OSTaskResume+0x1c8>
   54b74:	e0bff617 	ldw	r2,-40(fp)
   54b78:	e0bffd15 	stw	r2,-12(fp)
   54b7c:	e0bffd17 	ldw	r2,-12(fp)
   54b80:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
   54b84:	0005883a 	mov	r2,zero
   54b88:	00000506 	br	54ba0 <OSTaskResume+0x1e4>
   54b8c:	e0bff617 	ldw	r2,-40(fp)
   54b90:	e0bffe15 	stw	r2,-8(fp)
   54b94:	e0bffe17 	ldw	r2,-8(fp)
   54b98:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
   54b9c:	00801104 	movi	r2,68
}
   54ba0:	e037883a 	mov	sp,fp
   54ba4:	dfc00117 	ldw	ra,4(sp)
   54ba8:	df000017 	ldw	fp,0(sp)
   54bac:	dec00204 	addi	sp,sp,8
   54bb0:	f800283a 	ret

00054bb4 <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
   54bb4:	defff304 	addi	sp,sp,-52
   54bb8:	df000c15 	stw	fp,48(sp)
   54bbc:	df000c04 	addi	fp,sp,48
   54bc0:	2005883a 	mov	r2,r4
   54bc4:	e17fff15 	stw	r5,-4(fp)
   54bc8:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   54bcc:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
   54bd0:	e0bffe03 	ldbu	r2,-8(fp)
   54bd4:	10800570 	cmpltui	r2,r2,21
   54bd8:	1000051e 	bne	r2,zero,54bf0 <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
   54bdc:	e0bffe03 	ldbu	r2,-8(fp)
   54be0:	10803fe0 	cmpeqi	r2,r2,255
   54be4:	1000021e 	bne	r2,zero,54bf0 <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
   54be8:	00800a84 	movi	r2,42
   54bec:	00005f06 	br	54d6c <OSTaskStkChk+0x1b8>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
   54bf0:	e0bfff17 	ldw	r2,-4(fp)
   54bf4:	1000021e 	bne	r2,zero,54c00 <OSTaskStkChk+0x4c>
        return (OS_ERR_PDATA_NULL);
   54bf8:	00800244 	movi	r2,9
   54bfc:	00005b06 	br	54d6c <OSTaskStkChk+0x1b8>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
   54c00:	e0bfff17 	ldw	r2,-4(fp)
   54c04:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
   54c08:	e0bfff17 	ldw	r2,-4(fp)
   54c0c:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   54c10:	0005303a 	rdctl	r2,status
   54c14:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   54c18:	e0fff917 	ldw	r3,-28(fp)
   54c1c:	00bfff84 	movi	r2,-2
   54c20:	1884703a 	and	r2,r3,r2
   54c24:	1001703a 	wrctl	status,r2
  
  return context;
   54c28:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
   54c2c:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
   54c30:	e0bffe03 	ldbu	r2,-8(fp)
   54c34:	10803fd8 	cmpnei	r2,r2,255
   54c38:	1000051e 	bne	r2,zero,54c50 <OSTaskStkChk+0x9c>
        prio = OSTCBCur->OSTCBPrio;
   54c3c:	008001b4 	movhi	r2,6
   54c40:	10ad5004 	addi	r2,r2,-19136
   54c44:	10800017 	ldw	r2,0(r2)
   54c48:	10800c83 	ldbu	r2,50(r2)
   54c4c:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   54c50:	e0fffe03 	ldbu	r3,-8(fp)
   54c54:	008001b4 	movhi	r2,6
   54c58:	1089d604 	addi	r2,r2,10072
   54c5c:	18c7883a 	add	r3,r3,r3
   54c60:	18c7883a 	add	r3,r3,r3
   54c64:	10c5883a 	add	r2,r2,r3
   54c68:	10800017 	ldw	r2,0(r2)
   54c6c:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
   54c70:	e0bff717 	ldw	r2,-36(fp)
   54c74:	1000061e 	bne	r2,zero,54c90 <OSTaskStkChk+0xdc>
   54c78:	e0bff617 	ldw	r2,-40(fp)
   54c7c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   54c80:	e0bffa17 	ldw	r2,-24(fp)
   54c84:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   54c88:	008010c4 	movi	r2,67
   54c8c:	00003706 	br	54d6c <OSTaskStkChk+0x1b8>
    }
    if (ptcb == OS_TCB_RESERVED) {
   54c90:	e0bff717 	ldw	r2,-36(fp)
   54c94:	10800058 	cmpnei	r2,r2,1
   54c98:	1000061e 	bne	r2,zero,54cb4 <OSTaskStkChk+0x100>
   54c9c:	e0bff617 	ldw	r2,-40(fp)
   54ca0:	e0bffb15 	stw	r2,-20(fp)
   54ca4:	e0bffb17 	ldw	r2,-20(fp)
   54ca8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   54cac:	008010c4 	movi	r2,67
   54cb0:	00002e06 	br	54d6c <OSTaskStkChk+0x1b8>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
   54cb4:	e0bff717 	ldw	r2,-36(fp)
   54cb8:	1080040b 	ldhu	r2,16(r2)
   54cbc:	10bfffcc 	andi	r2,r2,65535
   54cc0:	1080004c 	andi	r2,r2,1
   54cc4:	1000061e 	bne	r2,zero,54ce0 <OSTaskStkChk+0x12c>
   54cc8:	e0bff617 	ldw	r2,-40(fp)
   54ccc:	e0bffc15 	stw	r2,-16(fp)
   54cd0:	e0bffc17 	ldw	r2,-16(fp)
   54cd4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
   54cd8:	00801144 	movi	r2,69
   54cdc:	00002306 	br	54d6c <OSTaskStkChk+0x1b8>
    }
    nfree = 0;
   54ce0:	e03ff515 	stw	zero,-44(fp)
    size  = ptcb->OSTCBStkSize;
   54ce4:	e0bff717 	ldw	r2,-36(fp)
   54ce8:	10800317 	ldw	r2,12(r2)
   54cec:	e0bff815 	stw	r2,-32(fp)
    pchk  = ptcb->OSTCBStkBottom;
   54cf0:	e0bff717 	ldw	r2,-36(fp)
   54cf4:	10800217 	ldw	r2,8(r2)
   54cf8:	e0bff415 	stw	r2,-48(fp)
   54cfc:	e0bff617 	ldw	r2,-40(fp)
   54d00:	e0bffd15 	stw	r2,-12(fp)
   54d04:	e0bffd17 	ldw	r2,-12(fp)
   54d08:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
   54d0c:	00000306 	br	54d1c <OSTaskStkChk+0x168>
        nfree++;
   54d10:	e0bff517 	ldw	r2,-44(fp)
   54d14:	10800044 	addi	r2,r2,1
   54d18:	e0bff515 	stw	r2,-44(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
   54d1c:	e0bff417 	ldw	r2,-48(fp)
   54d20:	10c00104 	addi	r3,r2,4
   54d24:	e0fff415 	stw	r3,-48(fp)
   54d28:	10800017 	ldw	r2,0(r2)
   54d2c:	103ff826 	beq	r2,zero,54d10 <__alt_data_end+0xfffe3fd0>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
   54d30:	e0bff517 	ldw	r2,-44(fp)
   54d34:	1085883a 	add	r2,r2,r2
   54d38:	1085883a 	add	r2,r2,r2
   54d3c:	1007883a 	mov	r3,r2
   54d40:	e0bfff17 	ldw	r2,-4(fp)
   54d44:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
   54d48:	e0fff817 	ldw	r3,-32(fp)
   54d4c:	e0bff517 	ldw	r2,-44(fp)
   54d50:	1885c83a 	sub	r2,r3,r2
   54d54:	1085883a 	add	r2,r2,r2
   54d58:	1085883a 	add	r2,r2,r2
   54d5c:	1007883a 	mov	r3,r2
   54d60:	e0bfff17 	ldw	r2,-4(fp)
   54d64:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
   54d68:	0005883a 	mov	r2,zero
}
   54d6c:	e037883a 	mov	sp,fp
   54d70:	df000017 	ldw	fp,0(sp)
   54d74:	dec00104 	addi	sp,sp,4
   54d78:	f800283a 	ret

00054d7c <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
   54d7c:	defff504 	addi	sp,sp,-44
   54d80:	dfc00a15 	stw	ra,40(sp)
   54d84:	df000915 	stw	fp,36(sp)
   54d88:	df000904 	addi	fp,sp,36
   54d8c:	2005883a 	mov	r2,r4
   54d90:	e0bfff05 	stb	r2,-4(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   54d94:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
   54d98:	e0bfff03 	ldbu	r2,-4(fp)
   54d9c:	10800518 	cmpnei	r2,r2,20
   54da0:	1000021e 	bne	r2,zero,54dac <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
   54da4:	008011c4 	movi	r2,71
   54da8:	00007406 	br	54f7c <OSTaskSuspend+0x200>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
   54dac:	e0bfff03 	ldbu	r2,-4(fp)
   54db0:	10800530 	cmpltui	r2,r2,20
   54db4:	1000051e 	bne	r2,zero,54dcc <OSTaskSuspend+0x50>
        if (prio != OS_PRIO_SELF) {
   54db8:	e0bfff03 	ldbu	r2,-4(fp)
   54dbc:	10803fe0 	cmpeqi	r2,r2,255
   54dc0:	1000021e 	bne	r2,zero,54dcc <OSTaskSuspend+0x50>
            return (OS_ERR_PRIO_INVALID);
   54dc4:	00800a84 	movi	r2,42
   54dc8:	00006c06 	br	54f7c <OSTaskSuspend+0x200>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   54dcc:	0005303a 	rdctl	r2,status
   54dd0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   54dd4:	e0fffb17 	ldw	r3,-20(fp)
   54dd8:	00bfff84 	movi	r2,-2
   54ddc:	1884703a 	and	r2,r3,r2
   54de0:	1001703a 	wrctl	status,r2
  
  return context;
   54de4:	e0bffb17 	ldw	r2,-20(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
   54de8:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
   54dec:	e0bfff03 	ldbu	r2,-4(fp)
   54df0:	10803fd8 	cmpnei	r2,r2,255
   54df4:	1000081e 	bne	r2,zero,54e18 <OSTaskSuspend+0x9c>
        prio = OSTCBCur->OSTCBPrio;
   54df8:	008001b4 	movhi	r2,6
   54dfc:	10ad5004 	addi	r2,r2,-19136
   54e00:	10800017 	ldw	r2,0(r2)
   54e04:	10800c83 	ldbu	r2,50(r2)
   54e08:	e0bfff05 	stb	r2,-4(fp)
        self = OS_TRUE;
   54e0c:	00800044 	movi	r2,1
   54e10:	e0bff705 	stb	r2,-36(fp)
   54e14:	00000b06 	br	54e44 <OSTaskSuspend+0xc8>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
   54e18:	008001b4 	movhi	r2,6
   54e1c:	10ad5004 	addi	r2,r2,-19136
   54e20:	10800017 	ldw	r2,0(r2)
   54e24:	10800c83 	ldbu	r2,50(r2)
   54e28:	10c03fcc 	andi	r3,r2,255
   54e2c:	e0bfff03 	ldbu	r2,-4(fp)
   54e30:	1880031e 	bne	r3,r2,54e40 <OSTaskSuspend+0xc4>
        self = OS_TRUE;
   54e34:	00800044 	movi	r2,1
   54e38:	e0bff705 	stb	r2,-36(fp)
   54e3c:	00000106 	br	54e44 <OSTaskSuspend+0xc8>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
   54e40:	e03ff705 	stb	zero,-36(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   54e44:	e0ffff03 	ldbu	r3,-4(fp)
   54e48:	008001b4 	movhi	r2,6
   54e4c:	1089d604 	addi	r2,r2,10072
   54e50:	18c7883a 	add	r3,r3,r3
   54e54:	18c7883a 	add	r3,r3,r3
   54e58:	10c5883a 	add	r2,r2,r3
   54e5c:	10800017 	ldw	r2,0(r2)
   54e60:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
   54e64:	e0bff917 	ldw	r2,-28(fp)
   54e68:	1000061e 	bne	r2,zero,54e84 <OSTaskSuspend+0x108>
   54e6c:	e0bff817 	ldw	r2,-32(fp)
   54e70:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   54e74:	e0bffc17 	ldw	r2,-16(fp)
   54e78:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
   54e7c:	00801204 	movi	r2,72
   54e80:	00003e06 	br	54f7c <OSTaskSuspend+0x200>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
   54e84:	e0bff917 	ldw	r2,-28(fp)
   54e88:	10800058 	cmpnei	r2,r2,1
   54e8c:	1000061e 	bne	r2,zero,54ea8 <OSTaskSuspend+0x12c>
   54e90:	e0bff817 	ldw	r2,-32(fp)
   54e94:	e0bffd15 	stw	r2,-12(fp)
   54e98:	e0bffd17 	ldw	r2,-12(fp)
   54e9c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   54ea0:	008010c4 	movi	r2,67
   54ea4:	00003506 	br	54f7c <OSTaskSuspend+0x200>
    }
    y            = ptcb->OSTCBY;
   54ea8:	e0bff917 	ldw	r2,-28(fp)
   54eac:	10800d03 	ldbu	r2,52(r2)
   54eb0:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
   54eb4:	e0fffa03 	ldbu	r3,-24(fp)
   54eb8:	e13ffa03 	ldbu	r4,-24(fp)
   54ebc:	008001b4 	movhi	r2,6
   54ec0:	10ad4d44 	addi	r2,r2,-19147
   54ec4:	1105883a 	add	r2,r2,r4
   54ec8:	10800003 	ldbu	r2,0(r2)
   54ecc:	1009883a 	mov	r4,r2
   54ed0:	e0bff917 	ldw	r2,-28(fp)
   54ed4:	10800d43 	ldbu	r2,53(r2)
   54ed8:	0084303a 	nor	r2,zero,r2
   54edc:	2084703a 	and	r2,r4,r2
   54ee0:	1009883a 	mov	r4,r2
   54ee4:	008001b4 	movhi	r2,6
   54ee8:	10ad4d44 	addi	r2,r2,-19147
   54eec:	10c5883a 	add	r2,r2,r3
   54ef0:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
   54ef4:	e0fffa03 	ldbu	r3,-24(fp)
   54ef8:	008001b4 	movhi	r2,6
   54efc:	10ad4d44 	addi	r2,r2,-19147
   54f00:	10c5883a 	add	r2,r2,r3
   54f04:	10800003 	ldbu	r2,0(r2)
   54f08:	10803fcc 	andi	r2,r2,255
   54f0c:	10000c1e 	bne	r2,zero,54f40 <OSTaskSuspend+0x1c4>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
   54f10:	e0bff917 	ldw	r2,-28(fp)
   54f14:	10800d83 	ldbu	r2,54(r2)
   54f18:	0084303a 	nor	r2,zero,r2
   54f1c:	1007883a 	mov	r3,r2
   54f20:	008001b4 	movhi	r2,6
   54f24:	10ad4d04 	addi	r2,r2,-19148
   54f28:	10800003 	ldbu	r2,0(r2)
   54f2c:	1884703a 	and	r2,r3,r2
   54f30:	1007883a 	mov	r3,r2
   54f34:	008001b4 	movhi	r2,6
   54f38:	10ad4d04 	addi	r2,r2,-19148
   54f3c:	10c00005 	stb	r3,0(r2)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
   54f40:	e0bff917 	ldw	r2,-28(fp)
   54f44:	10800c03 	ldbu	r2,48(r2)
   54f48:	10800214 	ori	r2,r2,8
   54f4c:	1007883a 	mov	r3,r2
   54f50:	e0bff917 	ldw	r2,-28(fp)
   54f54:	10c00c05 	stb	r3,48(r2)
   54f58:	e0bff817 	ldw	r2,-32(fp)
   54f5c:	e0bffe15 	stw	r2,-8(fp)
   54f60:	e0bffe17 	ldw	r2,-8(fp)
   54f64:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
   54f68:	e0bff703 	ldbu	r2,-36(fp)
   54f6c:	10800058 	cmpnei	r2,r2,1
   54f70:	1000011e 	bne	r2,zero,54f78 <OSTaskSuspend+0x1fc>
        OS_Sched();                                             /* Find new highest priority task      */
   54f74:	004f3280 	call	4f328 <OS_Sched>
    }
    return (OS_ERR_NONE);
   54f78:	0005883a 	mov	r2,zero
}
   54f7c:	e037883a 	mov	sp,fp
   54f80:	dfc00117 	ldw	ra,4(sp)
   54f84:	df000017 	ldw	fp,0(sp)
   54f88:	dec00204 	addi	sp,sp,8
   54f8c:	f800283a 	ret

00054f90 <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
   54f90:	defff604 	addi	sp,sp,-40
   54f94:	dfc00915 	stw	ra,36(sp)
   54f98:	df000815 	stw	fp,32(sp)
   54f9c:	df000804 	addi	fp,sp,32
   54fa0:	2005883a 	mov	r2,r4
   54fa4:	e17fff15 	stw	r5,-4(fp)
   54fa8:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   54fac:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
   54fb0:	e0bffe03 	ldbu	r2,-8(fp)
   54fb4:	10800570 	cmpltui	r2,r2,21
   54fb8:	1000051e 	bne	r2,zero,54fd0 <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
   54fbc:	e0bffe03 	ldbu	r2,-8(fp)
   54fc0:	10803fe0 	cmpeqi	r2,r2,255
   54fc4:	1000021e 	bne	r2,zero,54fd0 <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
   54fc8:	00800a84 	movi	r2,42
   54fcc:	00003606 	br	550a8 <OSTaskQuery+0x118>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
   54fd0:	e0bfff17 	ldw	r2,-4(fp)
   54fd4:	1000021e 	bne	r2,zero,54fe0 <OSTaskQuery+0x50>
        return (OS_ERR_PDATA_NULL);
   54fd8:	00800244 	movi	r2,9
   54fdc:	00003206 	br	550a8 <OSTaskQuery+0x118>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   54fe0:	0005303a 	rdctl	r2,status
   54fe4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   54fe8:	e0fffa17 	ldw	r3,-24(fp)
   54fec:	00bfff84 	movi	r2,-2
   54ff0:	1884703a 	and	r2,r3,r2
   54ff4:	1001703a 	wrctl	status,r2
  
  return context;
   54ff8:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   54ffc:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
   55000:	e0bffe03 	ldbu	r2,-8(fp)
   55004:	10803fd8 	cmpnei	r2,r2,255
   55008:	1000051e 	bne	r2,zero,55020 <OSTaskQuery+0x90>
        prio = OSTCBCur->OSTCBPrio;
   5500c:	008001b4 	movhi	r2,6
   55010:	10ad5004 	addi	r2,r2,-19136
   55014:	10800017 	ldw	r2,0(r2)
   55018:	10800c83 	ldbu	r2,50(r2)
   5501c:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   55020:	e0fffe03 	ldbu	r3,-8(fp)
   55024:	008001b4 	movhi	r2,6
   55028:	1089d604 	addi	r2,r2,10072
   5502c:	18c7883a 	add	r3,r3,r3
   55030:	18c7883a 	add	r3,r3,r3
   55034:	10c5883a 	add	r2,r2,r3
   55038:	10800017 	ldw	r2,0(r2)
   5503c:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
   55040:	e0bff917 	ldw	r2,-28(fp)
   55044:	1000061e 	bne	r2,zero,55060 <OSTaskQuery+0xd0>
   55048:	e0bff817 	ldw	r2,-32(fp)
   5504c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   55050:	e0bffb17 	ldw	r2,-20(fp)
   55054:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
   55058:	00800a44 	movi	r2,41
   5505c:	00001206 	br	550a8 <OSTaskQuery+0x118>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
   55060:	e0bff917 	ldw	r2,-28(fp)
   55064:	10800058 	cmpnei	r2,r2,1
   55068:	1000061e 	bne	r2,zero,55084 <OSTaskQuery+0xf4>
   5506c:	e0bff817 	ldw	r2,-32(fp)
   55070:	e0bffc15 	stw	r2,-16(fp)
   55074:	e0bffc17 	ldw	r2,-16(fp)
   55078:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   5507c:	008010c4 	movi	r2,67
   55080:	00000906 	br	550a8 <OSTaskQuery+0x118>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
   55084:	e13fff17 	ldw	r4,-4(fp)
   55088:	e17ff917 	ldw	r5,-28(fp)
   5508c:	01801b04 	movi	r6,108
   55090:	004f2c40 	call	4f2c4 <OS_MemCopy>
   55094:	e0bff817 	ldw	r2,-32(fp)
   55098:	e0bffd15 	stw	r2,-12(fp)
   5509c:	e0bffd17 	ldw	r2,-12(fp)
   550a0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   550a4:	0005883a 	mov	r2,zero
}
   550a8:	e037883a 	mov	sp,fp
   550ac:	dfc00117 	ldw	ra,4(sp)
   550b0:	df000017 	ldw	fp,0(sp)
   550b4:	dec00204 	addi	sp,sp,8
   550b8:	f800283a 	ret

000550bc <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
   550bc:	defffc04 	addi	sp,sp,-16
   550c0:	df000315 	stw	fp,12(sp)
   550c4:	df000304 	addi	fp,sp,12
   550c8:	e13ffd15 	stw	r4,-12(fp)
   550cc:	e17ffe15 	stw	r5,-8(fp)
   550d0:	3005883a 	mov	r2,r6
   550d4:	e0bfff0d 	sth	r2,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
   550d8:	e0bfff0b 	ldhu	r2,-4(fp)
   550dc:	1080004c 	andi	r2,r2,1
   550e0:	10000d26 	beq	r2,zero,55118 <OS_TaskStkClr+0x5c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
   550e4:	e0bfff0b 	ldhu	r2,-4(fp)
   550e8:	1080008c 	andi	r2,r2,2
   550ec:	10000a26 	beq	r2,zero,55118 <OS_TaskStkClr+0x5c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
   550f0:	00000706 	br	55110 <OS_TaskStkClr+0x54>
                size--;
   550f4:	e0bffe17 	ldw	r2,-8(fp)
   550f8:	10bfffc4 	addi	r2,r2,-1
   550fc:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
   55100:	e0bffd17 	ldw	r2,-12(fp)
   55104:	10c00104 	addi	r3,r2,4
   55108:	e0fffd15 	stw	r3,-12(fp)
   5510c:	10000015 	stw	zero,0(r2)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
   55110:	e0bffe17 	ldw	r2,-8(fp)
   55114:	103ff71e 	bne	r2,zero,550f4 <__alt_data_end+0xfffe43b4>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
   55118:	e037883a 	mov	sp,fp
   5511c:	df000017 	ldw	fp,0(sp)
   55120:	dec00104 	addi	sp,sp,4
   55124:	f800283a 	ret

00055128 <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
   55128:	defff904 	addi	sp,sp,-28
   5512c:	dfc00615 	stw	ra,24(sp)
   55130:	df000515 	stw	fp,20(sp)
   55134:	df000504 	addi	fp,sp,20
   55138:	2005883a 	mov	r2,r4
   5513c:	e0bfff0d 	sth	r2,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   55140:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   55144:	008001b4 	movhi	r2,6
   55148:	10ad4f04 	addi	r2,r2,-19140
   5514c:	10800003 	ldbu	r2,0(r2)
   55150:	10803fcc 	andi	r2,r2,255
   55154:	10000126 	beq	r2,zero,5515c <OSTimeDly+0x34>
        return;
   55158:	00004006 	br	5525c <OSTimeDly+0x134>
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
   5515c:	e0bfff0b 	ldhu	r2,-4(fp)
   55160:	10003e26 	beq	r2,zero,5525c <OSTimeDly+0x134>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   55164:	0005303a 	rdctl	r2,status
   55168:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   5516c:	e0fffd17 	ldw	r3,-12(fp)
   55170:	00bfff84 	movi	r2,-2
   55174:	1884703a 	and	r2,r3,r2
   55178:	1001703a 	wrctl	status,r2
  
  return context;
   5517c:	e0bffd17 	ldw	r2,-12(fp)
        OS_ENTER_CRITICAL();
   55180:	e0bffb15 	stw	r2,-20(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
   55184:	008001b4 	movhi	r2,6
   55188:	10ad5004 	addi	r2,r2,-19136
   5518c:	10800017 	ldw	r2,0(r2)
   55190:	10800d03 	ldbu	r2,52(r2)
   55194:	e0bffc05 	stb	r2,-16(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
   55198:	e0fffc03 	ldbu	r3,-16(fp)
   5519c:	e13ffc03 	ldbu	r4,-16(fp)
   551a0:	008001b4 	movhi	r2,6
   551a4:	10ad4d44 	addi	r2,r2,-19147
   551a8:	1105883a 	add	r2,r2,r4
   551ac:	10800003 	ldbu	r2,0(r2)
   551b0:	1009883a 	mov	r4,r2
   551b4:	008001b4 	movhi	r2,6
   551b8:	10ad5004 	addi	r2,r2,-19136
   551bc:	10800017 	ldw	r2,0(r2)
   551c0:	10800d43 	ldbu	r2,53(r2)
   551c4:	0084303a 	nor	r2,zero,r2
   551c8:	2084703a 	and	r2,r4,r2
   551cc:	1009883a 	mov	r4,r2
   551d0:	008001b4 	movhi	r2,6
   551d4:	10ad4d44 	addi	r2,r2,-19147
   551d8:	10c5883a 	add	r2,r2,r3
   551dc:	11000005 	stb	r4,0(r2)
        if (OSRdyTbl[y] == 0) {
   551e0:	e0fffc03 	ldbu	r3,-16(fp)
   551e4:	008001b4 	movhi	r2,6
   551e8:	10ad4d44 	addi	r2,r2,-19147
   551ec:	10c5883a 	add	r2,r2,r3
   551f0:	10800003 	ldbu	r2,0(r2)
   551f4:	10803fcc 	andi	r2,r2,255
   551f8:	10000e1e 	bne	r2,zero,55234 <OSTimeDly+0x10c>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
   551fc:	008001b4 	movhi	r2,6
   55200:	10ad5004 	addi	r2,r2,-19136
   55204:	10800017 	ldw	r2,0(r2)
   55208:	10800d83 	ldbu	r2,54(r2)
   5520c:	0084303a 	nor	r2,zero,r2
   55210:	1007883a 	mov	r3,r2
   55214:	008001b4 	movhi	r2,6
   55218:	10ad4d04 	addi	r2,r2,-19148
   5521c:	10800003 	ldbu	r2,0(r2)
   55220:	1884703a 	and	r2,r3,r2
   55224:	1007883a 	mov	r3,r2
   55228:	008001b4 	movhi	r2,6
   5522c:	10ad4d04 	addi	r2,r2,-19148
   55230:	10c00005 	stb	r3,0(r2)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
   55234:	008001b4 	movhi	r2,6
   55238:	10ad5004 	addi	r2,r2,-19136
   5523c:	10800017 	ldw	r2,0(r2)
   55240:	e0ffff0b 	ldhu	r3,-4(fp)
   55244:	10c00b8d 	sth	r3,46(r2)
   55248:	e0bffb17 	ldw	r2,-20(fp)
   5524c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   55250:	e0bffe17 	ldw	r2,-8(fp)
   55254:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
   55258:	004f3280 	call	4f328 <OS_Sched>
    }
}
   5525c:	e037883a 	mov	sp,fp
   55260:	dfc00117 	ldw	ra,4(sp)
   55264:	df000017 	ldw	fp,0(sp)
   55268:	dec00204 	addi	sp,sp,8
   5526c:	f800283a 	ret

00055270 <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
   55270:	defff704 	addi	sp,sp,-36
   55274:	dfc00815 	stw	ra,32(sp)
   55278:	df000715 	stw	fp,28(sp)
   5527c:	dc000615 	stw	r16,24(sp)
   55280:	df000704 	addi	fp,sp,28
   55284:	2011883a 	mov	r8,r4
   55288:	2809883a 	mov	r4,r5
   5528c:	3007883a 	mov	r3,r6
   55290:	3805883a 	mov	r2,r7
   55294:	e23ffb05 	stb	r8,-20(fp)
   55298:	e13ffc05 	stb	r4,-16(fp)
   5529c:	e0fffd05 	stb	r3,-12(fp)
   552a0:	e0bffe0d 	sth	r2,-8(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   552a4:	008001b4 	movhi	r2,6
   552a8:	10ad4f04 	addi	r2,r2,-19140
   552ac:	10800003 	ldbu	r2,0(r2)
   552b0:	10803fcc 	andi	r2,r2,255
   552b4:	10000226 	beq	r2,zero,552c0 <OSTimeDlyHMSM+0x50>
        return (OS_ERR_TIME_DLY_ISR);
   552b8:	00801544 	movi	r2,85
   552bc:	00003d06 	br	553b4 <OSTimeDlyHMSM+0x144>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
   552c0:	e0bffb03 	ldbu	r2,-20(fp)
   552c4:	1000081e 	bne	r2,zero,552e8 <OSTimeDlyHMSM+0x78>
        if (minutes == 0) {
   552c8:	e0bffc03 	ldbu	r2,-16(fp)
   552cc:	1000061e 	bne	r2,zero,552e8 <OSTimeDlyHMSM+0x78>
            if (seconds == 0) {
   552d0:	e0bffd03 	ldbu	r2,-12(fp)
   552d4:	1000041e 	bne	r2,zero,552e8 <OSTimeDlyHMSM+0x78>
                if (ms == 0) {
   552d8:	e0bffe0b 	ldhu	r2,-8(fp)
   552dc:	1000021e 	bne	r2,zero,552e8 <OSTimeDlyHMSM+0x78>
                    return (OS_ERR_TIME_ZERO_DLY);
   552e0:	00801504 	movi	r2,84
   552e4:	00003306 	br	553b4 <OSTimeDlyHMSM+0x144>
                }
            }
        }
    }
    if (minutes > 59) {
   552e8:	e0bffc03 	ldbu	r2,-16(fp)
   552ec:	10800f30 	cmpltui	r2,r2,60
   552f0:	1000021e 	bne	r2,zero,552fc <OSTimeDlyHMSM+0x8c>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
   552f4:	00801444 	movi	r2,81
   552f8:	00002e06 	br	553b4 <OSTimeDlyHMSM+0x144>
    }
    if (seconds > 59) {
   552fc:	e0bffd03 	ldbu	r2,-12(fp)
   55300:	10800f30 	cmpltui	r2,r2,60
   55304:	1000021e 	bne	r2,zero,55310 <OSTimeDlyHMSM+0xa0>
        return (OS_ERR_TIME_INVALID_SECONDS);
   55308:	00801484 	movi	r2,82
   5530c:	00002906 	br	553b4 <OSTimeDlyHMSM+0x144>
    }
    if (ms > 999) {
   55310:	e0bffe0b 	ldhu	r2,-8(fp)
   55314:	1080fa30 	cmpltui	r2,r2,1000
   55318:	1000021e 	bne	r2,zero,55324 <OSTimeDlyHMSM+0xb4>
        return (OS_ERR_TIME_INVALID_MS);
   5531c:	008014c4 	movi	r2,83
   55320:	00002406 	br	553b4 <OSTimeDlyHMSM+0x144>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
   55324:	e0bffb03 	ldbu	r2,-20(fp)
   55328:	10c38424 	muli	r3,r2,3600
   5532c:	e0bffc03 	ldbu	r2,-16(fp)
   55330:	10800f24 	muli	r2,r2,60
   55334:	1887883a 	add	r3,r3,r2
   55338:	e0bffd03 	ldbu	r2,-12(fp)
   5533c:	1885883a 	add	r2,r3,r2
   55340:	1400fa24 	muli	r16,r2,1000
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
   55344:	e0bffe0b 	ldhu	r2,-8(fp)
   55348:	1080fa24 	muli	r2,r2,1000
   5534c:	1009883a 	mov	r4,r2
   55350:	0140fa04 	movi	r5,1000
   55354:	00407200 	call	40720 <__udivsi3>
        return (OS_ERR_TIME_INVALID_MS);
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
   55358:	8085883a 	add	r2,r16,r2
   5535c:	e0bffa15 	stw	r2,-24(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
   55360:	e0bffa17 	ldw	r2,-24(fp)
   55364:	1004d43a 	srli	r2,r2,16
   55368:	e0bff90d 	sth	r2,-28(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
   5536c:	e0bffa17 	ldw	r2,-24(fp)
   55370:	10bfffcc 	andi	r2,r2,65535
   55374:	e0bffa15 	stw	r2,-24(fp)
    OSTimeDly((INT16U)ticks);
   55378:	e0bffa17 	ldw	r2,-24(fp)
   5537c:	10bfffcc 	andi	r2,r2,65535
   55380:	1009883a 	mov	r4,r2
   55384:	00551280 	call	55128 <OSTimeDly>
    while (loops > 0) {
   55388:	00000706 	br	553a8 <OSTimeDlyHMSM+0x138>
        OSTimeDly((INT16U)32768u);
   5538c:	01200014 	movui	r4,32768
   55390:	00551280 	call	55128 <OSTimeDly>
        OSTimeDly((INT16U)32768u);
   55394:	01200014 	movui	r4,32768
   55398:	00551280 	call	55128 <OSTimeDly>
        loops--;
   5539c:	e0bff90b 	ldhu	r2,-28(fp)
   553a0:	10bfffc4 	addi	r2,r2,-1
   553a4:	e0bff90d 	sth	r2,-28(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
   553a8:	e0bff90b 	ldhu	r2,-28(fp)
   553ac:	103ff71e 	bne	r2,zero,5538c <__alt_data_end+0xfffe464c>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
   553b0:	0005883a 	mov	r2,zero
}
   553b4:	e6ffff04 	addi	sp,fp,-4
   553b8:	dfc00217 	ldw	ra,8(sp)
   553bc:	df000117 	ldw	fp,4(sp)
   553c0:	dc000017 	ldw	r16,0(sp)
   553c4:	dec00304 	addi	sp,sp,12
   553c8:	f800283a 	ret

000553cc <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
   553cc:	defff504 	addi	sp,sp,-44
   553d0:	dfc00a15 	stw	ra,40(sp)
   553d4:	df000915 	stw	fp,36(sp)
   553d8:	df000904 	addi	fp,sp,36
   553dc:	2005883a 	mov	r2,r4
   553e0:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   553e4:	e03ff715 	stw	zero,-36(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
   553e8:	e0bfff03 	ldbu	r2,-4(fp)
   553ec:	10800530 	cmpltui	r2,r2,20
   553f0:	1000021e 	bne	r2,zero,553fc <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
   553f4:	00800a84 	movi	r2,42
   553f8:	00006b06 	br	555a8 <OSTimeDlyResume+0x1dc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   553fc:	0005303a 	rdctl	r2,status
   55400:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   55404:	e0fff917 	ldw	r3,-28(fp)
   55408:	00bfff84 	movi	r2,-2
   5540c:	1884703a 	and	r2,r3,r2
   55410:	1001703a 	wrctl	status,r2
  
  return context;
   55414:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   55418:	e0bff715 	stw	r2,-36(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
   5541c:	e0ffff03 	ldbu	r3,-4(fp)
   55420:	008001b4 	movhi	r2,6
   55424:	1089d604 	addi	r2,r2,10072
   55428:	18c7883a 	add	r3,r3,r3
   5542c:	18c7883a 	add	r3,r3,r3
   55430:	10c5883a 	add	r2,r2,r3
   55434:	10800017 	ldw	r2,0(r2)
   55438:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {
   5543c:	e0bff817 	ldw	r2,-32(fp)
   55440:	1000061e 	bne	r2,zero,5545c <OSTimeDlyResume+0x90>
   55444:	e0bff717 	ldw	r2,-36(fp)
   55448:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   5544c:	e0bffa17 	ldw	r2,-24(fp)
   55450:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
   55454:	008010c4 	movi	r2,67
   55458:	00005306 	br	555a8 <OSTimeDlyResume+0x1dc>
    }
    if (ptcb == OS_TCB_RESERVED) {
   5545c:	e0bff817 	ldw	r2,-32(fp)
   55460:	10800058 	cmpnei	r2,r2,1
   55464:	1000061e 	bne	r2,zero,55480 <OSTimeDlyResume+0xb4>
   55468:	e0bff717 	ldw	r2,-36(fp)
   5546c:	e0bffb15 	stw	r2,-20(fp)
   55470:	e0bffb17 	ldw	r2,-20(fp)
   55474:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
   55478:	008010c4 	movi	r2,67
   5547c:	00004a06 	br	555a8 <OSTimeDlyResume+0x1dc>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
   55480:	e0bff817 	ldw	r2,-32(fp)
   55484:	10800b8b 	ldhu	r2,46(r2)
   55488:	10bfffcc 	andi	r2,r2,65535
   5548c:	1000061e 	bne	r2,zero,554a8 <OSTimeDlyResume+0xdc>
   55490:	e0bff717 	ldw	r2,-36(fp)
   55494:	e0bffc15 	stw	r2,-16(fp)
   55498:	e0bffc17 	ldw	r2,-16(fp)
   5549c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
   554a0:	00801404 	movi	r2,80
   554a4:	00004006 	br	555a8 <OSTimeDlyResume+0x1dc>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
   554a8:	e0bff817 	ldw	r2,-32(fp)
   554ac:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
   554b0:	e0bff817 	ldw	r2,-32(fp)
   554b4:	10800c03 	ldbu	r2,48(r2)
   554b8:	10803fcc 	andi	r2,r2,255
   554bc:	10800dcc 	andi	r2,r2,55
   554c0:	10000b26 	beq	r2,zero,554f0 <OSTimeDlyResume+0x124>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
   554c4:	e0bff817 	ldw	r2,-32(fp)
   554c8:	10c00c03 	ldbu	r3,48(r2)
   554cc:	00bff204 	movi	r2,-56
   554d0:	1884703a 	and	r2,r3,r2
   554d4:	1007883a 	mov	r3,r2
   554d8:	e0bff817 	ldw	r2,-32(fp)
   554dc:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
   554e0:	e0bff817 	ldw	r2,-32(fp)
   554e4:	00c00044 	movi	r3,1
   554e8:	10c00c45 	stb	r3,49(r2)
   554ec:	00000206 	br	554f8 <OSTimeDlyResume+0x12c>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
   554f0:	e0bff817 	ldw	r2,-32(fp)
   554f4:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
   554f8:	e0bff817 	ldw	r2,-32(fp)
   554fc:	10800c03 	ldbu	r2,48(r2)
   55500:	10803fcc 	andi	r2,r2,255
   55504:	1080020c 	andi	r2,r2,8
   55508:	1000221e 	bne	r2,zero,55594 <OSTimeDlyResume+0x1c8>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
   5550c:	e0bff817 	ldw	r2,-32(fp)
   55510:	10c00d83 	ldbu	r3,54(r2)
   55514:	008001b4 	movhi	r2,6
   55518:	10ad4d04 	addi	r2,r2,-19148
   5551c:	10800003 	ldbu	r2,0(r2)
   55520:	1884b03a 	or	r2,r3,r2
   55524:	1007883a 	mov	r3,r2
   55528:	008001b4 	movhi	r2,6
   5552c:	10ad4d04 	addi	r2,r2,-19148
   55530:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   55534:	e0bff817 	ldw	r2,-32(fp)
   55538:	10800d03 	ldbu	r2,52(r2)
   5553c:	10c03fcc 	andi	r3,r2,255
   55540:	e0bff817 	ldw	r2,-32(fp)
   55544:	10800d03 	ldbu	r2,52(r2)
   55548:	11003fcc 	andi	r4,r2,255
   5554c:	008001b4 	movhi	r2,6
   55550:	10ad4d44 	addi	r2,r2,-19147
   55554:	1105883a 	add	r2,r2,r4
   55558:	11000003 	ldbu	r4,0(r2)
   5555c:	e0bff817 	ldw	r2,-32(fp)
   55560:	10800d43 	ldbu	r2,53(r2)
   55564:	2084b03a 	or	r2,r4,r2
   55568:	1009883a 	mov	r4,r2
   5556c:	008001b4 	movhi	r2,6
   55570:	10ad4d44 	addi	r2,r2,-19147
   55574:	10c5883a 	add	r2,r2,r3
   55578:	11000005 	stb	r4,0(r2)
   5557c:	e0bff717 	ldw	r2,-36(fp)
   55580:	e0bffd15 	stw	r2,-12(fp)
   55584:	e0bffd17 	ldw	r2,-12(fp)
   55588:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
   5558c:	004f3280 	call	4f328 <OS_Sched>
   55590:	00000406 	br	555a4 <OSTimeDlyResume+0x1d8>
   55594:	e0bff717 	ldw	r2,-36(fp)
   55598:	e0bffe15 	stw	r2,-8(fp)
   5559c:	e0bffe17 	ldw	r2,-8(fp)
   555a0:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
   555a4:	0005883a 	mov	r2,zero
}
   555a8:	e037883a 	mov	sp,fp
   555ac:	dfc00117 	ldw	ra,4(sp)
   555b0:	df000017 	ldw	fp,0(sp)
   555b4:	dec00204 	addi	sp,sp,8
   555b8:	f800283a 	ret

000555bc <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
   555bc:	defffb04 	addi	sp,sp,-20
   555c0:	df000415 	stw	fp,16(sp)
   555c4:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   555c8:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   555cc:	0005303a 	rdctl	r2,status
   555d0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   555d4:	e0fffe17 	ldw	r3,-8(fp)
   555d8:	00bfff84 	movi	r2,-2
   555dc:	1884703a 	and	r2,r3,r2
   555e0:	1001703a 	wrctl	status,r2
  
  return context;
   555e4:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
   555e8:	e0bffc15 	stw	r2,-16(fp)
    ticks = OSTime;
   555ec:	008001b4 	movhi	r2,6
   555f0:	10ad5104 	addi	r2,r2,-19132
   555f4:	10800017 	ldw	r2,0(r2)
   555f8:	e0bffd15 	stw	r2,-12(fp)
   555fc:	e0bffc17 	ldw	r2,-16(fp)
   55600:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   55604:	e0bfff17 	ldw	r2,-4(fp)
   55608:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
   5560c:	e0bffd17 	ldw	r2,-12(fp)
}
   55610:	e037883a 	mov	sp,fp
   55614:	df000017 	ldw	fp,0(sp)
   55618:	dec00104 	addi	sp,sp,4
   5561c:	f800283a 	ret

00055620 <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
   55620:	defffb04 	addi	sp,sp,-20
   55624:	df000415 	stw	fp,16(sp)
   55628:	df000404 	addi	fp,sp,16
   5562c:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   55630:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   55634:	0005303a 	rdctl	r2,status
   55638:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   5563c:	e0fffd17 	ldw	r3,-12(fp)
   55640:	00bfff84 	movi	r2,-2
   55644:	1884703a 	and	r2,r3,r2
   55648:	1001703a 	wrctl	status,r2
  
  return context;
   5564c:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
   55650:	e0bffc15 	stw	r2,-16(fp)
    OSTime = ticks;
   55654:	008001b4 	movhi	r2,6
   55658:	10ad5104 	addi	r2,r2,-19132
   5565c:	e0ffff17 	ldw	r3,-4(fp)
   55660:	10c00015 	stw	r3,0(r2)
   55664:	e0bffc17 	ldw	r2,-16(fp)
   55668:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   5566c:	e0bffe17 	ldw	r2,-8(fp)
   55670:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
   55674:	e037883a 	mov	sp,fp
   55678:	df000017 	ldw	fp,0(sp)
   5567c:	dec00104 	addi	sp,sp,4
   55680:	f800283a 	ret

00055684 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   55684:	defffd04 	addi	sp,sp,-12
   55688:	dfc00215 	stw	ra,8(sp)
   5568c:	df000115 	stw	fp,4(sp)
   55690:	df000104 	addi	fp,sp,4
   55694:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   55698:	e13fff17 	ldw	r4,-4(fp)
   5569c:	014001b4 	movhi	r5,6
   556a0:	29662804 	addi	r5,r5,-26464
   556a4:	00567240 	call	56724 <alt_dev_llist_insert>
}
   556a8:	e037883a 	mov	sp,fp
   556ac:	dfc00117 	ldw	ra,4(sp)
   556b0:	df000017 	ldw	fp,0(sp)
   556b4:	dec00204 	addi	sp,sp,8
   556b8:	f800283a 	ret

000556bc <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   556bc:	defffd04 	addi	sp,sp,-12
   556c0:	dfc00215 	stw	ra,8(sp)
   556c4:	df000115 	stw	fp,4(sp)
   556c8:	df000104 	addi	fp,sp,4
   556cc:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_PROC, nios2_proc);
   556d0:	00570c80 	call	570c8 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   556d4:	00800044 	movi	r2,1
   556d8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   556dc:	e037883a 	mov	sp,fp
   556e0:	dfc00117 	ldw	ra,4(sp)
   556e4:	df000017 	ldw	fp,0(sp)
   556e8:	dec00204 	addi	sp,sp,8
   556ec:	f800283a 	ret

000556f0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   556f0:	defffe04 	addi	sp,sp,-8
   556f4:	dfc00115 	stw	ra,4(sp)
   556f8:	df000015 	stw	fp,0(sp)
   556fc:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYS_CLK_TIMER, sys_clk_timer);
   55700:	01000234 	movhi	r4,8
   55704:	21040004 	addi	r4,r4,4096
   55708:	000b883a 	mov	r5,zero
   5570c:	01800044 	movi	r6,1
   55710:	01c0fa04 	movi	r7,1000
   55714:	00564f00 	call	564f0 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   55718:	010001b4 	movhi	r4,6
   5571c:	21220f04 	addi	r4,r4,-30660
   55720:	000b883a 	mov	r5,zero
   55724:	01800404 	movi	r6,16
   55728:	00558b40 	call	558b4 <altera_avalon_jtag_uart_init>
   5572c:	010001b4 	movhi	r4,6
   55730:	21220504 	addi	r4,r4,-30700
   55734:	00556840 	call	55684 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_2019, sysid_2019);
   55738:	0001883a 	nop
}
   5573c:	e037883a 	mov	sp,fp
   55740:	dfc00117 	ldw	ra,4(sp)
   55744:	df000017 	ldw	fp,0(sp)
   55748:	dec00204 	addi	sp,sp,8
   5574c:	f800283a 	ret

00055750 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   55750:	defffa04 	addi	sp,sp,-24
   55754:	dfc00515 	stw	ra,20(sp)
   55758:	df000415 	stw	fp,16(sp)
   5575c:	df000404 	addi	fp,sp,16
   55760:	e13ffd15 	stw	r4,-12(fp)
   55764:	e17ffe15 	stw	r5,-8(fp)
   55768:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   5576c:	e0bffd17 	ldw	r2,-12(fp)
   55770:	10800017 	ldw	r2,0(r2)
   55774:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   55778:	e0bffc17 	ldw	r2,-16(fp)
   5577c:	10c00a04 	addi	r3,r2,40
   55780:	e0bffd17 	ldw	r2,-12(fp)
   55784:	10800217 	ldw	r2,8(r2)
   55788:	1809883a 	mov	r4,r3
   5578c:	e17ffe17 	ldw	r5,-8(fp)
   55790:	e1bfff17 	ldw	r6,-4(fp)
   55794:	100f883a 	mov	r7,r2
   55798:	0055f080 	call	55f08 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   5579c:	e037883a 	mov	sp,fp
   557a0:	dfc00117 	ldw	ra,4(sp)
   557a4:	df000017 	ldw	fp,0(sp)
   557a8:	dec00204 	addi	sp,sp,8
   557ac:	f800283a 	ret

000557b0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   557b0:	defffa04 	addi	sp,sp,-24
   557b4:	dfc00515 	stw	ra,20(sp)
   557b8:	df000415 	stw	fp,16(sp)
   557bc:	df000404 	addi	fp,sp,16
   557c0:	e13ffd15 	stw	r4,-12(fp)
   557c4:	e17ffe15 	stw	r5,-8(fp)
   557c8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   557cc:	e0bffd17 	ldw	r2,-12(fp)
   557d0:	10800017 	ldw	r2,0(r2)
   557d4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   557d8:	e0bffc17 	ldw	r2,-16(fp)
   557dc:	10c00a04 	addi	r3,r2,40
   557e0:	e0bffd17 	ldw	r2,-12(fp)
   557e4:	10800217 	ldw	r2,8(r2)
   557e8:	1809883a 	mov	r4,r3
   557ec:	e17ffe17 	ldw	r5,-8(fp)
   557f0:	e1bfff17 	ldw	r6,-4(fp)
   557f4:	100f883a 	mov	r7,r2
   557f8:	00561bc0 	call	561bc <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   557fc:	e037883a 	mov	sp,fp
   55800:	dfc00117 	ldw	ra,4(sp)
   55804:	df000017 	ldw	fp,0(sp)
   55808:	dec00204 	addi	sp,sp,8
   5580c:	f800283a 	ret

00055810 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   55810:	defffc04 	addi	sp,sp,-16
   55814:	dfc00315 	stw	ra,12(sp)
   55818:	df000215 	stw	fp,8(sp)
   5581c:	df000204 	addi	fp,sp,8
   55820:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   55824:	e0bfff17 	ldw	r2,-4(fp)
   55828:	10800017 	ldw	r2,0(r2)
   5582c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   55830:	e0bffe17 	ldw	r2,-8(fp)
   55834:	10c00a04 	addi	r3,r2,40
   55838:	e0bfff17 	ldw	r2,-4(fp)
   5583c:	10800217 	ldw	r2,8(r2)
   55840:	1809883a 	mov	r4,r3
   55844:	100b883a 	mov	r5,r2
   55848:	0055db40 	call	55db4 <altera_avalon_jtag_uart_close>
}
   5584c:	e037883a 	mov	sp,fp
   55850:	dfc00117 	ldw	ra,4(sp)
   55854:	df000017 	ldw	fp,0(sp)
   55858:	dec00204 	addi	sp,sp,8
   5585c:	f800283a 	ret

00055860 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   55860:	defffa04 	addi	sp,sp,-24
   55864:	dfc00515 	stw	ra,20(sp)
   55868:	df000415 	stw	fp,16(sp)
   5586c:	df000404 	addi	fp,sp,16
   55870:	e13ffd15 	stw	r4,-12(fp)
   55874:	e17ffe15 	stw	r5,-8(fp)
   55878:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   5587c:	e0bffd17 	ldw	r2,-12(fp)
   55880:	10800017 	ldw	r2,0(r2)
   55884:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   55888:	e0bffc17 	ldw	r2,-16(fp)
   5588c:	10800a04 	addi	r2,r2,40
   55890:	1009883a 	mov	r4,r2
   55894:	e17ffe17 	ldw	r5,-8(fp)
   55898:	e1bfff17 	ldw	r6,-4(fp)
   5589c:	0055e1c0 	call	55e1c <altera_avalon_jtag_uart_ioctl>
}
   558a0:	e037883a 	mov	sp,fp
   558a4:	dfc00117 	ldw	ra,4(sp)
   558a8:	df000017 	ldw	fp,0(sp)
   558ac:	dec00204 	addi	sp,sp,8
   558b0:	f800283a 	ret

000558b4 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   558b4:	defff004 	addi	sp,sp,-64
   558b8:	dfc00f15 	stw	ra,60(sp)
   558bc:	df000e15 	stw	fp,56(sp)
   558c0:	df000e04 	addi	fp,sp,56
   558c4:	e13ff915 	stw	r4,-28(fp)
   558c8:	e17ffa15 	stw	r5,-24(fp)
   558cc:	e1bffb15 	stw	r6,-20(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
   558d0:	e0bff917 	ldw	r2,-28(fp)
   558d4:	10800c04 	addi	r2,r2,48
   558d8:	e0bff315 	stw	r2,-52(fp)
   558dc:	e03ff40d 	sth	zero,-48(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
   558e0:	e0fff40b 	ldhu	r3,-48(fp)
   558e4:	e0bff884 	addi	r2,fp,-30
   558e8:	1809883a 	mov	r4,r3
   558ec:	100b883a 	mov	r5,r2
   558f0:	004fe840 	call	4fe84 <OSFlagCreate>
   558f4:	1007883a 	mov	r3,r2
   558f8:	e0bff317 	ldw	r2,-52(fp)
   558fc:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
   55900:	e0bff917 	ldw	r2,-28(fp)
   55904:	10800a04 	addi	r2,r2,40
   55908:	e0bff515 	stw	r2,-44(fp)
   5590c:	00800044 	movi	r2,1
   55910:	e0bff60d 	sth	r2,-40(fp)
   55914:	e0bff60b 	ldhu	r2,-40(fp)
   55918:	1009883a 	mov	r4,r2
   5591c:	0052ddc0 	call	52ddc <OSSemCreate>
   55920:	1007883a 	mov	r3,r2
   55924:	e0bff517 	ldw	r2,-44(fp)
   55928:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
   5592c:	e0bff917 	ldw	r2,-28(fp)
   55930:	10800b04 	addi	r2,r2,44
   55934:	e0bff715 	stw	r2,-36(fp)
   55938:	00800044 	movi	r2,1
   5593c:	e0bff80d 	sth	r2,-32(fp)
   55940:	e0bff80b 	ldhu	r2,-32(fp)
   55944:	1009883a 	mov	r4,r2
   55948:	0052ddc0 	call	52ddc <OSSemCreate>
   5594c:	1007883a 	mov	r3,r2
   55950:	e0bff717 	ldw	r2,-36(fp)
   55954:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   55958:	e0bff917 	ldw	r2,-28(fp)
   5595c:	00c00044 	movi	r3,1
   55960:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   55964:	e0bff917 	ldw	r2,-28(fp)
   55968:	10800017 	ldw	r2,0(r2)
   5596c:	10800104 	addi	r2,r2,4
   55970:	1007883a 	mov	r3,r2
   55974:	e0bff917 	ldw	r2,-28(fp)
   55978:	10800817 	ldw	r2,32(r2)
   5597c:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   55980:	e0fffa17 	ldw	r3,-24(fp)
   55984:	e0bffb17 	ldw	r2,-20(fp)
   55988:	d8000015 	stw	zero,0(sp)
   5598c:	1809883a 	mov	r4,r3
   55990:	100b883a 	mov	r5,r2
   55994:	01800174 	movhi	r6,5
   55998:	31968004 	addi	r6,r6,23040
   5599c:	e1fff917 	ldw	r7,-28(fp)
   559a0:	00568b00 	call	568b0 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   559a4:	e0bff917 	ldw	r2,-28(fp)
   559a8:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   559ac:	e0bff917 	ldw	r2,-28(fp)
   559b0:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   559b4:	008001b4 	movhi	r2,6
   559b8:	10ad5604 	addi	r2,r2,-19112
   559bc:	10800017 	ldw	r2,0(r2)
   559c0:	1809883a 	mov	r4,r3
   559c4:	100b883a 	mov	r5,r2
   559c8:	01800174 	movhi	r6,5
   559cc:	31972904 	addi	r6,r6,23716
   559d0:	e1fff917 	ldw	r7,-28(fp)
   559d4:	00565780 	call	56578 <alt_alarm_start>
   559d8:	1000040e 	bge	r2,zero,559ec <altera_avalon_jtag_uart_init+0x138>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   559dc:	e0fff917 	ldw	r3,-28(fp)
   559e0:	00a00034 	movhi	r2,32768
   559e4:	10bfffc4 	addi	r2,r2,-1
   559e8:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   559ec:	e037883a 	mov	sp,fp
   559f0:	dfc00117 	ldw	ra,4(sp)
   559f4:	df000017 	ldw	fp,0(sp)
   559f8:	dec00204 	addi	sp,sp,8
   559fc:	f800283a 	ret

00055a00 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   55a00:	defff204 	addi	sp,sp,-56
   55a04:	dfc00d15 	stw	ra,52(sp)
   55a08:	df000c15 	stw	fp,48(sp)
   55a0c:	df000c04 	addi	fp,sp,48
   55a10:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   55a14:	e0bfff17 	ldw	r2,-4(fp)
   55a18:	e0bff615 	stw	r2,-40(fp)
  unsigned int base = sp->base;
   55a1c:	e0bff617 	ldw	r2,-40(fp)
   55a20:	10800017 	ldw	r2,0(r2)
   55a24:	e0bff715 	stw	r2,-36(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   55a28:	e0bff717 	ldw	r2,-36(fp)
   55a2c:	10800104 	addi	r2,r2,4
   55a30:	10800037 	ldwio	r2,0(r2)
   55a34:	e0bff815 	stw	r2,-32(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   55a38:	e0bff817 	ldw	r2,-32(fp)
   55a3c:	1080c00c 	andi	r2,r2,768
   55a40:	1000011e 	bne	r2,zero,55a48 <altera_avalon_jtag_uart_irq+0x48>
      break;
   55a44:	00009206 	br	55c90 <altera_avalon_jtag_uart_irq+0x290>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   55a48:	e0bff817 	ldw	r2,-32(fp)
   55a4c:	1080400c 	andi	r2,r2,256
   55a50:	10004726 	beq	r2,zero,55b70 <altera_avalon_jtag_uart_irq+0x170>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   55a54:	00800074 	movhi	r2,1
   55a58:	e0bff415 	stw	r2,-48(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   55a5c:	e0bff617 	ldw	r2,-40(fp)
   55a60:	10800d17 	ldw	r2,52(r2)
   55a64:	10800044 	addi	r2,r2,1
   55a68:	1081ffcc 	andi	r2,r2,2047
   55a6c:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
   55a70:	e0bff617 	ldw	r2,-40(fp)
   55a74:	10c00e17 	ldw	r3,56(r2)
   55a78:	e0bff917 	ldw	r2,-28(fp)
   55a7c:	1880011e 	bne	r3,r2,55a84 <altera_avalon_jtag_uart_irq+0x84>
          break;
   55a80:	00002906 	br	55b28 <altera_avalon_jtag_uart_irq+0x128>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   55a84:	e0bff717 	ldw	r2,-36(fp)
   55a88:	10800037 	ldwio	r2,0(r2)
   55a8c:	e0bff415 	stw	r2,-48(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   55a90:	e0bff417 	ldw	r2,-48(fp)
   55a94:	10a0000c 	andi	r2,r2,32768
   55a98:	1000011e 	bne	r2,zero,55aa0 <altera_avalon_jtag_uart_irq+0xa0>
          break;
   55a9c:	00002206 	br	55b28 <altera_avalon_jtag_uart_irq+0x128>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   55aa0:	e0bff617 	ldw	r2,-40(fp)
   55aa4:	10800d17 	ldw	r2,52(r2)
   55aa8:	e0fff417 	ldw	r3,-48(fp)
   55aac:	1809883a 	mov	r4,r3
   55ab0:	e0fff617 	ldw	r3,-40(fp)
   55ab4:	1885883a 	add	r2,r3,r2
   55ab8:	10801104 	addi	r2,r2,68
   55abc:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   55ac0:	e0bff617 	ldw	r2,-40(fp)
   55ac4:	10800d17 	ldw	r2,52(r2)
   55ac8:	10800044 	addi	r2,r2,1
   55acc:	10c1ffcc 	andi	r3,r2,2047
   55ad0:	e0bff617 	ldw	r2,-40(fp)
   55ad4:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
   55ad8:	e0bff617 	ldw	r2,-40(fp)
   55adc:	10800c17 	ldw	r2,48(r2)
   55ae0:	e0bffa15 	stw	r2,-24(fp)
   55ae4:	00800044 	movi	r2,1
   55ae8:	e0bffb0d 	sth	r2,-20(fp)
   55aec:	00800044 	movi	r2,1
   55af0:	e0bffb85 	stb	r2,-18(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   55af4:	008001b4 	movhi	r2,6
   55af8:	10ad4144 	addi	r2,r2,-19195
   55afc:	10800003 	ldbu	r2,0(r2)
   55b00:	10803fcc 	andi	r2,r2,255
   55b04:	103fd526 	beq	r2,zero,55a5c <__alt_data_end+0xfffe4d1c>
  {
    OSFlagPost (group, flags, opt, &err);
   55b08:	e17ffb0b 	ldhu	r5,-20(fp)
   55b0c:	e0fffb83 	ldbu	r3,-18(fp)
   55b10:	e0bffdc4 	addi	r2,fp,-9
   55b14:	e13ffa17 	ldw	r4,-24(fp)
   55b18:	180d883a 	mov	r6,r3
   55b1c:	100f883a 	mov	r7,r2
   55b20:	0050af40 	call	50af4 <OSFlagPost>
      }
   55b24:	003fcd06 	br	55a5c <__alt_data_end+0xfffe4d1c>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   55b28:	e0bff417 	ldw	r2,-48(fp)
   55b2c:	10bfffec 	andhi	r2,r2,65535
   55b30:	10000f26 	beq	r2,zero,55b70 <altera_avalon_jtag_uart_irq+0x170>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   55b34:	e0bff617 	ldw	r2,-40(fp)
   55b38:	10c00817 	ldw	r3,32(r2)
   55b3c:	00bfff84 	movi	r2,-2
   55b40:	1886703a 	and	r3,r3,r2
   55b44:	e0bff617 	ldw	r2,-40(fp)
   55b48:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   55b4c:	e0bff717 	ldw	r2,-36(fp)
   55b50:	10800104 	addi	r2,r2,4
   55b54:	1007883a 	mov	r3,r2
   55b58:	e0bff617 	ldw	r2,-40(fp)
   55b5c:	10800817 	ldw	r2,32(r2)
   55b60:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   55b64:	e0bff717 	ldw	r2,-36(fp)
   55b68:	10800104 	addi	r2,r2,4
   55b6c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   55b70:	e0bff817 	ldw	r2,-32(fp)
   55b74:	1080800c 	andi	r2,r2,512
   55b78:	10004426 	beq	r2,zero,55c8c <altera_avalon_jtag_uart_irq+0x28c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   55b7c:	e0bff817 	ldw	r2,-32(fp)
   55b80:	1004d43a 	srli	r2,r2,16
   55b84:	e0bff515 	stw	r2,-44(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   55b88:	00002706 	br	55c28 <altera_avalon_jtag_uart_irq+0x228>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   55b8c:	e0bff717 	ldw	r2,-36(fp)
   55b90:	e0fff617 	ldw	r3,-40(fp)
   55b94:	18c01017 	ldw	r3,64(r3)
   55b98:	e13ff617 	ldw	r4,-40(fp)
   55b9c:	20c7883a 	add	r3,r4,r3
   55ba0:	18c21104 	addi	r3,r3,2116
   55ba4:	18c00003 	ldbu	r3,0(r3)
   55ba8:	18c03fcc 	andi	r3,r3,255
   55bac:	18c0201c 	xori	r3,r3,128
   55bb0:	18ffe004 	addi	r3,r3,-128
   55bb4:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   55bb8:	e0bff617 	ldw	r2,-40(fp)
   55bbc:	10801017 	ldw	r2,64(r2)
   55bc0:	10800044 	addi	r2,r2,1
   55bc4:	10c1ffcc 	andi	r3,r2,2047
   55bc8:	e0bff617 	ldw	r2,-40(fp)
   55bcc:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
   55bd0:	e0bff617 	ldw	r2,-40(fp)
   55bd4:	10800c17 	ldw	r2,48(r2)
   55bd8:	e0bffc15 	stw	r2,-16(fp)
   55bdc:	00800084 	movi	r2,2
   55be0:	e0bffd0d 	sth	r2,-12(fp)
   55be4:	00800044 	movi	r2,1
   55be8:	e0bffd85 	stb	r2,-10(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   55bec:	008001b4 	movhi	r2,6
   55bf0:	10ad4144 	addi	r2,r2,-19195
   55bf4:	10800003 	ldbu	r2,0(r2)
   55bf8:	10803fcc 	andi	r2,r2,255
   55bfc:	10000726 	beq	r2,zero,55c1c <altera_avalon_jtag_uart_irq+0x21c>
  {
    OSFlagPost (group, flags, opt, &err);
   55c00:	e17ffd0b 	ldhu	r5,-12(fp)
   55c04:	e0fffd83 	ldbu	r3,-10(fp)
   55c08:	e0bffe04 	addi	r2,fp,-8
   55c0c:	e13ffc17 	ldw	r4,-16(fp)
   55c10:	180d883a 	mov	r6,r3
   55c14:	100f883a 	mov	r7,r2
   55c18:	0050af40 	call	50af4 <OSFlagPost>

        space--;
   55c1c:	e0bff517 	ldw	r2,-44(fp)
   55c20:	10bfffc4 	addi	r2,r2,-1
   55c24:	e0bff515 	stw	r2,-44(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   55c28:	e0bff517 	ldw	r2,-44(fp)
   55c2c:	10000526 	beq	r2,zero,55c44 <altera_avalon_jtag_uart_irq+0x244>
   55c30:	e0bff617 	ldw	r2,-40(fp)
   55c34:	10c01017 	ldw	r3,64(r2)
   55c38:	e0bff617 	ldw	r2,-40(fp)
   55c3c:	10800f17 	ldw	r2,60(r2)
   55c40:	18bfd21e 	bne	r3,r2,55b8c <__alt_data_end+0xfffe4e4c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   55c44:	e0bff517 	ldw	r2,-44(fp)
   55c48:	10001026 	beq	r2,zero,55c8c <altera_avalon_jtag_uart_irq+0x28c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   55c4c:	e0bff617 	ldw	r2,-40(fp)
   55c50:	10c00817 	ldw	r3,32(r2)
   55c54:	00bfff44 	movi	r2,-3
   55c58:	1886703a 	and	r3,r3,r2
   55c5c:	e0bff617 	ldw	r2,-40(fp)
   55c60:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   55c64:	e0bff617 	ldw	r2,-40(fp)
   55c68:	10800017 	ldw	r2,0(r2)
   55c6c:	10800104 	addi	r2,r2,4
   55c70:	1007883a 	mov	r3,r2
   55c74:	e0bff617 	ldw	r2,-40(fp)
   55c78:	10800817 	ldw	r2,32(r2)
   55c7c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   55c80:	e0bff717 	ldw	r2,-36(fp)
   55c84:	10800104 	addi	r2,r2,4
   55c88:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   55c8c:	003f6606 	br	55a28 <__alt_data_end+0xfffe4ce8>
}
   55c90:	e037883a 	mov	sp,fp
   55c94:	dfc00117 	ldw	ra,4(sp)
   55c98:	df000017 	ldw	fp,0(sp)
   55c9c:	dec00204 	addi	sp,sp,8
   55ca0:	f800283a 	ret

00055ca4 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   55ca4:	defff904 	addi	sp,sp,-28
   55ca8:	dfc00615 	stw	ra,24(sp)
   55cac:	df000515 	stw	fp,20(sp)
   55cb0:	df000504 	addi	fp,sp,20
   55cb4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   55cb8:	e0bfff17 	ldw	r2,-4(fp)
   55cbc:	e0bffb15 	stw	r2,-20(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   55cc0:	e0bffb17 	ldw	r2,-20(fp)
   55cc4:	10800017 	ldw	r2,0(r2)
   55cc8:	10800104 	addi	r2,r2,4
   55ccc:	10800037 	ldwio	r2,0(r2)
   55cd0:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   55cd4:	e0bffc17 	ldw	r2,-16(fp)
   55cd8:	1081000c 	andi	r2,r2,1024
   55cdc:	10000b26 	beq	r2,zero,55d0c <altera_avalon_jtag_uart_timeout+0x68>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   55ce0:	e0bffb17 	ldw	r2,-20(fp)
   55ce4:	10800017 	ldw	r2,0(r2)
   55ce8:	10800104 	addi	r2,r2,4
   55cec:	1007883a 	mov	r3,r2
   55cf0:	e0bffb17 	ldw	r2,-20(fp)
   55cf4:	10800817 	ldw	r2,32(r2)
   55cf8:	10810014 	ori	r2,r2,1024
   55cfc:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   55d00:	e0bffb17 	ldw	r2,-20(fp)
   55d04:	10000915 	stw	zero,36(r2)
   55d08:	00002206 	br	55d94 <altera_avalon_jtag_uart_timeout+0xf0>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   55d0c:	e0bffb17 	ldw	r2,-20(fp)
   55d10:	10c00917 	ldw	r3,36(r2)
   55d14:	00a00034 	movhi	r2,32768
   55d18:	10bfff04 	addi	r2,r2,-4
   55d1c:	10c01d36 	bltu	r2,r3,55d94 <altera_avalon_jtag_uart_timeout+0xf0>
    sp->host_inactive++;
   55d20:	e0bffb17 	ldw	r2,-20(fp)
   55d24:	10800917 	ldw	r2,36(r2)
   55d28:	10c00044 	addi	r3,r2,1
   55d2c:	e0bffb17 	ldw	r2,-20(fp)
   55d30:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
   55d34:	e0bffb17 	ldw	r2,-20(fp)
   55d38:	10c00917 	ldw	r3,36(r2)
   55d3c:	e0bffb17 	ldw	r2,-20(fp)
   55d40:	10800117 	ldw	r2,4(r2)
   55d44:	18801336 	bltu	r3,r2,55d94 <altera_avalon_jtag_uart_timeout+0xf0>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
   55d48:	e0bffb17 	ldw	r2,-20(fp)
   55d4c:	10800c17 	ldw	r2,48(r2)
   55d50:	e0bffd15 	stw	r2,-12(fp)
   55d54:	00800104 	movi	r2,4
   55d58:	e0bffe0d 	sth	r2,-8(fp)
   55d5c:	00800044 	movi	r2,1
   55d60:	e0bffe85 	stb	r2,-6(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   55d64:	008001b4 	movhi	r2,6
   55d68:	10ad4144 	addi	r2,r2,-19195
   55d6c:	10800003 	ldbu	r2,0(r2)
   55d70:	10803fcc 	andi	r2,r2,255
   55d74:	10000726 	beq	r2,zero,55d94 <altera_avalon_jtag_uart_timeout+0xf0>
  {
    OSFlagPost (group, flags, opt, &err);
   55d78:	e17ffe0b 	ldhu	r5,-8(fp)
   55d7c:	e0fffe83 	ldbu	r3,-6(fp)
   55d80:	e0bffec4 	addi	r2,fp,-5
   55d84:	e13ffd17 	ldw	r4,-12(fp)
   55d88:	180d883a 	mov	r6,r3
   55d8c:	100f883a 	mov	r7,r2
   55d90:	0050af40 	call	50af4 <OSFlagPost>
   55d94:	008001b4 	movhi	r2,6
   55d98:	10ad5604 	addi	r2,r2,-19112
   55d9c:	10800017 	ldw	r2,0(r2)
    }
  }

  return alt_ticks_per_second();
}
   55da0:	e037883a 	mov	sp,fp
   55da4:	dfc00117 	ldw	ra,4(sp)
   55da8:	df000017 	ldw	fp,0(sp)
   55dac:	dec00204 	addi	sp,sp,8
   55db0:	f800283a 	ret

00055db4 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   55db4:	defffd04 	addi	sp,sp,-12
   55db8:	df000215 	stw	fp,8(sp)
   55dbc:	df000204 	addi	fp,sp,8
   55dc0:	e13ffe15 	stw	r4,-8(fp)
   55dc4:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   55dc8:	00000506 	br	55de0 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   55dcc:	e0bfff17 	ldw	r2,-4(fp)
   55dd0:	1090000c 	andi	r2,r2,16384
   55dd4:	10000226 	beq	r2,zero,55de0 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   55dd8:	00bffd44 	movi	r2,-11
   55ddc:	00000b06 	br	55e0c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   55de0:	e0bffe17 	ldw	r2,-8(fp)
   55de4:	10c01017 	ldw	r3,64(r2)
   55de8:	e0bffe17 	ldw	r2,-8(fp)
   55dec:	10800f17 	ldw	r2,60(r2)
   55df0:	18800526 	beq	r3,r2,55e08 <altera_avalon_jtag_uart_close+0x54>
   55df4:	e0bffe17 	ldw	r2,-8(fp)
   55df8:	10c00917 	ldw	r3,36(r2)
   55dfc:	e0bffe17 	ldw	r2,-8(fp)
   55e00:	10800117 	ldw	r2,4(r2)
   55e04:	18bff136 	bltu	r3,r2,55dcc <__alt_data_end+0xfffe508c>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   55e08:	0005883a 	mov	r2,zero
}
   55e0c:	e037883a 	mov	sp,fp
   55e10:	df000017 	ldw	fp,0(sp)
   55e14:	dec00104 	addi	sp,sp,4
   55e18:	f800283a 	ret

00055e1c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   55e1c:	defffa04 	addi	sp,sp,-24
   55e20:	df000515 	stw	fp,20(sp)
   55e24:	df000504 	addi	fp,sp,20
   55e28:	e13ffd15 	stw	r4,-12(fp)
   55e2c:	e17ffe15 	stw	r5,-8(fp)
   55e30:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   55e34:	00bff9c4 	movi	r2,-25
   55e38:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   55e3c:	e0bffe17 	ldw	r2,-8(fp)
   55e40:	10da8060 	cmpeqi	r3,r2,27137
   55e44:	1800031e 	bne	r3,zero,55e54 <altera_avalon_jtag_uart_ioctl+0x38>
   55e48:	109a80a0 	cmpeqi	r2,r2,27138
   55e4c:	1000191e 	bne	r2,zero,55eb4 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
   55e50:	00002806 	br	55ef4 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   55e54:	e0bffd17 	ldw	r2,-12(fp)
   55e58:	10c00117 	ldw	r3,4(r2)
   55e5c:	00a00034 	movhi	r2,32768
   55e60:	10bfffc4 	addi	r2,r2,-1
   55e64:	18801226 	beq	r3,r2,55eb0 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
   55e68:	e0bfff17 	ldw	r2,-4(fp)
   55e6c:	10800017 	ldw	r2,0(r2)
   55e70:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   55e74:	e0bffc17 	ldw	r2,-16(fp)
   55e78:	10800090 	cmplti	r2,r2,2
   55e7c:	1000061e 	bne	r2,zero,55e98 <altera_avalon_jtag_uart_ioctl+0x7c>
   55e80:	e0fffc17 	ldw	r3,-16(fp)
   55e84:	00a00034 	movhi	r2,32768
   55e88:	10bfffc4 	addi	r2,r2,-1
   55e8c:	18800226 	beq	r3,r2,55e98 <altera_avalon_jtag_uart_ioctl+0x7c>
   55e90:	e0bffc17 	ldw	r2,-16(fp)
   55e94:	00000206 	br	55ea0 <altera_avalon_jtag_uart_ioctl+0x84>
   55e98:	00a00034 	movhi	r2,32768
   55e9c:	10bfff84 	addi	r2,r2,-2
   55ea0:	e0fffd17 	ldw	r3,-12(fp)
   55ea4:	18800115 	stw	r2,4(r3)
      rc = 0;
   55ea8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   55eac:	00001106 	br	55ef4 <altera_avalon_jtag_uart_ioctl+0xd8>
   55eb0:	00001006 	br	55ef4 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   55eb4:	e0bffd17 	ldw	r2,-12(fp)
   55eb8:	10c00117 	ldw	r3,4(r2)
   55ebc:	00a00034 	movhi	r2,32768
   55ec0:	10bfffc4 	addi	r2,r2,-1
   55ec4:	18800a26 	beq	r3,r2,55ef0 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   55ec8:	e0bffd17 	ldw	r2,-12(fp)
   55ecc:	10c00917 	ldw	r3,36(r2)
   55ed0:	e0bffd17 	ldw	r2,-12(fp)
   55ed4:	10800117 	ldw	r2,4(r2)
   55ed8:	1885803a 	cmpltu	r2,r3,r2
   55edc:	10c03fcc 	andi	r3,r2,255
   55ee0:	e0bfff17 	ldw	r2,-4(fp)
   55ee4:	10c00015 	stw	r3,0(r2)
      rc = 0;
   55ee8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   55eec:	00000006 	br	55ef0 <altera_avalon_jtag_uart_ioctl+0xd4>
   55ef0:	0001883a 	nop

  default:
    break;
  }

  return rc;
   55ef4:	e0bffb17 	ldw	r2,-20(fp)
}
   55ef8:	e037883a 	mov	sp,fp
   55efc:	df000017 	ldw	fp,0(sp)
   55f00:	dec00104 	addi	sp,sp,4
   55f04:	f800283a 	ret

00055f08 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   55f08:	deffec04 	addi	sp,sp,-80
   55f0c:	dfc01315 	stw	ra,76(sp)
   55f10:	df001215 	stw	fp,72(sp)
   55f14:	df001204 	addi	fp,sp,72
   55f18:	e13ffc15 	stw	r4,-16(fp)
   55f1c:	e17ffd15 	stw	r5,-12(fp)
   55f20:	e1bffe15 	stw	r6,-8(fp)
   55f24:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   55f28:	e0bffd17 	ldw	r2,-12(fp)
   55f2c:	e0bfef15 	stw	r2,-68(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
   55f30:	e0bffc17 	ldw	r2,-16(fp)
   55f34:	10800a17 	ldw	r2,40(r2)
   55f38:	e0bff415 	stw	r2,-48(fp)
   55f3c:	e03ff50d 	sth	zero,-44(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
   55f40:	e0fff50b 	ldhu	r3,-44(fp)
   55f44:	e0bffb04 	addi	r2,fp,-20
   55f48:	e13ff417 	ldw	r4,-48(fp)
   55f4c:	180b883a 	mov	r5,r3
   55f50:	100d883a 	mov	r6,r2
   55f54:	00531440 	call	53144 <OSSemPend>

  while (space > 0)
   55f58:	00006506 	br	560f0 <altera_avalon_jtag_uart_read+0x1e8>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   55f5c:	e0bffc17 	ldw	r2,-16(fp)
   55f60:	10800d17 	ldw	r2,52(r2)
   55f64:	e0bff115 	stw	r2,-60(fp)
      out = sp->rx_out;
   55f68:	e0bffc17 	ldw	r2,-16(fp)
   55f6c:	10800e17 	ldw	r2,56(r2)
   55f70:	e0bff215 	stw	r2,-56(fp)

      if (in >= out)
   55f74:	e0fff117 	ldw	r3,-60(fp)
   55f78:	e0bff217 	ldw	r2,-56(fp)
   55f7c:	18800536 	bltu	r3,r2,55f94 <altera_avalon_jtag_uart_read+0x8c>
        n = in - out;
   55f80:	e0fff117 	ldw	r3,-60(fp)
   55f84:	e0bff217 	ldw	r2,-56(fp)
   55f88:	1885c83a 	sub	r2,r3,r2
   55f8c:	e0bff015 	stw	r2,-64(fp)
   55f90:	00000406 	br	55fa4 <altera_avalon_jtag_uart_read+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   55f94:	00c20004 	movi	r3,2048
   55f98:	e0bff217 	ldw	r2,-56(fp)
   55f9c:	1885c83a 	sub	r2,r3,r2
   55fa0:	e0bff015 	stw	r2,-64(fp)

      if (n == 0)
   55fa4:	e0bff017 	ldw	r2,-64(fp)
   55fa8:	1000011e 	bne	r2,zero,55fb0 <altera_avalon_jtag_uart_read+0xa8>
        break; /* No more data available */
   55fac:	00001d06 	br	56024 <altera_avalon_jtag_uart_read+0x11c>

      if (n > space)
   55fb0:	e0fffe17 	ldw	r3,-8(fp)
   55fb4:	e0bff017 	ldw	r2,-64(fp)
   55fb8:	1880022e 	bgeu	r3,r2,55fc4 <altera_avalon_jtag_uart_read+0xbc>
        n = space;
   55fbc:	e0bffe17 	ldw	r2,-8(fp)
   55fc0:	e0bff015 	stw	r2,-64(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   55fc4:	e0bff217 	ldw	r2,-56(fp)
   55fc8:	10801104 	addi	r2,r2,68
   55fcc:	e0fffc17 	ldw	r3,-16(fp)
   55fd0:	1885883a 	add	r2,r3,r2
   55fd4:	e13fef17 	ldw	r4,-68(fp)
   55fd8:	100b883a 	mov	r5,r2
   55fdc:	e1bff017 	ldw	r6,-64(fp)
   55fe0:	0045ebc0 	call	45ebc <memcpy>
      ptr   += n;
   55fe4:	e0ffef17 	ldw	r3,-68(fp)
   55fe8:	e0bff017 	ldw	r2,-64(fp)
   55fec:	1885883a 	add	r2,r3,r2
   55ff0:	e0bfef15 	stw	r2,-68(fp)
      space -= n;
   55ff4:	e0fffe17 	ldw	r3,-8(fp)
   55ff8:	e0bff017 	ldw	r2,-64(fp)
   55ffc:	1885c83a 	sub	r2,r3,r2
   56000:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   56004:	e0fff217 	ldw	r3,-56(fp)
   56008:	e0bff017 	ldw	r2,-64(fp)
   5600c:	1885883a 	add	r2,r3,r2
   56010:	10c1ffcc 	andi	r3,r2,2047
   56014:	e0bffc17 	ldw	r2,-16(fp)
   56018:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
   5601c:	e0bffe17 	ldw	r2,-8(fp)
   56020:	00bfce16 	blt	zero,r2,55f5c <__alt_data_end+0xfffe521c>

    /* If we read any data then return it */
    if (ptr != buffer)
   56024:	e0ffef17 	ldw	r3,-68(fp)
   56028:	e0bffd17 	ldw	r2,-12(fp)
   5602c:	18800126 	beq	r3,r2,56034 <altera_avalon_jtag_uart_read+0x12c>
      break;
   56030:	00003106 	br	560f8 <altera_avalon_jtag_uart_read+0x1f0>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   56034:	e0bfff17 	ldw	r2,-4(fp)
   56038:	1090000c 	andi	r2,r2,16384
   5603c:	10000126 	beq	r2,zero,56044 <altera_avalon_jtag_uart_read+0x13c>
      break;
   56040:	00002d06 	br	560f8 <altera_avalon_jtag_uart_read+0x1f0>

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
   56044:	008001b4 	movhi	r2,6
   56048:	10ad4144 	addi	r2,r2,-19195
   5604c:	10800003 	ldbu	r2,0(r2)
   56050:	10803fcc 	andi	r2,r2,255
   56054:	10800058 	cmpnei	r2,r2,1
   56058:	1000161e 	bne	r2,zero,560b4 <altera_avalon_jtag_uart_read+0x1ac>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
   5605c:	e0bffc17 	ldw	r2,-16(fp)
   56060:	10800c17 	ldw	r2,48(r2)
   56064:	e0bff615 	stw	r2,-40(fp)
   56068:	00800144 	movi	r2,5
   5606c:	e0bff70d 	sth	r2,-36(fp)
   56070:	00bfe0c4 	movi	r2,-125
   56074:	e0bff785 	stb	r2,-34(fp)
   56078:	e03ff80d 	sth	zero,-32(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
   5607c:	008001b4 	movhi	r2,6
   56080:	10ad4144 	addi	r2,r2,-19195
   56084:	10800003 	ldbu	r2,0(r2)
   56088:	10803fcc 	andi	r2,r2,255
   5608c:	10001326 	beq	r2,zero,560dc <altera_avalon_jtag_uart_read+0x1d4>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
   56090:	e17ff70b 	ldhu	r5,-36(fp)
   56094:	e1bff783 	ldbu	r6,-34(fp)
   56098:	e0fff80b 	ldhu	r3,-32(fp)
   5609c:	e0bffb44 	addi	r2,fp,-19
   560a0:	d8800015 	stw	r2,0(sp)
   560a4:	e13ff617 	ldw	r4,-40(fp)
   560a8:	180f883a 	mov	r7,r3
   560ac:	005049c0 	call	5049c <OSFlagPend>
   560b0:	00000a06 	br	560dc <altera_avalon_jtag_uart_read+0x1d4>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   560b4:	0001883a 	nop
   560b8:	e0bffc17 	ldw	r2,-16(fp)
   560bc:	10c00d17 	ldw	r3,52(r2)
   560c0:	e0bff117 	ldw	r2,-60(fp)
   560c4:	1880051e 	bne	r3,r2,560dc <altera_avalon_jtag_uart_read+0x1d4>
   560c8:	e0bffc17 	ldw	r2,-16(fp)
   560cc:	10c00917 	ldw	r3,36(r2)
   560d0:	e0bffc17 	ldw	r2,-16(fp)
   560d4:	10800117 	ldw	r2,4(r2)
   560d8:	18bff736 	bltu	r3,r2,560b8 <__alt_data_end+0xfffe5378>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   560dc:	e0bffc17 	ldw	r2,-16(fp)
   560e0:	10c00d17 	ldw	r3,52(r2)
   560e4:	e0bff117 	ldw	r2,-60(fp)
   560e8:	1880011e 	bne	r3,r2,560f0 <altera_avalon_jtag_uart_read+0x1e8>
      break;
   560ec:	00000206 	br	560f8 <altera_avalon_jtag_uart_read+0x1f0>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   560f0:	e0bffe17 	ldw	r2,-8(fp)
   560f4:	00bf9916 	blt	zero,r2,55f5c <__alt_data_end+0xfffe521c>
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
   560f8:	e0bffc17 	ldw	r2,-16(fp)
   560fc:	10800a17 	ldw	r2,40(r2)
   56100:	1009883a 	mov	r4,r2
   56104:	00535180 	call	53518 <OSSemPost>

  if (ptr != buffer)
   56108:	e0ffef17 	ldw	r3,-68(fp)
   5610c:	e0bffd17 	ldw	r2,-12(fp)
   56110:	18801826 	beq	r3,r2,56174 <altera_avalon_jtag_uart_read+0x26c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   56114:	0005303a 	rdctl	r2,status
   56118:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   5611c:	e0fff917 	ldw	r3,-28(fp)
   56120:	00bfff84 	movi	r2,-2
   56124:	1884703a 	and	r2,r3,r2
   56128:	1001703a 	wrctl	status,r2
  
  return context;
   5612c:	e0bff917 	ldw	r2,-28(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   56130:	e0bff315 	stw	r2,-52(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   56134:	e0bffc17 	ldw	r2,-16(fp)
   56138:	10800817 	ldw	r2,32(r2)
   5613c:	10c00054 	ori	r3,r2,1
   56140:	e0bffc17 	ldw	r2,-16(fp)
   56144:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   56148:	e0bffc17 	ldw	r2,-16(fp)
   5614c:	10800017 	ldw	r2,0(r2)
   56150:	10800104 	addi	r2,r2,4
   56154:	1007883a 	mov	r3,r2
   56158:	e0bffc17 	ldw	r2,-16(fp)
   5615c:	10800817 	ldw	r2,32(r2)
   56160:	18800035 	stwio	r2,0(r3)
   56164:	e0bff317 	ldw	r2,-52(fp)
   56168:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   5616c:	e0bffa17 	ldw	r2,-24(fp)
   56170:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   56174:	e0ffef17 	ldw	r3,-68(fp)
   56178:	e0bffd17 	ldw	r2,-12(fp)
   5617c:	18800426 	beq	r3,r2,56190 <altera_avalon_jtag_uart_read+0x288>
    return ptr - buffer;
   56180:	e0ffef17 	ldw	r3,-68(fp)
   56184:	e0bffd17 	ldw	r2,-12(fp)
   56188:	1885c83a 	sub	r2,r3,r2
   5618c:	00000606 	br	561a8 <altera_avalon_jtag_uart_read+0x2a0>
  else if (flags & O_NONBLOCK)
   56190:	e0bfff17 	ldw	r2,-4(fp)
   56194:	1090000c 	andi	r2,r2,16384
   56198:	10000226 	beq	r2,zero,561a4 <altera_avalon_jtag_uart_read+0x29c>
    return -EWOULDBLOCK;
   5619c:	00bffd44 	movi	r2,-11
   561a0:	00000106 	br	561a8 <altera_avalon_jtag_uart_read+0x2a0>
  else
    return -EIO;
   561a4:	00bffec4 	movi	r2,-5
}
   561a8:	e037883a 	mov	sp,fp
   561ac:	dfc00117 	ldw	ra,4(sp)
   561b0:	df000017 	ldw	fp,0(sp)
   561b4:	dec00204 	addi	sp,sp,8
   561b8:	f800283a 	ret

000561bc <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   561bc:	deffed04 	addi	sp,sp,-76
   561c0:	dfc01215 	stw	ra,72(sp)
   561c4:	df001115 	stw	fp,68(sp)
   561c8:	df001104 	addi	fp,sp,68
   561cc:	e13ffc15 	stw	r4,-16(fp)
   561d0:	e17ffd15 	stw	r5,-12(fp)
   561d4:	e1bffe15 	stw	r6,-8(fp)
   561d8:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   561dc:	e03ff015 	stw	zero,-64(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   561e0:	e0bffd17 	ldw	r2,-12(fp)
   561e4:	e0bff215 	stw	r2,-56(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
   561e8:	e0bffc17 	ldw	r2,-16(fp)
   561ec:	10800b17 	ldw	r2,44(r2)
   561f0:	e0bff515 	stw	r2,-44(fp)
   561f4:	e03ff60d 	sth	zero,-40(fp)
   561f8:	e0fff60b 	ldhu	r3,-40(fp)
   561fc:	e0bffbc4 	addi	r2,fp,-17
   56200:	e13ff517 	ldw	r4,-44(fp)
   56204:	180b883a 	mov	r5,r3
   56208:	100d883a 	mov	r6,r2
   5620c:	00531440 	call	53144 <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   56210:	00003806 	br	562f4 <altera_avalon_jtag_uart_write+0x138>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   56214:	e0bffc17 	ldw	r2,-16(fp)
   56218:	10800f17 	ldw	r2,60(r2)
   5621c:	e0bff315 	stw	r2,-52(fp)
      out = sp->tx_out;
   56220:	e0bffc17 	ldw	r2,-16(fp)
   56224:	10801017 	ldw	r2,64(r2)
   56228:	e0bff015 	stw	r2,-64(fp)

      if (in < out)
   5622c:	e0fff317 	ldw	r3,-52(fp)
   56230:	e0bff017 	ldw	r2,-64(fp)
   56234:	1880062e 	bgeu	r3,r2,56250 <altera_avalon_jtag_uart_write+0x94>
        n = out - 1 - in;
   56238:	e0fff017 	ldw	r3,-64(fp)
   5623c:	e0bff317 	ldw	r2,-52(fp)
   56240:	1885c83a 	sub	r2,r3,r2
   56244:	10bfffc4 	addi	r2,r2,-1
   56248:	e0bff115 	stw	r2,-60(fp)
   5624c:	00000b06 	br	5627c <altera_avalon_jtag_uart_write+0xc0>
      else if (out > 0)
   56250:	e0bff017 	ldw	r2,-64(fp)
   56254:	10000526 	beq	r2,zero,5626c <altera_avalon_jtag_uart_write+0xb0>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   56258:	00c20004 	movi	r3,2048
   5625c:	e0bff317 	ldw	r2,-52(fp)
   56260:	1885c83a 	sub	r2,r3,r2
   56264:	e0bff115 	stw	r2,-60(fp)
   56268:	00000406 	br	5627c <altera_avalon_jtag_uart_write+0xc0>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   5626c:	00c1ffc4 	movi	r3,2047
   56270:	e0bff317 	ldw	r2,-52(fp)
   56274:	1885c83a 	sub	r2,r3,r2
   56278:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
   5627c:	e0bff117 	ldw	r2,-60(fp)
   56280:	1000011e 	bne	r2,zero,56288 <altera_avalon_jtag_uart_write+0xcc>
        break;
   56284:	00001d06 	br	562fc <altera_avalon_jtag_uart_write+0x140>

      if (n > count)
   56288:	e0fffe17 	ldw	r3,-8(fp)
   5628c:	e0bff117 	ldw	r2,-60(fp)
   56290:	1880022e 	bgeu	r3,r2,5629c <altera_avalon_jtag_uart_write+0xe0>
        n = count;
   56294:	e0bffe17 	ldw	r2,-8(fp)
   56298:	e0bff115 	stw	r2,-60(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   5629c:	e0bff317 	ldw	r2,-52(fp)
   562a0:	10821104 	addi	r2,r2,2116
   562a4:	e0fffc17 	ldw	r3,-16(fp)
   562a8:	1885883a 	add	r2,r3,r2
   562ac:	1009883a 	mov	r4,r2
   562b0:	e17ffd17 	ldw	r5,-12(fp)
   562b4:	e1bff117 	ldw	r6,-60(fp)
   562b8:	0045ebc0 	call	45ebc <memcpy>
      ptr   += n;
   562bc:	e0fffd17 	ldw	r3,-12(fp)
   562c0:	e0bff117 	ldw	r2,-60(fp)
   562c4:	1885883a 	add	r2,r3,r2
   562c8:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   562cc:	e0fffe17 	ldw	r3,-8(fp)
   562d0:	e0bff117 	ldw	r2,-60(fp)
   562d4:	1885c83a 	sub	r2,r3,r2
   562d8:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   562dc:	e0fff317 	ldw	r3,-52(fp)
   562e0:	e0bff117 	ldw	r2,-60(fp)
   562e4:	1885883a 	add	r2,r3,r2
   562e8:	10c1ffcc 	andi	r3,r2,2047
   562ec:	e0bffc17 	ldw	r2,-16(fp)
   562f0:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   562f4:	e0bffe17 	ldw	r2,-8(fp)
   562f8:	00bfc616 	blt	zero,r2,56214 <__alt_data_end+0xfffe54d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   562fc:	0005303a 	rdctl	r2,status
   56300:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   56304:	e0fff717 	ldw	r3,-36(fp)
   56308:	00bfff84 	movi	r2,-2
   5630c:	1884703a 	and	r2,r3,r2
   56310:	1001703a 	wrctl	status,r2
  
  return context;
   56314:	e0bff717 	ldw	r2,-36(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   56318:	e0bff415 	stw	r2,-48(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   5631c:	e0bffc17 	ldw	r2,-16(fp)
   56320:	10800817 	ldw	r2,32(r2)
   56324:	10c00094 	ori	r3,r2,2
   56328:	e0bffc17 	ldw	r2,-16(fp)
   5632c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   56330:	e0bffc17 	ldw	r2,-16(fp)
   56334:	10800017 	ldw	r2,0(r2)
   56338:	10800104 	addi	r2,r2,4
   5633c:	1007883a 	mov	r3,r2
   56340:	e0bffc17 	ldw	r2,-16(fp)
   56344:	10800817 	ldw	r2,32(r2)
   56348:	18800035 	stwio	r2,0(r3)
   5634c:	e0bff417 	ldw	r2,-48(fp)
   56350:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   56354:	e0bff817 	ldw	r2,-32(fp)
   56358:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   5635c:	e0bffe17 	ldw	r2,-8(fp)
   56360:	00802e0e 	bge	zero,r2,5641c <altera_avalon_jtag_uart_write+0x260>
    {
      if (flags & O_NONBLOCK)
   56364:	e0bfff17 	ldw	r2,-4(fp)
   56368:	1090000c 	andi	r2,r2,16384
   5636c:	10000126 	beq	r2,zero,56374 <altera_avalon_jtag_uart_write+0x1b8>
        break;
   56370:	00002c06 	br	56424 <altera_avalon_jtag_uart_write+0x268>

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
   56374:	008001b4 	movhi	r2,6
   56378:	10ad4144 	addi	r2,r2,-19195
   5637c:	10800003 	ldbu	r2,0(r2)
   56380:	10803fcc 	andi	r2,r2,255
   56384:	10800058 	cmpnei	r2,r2,1
   56388:	1000161e 	bne	r2,zero,563e4 <altera_avalon_jtag_uart_write+0x228>
         * more profitable elsewhere.
         */
#ifdef ALTERA_AVALON_JTAG_UART_IGNORE_FIFO_FULL_ERROR
        if(!sp->host_inactive)
#endif
        ALT_FLAG_PEND (sp->events,
   5638c:	e0bffc17 	ldw	r2,-16(fp)
   56390:	10800c17 	ldw	r2,48(r2)
   56394:	e0bff915 	stw	r2,-28(fp)
   56398:	00800184 	movi	r2,6
   5639c:	e0bffa0d 	sth	r2,-24(fp)
   563a0:	00bfe0c4 	movi	r2,-125
   563a4:	e0bffa85 	stb	r2,-22(fp)
   563a8:	e03ffb0d 	sth	zero,-20(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
   563ac:	008001b4 	movhi	r2,6
   563b0:	10ad4144 	addi	r2,r2,-19195
   563b4:	10800003 	ldbu	r2,0(r2)
   563b8:	10803fcc 	andi	r2,r2,255
   563bc:	10001326 	beq	r2,zero,5640c <altera_avalon_jtag_uart_write+0x250>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
   563c0:	e17ffa0b 	ldhu	r5,-24(fp)
   563c4:	e1bffa83 	ldbu	r6,-22(fp)
   563c8:	e0fffb0b 	ldhu	r3,-20(fp)
   563cc:	e0bffb84 	addi	r2,fp,-18
   563d0:	d8800015 	stw	r2,0(sp)
   563d4:	e13ff917 	ldw	r4,-28(fp)
   563d8:	180f883a 	mov	r7,r3
   563dc:	005049c0 	call	5049c <OSFlagPend>
   563e0:	00000a06 	br	5640c <altera_avalon_jtag_uart_write+0x250>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   563e4:	0001883a 	nop
   563e8:	e0bffc17 	ldw	r2,-16(fp)
   563ec:	10c01017 	ldw	r3,64(r2)
   563f0:	e0bff017 	ldw	r2,-64(fp)
   563f4:	1880051e 	bne	r3,r2,5640c <altera_avalon_jtag_uart_write+0x250>
   563f8:	e0bffc17 	ldw	r2,-16(fp)
   563fc:	10c00917 	ldw	r3,36(r2)
   56400:	e0bffc17 	ldw	r2,-16(fp)
   56404:	10800117 	ldw	r2,4(r2)
   56408:	18bff736 	bltu	r3,r2,563e8 <__alt_data_end+0xfffe56a8>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   5640c:	e0bffc17 	ldw	r2,-16(fp)
   56410:	10800917 	ldw	r2,36(r2)
   56414:	10000126 	beq	r2,zero,5641c <altera_avalon_jtag_uart_write+0x260>
         break;
   56418:	00000206 	br	56424 <altera_avalon_jtag_uart_write+0x268>
    }
  }
  while (count > 0);
   5641c:	e0bffe17 	ldw	r2,-8(fp)
   56420:	00bf7b16 	blt	zero,r2,56210 <__alt_data_end+0xfffe54d0>

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
   56424:	e0bffc17 	ldw	r2,-16(fp)
   56428:	10800b17 	ldw	r2,44(r2)
   5642c:	1009883a 	mov	r4,r2
   56430:	00535180 	call	53518 <OSSemPost>

  if (ptr != start)
   56434:	e0fffd17 	ldw	r3,-12(fp)
   56438:	e0bff217 	ldw	r2,-56(fp)
   5643c:	18800426 	beq	r3,r2,56450 <altera_avalon_jtag_uart_write+0x294>
    return ptr - start;
   56440:	e0fffd17 	ldw	r3,-12(fp)
   56444:	e0bff217 	ldw	r2,-56(fp)
   56448:	1885c83a 	sub	r2,r3,r2
   5644c:	00000606 	br	56468 <altera_avalon_jtag_uart_write+0x2ac>
  else if (flags & O_NONBLOCK)
   56450:	e0bfff17 	ldw	r2,-4(fp)
   56454:	1090000c 	andi	r2,r2,16384
   56458:	10000226 	beq	r2,zero,56464 <altera_avalon_jtag_uart_write+0x2a8>
    return -EWOULDBLOCK;
   5645c:	00bffd44 	movi	r2,-11
   56460:	00000106 	br	56468 <altera_avalon_jtag_uart_write+0x2ac>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   56464:	00bffec4 	movi	r2,-5
}
   56468:	e037883a 	mov	sp,fp
   5646c:	dfc00117 	ldw	ra,4(sp)
   56470:	df000017 	ldw	fp,0(sp)
   56474:	dec00204 	addi	sp,sp,8
   56478:	f800283a 	ret

0005647c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   5647c:	defffa04 	addi	sp,sp,-24
   56480:	dfc00515 	stw	ra,20(sp)
   56484:	df000415 	stw	fp,16(sp)
   56488:	df000404 	addi	fp,sp,16
   5648c:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   56490:	0007883a 	mov	r3,zero
   56494:	e0bfff17 	ldw	r2,-4(fp)
   56498:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   5649c:	e0bfff17 	ldw	r2,-4(fp)
   564a0:	10800104 	addi	r2,r2,4
   564a4:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   564a8:	0005303a 	rdctl	r2,status
   564ac:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   564b0:	e0fffd17 	ldw	r3,-12(fp)
   564b4:	00bfff84 	movi	r2,-2
   564b8:	1884703a 	and	r2,r3,r2
   564bc:	1001703a 	wrctl	status,r2
  
  return context;
   564c0:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   564c4:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   564c8:	0056fc40 	call	56fc4 <alt_tick>
   564cc:	e0bffc17 	ldw	r2,-16(fp)
   564d0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   564d4:	e0bffe17 	ldw	r2,-8(fp)
   564d8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   564dc:	e037883a 	mov	sp,fp
   564e0:	dfc00117 	ldw	ra,4(sp)
   564e4:	df000017 	ldw	fp,0(sp)
   564e8:	dec00204 	addi	sp,sp,8
   564ec:	f800283a 	ret

000564f0 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   564f0:	defff804 	addi	sp,sp,-32
   564f4:	dfc00715 	stw	ra,28(sp)
   564f8:	df000615 	stw	fp,24(sp)
   564fc:	df000604 	addi	fp,sp,24
   56500:	e13ffc15 	stw	r4,-16(fp)
   56504:	e17ffd15 	stw	r5,-12(fp)
   56508:	e1bffe15 	stw	r6,-8(fp)
   5650c:	e1ffff15 	stw	r7,-4(fp)
   56510:	e0bfff17 	ldw	r2,-4(fp)
   56514:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   56518:	008001b4 	movhi	r2,6
   5651c:	10ad5604 	addi	r2,r2,-19112
   56520:	10800017 	ldw	r2,0(r2)
   56524:	1000041e 	bne	r2,zero,56538 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
   56528:	008001b4 	movhi	r2,6
   5652c:	10ad5604 	addi	r2,r2,-19112
   56530:	e0fffb17 	ldw	r3,-20(fp)
   56534:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   56538:	e0bffc17 	ldw	r2,-16(fp)
   5653c:	10800104 	addi	r2,r2,4
   56540:	00c001c4 	movi	r3,7
   56544:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   56548:	d8000015 	stw	zero,0(sp)
   5654c:	e13ffd17 	ldw	r4,-12(fp)
   56550:	e17ffe17 	ldw	r5,-8(fp)
   56554:	01800174 	movhi	r6,5
   56558:	31991f04 	addi	r6,r6,25724
   5655c:	e1fffc17 	ldw	r7,-16(fp)
   56560:	00568b00 	call	568b0 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   56564:	e037883a 	mov	sp,fp
   56568:	dfc00117 	ldw	ra,4(sp)
   5656c:	df000017 	ldw	fp,0(sp)
   56570:	dec00204 	addi	sp,sp,8
   56574:	f800283a 	ret

00056578 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   56578:	defff504 	addi	sp,sp,-44
   5657c:	df000a15 	stw	fp,40(sp)
   56580:	df000a04 	addi	fp,sp,40
   56584:	e13ffc15 	stw	r4,-16(fp)
   56588:	e17ffd15 	stw	r5,-12(fp)
   5658c:	e1bffe15 	stw	r6,-8(fp)
   56590:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   56594:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   56598:	008001b4 	movhi	r2,6
   5659c:	10ad5604 	addi	r2,r2,-19112
   565a0:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   565a4:	10003f26 	beq	r2,zero,566a4 <alt_alarm_start+0x12c>
  {
    if (alarm)
   565a8:	e0bffc17 	ldw	r2,-16(fp)
   565ac:	10003b26 	beq	r2,zero,5669c <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
   565b0:	e0bffc17 	ldw	r2,-16(fp)
   565b4:	e0fffe17 	ldw	r3,-8(fp)
   565b8:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   565bc:	e0bffc17 	ldw	r2,-16(fp)
   565c0:	e0ffff17 	ldw	r3,-4(fp)
   565c4:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   565c8:	0005303a 	rdctl	r2,status
   565cc:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   565d0:	e0fff817 	ldw	r3,-32(fp)
   565d4:	00bfff84 	movi	r2,-2
   565d8:	1884703a 	and	r2,r3,r2
   565dc:	1001703a 	wrctl	status,r2
  
  return context;
   565e0:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   565e4:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   565e8:	008001b4 	movhi	r2,6
   565ec:	10ad5704 	addi	r2,r2,-19108
   565f0:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   565f4:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   565f8:	e0fffd17 	ldw	r3,-12(fp)
   565fc:	e0bff617 	ldw	r2,-40(fp)
   56600:	1885883a 	add	r2,r3,r2
   56604:	10c00044 	addi	r3,r2,1
   56608:	e0bffc17 	ldw	r2,-16(fp)
   5660c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   56610:	e0bffc17 	ldw	r2,-16(fp)
   56614:	10c00217 	ldw	r3,8(r2)
   56618:	e0bff617 	ldw	r2,-40(fp)
   5661c:	1880042e 	bgeu	r3,r2,56630 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
   56620:	e0bffc17 	ldw	r2,-16(fp)
   56624:	00c00044 	movi	r3,1
   56628:	10c00405 	stb	r3,16(r2)
   5662c:	00000206 	br	56638 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
   56630:	e0bffc17 	ldw	r2,-16(fp)
   56634:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   56638:	e0fffc17 	ldw	r3,-16(fp)
   5663c:	008001b4 	movhi	r2,6
   56640:	10a64d04 	addi	r2,r2,-26316
   56644:	e0bff915 	stw	r2,-28(fp)
   56648:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   5664c:	e0bffa17 	ldw	r2,-24(fp)
   56650:	e0fff917 	ldw	r3,-28(fp)
   56654:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   56658:	e0bff917 	ldw	r2,-28(fp)
   5665c:	10c00017 	ldw	r3,0(r2)
   56660:	e0bffa17 	ldw	r2,-24(fp)
   56664:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   56668:	e0bff917 	ldw	r2,-28(fp)
   5666c:	10800017 	ldw	r2,0(r2)
   56670:	e0fffa17 	ldw	r3,-24(fp)
   56674:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   56678:	e0bff917 	ldw	r2,-28(fp)
   5667c:	e0fffa17 	ldw	r3,-24(fp)
   56680:	10c00015 	stw	r3,0(r2)
   56684:	e0bff717 	ldw	r2,-36(fp)
   56688:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   5668c:	e0bffb17 	ldw	r2,-20(fp)
   56690:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   56694:	0005883a 	mov	r2,zero
   56698:	00000306 	br	566a8 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
   5669c:	00bffa84 	movi	r2,-22
   566a0:	00000106 	br	566a8 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
   566a4:	00bfde84 	movi	r2,-134
  }
}
   566a8:	e037883a 	mov	sp,fp
   566ac:	df000017 	ldw	fp,0(sp)
   566b0:	dec00104 	addi	sp,sp,4
   566b4:	f800283a 	ret

000566b8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   566b8:	deffff04 	addi	sp,sp,-4
   566bc:	df000015 	stw	fp,0(sp)
   566c0:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   566c4:	e037883a 	mov	sp,fp
   566c8:	df000017 	ldw	fp,0(sp)
   566cc:	dec00104 	addi	sp,sp,4
   566d0:	f800283a 	ret

000566d4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   566d4:	defffe04 	addi	sp,sp,-8
   566d8:	dfc00115 	stw	ra,4(sp)
   566dc:	df000015 	stw	fp,0(sp)
   566e0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   566e4:	008001b4 	movhi	r2,6
   566e8:	10a62b04 	addi	r2,r2,-26452
   566ec:	10800017 	ldw	r2,0(r2)
   566f0:	10000526 	beq	r2,zero,56708 <alt_get_errno+0x34>
   566f4:	008001b4 	movhi	r2,6
   566f8:	10a62b04 	addi	r2,r2,-26452
   566fc:	10800017 	ldw	r2,0(r2)
   56700:	103ee83a 	callr	r2
   56704:	00000206 	br	56710 <alt_get_errno+0x3c>
   56708:	008001b4 	movhi	r2,6
   5670c:	10ad3804 	addi	r2,r2,-19232
}
   56710:	e037883a 	mov	sp,fp
   56714:	dfc00117 	ldw	ra,4(sp)
   56718:	df000017 	ldw	fp,0(sp)
   5671c:	dec00204 	addi	sp,sp,8
   56720:	f800283a 	ret

00056724 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   56724:	defffa04 	addi	sp,sp,-24
   56728:	dfc00515 	stw	ra,20(sp)
   5672c:	df000415 	stw	fp,16(sp)
   56730:	df000404 	addi	fp,sp,16
   56734:	e13ffe15 	stw	r4,-8(fp)
   56738:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   5673c:	e0bffe17 	ldw	r2,-8(fp)
   56740:	10000326 	beq	r2,zero,56750 <alt_dev_llist_insert+0x2c>
   56744:	e0bffe17 	ldw	r2,-8(fp)
   56748:	10800217 	ldw	r2,8(r2)
   5674c:	1000061e 	bne	r2,zero,56768 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   56750:	00566d40 	call	566d4 <alt_get_errno>
   56754:	1007883a 	mov	r3,r2
   56758:	00800584 	movi	r2,22
   5675c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   56760:	00bffa84 	movi	r2,-22
   56764:	00001306 	br	567b4 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   56768:	e0bffe17 	ldw	r2,-8(fp)
   5676c:	e0ffff17 	ldw	r3,-4(fp)
   56770:	e0fffc15 	stw	r3,-16(fp)
   56774:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   56778:	e0bffd17 	ldw	r2,-12(fp)
   5677c:	e0fffc17 	ldw	r3,-16(fp)
   56780:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   56784:	e0bffc17 	ldw	r2,-16(fp)
   56788:	10c00017 	ldw	r3,0(r2)
   5678c:	e0bffd17 	ldw	r2,-12(fp)
   56790:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   56794:	e0bffc17 	ldw	r2,-16(fp)
   56798:	10800017 	ldw	r2,0(r2)
   5679c:	e0fffd17 	ldw	r3,-12(fp)
   567a0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   567a4:	e0bffc17 	ldw	r2,-16(fp)
   567a8:	e0fffd17 	ldw	r3,-12(fp)
   567ac:	10c00015 	stw	r3,0(r2)

  return 0;  
   567b0:	0005883a 	mov	r2,zero
}
   567b4:	e037883a 	mov	sp,fp
   567b8:	dfc00117 	ldw	ra,4(sp)
   567bc:	df000017 	ldw	fp,0(sp)
   567c0:	dec00204 	addi	sp,sp,8
   567c4:	f800283a 	ret

000567c8 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   567c8:	defffd04 	addi	sp,sp,-12
   567cc:	dfc00215 	stw	ra,8(sp)
   567d0:	df000115 	stw	fp,4(sp)
   567d4:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   567d8:	00800174 	movhi	r2,5
   567dc:	109e2304 	addi	r2,r2,30860
   567e0:	e0bfff15 	stw	r2,-4(fp)
   567e4:	00000606 	br	56800 <_do_ctors+0x38>
        (*ctor) (); 
   567e8:	e0bfff17 	ldw	r2,-4(fp)
   567ec:	10800017 	ldw	r2,0(r2)
   567f0:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   567f4:	e0bfff17 	ldw	r2,-4(fp)
   567f8:	10bfff04 	addi	r2,r2,-4
   567fc:	e0bfff15 	stw	r2,-4(fp)
   56800:	e0ffff17 	ldw	r3,-4(fp)
   56804:	00800174 	movhi	r2,5
   56808:	109e2404 	addi	r2,r2,30864
   5680c:	18bff62e 	bgeu	r3,r2,567e8 <__alt_data_end+0xfffe5aa8>
        (*ctor) (); 
}
   56810:	e037883a 	mov	sp,fp
   56814:	dfc00117 	ldw	ra,4(sp)
   56818:	df000017 	ldw	fp,0(sp)
   5681c:	dec00204 	addi	sp,sp,8
   56820:	f800283a 	ret

00056824 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   56824:	defffd04 	addi	sp,sp,-12
   56828:	dfc00215 	stw	ra,8(sp)
   5682c:	df000115 	stw	fp,4(sp)
   56830:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   56834:	00800174 	movhi	r2,5
   56838:	109e2304 	addi	r2,r2,30860
   5683c:	e0bfff15 	stw	r2,-4(fp)
   56840:	00000606 	br	5685c <_do_dtors+0x38>
        (*dtor) (); 
   56844:	e0bfff17 	ldw	r2,-4(fp)
   56848:	10800017 	ldw	r2,0(r2)
   5684c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   56850:	e0bfff17 	ldw	r2,-4(fp)
   56854:	10bfff04 	addi	r2,r2,-4
   56858:	e0bfff15 	stw	r2,-4(fp)
   5685c:	e0ffff17 	ldw	r3,-4(fp)
   56860:	00800174 	movhi	r2,5
   56864:	109e2404 	addi	r2,r2,30864
   56868:	18bff62e 	bgeu	r3,r2,56844 <__alt_data_end+0xfffe5b04>
        (*dtor) (); 
}
   5686c:	e037883a 	mov	sp,fp
   56870:	dfc00117 	ldw	ra,4(sp)
   56874:	df000017 	ldw	fp,0(sp)
   56878:	dec00204 	addi	sp,sp,8
   5687c:	f800283a 	ret

00056880 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   56880:	defffe04 	addi	sp,sp,-8
   56884:	dfc00115 	stw	ra,4(sp)
   56888:	df000015 	stw	fp,0(sp)
   5688c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   56890:	0009883a 	mov	r4,zero
   56894:	01480004 	movi	r5,8192
   56898:	00574580 	call	57458 <alt_icache_flush>
#endif
}
   5689c:	e037883a 	mov	sp,fp
   568a0:	dfc00117 	ldw	ra,4(sp)
   568a4:	df000017 	ldw	fp,0(sp)
   568a8:	dec00204 	addi	sp,sp,8
   568ac:	f800283a 	ret

000568b0 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   568b0:	defff904 	addi	sp,sp,-28
   568b4:	dfc00615 	stw	ra,24(sp)
   568b8:	df000515 	stw	fp,20(sp)
   568bc:	df000504 	addi	fp,sp,20
   568c0:	e13ffc15 	stw	r4,-16(fp)
   568c4:	e17ffd15 	stw	r5,-12(fp)
   568c8:	e1bffe15 	stw	r6,-8(fp)
   568cc:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   568d0:	e0800217 	ldw	r2,8(fp)
   568d4:	d8800015 	stw	r2,0(sp)
   568d8:	e13ffc17 	ldw	r4,-16(fp)
   568dc:	e17ffd17 	ldw	r5,-12(fp)
   568e0:	e1bffe17 	ldw	r6,-8(fp)
   568e4:	e1ffff17 	ldw	r7,-4(fp)
   568e8:	0056a900 	call	56a90 <alt_iic_isr_register>
}  
   568ec:	e037883a 	mov	sp,fp
   568f0:	dfc00117 	ldw	ra,4(sp)
   568f4:	df000017 	ldw	fp,0(sp)
   568f8:	dec00204 	addi	sp,sp,8
   568fc:	f800283a 	ret

00056900 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   56900:	defff904 	addi	sp,sp,-28
   56904:	df000615 	stw	fp,24(sp)
   56908:	df000604 	addi	fp,sp,24
   5690c:	e13ffe15 	stw	r4,-8(fp)
   56910:	e17fff15 	stw	r5,-4(fp)
   56914:	e0bfff17 	ldw	r2,-4(fp)
   56918:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   5691c:	0005303a 	rdctl	r2,status
   56920:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   56924:	e0fffb17 	ldw	r3,-20(fp)
   56928:	00bfff84 	movi	r2,-2
   5692c:	1884703a 	and	r2,r3,r2
   56930:	1001703a 	wrctl	status,r2
  
  return context;
   56934:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   56938:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   5693c:	e0bffa17 	ldw	r2,-24(fp)
   56940:	00c00044 	movi	r3,1
   56944:	1884983a 	sll	r2,r3,r2
   56948:	1007883a 	mov	r3,r2
   5694c:	008001b4 	movhi	r2,6
   56950:	10ad5504 	addi	r2,r2,-19116
   56954:	10800017 	ldw	r2,0(r2)
   56958:	1886b03a 	or	r3,r3,r2
   5695c:	008001b4 	movhi	r2,6
   56960:	10ad5504 	addi	r2,r2,-19116
   56964:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   56968:	008001b4 	movhi	r2,6
   5696c:	10ad5504 	addi	r2,r2,-19116
   56970:	10800017 	ldw	r2,0(r2)
   56974:	100170fa 	wrctl	ienable,r2
   56978:	e0bffc17 	ldw	r2,-16(fp)
   5697c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   56980:	e0bffd17 	ldw	r2,-12(fp)
   56984:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   56988:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   5698c:	0001883a 	nop
}
   56990:	e037883a 	mov	sp,fp
   56994:	df000017 	ldw	fp,0(sp)
   56998:	dec00104 	addi	sp,sp,4
   5699c:	f800283a 	ret

000569a0 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   569a0:	defff904 	addi	sp,sp,-28
   569a4:	df000615 	stw	fp,24(sp)
   569a8:	df000604 	addi	fp,sp,24
   569ac:	e13ffe15 	stw	r4,-8(fp)
   569b0:	e17fff15 	stw	r5,-4(fp)
   569b4:	e0bfff17 	ldw	r2,-4(fp)
   569b8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   569bc:	0005303a 	rdctl	r2,status
   569c0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   569c4:	e0fffb17 	ldw	r3,-20(fp)
   569c8:	00bfff84 	movi	r2,-2
   569cc:	1884703a 	and	r2,r3,r2
   569d0:	1001703a 	wrctl	status,r2
  
  return context;
   569d4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   569d8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   569dc:	e0bffa17 	ldw	r2,-24(fp)
   569e0:	00c00044 	movi	r3,1
   569e4:	1884983a 	sll	r2,r3,r2
   569e8:	0084303a 	nor	r2,zero,r2
   569ec:	1007883a 	mov	r3,r2
   569f0:	008001b4 	movhi	r2,6
   569f4:	10ad5504 	addi	r2,r2,-19116
   569f8:	10800017 	ldw	r2,0(r2)
   569fc:	1886703a 	and	r3,r3,r2
   56a00:	008001b4 	movhi	r2,6
   56a04:	10ad5504 	addi	r2,r2,-19116
   56a08:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   56a0c:	008001b4 	movhi	r2,6
   56a10:	10ad5504 	addi	r2,r2,-19116
   56a14:	10800017 	ldw	r2,0(r2)
   56a18:	100170fa 	wrctl	ienable,r2
   56a1c:	e0bffc17 	ldw	r2,-16(fp)
   56a20:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   56a24:	e0bffd17 	ldw	r2,-12(fp)
   56a28:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   56a2c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   56a30:	0001883a 	nop
}
   56a34:	e037883a 	mov	sp,fp
   56a38:	df000017 	ldw	fp,0(sp)
   56a3c:	dec00104 	addi	sp,sp,4
   56a40:	f800283a 	ret

00056a44 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   56a44:	defffc04 	addi	sp,sp,-16
   56a48:	df000315 	stw	fp,12(sp)
   56a4c:	df000304 	addi	fp,sp,12
   56a50:	e13ffe15 	stw	r4,-8(fp)
   56a54:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   56a58:	000530fa 	rdctl	r2,ienable
   56a5c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   56a60:	e0bfff17 	ldw	r2,-4(fp)
   56a64:	00c00044 	movi	r3,1
   56a68:	1884983a 	sll	r2,r3,r2
   56a6c:	1007883a 	mov	r3,r2
   56a70:	e0bffd17 	ldw	r2,-12(fp)
   56a74:	1884703a 	and	r2,r3,r2
   56a78:	1004c03a 	cmpne	r2,r2,zero
   56a7c:	10803fcc 	andi	r2,r2,255
}
   56a80:	e037883a 	mov	sp,fp
   56a84:	df000017 	ldw	fp,0(sp)
   56a88:	dec00104 	addi	sp,sp,4
   56a8c:	f800283a 	ret

00056a90 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   56a90:	defff504 	addi	sp,sp,-44
   56a94:	dfc00a15 	stw	ra,40(sp)
   56a98:	df000915 	stw	fp,36(sp)
   56a9c:	df000904 	addi	fp,sp,36
   56aa0:	e13ffc15 	stw	r4,-16(fp)
   56aa4:	e17ffd15 	stw	r5,-12(fp)
   56aa8:	e1bffe15 	stw	r6,-8(fp)
   56aac:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   56ab0:	00bffa84 	movi	r2,-22
   56ab4:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   56ab8:	e0bffd17 	ldw	r2,-12(fp)
   56abc:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   56ac0:	e0bff817 	ldw	r2,-32(fp)
   56ac4:	10800808 	cmpgei	r2,r2,32
   56ac8:	1000271e 	bne	r2,zero,56b68 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   56acc:	0005303a 	rdctl	r2,status
   56ad0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   56ad4:	e0fffa17 	ldw	r3,-24(fp)
   56ad8:	00bfff84 	movi	r2,-2
   56adc:	1884703a 	and	r2,r3,r2
   56ae0:	1001703a 	wrctl	status,r2
  
  return context;
   56ae4:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   56ae8:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
   56aec:	008001b4 	movhi	r2,6
   56af0:	1089eb04 	addi	r2,r2,10156
   56af4:	e0fff817 	ldw	r3,-32(fp)
   56af8:	180690fa 	slli	r3,r3,3
   56afc:	10c5883a 	add	r2,r2,r3
   56b00:	e0fffe17 	ldw	r3,-8(fp)
   56b04:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   56b08:	008001b4 	movhi	r2,6
   56b0c:	1089eb04 	addi	r2,r2,10156
   56b10:	e0fff817 	ldw	r3,-32(fp)
   56b14:	180690fa 	slli	r3,r3,3
   56b18:	10c5883a 	add	r2,r2,r3
   56b1c:	10800104 	addi	r2,r2,4
   56b20:	e0ffff17 	ldw	r3,-4(fp)
   56b24:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   56b28:	e0bffe17 	ldw	r2,-8(fp)
   56b2c:	10000526 	beq	r2,zero,56b44 <alt_iic_isr_register+0xb4>
   56b30:	e0bff817 	ldw	r2,-32(fp)
   56b34:	e13ffc17 	ldw	r4,-16(fp)
   56b38:	100b883a 	mov	r5,r2
   56b3c:	00569000 	call	56900 <alt_ic_irq_enable>
   56b40:	00000406 	br	56b54 <alt_iic_isr_register+0xc4>
   56b44:	e0bff817 	ldw	r2,-32(fp)
   56b48:	e13ffc17 	ldw	r4,-16(fp)
   56b4c:	100b883a 	mov	r5,r2
   56b50:	00569a00 	call	569a0 <alt_ic_irq_disable>
   56b54:	e0bff715 	stw	r2,-36(fp)
   56b58:	e0bff917 	ldw	r2,-28(fp)
   56b5c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   56b60:	e0bffb17 	ldw	r2,-20(fp)
   56b64:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   56b68:	e0bff717 	ldw	r2,-36(fp)
}
   56b6c:	e037883a 	mov	sp,fp
   56b70:	dfc00117 	ldw	ra,4(sp)
   56b74:	df000017 	ldw	fp,0(sp)
   56b78:	dec00204 	addi	sp,sp,8
   56b7c:	f800283a 	ret

00056b80 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   56b80:	defff904 	addi	sp,sp,-28
   56b84:	dfc00615 	stw	ra,24(sp)
   56b88:	df000515 	stw	fp,20(sp)
   56b8c:	df000504 	addi	fp,sp,20
   56b90:	e13ffc15 	stw	r4,-16(fp)
   56b94:	e17ffd15 	stw	r5,-12(fp)
   56b98:	e1bffe15 	stw	r6,-8(fp)
   56b9c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   56ba0:	e13ffd17 	ldw	r4,-12(fp)
   56ba4:	e17ffe17 	ldw	r5,-8(fp)
   56ba8:	e1bfff17 	ldw	r6,-4(fp)
   56bac:	0056dd40 	call	56dd4 <open>
   56bb0:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   56bb4:	e0bffb17 	ldw	r2,-20(fp)
   56bb8:	10001c16 	blt	r2,zero,56c2c <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   56bbc:	008001b4 	movhi	r2,6
   56bc0:	10a1a504 	addi	r2,r2,-31084
   56bc4:	e0fffb17 	ldw	r3,-20(fp)
   56bc8:	18c00324 	muli	r3,r3,12
   56bcc:	10c5883a 	add	r2,r2,r3
   56bd0:	10c00017 	ldw	r3,0(r2)
   56bd4:	e0bffc17 	ldw	r2,-16(fp)
   56bd8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   56bdc:	008001b4 	movhi	r2,6
   56be0:	10a1a504 	addi	r2,r2,-31084
   56be4:	e0fffb17 	ldw	r3,-20(fp)
   56be8:	18c00324 	muli	r3,r3,12
   56bec:	10c5883a 	add	r2,r2,r3
   56bf0:	10800104 	addi	r2,r2,4
   56bf4:	10c00017 	ldw	r3,0(r2)
   56bf8:	e0bffc17 	ldw	r2,-16(fp)
   56bfc:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   56c00:	008001b4 	movhi	r2,6
   56c04:	10a1a504 	addi	r2,r2,-31084
   56c08:	e0fffb17 	ldw	r3,-20(fp)
   56c0c:	18c00324 	muli	r3,r3,12
   56c10:	10c5883a 	add	r2,r2,r3
   56c14:	10800204 	addi	r2,r2,8
   56c18:	10c00017 	ldw	r3,0(r2)
   56c1c:	e0bffc17 	ldw	r2,-16(fp)
   56c20:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   56c24:	e13ffb17 	ldw	r4,-20(fp)
   56c28:	004d0cc0 	call	4d0cc <alt_release_fd>
  }
} 
   56c2c:	e037883a 	mov	sp,fp
   56c30:	dfc00117 	ldw	ra,4(sp)
   56c34:	df000017 	ldw	fp,0(sp)
   56c38:	dec00204 	addi	sp,sp,8
   56c3c:	f800283a 	ret

00056c40 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   56c40:	defffb04 	addi	sp,sp,-20
   56c44:	dfc00415 	stw	ra,16(sp)
   56c48:	df000315 	stw	fp,12(sp)
   56c4c:	df000304 	addi	fp,sp,12
   56c50:	e13ffd15 	stw	r4,-12(fp)
   56c54:	e17ffe15 	stw	r5,-8(fp)
   56c58:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   56c5c:	010001b4 	movhi	r4,6
   56c60:	2121a804 	addi	r4,r4,-31072
   56c64:	e17ffd17 	ldw	r5,-12(fp)
   56c68:	01800044 	movi	r6,1
   56c6c:	01c07fc4 	movi	r7,511
   56c70:	0056b800 	call	56b80 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   56c74:	010001b4 	movhi	r4,6
   56c78:	2121a504 	addi	r4,r4,-31084
   56c7c:	e17ffe17 	ldw	r5,-8(fp)
   56c80:	000d883a 	mov	r6,zero
   56c84:	01c07fc4 	movi	r7,511
   56c88:	0056b800 	call	56b80 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   56c8c:	010001b4 	movhi	r4,6
   56c90:	2121ab04 	addi	r4,r4,-31060
   56c94:	e17fff17 	ldw	r5,-4(fp)
   56c98:	01800044 	movi	r6,1
   56c9c:	01c07fc4 	movi	r7,511
   56ca0:	0056b800 	call	56b80 <alt_open_fd>
}  
   56ca4:	e037883a 	mov	sp,fp
   56ca8:	dfc00117 	ldw	ra,4(sp)
   56cac:	df000017 	ldw	fp,0(sp)
   56cb0:	dec00204 	addi	sp,sp,8
   56cb4:	f800283a 	ret

00056cb8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   56cb8:	defffe04 	addi	sp,sp,-8
   56cbc:	dfc00115 	stw	ra,4(sp)
   56cc0:	df000015 	stw	fp,0(sp)
   56cc4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   56cc8:	008001b4 	movhi	r2,6
   56ccc:	10a62b04 	addi	r2,r2,-26452
   56cd0:	10800017 	ldw	r2,0(r2)
   56cd4:	10000526 	beq	r2,zero,56cec <alt_get_errno+0x34>
   56cd8:	008001b4 	movhi	r2,6
   56cdc:	10a62b04 	addi	r2,r2,-26452
   56ce0:	10800017 	ldw	r2,0(r2)
   56ce4:	103ee83a 	callr	r2
   56ce8:	00000206 	br	56cf4 <alt_get_errno+0x3c>
   56cec:	008001b4 	movhi	r2,6
   56cf0:	10ad3804 	addi	r2,r2,-19232
}
   56cf4:	e037883a 	mov	sp,fp
   56cf8:	dfc00117 	ldw	ra,4(sp)
   56cfc:	df000017 	ldw	fp,0(sp)
   56d00:	dec00204 	addi	sp,sp,8
   56d04:	f800283a 	ret

00056d08 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   56d08:	defffd04 	addi	sp,sp,-12
   56d0c:	df000215 	stw	fp,8(sp)
   56d10:	df000204 	addi	fp,sp,8
   56d14:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   56d18:	e0bfff17 	ldw	r2,-4(fp)
   56d1c:	10800217 	ldw	r2,8(r2)
   56d20:	10d00034 	orhi	r3,r2,16384
   56d24:	e0bfff17 	ldw	r2,-4(fp)
   56d28:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   56d2c:	e03ffe15 	stw	zero,-8(fp)
   56d30:	00001d06 	br	56da8 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   56d34:	008001b4 	movhi	r2,6
   56d38:	10a1a504 	addi	r2,r2,-31084
   56d3c:	e0fffe17 	ldw	r3,-8(fp)
   56d40:	18c00324 	muli	r3,r3,12
   56d44:	10c5883a 	add	r2,r2,r3
   56d48:	10c00017 	ldw	r3,0(r2)
   56d4c:	e0bfff17 	ldw	r2,-4(fp)
   56d50:	10800017 	ldw	r2,0(r2)
   56d54:	1880111e 	bne	r3,r2,56d9c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   56d58:	008001b4 	movhi	r2,6
   56d5c:	10a1a504 	addi	r2,r2,-31084
   56d60:	e0fffe17 	ldw	r3,-8(fp)
   56d64:	18c00324 	muli	r3,r3,12
   56d68:	10c5883a 	add	r2,r2,r3
   56d6c:	10800204 	addi	r2,r2,8
   56d70:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   56d74:	1000090e 	bge	r2,zero,56d9c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   56d78:	e0bffe17 	ldw	r2,-8(fp)
   56d7c:	10c00324 	muli	r3,r2,12
   56d80:	008001b4 	movhi	r2,6
   56d84:	10a1a504 	addi	r2,r2,-31084
   56d88:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   56d8c:	e0bfff17 	ldw	r2,-4(fp)
   56d90:	18800226 	beq	r3,r2,56d9c <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   56d94:	00bffcc4 	movi	r2,-13
   56d98:	00000a06 	br	56dc4 <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   56d9c:	e0bffe17 	ldw	r2,-8(fp)
   56da0:	10800044 	addi	r2,r2,1
   56da4:	e0bffe15 	stw	r2,-8(fp)
   56da8:	008001b4 	movhi	r2,6
   56dac:	10a62a04 	addi	r2,r2,-26456
   56db0:	10800017 	ldw	r2,0(r2)
   56db4:	1007883a 	mov	r3,r2
   56db8:	e0bffe17 	ldw	r2,-8(fp)
   56dbc:	18bfdd2e 	bgeu	r3,r2,56d34 <__alt_data_end+0xfffe5ff4>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   56dc0:	0005883a 	mov	r2,zero
}
   56dc4:	e037883a 	mov	sp,fp
   56dc8:	df000017 	ldw	fp,0(sp)
   56dcc:	dec00104 	addi	sp,sp,4
   56dd0:	f800283a 	ret

00056dd4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   56dd4:	defff604 	addi	sp,sp,-40
   56dd8:	dfc00915 	stw	ra,36(sp)
   56ddc:	df000815 	stw	fp,32(sp)
   56de0:	df000804 	addi	fp,sp,32
   56de4:	e13ffd15 	stw	r4,-12(fp)
   56de8:	e17ffe15 	stw	r5,-8(fp)
   56dec:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   56df0:	00bfffc4 	movi	r2,-1
   56df4:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   56df8:	00bffb44 	movi	r2,-19
   56dfc:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   56e00:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   56e04:	e13ffd17 	ldw	r4,-12(fp)
   56e08:	014001b4 	movhi	r5,6
   56e0c:	29662804 	addi	r5,r5,-26464
   56e10:	00571b80 	call	571b8 <alt_find_dev>
   56e14:	e0bff815 	stw	r2,-32(fp)
   56e18:	e0bff817 	ldw	r2,-32(fp)
   56e1c:	1000051e 	bne	r2,zero,56e34 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   56e20:	e13ffd17 	ldw	r4,-12(fp)
   56e24:	00572480 	call	57248 <alt_find_file>
   56e28:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   56e2c:	00800044 	movi	r2,1
   56e30:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   56e34:	e0bff817 	ldw	r2,-32(fp)
   56e38:	10002926 	beq	r2,zero,56ee0 <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
   56e3c:	e13ff817 	ldw	r4,-32(fp)
   56e40:	005735c0 	call	5735c <alt_get_fd>
   56e44:	e0bff915 	stw	r2,-28(fp)
   56e48:	e0bff917 	ldw	r2,-28(fp)
   56e4c:	1000030e 	bge	r2,zero,56e5c <open+0x88>
    {
      status = index;
   56e50:	e0bff917 	ldw	r2,-28(fp)
   56e54:	e0bffa15 	stw	r2,-24(fp)
   56e58:	00002306 	br	56ee8 <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
   56e5c:	e0bff917 	ldw	r2,-28(fp)
   56e60:	10c00324 	muli	r3,r2,12
   56e64:	008001b4 	movhi	r2,6
   56e68:	10a1a504 	addi	r2,r2,-31084
   56e6c:	1885883a 	add	r2,r3,r2
   56e70:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   56e74:	e0fffe17 	ldw	r3,-8(fp)
   56e78:	00900034 	movhi	r2,16384
   56e7c:	10bfffc4 	addi	r2,r2,-1
   56e80:	1886703a 	and	r3,r3,r2
   56e84:	e0bffc17 	ldw	r2,-16(fp)
   56e88:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   56e8c:	e0bffb17 	ldw	r2,-20(fp)
   56e90:	1000051e 	bne	r2,zero,56ea8 <open+0xd4>
   56e94:	e13ffc17 	ldw	r4,-16(fp)
   56e98:	0056d080 	call	56d08 <alt_file_locked>
   56e9c:	e0bffa15 	stw	r2,-24(fp)
   56ea0:	e0bffa17 	ldw	r2,-24(fp)
   56ea4:	10001016 	blt	r2,zero,56ee8 <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   56ea8:	e0bff817 	ldw	r2,-32(fp)
   56eac:	10800317 	ldw	r2,12(r2)
   56eb0:	10000826 	beq	r2,zero,56ed4 <open+0x100>
   56eb4:	e0bff817 	ldw	r2,-32(fp)
   56eb8:	10800317 	ldw	r2,12(r2)
   56ebc:	e13ffc17 	ldw	r4,-16(fp)
   56ec0:	e17ffd17 	ldw	r5,-12(fp)
   56ec4:	e1bffe17 	ldw	r6,-8(fp)
   56ec8:	e1ffff17 	ldw	r7,-4(fp)
   56ecc:	103ee83a 	callr	r2
   56ed0:	00000106 	br	56ed8 <open+0x104>
   56ed4:	0005883a 	mov	r2,zero
   56ed8:	e0bffa15 	stw	r2,-24(fp)
   56edc:	00000206 	br	56ee8 <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
   56ee0:	00bffb44 	movi	r2,-19
   56ee4:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   56ee8:	e0bffa17 	ldw	r2,-24(fp)
   56eec:	1000090e 	bge	r2,zero,56f14 <open+0x140>
  {
    alt_release_fd (index);  
   56ef0:	e13ff917 	ldw	r4,-28(fp)
   56ef4:	004d0cc0 	call	4d0cc <alt_release_fd>
    ALT_ERRNO = -status;
   56ef8:	0056cb80 	call	56cb8 <alt_get_errno>
   56efc:	1007883a 	mov	r3,r2
   56f00:	e0bffa17 	ldw	r2,-24(fp)
   56f04:	0085c83a 	sub	r2,zero,r2
   56f08:	18800015 	stw	r2,0(r3)
    return -1;
   56f0c:	00bfffc4 	movi	r2,-1
   56f10:	00000106 	br	56f18 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
   56f14:	e0bff917 	ldw	r2,-28(fp)
}
   56f18:	e037883a 	mov	sp,fp
   56f1c:	dfc00117 	ldw	ra,4(sp)
   56f20:	df000017 	ldw	fp,0(sp)
   56f24:	dec00204 	addi	sp,sp,8
   56f28:	f800283a 	ret

00056f2c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   56f2c:	defffa04 	addi	sp,sp,-24
   56f30:	df000515 	stw	fp,20(sp)
   56f34:	df000504 	addi	fp,sp,20
   56f38:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   56f3c:	0005303a 	rdctl	r2,status
   56f40:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   56f44:	e0fffc17 	ldw	r3,-16(fp)
   56f48:	00bfff84 	movi	r2,-2
   56f4c:	1884703a 	and	r2,r3,r2
   56f50:	1001703a 	wrctl	status,r2
  
  return context;
   56f54:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   56f58:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   56f5c:	e0bfff17 	ldw	r2,-4(fp)
   56f60:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   56f64:	e0bffd17 	ldw	r2,-12(fp)
   56f68:	10800017 	ldw	r2,0(r2)
   56f6c:	e0fffd17 	ldw	r3,-12(fp)
   56f70:	18c00117 	ldw	r3,4(r3)
   56f74:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   56f78:	e0bffd17 	ldw	r2,-12(fp)
   56f7c:	10800117 	ldw	r2,4(r2)
   56f80:	e0fffd17 	ldw	r3,-12(fp)
   56f84:	18c00017 	ldw	r3,0(r3)
   56f88:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   56f8c:	e0bffd17 	ldw	r2,-12(fp)
   56f90:	e0fffd17 	ldw	r3,-12(fp)
   56f94:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   56f98:	e0bffd17 	ldw	r2,-12(fp)
   56f9c:	e0fffd17 	ldw	r3,-12(fp)
   56fa0:	10c00015 	stw	r3,0(r2)
   56fa4:	e0bffb17 	ldw	r2,-20(fp)
   56fa8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   56fac:	e0bffe17 	ldw	r2,-8(fp)
   56fb0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   56fb4:	e037883a 	mov	sp,fp
   56fb8:	df000017 	ldw	fp,0(sp)
   56fbc:	dec00104 	addi	sp,sp,4
   56fc0:	f800283a 	ret

00056fc4 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   56fc4:	defffb04 	addi	sp,sp,-20
   56fc8:	dfc00415 	stw	ra,16(sp)
   56fcc:	df000315 	stw	fp,12(sp)
   56fd0:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   56fd4:	d0a02d17 	ldw	r2,-32588(gp)
   56fd8:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   56fdc:	d0a73717 	ldw	r2,-25380(gp)
   56fe0:	10800044 	addi	r2,r2,1
   56fe4:	d0a73715 	stw	r2,-25380(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   56fe8:	00002e06 	br	570a4 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   56fec:	e0bffd17 	ldw	r2,-12(fp)
   56ff0:	10800017 	ldw	r2,0(r2)
   56ff4:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   56ff8:	e0bffd17 	ldw	r2,-12(fp)
   56ffc:	10800403 	ldbu	r2,16(r2)
   57000:	10803fcc 	andi	r2,r2,255
   57004:	10000426 	beq	r2,zero,57018 <alt_tick+0x54>
   57008:	d0a73717 	ldw	r2,-25380(gp)
   5700c:	1000021e 	bne	r2,zero,57018 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   57010:	e0bffd17 	ldw	r2,-12(fp)
   57014:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   57018:	e0bffd17 	ldw	r2,-12(fp)
   5701c:	10800217 	ldw	r2,8(r2)
   57020:	d0e73717 	ldw	r3,-25380(gp)
   57024:	18801d36 	bltu	r3,r2,5709c <alt_tick+0xd8>
   57028:	e0bffd17 	ldw	r2,-12(fp)
   5702c:	10800403 	ldbu	r2,16(r2)
   57030:	10803fcc 	andi	r2,r2,255
   57034:	1000191e 	bne	r2,zero,5709c <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   57038:	e0bffd17 	ldw	r2,-12(fp)
   5703c:	10800317 	ldw	r2,12(r2)
   57040:	e0fffd17 	ldw	r3,-12(fp)
   57044:	18c00517 	ldw	r3,20(r3)
   57048:	1809883a 	mov	r4,r3
   5704c:	103ee83a 	callr	r2
   57050:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   57054:	e0bfff17 	ldw	r2,-4(fp)
   57058:	1000031e 	bne	r2,zero,57068 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   5705c:	e13ffd17 	ldw	r4,-12(fp)
   57060:	0056f2c0 	call	56f2c <alt_alarm_stop>
   57064:	00000d06 	br	5709c <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   57068:	e0bffd17 	ldw	r2,-12(fp)
   5706c:	10c00217 	ldw	r3,8(r2)
   57070:	e0bfff17 	ldw	r2,-4(fp)
   57074:	1887883a 	add	r3,r3,r2
   57078:	e0bffd17 	ldw	r2,-12(fp)
   5707c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   57080:	e0bffd17 	ldw	r2,-12(fp)
   57084:	10c00217 	ldw	r3,8(r2)
   57088:	d0a73717 	ldw	r2,-25380(gp)
   5708c:	1880032e 	bgeu	r3,r2,5709c <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   57090:	e0bffd17 	ldw	r2,-12(fp)
   57094:	00c00044 	movi	r3,1
   57098:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   5709c:	e0bffe17 	ldw	r2,-8(fp)
   570a0:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   570a4:	e0fffd17 	ldw	r3,-12(fp)
   570a8:	d0a02d04 	addi	r2,gp,-32588
   570ac:	18bfcf1e 	bne	r3,r2,56fec <__alt_data_end+0xfffe62ac>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   570b0:	004e6b80 	call	4e6b8 <OSTimeTick>
}
   570b4:	e037883a 	mov	sp,fp
   570b8:	dfc00117 	ldw	ra,4(sp)
   570bc:	df000017 	ldw	fp,0(sp)
   570c0:	dec00204 	addi	sp,sp,8
   570c4:	f800283a 	ret

000570c8 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   570c8:	deffff04 	addi	sp,sp,-4
   570cc:	df000015 	stw	fp,0(sp)
   570d0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   570d4:	000170fa 	wrctl	ienable,zero
}
   570d8:	e037883a 	mov	sp,fp
   570dc:	df000017 	ldw	fp,0(sp)
   570e0:	dec00104 	addi	sp,sp,4
   570e4:	f800283a 	ret

000570e8 <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
   570e8:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
   570ec:	d0e00117 	ldw	r3,-32764(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
   570f0:	d1273017 	ldw	r4,-25408(gp)

      stw ra,  0(sp)
   570f4:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
   570f8:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
   570fc:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
   57100:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
   57104:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
   57108:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
   5710c:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
   57110:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
   57114:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
   57118:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
   5711c:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
   57120:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
   57124:	004d6580 	call	4d658 <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
   57128:	d1272b17 	ldw	r4,-25428(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
   5712c:	d1672307 	ldb	r5,-25460(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
   57130:	d1273015 	stw	r4,-25408(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
   57134:	d1672345 	stb	r5,-25459(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
   57138:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
   5713c:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
   57140:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
   57144:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
   57148:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
   5714c:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
   57150:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
   57154:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
   57158:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
   5715c:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
   57160:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
   57164:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
   57168:	d0e00115 	stw	r3,-32764(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
   5716c:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
   57170:	f800283a 	ret

00057174 <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
   57174:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
   57178:	047fff84 	movi	r17,-2
      and   r18, r18, r17
   5717c:	9464703a 	and	r18,r18,r17
      wrctl status, r18
   57180:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
   57184:	004d6580 	call	4d658 <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
   57188:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
   5718c:	d4a72145 	stb	r18,-25467(gp)

      /*
       * start execution of the new task.
       */

      br 9b
   57190:	003fe506 	br	57128 <__alt_data_end+0xfffe63e8>

00057194 <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
   57194:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
   57198:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
   5719c:	10800054 	ori	r2,r2,1
      wrctl status, r2
   571a0:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
   571a4:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
   571a8:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
   571ac:	dec00204 	addi	sp,sp,8

      callr r2
   571b0:	103ee83a 	callr	r2

      nop
   571b4:	0001883a 	nop

000571b8 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   571b8:	defffa04 	addi	sp,sp,-24
   571bc:	dfc00515 	stw	ra,20(sp)
   571c0:	df000415 	stw	fp,16(sp)
   571c4:	df000404 	addi	fp,sp,16
   571c8:	e13ffe15 	stw	r4,-8(fp)
   571cc:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   571d0:	e0bfff17 	ldw	r2,-4(fp)
   571d4:	10800017 	ldw	r2,0(r2)
   571d8:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   571dc:	e13ffe17 	ldw	r4,-8(fp)
   571e0:	00408640 	call	40864 <strlen>
   571e4:	10800044 	addi	r2,r2,1
   571e8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   571ec:	00000d06 	br	57224 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   571f0:	e0bffc17 	ldw	r2,-16(fp)
   571f4:	10c00217 	ldw	r3,8(r2)
   571f8:	e0bffd17 	ldw	r2,-12(fp)
   571fc:	1809883a 	mov	r4,r3
   57200:	e17ffe17 	ldw	r5,-8(fp)
   57204:	100d883a 	mov	r6,r2
   57208:	00575300 	call	57530 <memcmp>
   5720c:	1000021e 	bne	r2,zero,57218 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   57210:	e0bffc17 	ldw	r2,-16(fp)
   57214:	00000706 	br	57234 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   57218:	e0bffc17 	ldw	r2,-16(fp)
   5721c:	10800017 	ldw	r2,0(r2)
   57220:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   57224:	e0fffc17 	ldw	r3,-16(fp)
   57228:	e0bfff17 	ldw	r2,-4(fp)
   5722c:	18bff01e 	bne	r3,r2,571f0 <__alt_data_end+0xfffe64b0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   57230:	0005883a 	mov	r2,zero
}
   57234:	e037883a 	mov	sp,fp
   57238:	dfc00117 	ldw	ra,4(sp)
   5723c:	df000017 	ldw	fp,0(sp)
   57240:	dec00204 	addi	sp,sp,8
   57244:	f800283a 	ret

00057248 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   57248:	defffb04 	addi	sp,sp,-20
   5724c:	dfc00415 	stw	ra,16(sp)
   57250:	df000315 	stw	fp,12(sp)
   57254:	df000304 	addi	fp,sp,12
   57258:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   5725c:	008001b4 	movhi	r2,6
   57260:	10a62604 	addi	r2,r2,-26472
   57264:	10800017 	ldw	r2,0(r2)
   57268:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   5726c:	00003106 	br	57334 <alt_find_file+0xec>
  {
    len = strlen(next->name);
   57270:	e0bffd17 	ldw	r2,-12(fp)
   57274:	10800217 	ldw	r2,8(r2)
   57278:	1009883a 	mov	r4,r2
   5727c:	00408640 	call	40864 <strlen>
   57280:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   57284:	e0bffd17 	ldw	r2,-12(fp)
   57288:	10c00217 	ldw	r3,8(r2)
   5728c:	e0bffe17 	ldw	r2,-8(fp)
   57290:	10bfffc4 	addi	r2,r2,-1
   57294:	1885883a 	add	r2,r3,r2
   57298:	10800003 	ldbu	r2,0(r2)
   5729c:	10803fcc 	andi	r2,r2,255
   572a0:	1080201c 	xori	r2,r2,128
   572a4:	10bfe004 	addi	r2,r2,-128
   572a8:	10800bd8 	cmpnei	r2,r2,47
   572ac:	1000031e 	bne	r2,zero,572bc <alt_find_file+0x74>
    {
      len -= 1;
   572b0:	e0bffe17 	ldw	r2,-8(fp)
   572b4:	10bfffc4 	addi	r2,r2,-1
   572b8:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   572bc:	e0bffe17 	ldw	r2,-8(fp)
   572c0:	e0ffff17 	ldw	r3,-4(fp)
   572c4:	1885883a 	add	r2,r3,r2
   572c8:	10800003 	ldbu	r2,0(r2)
   572cc:	10803fcc 	andi	r2,r2,255
   572d0:	1080201c 	xori	r2,r2,128
   572d4:	10bfe004 	addi	r2,r2,-128
   572d8:	10800be0 	cmpeqi	r2,r2,47
   572dc:	1000081e 	bne	r2,zero,57300 <alt_find_file+0xb8>
   572e0:	e0bffe17 	ldw	r2,-8(fp)
   572e4:	e0ffff17 	ldw	r3,-4(fp)
   572e8:	1885883a 	add	r2,r3,r2
   572ec:	10800003 	ldbu	r2,0(r2)
   572f0:	10803fcc 	andi	r2,r2,255
   572f4:	1080201c 	xori	r2,r2,128
   572f8:	10bfe004 	addi	r2,r2,-128
   572fc:	10000a1e 	bne	r2,zero,57328 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   57300:	e0bffd17 	ldw	r2,-12(fp)
   57304:	10c00217 	ldw	r3,8(r2)
   57308:	e0bffe17 	ldw	r2,-8(fp)
   5730c:	1809883a 	mov	r4,r3
   57310:	e17fff17 	ldw	r5,-4(fp)
   57314:	100d883a 	mov	r6,r2
   57318:	00575300 	call	57530 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   5731c:	1000021e 	bne	r2,zero,57328 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   57320:	e0bffd17 	ldw	r2,-12(fp)
   57324:	00000806 	br	57348 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   57328:	e0bffd17 	ldw	r2,-12(fp)
   5732c:	10800017 	ldw	r2,0(r2)
   57330:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   57334:	e0fffd17 	ldw	r3,-12(fp)
   57338:	008001b4 	movhi	r2,6
   5733c:	10a62604 	addi	r2,r2,-26472
   57340:	18bfcb1e 	bne	r3,r2,57270 <__alt_data_end+0xfffe6530>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   57344:	0005883a 	mov	r2,zero
}
   57348:	e037883a 	mov	sp,fp
   5734c:	dfc00117 	ldw	ra,4(sp)
   57350:	df000017 	ldw	fp,0(sp)
   57354:	dec00204 	addi	sp,sp,8
   57358:	f800283a 	ret

0005735c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   5735c:	defff904 	addi	sp,sp,-28
   57360:	dfc00615 	stw	ra,24(sp)
   57364:	df000515 	stw	fp,20(sp)
   57368:	df000504 	addi	fp,sp,20
   5736c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   57370:	00bffa04 	movi	r2,-24
   57374:	e0bffc15 	stw	r2,-16(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
   57378:	008001b4 	movhi	r2,6
   5737c:	10ad3904 	addi	r2,r2,-19228
   57380:	10800017 	ldw	r2,0(r2)
   57384:	e0bffd15 	stw	r2,-12(fp)
   57388:	e03ffe0d 	sth	zero,-8(fp)
   5738c:	e0fffe0b 	ldhu	r3,-8(fp)
   57390:	e0bffe84 	addi	r2,fp,-6
   57394:	e13ffd17 	ldw	r4,-12(fp)
   57398:	180b883a 	mov	r5,r3
   5739c:	100d883a 	mov	r6,r2
   573a0:	00531440 	call	53144 <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   573a4:	e03ffb15 	stw	zero,-20(fp)
   573a8:	00001d06 	br	57420 <alt_get_fd+0xc4>
  {
    if (!alt_fd_list[i].dev)
   573ac:	008001b4 	movhi	r2,6
   573b0:	10a1a504 	addi	r2,r2,-31084
   573b4:	e0fffb17 	ldw	r3,-20(fp)
   573b8:	18c00324 	muli	r3,r3,12
   573bc:	10c5883a 	add	r2,r2,r3
   573c0:	10800017 	ldw	r2,0(r2)
   573c4:	1000131e 	bne	r2,zero,57414 <alt_get_fd+0xb8>
    {
      alt_fd_list[i].dev = dev;
   573c8:	008001b4 	movhi	r2,6
   573cc:	10a1a504 	addi	r2,r2,-31084
   573d0:	e0fffb17 	ldw	r3,-20(fp)
   573d4:	18c00324 	muli	r3,r3,12
   573d8:	10c5883a 	add	r2,r2,r3
   573dc:	e0ffff17 	ldw	r3,-4(fp)
   573e0:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   573e4:	008001b4 	movhi	r2,6
   573e8:	10a62a04 	addi	r2,r2,-26456
   573ec:	10c00017 	ldw	r3,0(r2)
   573f0:	e0bffb17 	ldw	r2,-20(fp)
   573f4:	1880040e 	bge	r3,r2,57408 <alt_get_fd+0xac>
      {
        alt_max_fd = i;
   573f8:	008001b4 	movhi	r2,6
   573fc:	10a62a04 	addi	r2,r2,-26456
   57400:	e0fffb17 	ldw	r3,-20(fp)
   57404:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   57408:	e0bffb17 	ldw	r2,-20(fp)
   5740c:	e0bffc15 	stw	r2,-16(fp)
      goto alt_get_fd_exit;
   57410:	00000606 	br	5742c <alt_get_fd+0xd0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   57414:	e0bffb17 	ldw	r2,-20(fp)
   57418:	10800044 	addi	r2,r2,1
   5741c:	e0bffb15 	stw	r2,-20(fp)
   57420:	e0bffb17 	ldw	r2,-20(fp)
   57424:	10800810 	cmplti	r2,r2,32
   57428:	103fe01e 	bne	r2,zero,573ac <__alt_data_end+0xfffe666c>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
   5742c:	008001b4 	movhi	r2,6
   57430:	10ad3904 	addi	r2,r2,-19228
   57434:	10800017 	ldw	r2,0(r2)
   57438:	1009883a 	mov	r4,r2
   5743c:	00535180 	call	53518 <OSSemPost>

  return rc;
   57440:	e0bffc17 	ldw	r2,-16(fp)
}
   57444:	e037883a 	mov	sp,fp
   57448:	dfc00117 	ldw	ra,4(sp)
   5744c:	df000017 	ldw	fp,0(sp)
   57450:	dec00204 	addi	sp,sp,8
   57454:	f800283a 	ret

00057458 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   57458:	defffb04 	addi	sp,sp,-20
   5745c:	df000415 	stw	fp,16(sp)
   57460:	df000404 	addi	fp,sp,16
   57464:	e13ffe15 	stw	r4,-8(fp)
   57468:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   5746c:	e0bfff17 	ldw	r2,-4(fp)
   57470:	10880070 	cmpltui	r2,r2,8193
   57474:	1000021e 	bne	r2,zero,57480 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   57478:	00880004 	movi	r2,8192
   5747c:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   57480:	e0fffe17 	ldw	r3,-8(fp)
   57484:	e0bfff17 	ldw	r2,-4(fp)
   57488:	1885883a 	add	r2,r3,r2
   5748c:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   57490:	e0bffe17 	ldw	r2,-8(fp)
   57494:	e0bffc15 	stw	r2,-16(fp)
   57498:	00000506 	br	574b0 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   5749c:	e0bffc17 	ldw	r2,-16(fp)
   574a0:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   574a4:	e0bffc17 	ldw	r2,-16(fp)
   574a8:	10800804 	addi	r2,r2,32
   574ac:	e0bffc15 	stw	r2,-16(fp)
   574b0:	e0fffc17 	ldw	r3,-16(fp)
   574b4:	e0bffd17 	ldw	r2,-12(fp)
   574b8:	18bff836 	bltu	r3,r2,5749c <__alt_data_end+0xfffe675c>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   574bc:	e0bffe17 	ldw	r2,-8(fp)
   574c0:	108007cc 	andi	r2,r2,31
   574c4:	10000226 	beq	r2,zero,574d0 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   574c8:	e0bffc17 	ldw	r2,-16(fp)
   574cc:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   574d0:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   574d4:	e037883a 	mov	sp,fp
   574d8:	df000017 	ldw	fp,0(sp)
   574dc:	dec00104 	addi	sp,sp,4
   574e0:	f800283a 	ret

000574e4 <atexit>:
   574e4:	200b883a 	mov	r5,r4
   574e8:	000d883a 	mov	r6,zero
   574ec:	0009883a 	mov	r4,zero
   574f0:	000f883a 	mov	r7,zero
   574f4:	00575ac1 	jmpi	575ac <__register_exitproc>

000574f8 <exit>:
   574f8:	defffe04 	addi	sp,sp,-8
   574fc:	000b883a 	mov	r5,zero
   57500:	dc000015 	stw	r16,0(sp)
   57504:	dfc00115 	stw	ra,4(sp)
   57508:	2021883a 	mov	r16,r4
   5750c:	00576c00 	call	576c0 <__call_exitprocs>
   57510:	008001b4 	movhi	r2,6
   57514:	10a62004 	addi	r2,r2,-26496
   57518:	11000017 	ldw	r4,0(r2)
   5751c:	20800f17 	ldw	r2,60(r4)
   57520:	10000126 	beq	r2,zero,57528 <exit+0x30>
   57524:	103ee83a 	callr	r2
   57528:	8009883a 	mov	r4,r16
   5752c:	00578540 	call	57854 <_exit>

00057530 <memcmp>:
   57530:	01c000c4 	movi	r7,3
   57534:	3980192e 	bgeu	r7,r6,5759c <memcmp+0x6c>
   57538:	2144b03a 	or	r2,r4,r5
   5753c:	11c4703a 	and	r2,r2,r7
   57540:	10000f26 	beq	r2,zero,57580 <memcmp+0x50>
   57544:	20800003 	ldbu	r2,0(r4)
   57548:	28c00003 	ldbu	r3,0(r5)
   5754c:	10c0151e 	bne	r2,r3,575a4 <memcmp+0x74>
   57550:	31bfff84 	addi	r6,r6,-2
   57554:	01ffffc4 	movi	r7,-1
   57558:	00000406 	br	5756c <memcmp+0x3c>
   5755c:	20800003 	ldbu	r2,0(r4)
   57560:	28c00003 	ldbu	r3,0(r5)
   57564:	31bfffc4 	addi	r6,r6,-1
   57568:	10c00e1e 	bne	r2,r3,575a4 <memcmp+0x74>
   5756c:	21000044 	addi	r4,r4,1
   57570:	29400044 	addi	r5,r5,1
   57574:	31fff91e 	bne	r6,r7,5755c <__alt_data_end+0xfffe681c>
   57578:	0005883a 	mov	r2,zero
   5757c:	f800283a 	ret
   57580:	20c00017 	ldw	r3,0(r4)
   57584:	28800017 	ldw	r2,0(r5)
   57588:	1880041e 	bne	r3,r2,5759c <memcmp+0x6c>
   5758c:	31bfff04 	addi	r6,r6,-4
   57590:	21000104 	addi	r4,r4,4
   57594:	29400104 	addi	r5,r5,4
   57598:	39bff936 	bltu	r7,r6,57580 <__alt_data_end+0xfffe6840>
   5759c:	303fe91e 	bne	r6,zero,57544 <__alt_data_end+0xfffe6804>
   575a0:	003ff506 	br	57578 <__alt_data_end+0xfffe6838>
   575a4:	10c5c83a 	sub	r2,r2,r3
   575a8:	f800283a 	ret

000575ac <__register_exitproc>:
   575ac:	008001b4 	movhi	r2,6
   575b0:	defffa04 	addi	sp,sp,-24
   575b4:	10a62004 	addi	r2,r2,-26496
   575b8:	dc000315 	stw	r16,12(sp)
   575bc:	14000017 	ldw	r16,0(r2)
   575c0:	dc400415 	stw	r17,16(sp)
   575c4:	dfc00515 	stw	ra,20(sp)
   575c8:	80805217 	ldw	r2,328(r16)
   575cc:	2023883a 	mov	r17,r4
   575d0:	10003626 	beq	r2,zero,576ac <__register_exitproc+0x100>
   575d4:	10c00117 	ldw	r3,4(r2)
   575d8:	010007c4 	movi	r4,31
   575dc:	20c00e16 	blt	r4,r3,57618 <__register_exitproc+0x6c>
   575e0:	1a400044 	addi	r9,r3,1
   575e4:	8800211e 	bne	r17,zero,5766c <__register_exitproc+0xc0>
   575e8:	18c00084 	addi	r3,r3,2
   575ec:	18c7883a 	add	r3,r3,r3
   575f0:	18c7883a 	add	r3,r3,r3
   575f4:	12400115 	stw	r9,4(r2)
   575f8:	10c7883a 	add	r3,r2,r3
   575fc:	19400015 	stw	r5,0(r3)
   57600:	0005883a 	mov	r2,zero
   57604:	dfc00517 	ldw	ra,20(sp)
   57608:	dc400417 	ldw	r17,16(sp)
   5760c:	dc000317 	ldw	r16,12(sp)
   57610:	dec00604 	addi	sp,sp,24
   57614:	f800283a 	ret
   57618:	00800034 	movhi	r2,0
   5761c:	10800004 	addi	r2,r2,0
   57620:	10002526 	beq	r2,zero,576b8 <__register_exitproc+0x10c>
   57624:	01006404 	movi	r4,400
   57628:	d9400015 	stw	r5,0(sp)
   5762c:	d9800115 	stw	r6,4(sp)
   57630:	d9c00215 	stw	r7,8(sp)
   57634:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
   57638:	d9400017 	ldw	r5,0(sp)
   5763c:	d9800117 	ldw	r6,4(sp)
   57640:	d9c00217 	ldw	r7,8(sp)
   57644:	10001c26 	beq	r2,zero,576b8 <__register_exitproc+0x10c>
   57648:	80c05217 	ldw	r3,328(r16)
   5764c:	10000115 	stw	zero,4(r2)
   57650:	02400044 	movi	r9,1
   57654:	10c00015 	stw	r3,0(r2)
   57658:	80805215 	stw	r2,328(r16)
   5765c:	10006215 	stw	zero,392(r2)
   57660:	10006315 	stw	zero,396(r2)
   57664:	0007883a 	mov	r3,zero
   57668:	883fdf26 	beq	r17,zero,575e8 <__alt_data_end+0xfffe68a8>
   5766c:	18d1883a 	add	r8,r3,r3
   57670:	4211883a 	add	r8,r8,r8
   57674:	1211883a 	add	r8,r2,r8
   57678:	41802215 	stw	r6,136(r8)
   5767c:	01000044 	movi	r4,1
   57680:	11806217 	ldw	r6,392(r2)
   57684:	20c8983a 	sll	r4,r4,r3
   57688:	310cb03a 	or	r6,r6,r4
   5768c:	11806215 	stw	r6,392(r2)
   57690:	41c04215 	stw	r7,264(r8)
   57694:	01800084 	movi	r6,2
   57698:	89bfd31e 	bne	r17,r6,575e8 <__alt_data_end+0xfffe68a8>
   5769c:	11806317 	ldw	r6,396(r2)
   576a0:	3108b03a 	or	r4,r6,r4
   576a4:	11006315 	stw	r4,396(r2)
   576a8:	003fcf06 	br	575e8 <__alt_data_end+0xfffe68a8>
   576ac:	80805304 	addi	r2,r16,332
   576b0:	80805215 	stw	r2,328(r16)
   576b4:	003fc706 	br	575d4 <__alt_data_end+0xfffe6894>
   576b8:	00bfffc4 	movi	r2,-1
   576bc:	003fd106 	br	57604 <__alt_data_end+0xfffe68c4>

000576c0 <__call_exitprocs>:
   576c0:	008001b4 	movhi	r2,6
   576c4:	10a62004 	addi	r2,r2,-26496
   576c8:	10800017 	ldw	r2,0(r2)
   576cc:	defff404 	addi	sp,sp,-48
   576d0:	dd800815 	stw	r22,32(sp)
   576d4:	d8800015 	stw	r2,0(sp)
   576d8:	10805204 	addi	r2,r2,328
   576dc:	dd000615 	stw	r20,24(sp)
   576e0:	dc800415 	stw	r18,16(sp)
   576e4:	dfc00b15 	stw	ra,44(sp)
   576e8:	df000a15 	stw	fp,40(sp)
   576ec:	ddc00915 	stw	r23,36(sp)
   576f0:	dd400715 	stw	r21,28(sp)
   576f4:	dcc00515 	stw	r19,20(sp)
   576f8:	dc400315 	stw	r17,12(sp)
   576fc:	dc000215 	stw	r16,8(sp)
   57700:	2025883a 	mov	r18,r4
   57704:	2829883a 	mov	r20,r5
   57708:	d8800115 	stw	r2,4(sp)
   5770c:	05bfffc4 	movi	r22,-1
   57710:	d8800017 	ldw	r2,0(sp)
   57714:	14c05217 	ldw	r19,328(r2)
   57718:	98001d26 	beq	r19,zero,57790 <__call_exitprocs+0xd0>
   5771c:	dd400117 	ldw	r21,4(sp)
   57720:	98800117 	ldw	r2,4(r19)
   57724:	173fffc4 	addi	fp,r2,-1
   57728:	e0000d16 	blt	fp,zero,57760 <__call_exitprocs+0xa0>
   5772c:	14000044 	addi	r16,r2,1
   57730:	8421883a 	add	r16,r16,r16
   57734:	8421883a 	add	r16,r16,r16
   57738:	84402004 	addi	r17,r16,128
   5773c:	9c63883a 	add	r17,r19,r17
   57740:	9c21883a 	add	r16,r19,r16
   57744:	a0001e26 	beq	r20,zero,577c0 <__call_exitprocs+0x100>
   57748:	80804017 	ldw	r2,256(r16)
   5774c:	15001c26 	beq	r2,r20,577c0 <__call_exitprocs+0x100>
   57750:	e73fffc4 	addi	fp,fp,-1
   57754:	843fff04 	addi	r16,r16,-4
   57758:	8c7fff04 	addi	r17,r17,-4
   5775c:	e5bff91e 	bne	fp,r22,57744 <__alt_data_end+0xfffe6a04>
   57760:	00800034 	movhi	r2,0
   57764:	10800004 	addi	r2,r2,0
   57768:	10000926 	beq	r2,zero,57790 <__call_exitprocs+0xd0>
   5776c:	98800117 	ldw	r2,4(r19)
   57770:	1000311e 	bne	r2,zero,57838 <__call_exitprocs+0x178>
   57774:	98800017 	ldw	r2,0(r19)
   57778:	10003426 	beq	r2,zero,5784c <__call_exitprocs+0x18c>
   5777c:	9809883a 	mov	r4,r19
   57780:	a8800015 	stw	r2,0(r21)
   57784:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
   57788:	acc00017 	ldw	r19,0(r21)
   5778c:	983fe41e 	bne	r19,zero,57720 <__alt_data_end+0xfffe69e0>
   57790:	dfc00b17 	ldw	ra,44(sp)
   57794:	df000a17 	ldw	fp,40(sp)
   57798:	ddc00917 	ldw	r23,36(sp)
   5779c:	dd800817 	ldw	r22,32(sp)
   577a0:	dd400717 	ldw	r21,28(sp)
   577a4:	dd000617 	ldw	r20,24(sp)
   577a8:	dcc00517 	ldw	r19,20(sp)
   577ac:	dc800417 	ldw	r18,16(sp)
   577b0:	dc400317 	ldw	r17,12(sp)
   577b4:	dc000217 	ldw	r16,8(sp)
   577b8:	dec00c04 	addi	sp,sp,48
   577bc:	f800283a 	ret
   577c0:	98800117 	ldw	r2,4(r19)
   577c4:	80c00017 	ldw	r3,0(r16)
   577c8:	10bfffc4 	addi	r2,r2,-1
   577cc:	17001526 	beq	r2,fp,57824 <__call_exitprocs+0x164>
   577d0:	80000015 	stw	zero,0(r16)
   577d4:	183fde26 	beq	r3,zero,57750 <__alt_data_end+0xfffe6a10>
   577d8:	00800044 	movi	r2,1
   577dc:	1708983a 	sll	r4,r2,fp
   577e0:	98806217 	ldw	r2,392(r19)
   577e4:	9dc00117 	ldw	r23,4(r19)
   577e8:	2084703a 	and	r2,r4,r2
   577ec:	1000061e 	bne	r2,zero,57808 <__call_exitprocs+0x148>
   577f0:	183ee83a 	callr	r3
   577f4:	98800117 	ldw	r2,4(r19)
   577f8:	15ffc51e 	bne	r2,r23,57710 <__alt_data_end+0xfffe69d0>
   577fc:	a8800017 	ldw	r2,0(r21)
   57800:	14ffd326 	beq	r2,r19,57750 <__alt_data_end+0xfffe6a10>
   57804:	003fc206 	br	57710 <__alt_data_end+0xfffe69d0>
   57808:	98806317 	ldw	r2,396(r19)
   5780c:	2084703a 	and	r2,r4,r2
   57810:	1000061e 	bne	r2,zero,5782c <__call_exitprocs+0x16c>
   57814:	89400017 	ldw	r5,0(r17)
   57818:	9009883a 	mov	r4,r18
   5781c:	183ee83a 	callr	r3
   57820:	003ff406 	br	577f4 <__alt_data_end+0xfffe6ab4>
   57824:	9f000115 	stw	fp,4(r19)
   57828:	003fea06 	br	577d4 <__alt_data_end+0xfffe6a94>
   5782c:	89000017 	ldw	r4,0(r17)
   57830:	183ee83a 	callr	r3
   57834:	003fef06 	br	577f4 <__alt_data_end+0xfffe6ab4>
   57838:	98800017 	ldw	r2,0(r19)
   5783c:	982b883a 	mov	r21,r19
   57840:	1027883a 	mov	r19,r2
   57844:	983fb61e 	bne	r19,zero,57720 <__alt_data_end+0xfffe69e0>
   57848:	003fd106 	br	57790 <__alt_data_end+0xfffe6a50>
   5784c:	0005883a 	mov	r2,zero
   57850:	003ffa06 	br	5783c <__alt_data_end+0xfffe6afc>

00057854 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   57854:	defffd04 	addi	sp,sp,-12
   57858:	df000215 	stw	fp,8(sp)
   5785c:	df000204 	addi	fp,sp,8
   57860:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   57864:	008001b4 	movhi	r2,6
   57868:	10ad4144 	addi	r2,r2,-19195
   5786c:	10000005 	stb	zero,0(r2)
   57870:	e0bfff17 	ldw	r2,-4(fp)
   57874:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   57878:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   5787c:	10000226 	beq	r2,zero,57888 <_exit+0x34>
    ALT_SIM_FAIL();
   57880:	002af070 	cmpltui	zero,zero,43969
   57884:	00000106 	br	5788c <_exit+0x38>
  } else {
    ALT_SIM_PASS();
   57888:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   5788c:	003fff06 	br	5788c <__alt_data_end+0xfffe6b4c>
